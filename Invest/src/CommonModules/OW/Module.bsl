//Функция ЭтоВнутренняяФаза(Фаза) Экспорт
//	//+ Пилюгин В.Е. 21.03.2018
//	ЭтоВнутренний = Ложь;
//	
//	Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
//		Если Фаза.ТипПроекта = Справочники.OW_ТипыПроектов.InternalImplementation ИЛИ
//			Фаза.ТипПроекта = Справочники.OW_ТипыПроектов.НайтиПоНаименованию("Department Management") Тогда
//			ЭтоВнутренний = Истина;	
//		КонецЕсли;
//	КонецЕсли; 
//	
//	Возврат ЭтоВнутренний;
//	//- Пилюгин В.Е. 21.03.2018	
//КонецФункции
//
//Функция ПолучитьСсылкуПользователя() Экспорт
//	Возврат ПараметрыСеанса.ТекущийПользователь.Ссылка;
//КонецФункции
//
//Функция ВренутьРазделУчетаСообщенияПоКоду(ТекКод) Экспорт
//	Возврат Справочники.OW_РазделыУчета.НайтиПоКоду(ТекКод);
//КонецФункции
//
//Процедура OW_ПроверкаАкуальности() Экспорт
//    //***OW @20201029031353  Start [БПВ] ONEC-5982
//    Если не OW_ФоновыеЗадания.ПроверкаЧтоМожноЗапуститьРегЗадание() Тогда
//        Возврат;
//    КонецЕсли;
//    //***OW @20201029031356  End [БПВ] ONEC-5982 
//    
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("OW_ПроверкаАкуальности");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	OW_АктуальностьКоммерческихПредложений.Документ,
//	|	OW_АктуальностьКоммерческихПредложений.Вероятность,
//	|	OW_АктуальностьКоммерческихПредложений.ДатаПроверки,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаОдинДень,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, МЕСЯЦ, 1), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаОдинМесяц,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1), МЕСЯЦ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, МЕСЯЦ, 2), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаДваМесяца,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1), МЕСЯЦ, 2)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, МЕСЯЦ, 3), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаТриМесяца,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата > ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия, ДЕНЬ, 1), МЕСЯЦ, 3)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоПолностью,
//	|	OW_АктуальностьКоммерческихПредложений.СтатусПроекта,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаОдинМесяц КАК ФлагПросроченоНаОдинМесяц,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаДваМесяца КАК ФлагПросроченоНаДваМесяца,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаТриМесяца КАК ФлагПросроченоНаТриМесяца,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоПолностью КАК ФлагПросроченоПолностью,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ВероятностьПервоначальная КАК ВероятностьПервоначальная,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.Статус КАК Статус,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
//	|ИЗ
//	|	РегистрСведений.OW_АктуальностьКоммерческихПредложений КАК OW_АктуальностьКоммерческихПредложений
//	|ГДЕ
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия < &ТекДата
//	|	И (OW_АктуальностьКоммерческихПредложений.Документ.Статус В (&СтатусДействует, &СтатусПриостановлено,&СтатусСтареющее))
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	|И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//	|		ИЛИ (OW_АктуальностьКоммерческихПредложений.Документ.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|			ИЛИ OW_АктуальностьКоммерческихПредложений.Документ.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА))
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	OW_АктуальностьКоммерческихПредложений.Документ,
//	|	OW_АктуальностьКоммерческихПредложений.ДатаПроверки,
//	|	OW_АктуальностьКоммерческихПредложений.Вероятность,
//	|	OW_АктуальностьКоммерческихПредложений.СтатусПроекта,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ДатаОкончанияДействия,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоПолностью,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаДваМесяца,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаТриМесяца,
//	|	OW_АктуальностьКоммерческихПредложений.ПросроченоНаОдинМесяц,
//	|	OW_АктуальностьКоммерческихПредложений.Документ.ВероятностьПервоначальная";
//	
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
//	Запрос.УстановитьПараметр("СтатусПриостановлено", Перечисления.СтатусыКоммерческихПредложенийКлиентам.Заморожено);
//	Запрос.УстановитьПараметр("СтатусСтареющее", Перечисления.СтатусыКоммерческихПредложенийКлиентам.Стареющее);
//	//Запрос.УстановитьПараметр("Документ", Документы.КоммерческоеПредложениеКлиенту.НайтиПоРеквизиту("НаименованиеКоммерческогоПредложения", "434356"));
//	
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		//Если Выборка.Вероятность=0 Тогда
//		//	Продолжить;
//		//КонецЕсли;
//		
//		мСрокДействия = Выборка.Документ.ДатаОкончанияДействия;
//		мДатаПроверки = ТекущаяДата();
//		
//		//мВероятность  = Выборка.Вероятность/3;
//		
//		Если Выборка.ПросроченоПолностью И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия)  Тогда
//			Если Выборка.ФлагПросроченоПолностью=Ложь Тогда
//				мВероятность  =0;
//				ЗаписатьИзмененияВДокументеКП(Выборка.Документ,0,мДатаПроверки, Ложь, Ложь, Ложь, Истина);
//			КонецЕсли;
//		ИначеЕсли Выборка.ПросроченоНаТриМесяца И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на три месяца  
//			Если Выборка.ФлагПросроченоНаТриМесяца=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*1/4;
//				ЗаписатьИзмененияВДокументеКП(Выборка.Документ,мВероятность,мДатаПроверки, Ложь, Ложь, Истина, Ложь);
//			КонецЕсли;
//		ИначеЕсли  Выборка.ПросроченоНаДваМесяца И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на два месяц
//			Если Выборка.ФлагПросроченоНаДваМесяца=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*2/4;
//				ЗаписатьИзмененияВДокументеКП(Выборка.Документ,мВероятность,мДатаПроверки, Ложь, Истина, Ложь, Ложь);
//			КонецЕсли;
//		ИначеЕсли  Выборка.ПросроченоНаОдинМесяц И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на один месяц
//			Если Выборка.ФлагПросроченоНаОдинМесяц=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*3/4;
//				ЗаписатьИзмененияВДокументеКП(Выборка.Документ,мВероятность,мДатаПроверки, Истина, Ложь, Ложь, Ложь);			
//			КонецЕсли;					
//		КонецЕсли; 		
//		
//	КонецЦикла;
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ЗаписатьИзмененияВДокументеКП(Документ,Вероятность,ДатаПроверки, ПросроченоНаОдинМесяц,ПросроченоНаДваМесяца,ПросроченоНаТриМесяца, ПросроченоПолностью)
//	
//	Попытка
//		
//		мДокОбъект = Документ.ПолучитьОбъект();
//		мДокОбъект.ВероятностьПодписанияДоговора = Вероятность;
//		
//		Если ПросроченоПолностью=Истина Тогда
//			мДокОбъект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Истекло;
//			мДокОбъект.ВероятностьПодписанияДоговора  = 0;
//		Иначе
//			мДокОбъект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Стареющее;
//		КонецЕсли;
//		
//		
//		//Если Вероятность=0 Тогда
//		//	мДокОбъект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено;
//		//Иначе
//		//	мДокОбъект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Стареющее;
//		//КонецЕсли;
//		мДокОбъект.ДатаИзмененияСтатуса  = ДатаПроверки;
//		мДокОбъект.ПричинаИзмененияСтатуса=мДокОбъект.ПричинаИзмененияСтатуса+Символы.ПС+"Результат работы механизма старения от "+Формат(ДатаПроверки, "ДЛФ=Д");
//		
//		//мДокОбъект.ОбменДанными.Загрузка = Истина;
//		//мДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
//		мДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
//		//мДокОбъект.ОбменДанными.Загрузка = Ложь;
//		мДокумент = мДокОбъект.Ссылка;
//		
//		//Обновим данные в РС "OW_АктуальностьКоммерческихПредложений"
//		ОбновитьАктуальностьДанныхКП(мДокумент,ДатаПроверки, ПросроченоНаОдинМесяц, ПросроченоНаДваМесяца, ПросроченоНаТриМесяца, ПросроченоПолностью);
//		
//		//записать изменение статуса КП
//		Регистр = РегистрыСведений.ИзменениеСтатусаКоммерческихПредложений.СоздатьНаборЗаписей();
//		Движение=Регистр.Добавить();
//		Движение.Период=мДокумент.ДатаИзмененияСтатуса;
//		Движение.Партнер =мДокумент.Партнер;
//		Движение.КоммерческоеПредложение=мДокумент;
//		Движение.Статус=мДокумент.Статус;
//		Движение.ПричинаИзмененияСтатуса="Результат работы механизма старения от "+Формат(ДатаПроверки, "ДЛФ=Д");
//		Движение.Вероятность=мДокумент.ВероятностьПодписанияДоговора;
//		Регистр.Записать(Ложь);
//		
//		
//	Исключение
//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ЗаписьВероятности", 
//		УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.КоммерческоеПредложениеКлиенту, ,
//		"Не удалось изменить Вероятность в документе: " + Документ); 
//	КонецПопытки;
//	
//КонецПроцедуры
//
//Процедура ОбновитьАктуальностьДанныхКП(Документ,ДатаПроверки, ПросроченоНаОдинМесяц, ПросроченоНаДваМесяца, ПросроченоНаТриМесяца, ПросроченоПолностью)
//	
//	НаборЗаписей = РегистрыСведений.OW_АктуальностьКоммерческихПредложений.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Документ.Установить(Документ);
//	
//	Запись = НаборЗаписей.Добавить();
//	
//	Запись.Документ      = Документ;
//	Запись.ДатаПроверки  = ДатаПроверки;
//	
//	Запись.Вероятность   = Документ.ВероятностьПодписанияДоговора;
//	Запись.СтатусПроекта = Документ.Статус;
//	Запись.ПричинаИзмененияСтатуса="Результат работы механизма старения от "+Формат(ДатаПроверки, "ДЛФ=Д");
//	
//	Запись.ПросроченоПолностью=ПросроченоПолностью;
//	Запись.ПросроченоНаОдинМесяц=ПросроченоНаОдинМесяц; 
//	Запись.ПросроченоНаДваМесяца=ПросроченоНаДваМесяца; 
//	Запись.ПросроченоНаТриМесяца=ПросроченоНаТриМесяца;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры
//
//Функция НапомнитьОНевыгруженныхОценочныхПроектах()  Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстСообщения ="";
//	ТекущийПользователь		= Пользователи.АвторизованныйПользователь();
//	Запрос = Новый Запрос;
//	//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//    |   НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект,
//    |   НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Клиент,
//    |   НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Выгружен
//    |ИЗ
//    |   РегистрСведений.НапоминаниеПроВыгрузкуВCRMОценочныхПроектов КАК НапоминаниеПроВыгрузкуВCRMОценочныхПроектов
//    |ГДЕ
//    |   НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Выгружен = ЛОЖЬ
//    |   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект.ОтправленВ_JIRA = ЛОЖЬ
//	|   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Клиент.ВидИнстансJIRA = &ВидИнстансJIRA
//    |   И (НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Клиент.Куратор = &ТекущийПользователь
//    |           ИЛИ НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Клиент.ОсновнойМенеджер = &ТекущийПользователь)
//    //|   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект.ВыгруженВCRM = ЛОЖЬ
//    |   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект.ГотовКВыгрузке = ЛОЖЬ
//    |   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект.ПометкаУдаления = ЛОЖЬ
//    |   И НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.ОценочныйПроект.СтатусЭтапа = &СтатусЭтапа
//    |   И НЕ НапоминаниеПроВыгрузкуВCRMОценочныхПроектов.Клиент.ТестовыйКлиент";
//	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
//	Запрос.УстановитьПараметр("СтатусЭтапа", Перечисления.СтатусыЭтапов.Active);
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	Результат = Запрос.Выполнить().Выбрать();
//	Если Результат.Количество() > 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Найдены не выгруженные в JIRA оценочные проекты:';en = 'There are Estimation projects not uploaded to JIRA:'") + Символы.ПС;
//		Пока Результат.Следующий() Цикл
//			ТекстСообщения = ТекстСообщения + Символы.ПС +"""" +Результат.ОценочныйПроект +""""+ НСтр("ru = ' по клиенту ';en = ' by the Client '")+Результат.Клиент;
//		КонецЦикла;
//		
//	КонецЕсли;
//	Возврат ТекстСообщения;
//	УстановитьПривилегированныйРежим(Ложь);
//КонецФункции
//
//Функция НапомнитьОНевыгруженныхПроектахВнедрения()  Экспорт
//	//++OW Копачев А.С. 12.07.2022 ONEC-7644 
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ТекстСообщения ="";
//	ТекущийПользователь		= Пользователи.АвторизованныйПользователь();
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//    |   ЗадачиПроектов.Ссылка КАК Ссылка,
//    |   ЗадачиПроектов.Партнер
//    |ИЗ
//    |   Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//    |ГДЕ
//    |   НЕ ЗадачиПроектов.ПометкаУдаления
//	|   И ЗадачиПроектов.ВыгруженВJIRA = ЛОЖЬ
//	|   И ЗадачиПроектов.НеНадоВыгружатьJIRA = ЛОЖЬ
//    |   И ЗадачиПроектов.ГотовКВыгрузке = ЛОЖЬ
//    |   И ЗадачиПроектов.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|   И ЗадачиПроектов.Партнер.ТестовыйКлиент = ЛОЖЬ
//    |   И (ЗадачиПроектов.Партнер.ОсновнойМенеджер = &ТекущийПользователь
//    |           ИЛИ ЗадачиПроектов.Партнер.Куратор = &ТекущийПользователь)
//    |   И ЗадачиПроектов.СтатусЭтапа = &СтатусЭтапа";
//	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);	
//	Запрос.УстановитьПараметр("СтатусЭтапа", Перечисления.СтатусыЭтапов.Active);
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	
//	Результат = Запрос.Выполнить().Выбрать();
//	Если Результат.Количество() > 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Найдены не помеченные к выгрузке в JIRA проекты внедрения:';en = 'There are Implementation projects not marked to be uploaded to JIRA:'") + Символы.ПС;
//		Пока Результат.Следующий() Цикл
//			ТекстСообщения = ТекстСообщения + Символы.ПС +"""" +Результат.Ссылка +""""+ НСтр("ru = ' по клиенту ';en = ' by the Client '")+Результат.Партнер;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	Возврат ТекстСообщения;
//	//--OW Копачев А.С. 12.07.2022 ONEC-7644		
//
//КонецФункции
//
//Функция НапомнитьОДняхРожденияхКлиентовСервер()  Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ТекстСообщения ="";
//	ТекущийПользователь		= Пользователи.АвторизованныйПользователь();
//	Запрос = Новый Запрос;
//	//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КонтактныеЛицаПартнеров.Наименование КАК КонтактноеЛицо,
//	|	КонтактныеЛицаПартнеров.Владелец КАК Клиент,
//	|	КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица КАК ДатаРождения
//	|ИЗ
//	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентамСписокКлиентов
//	|		ПО КонтактныеЛицаПартнеров.Владелец = ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент
//	|ГДЕ
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Ссылка.Владелец = &ТекущийПользователь
//	|	И КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица <> ДАТАВРЕМЯ(1, 1, 1)
//	|	И ВЫБОР
//	|			КОГДА МЕСЯЦ(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица) = 12
//	|					И МЕСЯЦ(&ВремяФормированияЗадач) = 1
//	|				ТОГДА ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица) - 1)
//	|			КОГДА МЕСЯЦ(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица) = 1
//	|					И МЕСЯЦ(&ВремяФормированияЗадач) = 12
//	|				ТОГДА ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица) + 1)
//	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица, ГОД, ГОД(&ВремяФормированияЗадач) - ГОД(КонтактныеЛицаПартнеров.ДатаРожденияКонтактногоЛица))
//	|		КОНЕЦ МЕЖДУ ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, 0) И ДОБАВИТЬКДАТЕ(&ВремяФормированияЗадач, ДЕНЬ, 10)";
//	
//	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
//	Запрос.УстановитьПараметр("ВремяФормированияЗадач", ТекущаяДата());
//	Результат = Запрос.Выполнить().Выбрать();
//	Если Результат.Количество() > 0 Тогда
//		ТекстСообщения = НСтр("ru = 'Найдены контактные лица клиентов, у которых день рождения наступит в течение 10 дней:';en = 'There are Customers contact persons whose birthday will come within 10 days:'") + Символы.ПС;
//		Пока Результат.Следующий() Цикл
//			ТекстСообщения = ТекстСообщения + Символы.ПС +"""" +Результат.КонтактноеЛицо +НСтр("ru = ' - день рождения ';en = ' - bDay - '")+Формат(Результат.ДатаРождения, "ДЛФ=Д")+""""+ НСтр("ru = ', по клиенту ';en = ', by client '")+Результат.Клиент + " (" + Результат.Клиент.НаименованиеНаАнглийском + ")";
//		КонецЦикла;
//		
//	КонецЕсли;
//	Возврат ТекстСообщения;
//	УстановитьПривилегированныйРежим(Ложь);
//КонецФункции
//
//Функция ОпределитьТипПроекта(ТипПроектаБуквенный)
//	ТипПроекта = Справочники.OW_ТипыПроектов.ПустаяСсылка();
//	ТипПроекта = Справочники.OW_ТипыПроектов.НайтиПоРеквизиту("Класс", ТипПроектаБуквенный);
//	
//	Если ТипПроекта = Справочники.OW_ТипыПроектов.ПустаяСсылка() Тогда
//		Если  ТипПроектаБуквенный = NULL Тогда
//			ТипПроекта = Справочники.OW_ТипыПроектов.Implementation;
//		Иначе
//			ТипПроекта = Справочники.OW_ТипыПроектов.Other;
//		КонецЕсли;
//	КонецЕсли;		
//	Возврат ТипПроекта;		
//КонецФункции
//
//Функция ОпределитьТипПроектаCRM(ТипПроектаБуквенный)
//	ТипПроектаCRM=Перечисления.ТипыПроектовCRM.ПустаяСсылка();
//	Если ТипПроектаБуквенный="AU" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Implementation_AU; //
//	ИначеЕсли ТипПроектаБуквенный="AC" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Academy; //
//	ИначеЕсли ТипПроектаБуквенный="CE" Тогда	
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Coaching; //
//	ИначеЕсли ТипПроектаБуквенный="ST" Тогда	
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Studing; //
//	ИначеЕсли ТипПроектаБуквенный="MG" Тогда	
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Migration; //
//	ИначеЕсли ТипПроектаБуквенный="OS" Тогда	
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Onsite_Support; //	
//	ИначеЕсли ТипПроектаБуквенный="OWS" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.InternalWithBudget;  //
//	ИначеЕсли ТипПроектаБуквенный="OLD" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Old;  //	
//	ИначеЕсли ТипПроектаБуквенный="INT" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal;  //
//	ИначеЕсли ТипПроектаБуквенный="SC" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.SupportConsulting;   //
//	ИначеЕсли ТипПроектаБуквенный="TR" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Training;   //
//	ИначеЕсли ТипПроектаБуквенный="CV" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Certification;
//	ИначеЕсли ТипПроектаБуквенный="IN" Тогда                             
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.InternalProject;  //
//	ИначеЕсли ТипПроектаБуквенный="DM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Demonstration;  //
//	ИначеЕсли ТипПроектаБуквенный="HW" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.HardwareConfiguration;  //
//	ИначеЕсли ТипПроектаБуквенный="BA" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.BusinessAnalysis;  //
//	ИначеЕсли ТипПроектаБуквенный="TRM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.TRMActivity;  //
//	ИначеЕсли ТипПроектаБуквенный="RF" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.TenderDocumentationPeparation; //
//	ИначеЕсли ТипПроектаБуквенный="T&M" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Time_Material;
//	ИначеЕсли ТипПроектаБуквенный="TM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Time_Material;	
//	ИначеЕсли ТипПроектаБуквенный="CDT" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.CDT;
//	ИначеЕсли ТипПроектаБуквенный="ADM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Administration;
//	ИначеЕсли ТипПроектаБуквенный="GRM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.GRM_activity;
//	ИначеЕсли ТипПроектаБуквенный="SUP-SM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.SupportServiceManagerActivity;
//	ИначеЕсли ТипПроектаБуквенный="SM" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.SupportServiceManagerActivity;
//	ИначеЕсли ТипПроектаБуквенный="PRS" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.PreSale;		
//	ИначеЕсли ТипПроектаБуквенный="IN-BA" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.InternalBusinessAnalysis;	
//	ИначеЕсли ТипПроектаБуквенный="INCDT-IMPL" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal_CDT_Implementation;
//	ИначеЕсли ТипПроектаБуквенный="INCDT-SUPP" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal_CDT_Support;	
//	ИначеЕсли ТипПроектаБуквенный="IN-IMPL" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal_Implementation;
//	ИначеЕсли ТипПроектаБуквенный="IN-SUPP" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal_Support;		
//	ИначеЕсли ТипПроектаБуквенный="IMPL" Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Implementation;	
//	ИначеЕсли ТипПроектаБуквенный=NULL Тогда
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Implementation;
//	Иначе
//		ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Other;
//	КонецЕсли;
//	Возврат ТипПроектаCRM;		
//КонецФункции
//
//Функция ОпределитьТипПроекта_OLD(ТипПроектаБуквенный)
//	ТипПроекта=Справочники.OW_ТипыПроектов.ПустаяСсылка();
//	
//	Если ТипПроектаБуквенный="AU" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.ImplementationNotCharged; //
//	ИначеЕсли ТипПроектаБуквенный="AC" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Academy; //
//	ИначеЕсли ТипПроектаБуквенный="CE" Тогда	
//		ТипПроекта=Справочники.OW_ТипыПроектов.Coaching; //
//	ИначеЕсли ТипПроектаБуквенный="ST" Тогда	
//		ТипПроекта=Справочники.OW_ТипыПроектов.Study; //
//	ИначеЕсли ТипПроектаБуквенный="MG" Тогда	
//		ТипПроекта=Справочники.OW_ТипыПроектов.Upgrade; //
//	ИначеЕсли ТипПроектаБуквенный="OS" Тогда	
//		ТипПроекта=Справочники.OW_ТипыПроектов.Onsite_Support; //	
//	ИначеЕсли ТипПроектаБуквенный="OWS" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.ProductDevelopment;  //
//	ИначеЕсли ТипПроектаБуквенный="INT" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Internal;  //
//	ИначеЕсли ТипПроектаБуквенный="SC" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Support;   //
//	ИначеЕсли ТипПроектаБуквенный="TR" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Training;   //
//	ИначеЕсли ТипПроектаБуквенный="CV" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Certification;
//	ИначеЕсли ТипПроектаБуквенный="IN" Тогда                             
//		ТипПроекта=Справочники.OW_ТипыПроектов.Internal;  //
//	ИначеЕсли ТипПроектаБуквенный="DM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Demonstration;  //
//	ИначеЕсли ТипПроектаБуквенный="HW" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Hardware_Configuration;  //
//	ИначеЕсли ТипПроектаБуквенный="BA" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Estimation;  //
//	ИначеЕсли ТипПроектаБуквенный="TRM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.TRM_Activity;  //
//	ИначеЕсли ТипПроектаБуквенный="RF" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.RFI; //
//	ИначеЕсли ТипПроектаБуквенный="T&M" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Time_Material;
//	ИначеЕсли ТипПроектаБуквенный="TM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Time_Material;		
//	ИначеЕсли ТипПроектаБуквенный="CDT" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.CDT;
//	ИначеЕсли ТипПроектаБуквенный="GRM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.GRM_Activity;	
//	ИначеЕсли ТипПроектаБуквенный="PRS" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.PreSale;	
//	ИначеЕсли ТипПроектаБуквенный="SUP-SM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.SupportServiceManagerActivity;		
//	ИначеЕсли ТипПроектаБуквенный="SM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.SupportServiceManagerActivity;		
//	ИначеЕсли ТипПроектаБуквенный="ADM" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Administration;	
//	ИначеЕсли ТипПроектаБуквенный="IN-BA" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalBusinessAnalysis;
//	ИначеЕсли ТипПроектаБуквенный="INCDT-IMPL" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalCDTImplementation;
//	ИначеЕсли ТипПроектаБуквенный="INCDT-SUPP" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalCDTSupport;	
//	ИначеЕсли ТипПроектаБуквенный="INCDT-SUPP" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalCDTSupport;	
//	ИначеЕсли ТипПроектаБуквенный="IN-IMPL" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalImplementation;	
//	ИначеЕсли ТипПроектаБуквенный="IN-SUPP" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.InternalSupport;	
//	ИначеЕсли ТипПроектаБуквенный="IMPL" Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Implementation;	
//		
//	ИначеЕсли ТипПроектаБуквенный=NULL Тогда
//		ТипПроекта=Справочники.OW_ТипыПроектов.Implementation;
//	Иначе
//		ТипПроекта=Справочники.OW_ТипыПроектов.Other;
//	КонецЕсли;
//	
//	Возврат ТипПроекта;		
//КонецФункции
//
////получаем информацию из CRM:
////1.проставляем код CRM где его нет.
////2. обновляем информацию по статусам
//Процедура OW_ПолучитьИнформациюИзCRM()  Экспорт
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("УдалитьOW_ПолучитьИнформациюИзCRM");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Если ЗначениеЗаполнено(Задание) Тогда
//			OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//		КонецЕсли;
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//
//	//	ПроставитьКодИзCRM();
//	ОбновимИнформациюИзCRMВОценочныхПроектах();
//	//ОбновимИнформациюИзCRMВПроектахВнедрения();
//	ОбновимИнформациюИзCRMВПроектах_Внедрения();
//	//ПолучитьВремя_CRM(); //Закомментировала т.к. теперь новый механизм 2017/07/18
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры	
//
////получаем код CRM для тех оценочных проектов и проектов внедрения, в которых он не заполнен
////Регламентное задание выполняется каждые два часа
//Процедура OW_ПолучитьКодИзCRM()  Экспорт
//	//ПроставитьКодИзCRM();
//КонецПроцедуры
//
//Функция ДатаСозданияСсылки(Ссылка) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
//		Возврат Неопределено;
//	КонецЕсли;	
//		
//	Момент = Дата(1, 1, 1);
//	Попытка
//		
//        УИ = Строка(Ссылка.УникальныйИдентификатор());
//        УИ = ВРег(СтрЗаменить(УИ,"-",""));
//		
//		Если Сред(УИ, 13, 1) = "1" Тогда
//			
//            Значение16 = ВРег(Сред(УИ, 14, 3) + Сред(УИ, 9, 4) + Сред(УИ, 1, 8));
//            Цифры16    = "123456789ABCDEF";
//            Значение10 = 0;
//            Длина16    = СтрДлина(Значение16);
//			
//			Для Ном = 1 По Длина16 Цикл
//                Значение10 = Значение10 + Pow(16, Длина16-Ном)*Найти(Цифры16, Сред(Значение16, Ном, 1));
//			КонецЦикла;
//			
//            Значение10 = Значение10/10000000;
//            Момент     = Дата(1582, 10, 15, 3, 0, 0) + Значение10;
//			
//		КонецЕсли;
//		
//    Исключение
//    КонецПопытки;
//	
//	Возврат Момент;
//		
//КонецФункции
//
//// обновляем информацию по статусам оценочных проектов в CRM
//Процедура ОбновимИнформациюИзCRMВОценочныхПроектах() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//
//	Юзер = "user1c";
//	Пароль = "user1c";
//	
//	Попытка 
//		OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession"); 
//		OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//	Исключение 
//		OraDatabase=Неопределено;
//		OraSession=Неопределено;
//		//OraSession="";
//		Подключились=Ложь;
//		
//		//сформируем письмо
//		ТекстПисьма = "Ошибка при выполнении фонового задания ""Обновить информацию об оценочных проектах из CRM"":"+Символы.ПС+Символы.ПС; 
//		ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Обновить информацию об оценочных проектах из CRM"" - %1'"), Метаданные.КраткаяИнформация);
//				
//		//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//		////отправим письмо на первый адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить информацию об оценочных проектах из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		////отправим письмо на второй адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить информацию об оценочных проектах из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//			
//		СписокАдресовКому = Новый СписокЗначений;	
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//	КонецПопытки; 
//	
//	Если Подключились=Ложь Тогда
//		Возврат
//	КонецЕсли; 
//	
//	ДлинаСуток=86400; //длина суток в секундах
//	//дата получения инфы из CRM
//	ДатаОбновленияИнфыОбОценочныхПроектамИзCRM = Константы.ДатаОбновленияИнфыОбОценочныхПроектамИзCRM.СоздатьМенеджерЗначения();
//	ДатаОбновленияИнфыОбОценочныхПроектамИзCRM.Прочитать();
//	ПромежуточнаяДата=ДатаОбновленияИнфыОбОценочныхПроектамИзCRM.Значение;
//	//запишем текущую дату
//	ДатаОбновленияИнфыОбОценочныхПроектамИзCRM.Значение = ТекущаяДата();
//	ДатаОбновленияИнфыОбОценочныхПроектамИзCRM.Записать();
//	
//	РазностьДатДляЗапроса=(ТекущаяДата()-ПромежуточнаяДата)/86400;
//	КоэффициентУмноженияДлиныСуток=1;
//	Если РазностьДатДляЗапроса>1 Тогда
//		КоэффициентУмноженияДлиныСуток=Окр(РазностьДатДляЗапроса);
//	КонецЕсли;	
//	
//	//переберем в цикле все проекты CRM у которых изменилась дата AMND_DATE
//	AMND_DATE="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	AMND_DATE_Status="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	
//	
//	Таблица="CRM.CRM_PROJECT";
//	
//	//переберем в цикле все маркетинговые проекты, и обновим по ним информацию
//	ЗапросМаркетинг=Новый Запрос;
//	ЗапросМаркетинг.Текст= "ВЫБРАТЬ
//	|	ЗадачиМаркетинговыхПроектов.Ссылка,
//	|	ЗадачиМаркетинговыхПроектов.Код,
//	|	ЗадачиМаркетинговыхПроектов.Партнер,
//	|	ЗадачиМаркетинговыхПроектов.IDT_ПроектаARM,
//	|	ЗадачиМаркетинговыхПроектов.КодПроектаCRM,
//	|	ЗадачиМаркетинговыхПроектов.Main_Project_ID,
//	|	ЗадачиМаркетинговыхПроектов.Наименование,
//	|	ЗадачиМаркетинговыхПроектов.Amnd_prev_ПроектаCRM
//	|ИЗ
//	|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
//	|ГДЕ
//	|	ЗадачиМаркетинговыхПроектов.КодПроектаCRM <> """"
//	|	И ЗадачиМаркетинговыхПроектов.ПометкаУдаления = ЛОЖЬ";
//	
//	Выборка = ЗапросМаркетинг.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		КодПроектаCRM="";
//		
//		Если Выборка.КодПроектаCRM="" Тогда
//			Продолжить;
//		КонецЕсли;
//		КодПроектаCRM="'"+Выборка.КодПроектаCRM+"'";
//		Amnd_prev_ПроектаCRM="";
//		Если Выборка.Amnd_prev_ПроектаCRM="" Тогда
//			Продолжить;
//		КонецЕсли;
//		Amnd_prev_ПроектаCRM="'"+Выборка.Amnd_prev_ПроектаCRM+"'";
//		Попытка
//			ОбъектПроект=Выборка.Ссылка.ПолучитьОбъект();
//			
//			//запрос к CRM.CRM_PROJECT
//			ЗапросЧасть1="select p.code Code_from_Crm,   
//			|p.RECORD_IDT Code_IDT, 
//			|p.id Code_ID,
//			|p.name Name,
//			|p.main_project Main_Project,
//			|p.RESULT_DETAILS Result_details,
//			|p.END_DATE End_date,
//			|p.Start_Date  Start_date,
//			|p.Approve_Date Approve_date,
//			|p.BUDGET_TOTAL Budget,
//			|p.INPUT_DATE Input_date,
//			|p.USED_TIME_TOTAL Used_time_total,
//			|p.PROJECT_USER Project_user,
//			|p.STATUS Status,
//			|crm.XWCRM_PROJECT('STATUS', p.STATUS) Status_name,
//			|p.AMND_PREV Amnd_prev,
//			|p.AMND_DATE Amnd_date,
//			|p.IS_Active IS_Active_Status,
//			|p.text_1 Text_1,
//			|p.text_2 Text_2,
//			|p.text_3 Text_3,
//			|p.text_4 Text_4,
//			|p.Status_details Status_details,
//			|p.Local_Path Local_Path,
//			|p.Full_Path Full_Path,
//			|p.Limitation Limitation,
//			|p.Details Details
//			//,
//			//|(SELECT DECODE (COUNT (*), 0, 'N', 'Y')
//			//|FROM crm.CRM_ITEM_PRED L
//			//|WHERE L.AMND_STATE = 'A'
//			//|AND L.PREDESESSOR = p.main_project
//			//|AND L.LINK_TYPE = 'IMPL') Linked
//			|from 
//			|CRM.CRM_PROJECT p where p.AMND_STATE='A' and p.ITEM_TYPE='P' and p.IS_HISTORY='N'
//			|and p.AMND_DATE>";
//			ЗапросЧасть2=ЗапросЧасть1+AMND_DATE+"";
//			ЗапросЧасть3=" and p.amnd_prev=";
//			ЗапросCRM=ЗапросЧасть2+ЗапросЧасть3+Amnd_prev_ПроектаCRM+" order by p.AMND_DATE";
//			
//			oOraDynaset = OraDatabase.CreateDynaset(ЗапросCRM,0);
//			
//			Пока oOraDynaset.EOF = 0 Цикл
//				//в цикле перебираем записи
//				СотрудникИзCRMКод=oOraDynaset.Fields("Project_user").Value;
//				
//				//выберем пользователя 
//				ЗапросПользователь="select name from crm.crm_user where id="+СотрудникИзCRMКод;
//				oOraDynaset2 = OraDatabase.CreateDynaset(ЗапросПользователь,0);
//				
//				Пока oOraDynaset2.EOF = 0 Цикл
//					СотрудникИзCRM=oOraDynaset2.Fields("name").Value;
//					oOraDynaset2.MoveNext();
//				КонецЦикла;
//				oOraDynaset2.Close();	
//				
//				Main_Project=oOraDynaset.Fields("Main_Project").Value;
//				КодПроектаCRM=oOraDynaset.Fields("Code_from_Crm").Value;
//				Amnd_prev_ПроектаCRM=oOraDynaset.Fields("Amnd_prev").Value;
//				IDT_ПроектаCRM=oOraDynaset.Fields("Code_IDT").Value;
//				НаименованиеИзCRM=oOraDynaset.Fields("Name").Value;
//				ЦифровойКодПроектаCRM=oOraDynaset.Fields("Code_ID").Value;
//				ДатаОкончания=ПреобразоватьКДате(oOraDynaset.Fields("End_date").Value);
//				ДатаНачала=ПреобразоватьКДате(oOraDynaset.Fields("Start_date").Value);
//				ДатаУтвержденияCRM=ПреобразоватьКДате(oOraDynaset.Fields("Approve_date").Value);
//				ДатаВводаПроектаCRM=ПреобразоватьКДате(oOraDynaset.Fields("Input_date").Value);
//				БюджетCRM=oOraDynaset.Fields("Budget").Value;
//				ФактCRM=oOraDynaset.Fields("Used_time_total").Value;
//				ОписаниеРезультата=oOraDynaset.Fields("Result_details").Value;
//				Статус=oOraDynaset.Fields("Status_name").Value;
//				ДатаИзмененияСтадии=ПреобразоватьКДате(oOraDynaset.Fields("Amnd_date").Value);
//				IS_Active_Status=oOraDynaset.Fields("IS_Active_Status").Value;
//				ТипПроектаБуквенный=oOraDynaset.Fields("Text_1").Value;
//				Text_1=oOraDynaset.Fields("Text_1").Value;
//				Text_2=oOraDynaset.Fields("Text_2").Value;
//				Text_3=oOraDynaset.Fields("Text_3").Value;
//				Text_4=oOraDynaset.Fields("Text_4").Value;
//				Status_details=oOraDynaset.Fields("Status_details").Value;
//				Local_Path=oOraDynaset.Fields("Local_Path").Value;
//				Full_Path=oOraDynaset.Fields("Full_Path").Value;
//				Limitation=oOraDynaset.Fields("Limitation").Value;
//				Details=oOraDynaset.Fields("Details").Value;
//				
//				//теперь запишем инфу в объект
//				//Проверим изменился ли код проекта CRM
//				КодПроектаCRMСтарый=ОбъектПроект.КодПроектаCRM;
//				ОбъектПроект.КодПроектаCRM=КодПроектаCRM;
//				Если  КодПроектаCRMСтарый<>ОбъектПроект.КодПроектаCRM Тогда
//					//запишем строчку в историю проекта
//					ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""CRM code"" was updated. Old value: "+КодПроектаCRMСтарый+". New value: "+ОбъектПроект.КодПроектаCRM+Символы.ПС;
//				КонецЕсли;
//				
//				//проверим изменился ли сотрудник в CRM
//				СотрудникИзCRMСтарый=ОбъектПроект.СотрудникИзCRM;
//				ОбъектПроект.СотрудникИзCRM=СотрудникИзCRM;
//				Если  СотрудникИзCRMСтарый<>ОбъектПроект.СотрудникИзCRM Тогда
//					//запишем строчку в историю проекта
//					ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""Implementation officer"" was updated. Old value: "+СотрудникИзCRMСтарый+". New value: "+ОбъектПроект.СотрудникИзCRM+Символы.ПС;
//				КонецЕсли;
//				
//				//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//				ОбъектПроект.ОтветственныйЗаВнедрение=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", СотрудникИзCRMКод);
//				
//				ОбъектПроект.Main_Project_ID=Main_Project;
//				ОбъектПроект.Amnd_prev_ПроектаCRM=Amnd_prev_ПроектаCRM;
//				ОбъектПроект.IDT_ПроектаCRM=IDT_ПроектаCRM;
//				ОбъектПроект.НаименованиеИзCRM=НаименованиеИзCRM;
//				ОбъектПроект.ЦифровойКодПроектаCRM=ЦифровойКодПроектаCRM;
//				ОбъектПроект.ТипПроектаБуквенный=ТипПроектаБуквенный;
//				ОбъектПроект.ДатаОкончания=ДатаОкончания;
//				ОбъектПроект.ДатаВводаПроектаCRM=ДатаВводаПроектаCRM;
//				ОбъектПроект.ДатаУтвержденияCRM=ДатаУтвержденияCRM;
//				ОбъектПроект.ДатаНачала=ДатаНачала;
//				ОбъектПроект.БюджетCRM=БюджетCRM;
//				ФактCRMСтарый = ОбъектПроект.ФактCRM; //OW Копачев А.С. 25.10.2019 ONEC-4855
//				ОбъектПроект.ФактCRM=ФактCRM;
//				
//				//проверим изменился ли бюджет		
//			
//				//++OW Копачев А.С. 25.10.2019 ONEC-4855 			
//				//БюджетФактическийСтарый=ОбъектПроект.БюджетФактический;
//				//ОбъектПроект.БюджетФактический=ФактCRM;
//				//Если  БюджетФактическийСтарый<>ОбъектПроект.БюджетФактический Тогда
//				//	//запишем строчку в историю проекта
//				//	ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""Actual budget"" was updated. Old value: "+БюджетФактическийСтарый+". New value: "+ОбъектПроект.БюджетФактический+Символы.ПС;
//				//КонецЕсли
//				
//				Если ФактCRMСтарый<>ОбъектПроект.ФактCRM Тогда
//					//запишем строчку в историю проекта
//					ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""CRM actual budget"" was updated. Old value: "+ФактCRMСтарый+". New value: "+ОбъектПроект.ФактCRM+Символы.ПС;
//					//--OW Копачев А.С. 25.10.2019 ONEC-4855
//				КонецЕсли;
//				//--OW Копачев А.С. 25.10.2019 ONEC-4855
//				
//				ОбъектПроект.ОписаниеРезультата=ОписаниеРезультата;
//				ОбъектПроект.Text_1=Text_1;
//				ОбъектПроект.Text_2=Text_2;
//				ОбъектПроект.Text_3=Text_3;
//				ОбъектПроект.Text_4=Text_4;
//				ОбъектПроект.Status_details=Status_details;
//				ОбъектПроект.Local_Path=Local_Path;
//				ОбъектПроект.Full_Path=Full_Path;
//				ОбъектПроект.Limitation=Limitation;
//				ОбъектПроект.Details=Details;
//				
//				//типы проектов
//				ОбъектПроект.ТипПроектаCRM=ОпределитьТипПроектаCRM(ТипПроектаБуквенный);
//				ОбъектПроект.ТипПроекта=ОпределитьТипПроекта(ТипПроектаБуквенный);
//				
//				//ОбъектПроект.ВведенТолькоВCRM=ВведенТолькоВCRM;
//				ОбъектПроект.ДатаОбновленияФлагаВведенТолькоВCRM=ТекущаяДата();
//				ОбъектПроект.ДатаОбновленияИнфыПоПроектам=ТекущаяДата();
//				
//				СтарыйСтатус_Оригинальный=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//				СтарыйСтатус=ОбъектПроект.СтатусЭтапаCRM;
//				Если Статус="Active" Тогда                                           //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Active;    //
//				ИначеЕсли Статус="Waiting" Тогда                                      //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Waiting;    //
//				ИначеЕсли Статус="Acceptance" Тогда                                     //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Acceptance;	//
//				ИначеЕсли Статус="Rejected" Тогда                                       //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Rejected;	//
//				ИначеЕсли Статус="Closed" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Closed;	
//				ИначеЕсли Статус="Sent" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Sent;
//				ИначеЕсли Статус="Dispatched" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Dispatched;
//				ИначеЕсли Статус="Frozen" Тогда                                          //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Frozen;	     //
//				ИначеЕсли Статус="Unconfirmed" Тогда                                           //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Unconfirmed;	           //
//				ИначеЕсли Статус="Preimplementation" Тогда                                     //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Preimplementation;	//
//				ИначеЕсли Статус="Initiated" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Initiated;
//				ИначеЕсли Статус="For Support" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.ForSupport;
//				ИначеЕсли Статус="Canceled" Тогда
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Canceled;
//				ИначеЕсли Статус="Input" Тогда                                           //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Input;	     //
//				ИначеЕсли Статус="Completed" Тогда                                        //
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Completed;     //
//				Иначе
//					ОбъектПроект.СтатусЭтапаCRM_Оригинальный=СтарыйСтатус_Оригинальный;
//				КонецЕсли;	
//				ОбъектПроект.ДатаИзмененияСтадии=ДатаИзмененияСтадии;
//				
//				Если IS_Active_Status="Y" Тогда
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Active;
//				ИначеЕсли IS_Active_Status="N" Тогда
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Completed;
//				ИначеЕсли IS_Active_Status="J" Тогда
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Rejected;
//				ИначеЕсли IS_Active_Status="W" Тогда
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Waiting;
//				ИначеЕсли IS_Active_Status="A" Тогда                                     //
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Acceptance;
//				ИначеЕсли IS_Active_Status="I" Тогда                                     //
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Input;
//				ИначеЕсли IS_Active_Status="F" Тогда                                     //
//					ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Frozen;		
//				Иначе
//					ОбъектПроект.СтатусЭтапаCRM=СтарыйСтатус;
//				КонецЕсли;		
//				
//				ОбъектПроект.ДатаИзмененияСтадии=ДатаИзмененияСтадии;
//				
//				oOraDynaset.MoveNext();
//			КонецЦикла;
//			oOraDynaset.Close(); //запрос к CRM.CRM_PROJECT
//			
//			//запрос к CRM.CRM_PROJECT
//			Amnd_prev_ПроектаCRM_для_отбора="";
//			Amnd_prev_ПроектаCRM_для_отбора=ОбъектПроект.Amnd_prev_ПроектаCRM;
//			Если Amnd_prev_ПроектаCRM_для_отбора<>"" Тогда
//				//смотрим статусы проекта
//				ЗапросСтатус1="select st.id,  
//				|st.AMND_DATE AMND_date, 
//				|st.CRM_PROJECT__OID, 
//				|st.AMND_STATE,
//				|st.AMND_OFFICER,
//				|st.Name status_name, 
//				|st.Details, 
//				|crm.XWCRM_PRJ_STATUS('REGISTERED_BY', st.registered_by) register_user,
//				|crm.XWCRM_PRJ_STATUS('PRJ_STATUS_TYPE',st.prj_status_type) prj_status_type,
//				|st.INPUT_DATE Input_date,
//				|st.EXPIRE_DATE EXPIRE_date
//				|from
//				|CRM.crm_prj_status st where st.amnd_state = 'A'
//				|and st.source_role = 'STATUS'
//				|and st.AMND_DATE>"; 
//				ЗапросСтатус=ЗапросСтатус1+ AMND_DATE_Status+"";
//				ЗапросСтатус2=" and st.CRM_PROJECT__OID=";
//				ЗапросСтатус=ЗапросСтатус+ЗапросСтатус2+Amnd_prev_ПроектаCRM_для_отбора;
//				ЗапросСтатус3=" order by st.AMND_DATE";
//				ЗапросСтатус=ЗапросСтатус+ЗапросСтатус3;
//				
//				oOraDynaset3 = OraDatabase.CreateDynaset(ЗапросСтатус,0); 
//				
//				Пока oOraDynaset3.EOF = 0 Цикл
//					//в цикле перебираем записи	
//					Дата=oOraDynaset3.Fields("Input_date").Value;
//					Детали=oOraDynaset3.Fields("Details").Value;
//					ИмяСтатуса= oOraDynaset3.Fields("status_name").Value;
//					ID= oOraDynaset3.Fields("id").Value;
//					Статус= oOraDynaset3.Fields("prj_status_type").Value;
//					Пользователь= oOraDynaset3.Fields("register_user").Value;
//					ДатаИстеченияСрока= oOraDynaset3.Fields("EXPIRE_date").Value;
//					
//					Отбор = Новый Структура();
//					Отбор.Вставить("Дата",Дата);
//					Отбор.Вставить("ИмяСтатуса",ИмяСтатуса);
//					ППОтбор=ОбъектПроект.ИсторияПроектаИзCRM.НайтиСтроки(Отбор);
//					Если ППОтбор.Количество()=0 Тогда
//						Строка=ОбъектПроект.ИсторияПроектаИзCRM.Добавить();
//						Строка.Дата=Дата;
//						Строка.Детали=Детали;
//						Строка.ИмяСтатуса= ИмяСтатуса;
//						Строка.ДатаИстеченияСрока=ДатаИстеченияСрока;
//						Строка.ТипСтатуса=Статус;
//						Строка.СотрудникCRM= Пользователь;
//						Строка.ID= ID;
//						
//						//вставка Скочилова А.Т. 25/08/2016 по задаче №1020
//						ОбъектПроект.CRM_StatusDate = Дата;
//						ОбъектПроект.CRM_StatusDetails = Детали;
//						ОбъектПроект.CRM_StatusName = ИмяСтатуса; 
//						//конец вставки Скочилова А.Т. 25/08/2016 по задаче №1020
//					КонецЕсли;
//					
//					oOraDynaset3.MoveNext();
//				КонецЦикла;
//				ОбъектПроект.ДатаСинхронизацииТЧ_ИсторияПроектаИзCRM=ТекущаяДата();
//				ОбъектПроект.ИсторияПроектаИзCRM.Сортировать("Дата убыв");
//				oOraDynaset3.Close();
//				
//			КонецЕсли; //Если Amnd_prev_ПроектаCRM_для_отбора<>"" Тогда
//			
//			//записываем объект
//			Попытка
//				ОбъектПроект.Записать();
//				ЗаписьИзмененияСтатусаПроектаCRM(ОбъектПроект.Ссылка);
//			Исключение
//				//Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//				Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+КодПроектаCRM+"("+Выборка.Наименование+") for client "+Выборка.Партнер+" "+ ОписаниеОшибки()));
//			КонецПопытки;
//		Исключение
//			//Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//			Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+КодПроектаCRM+"("+Выборка.Наименование+") for client "+Выборка.Партнер+" "+ ОписаниеОшибки()));
//		КонецПопытки;
//	КонецЦикла;	 //Пока Выборка.Следующий() Цикл
//	
//	Попытка
//		OraDatabase.Close();
//	Исключение
//		Сообщить("Cannot close connection to Oracle " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
//	КонецПопытки;	
//	
//	OraDatabase=Неопределено;
//	OraSession=Неопределено;
//	//OraSession="";
//КонецПроцедуры	
//
//// обновляем информацию по статусам проектов внедрения в CRM
//Процедура ОбновимИнформациюИзCRMВПроектах_Внедрения() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//
//	Юзер = "user1c";
//	Пароль = "user1c";
//	
//	Попытка 
//		OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession"); 
//		OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//	Исключение 
//		OraDatabase=Неопределено;
//		OraSession=Неопределено;
//		Подключились=Ложь;
//		
//		//сформируем письмо
//		ТекстПисьма = "Ошибка при выполнении фонового задания ""Обновить информацию о проектах внедрения из CRM"":"+Символы.ПС+Символы.ПС; 
//		ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Обновить информацию о проектах внедрения из CRM"" - %1'"), Метаданные.КраткаяИнформация);
//		
//		//++OW Копачев А.С. 07.09.2022 ONEC-7882
//		
//		////отправим письмо на первый адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить информацию о проектах внедрения из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		////отправим письмо на второй адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить информацию о проектах внедрения из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		
//				
//		СписокАдресовКому = Новый СписокЗначений;	
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//		
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 07.09.2022 ONEC-7882
//			
//	КонецПопытки; 
//	
//	Если Подключились=Ложь Тогда
//		Возврат
//	КонецЕсли; 
//	ДлинаСуток=86400; //длина суток в секундах
//	//дата получения инфы из CRM
//	ДатаОбновленияИнфыОПроектахВнедренияИзCRM = Константы.ДатаОбновленияИнфыОПроектахВнедренияИзCRM.СоздатьМенеджерЗначения();
//	ДатаОбновленияИнфыОПроектахВнедренияИзCRM.Прочитать();
//	ПромежуточнаяДата=ДатаОбновленияИнфыОПроектахВнедренияИзCRM.Значение;
//	//запишем текущую дату
//	ДатаОбновленияИнфыОПроектахВнедренияИзCRM.Значение = ТекущаяДата();
//	ДатаОбновленияИнфыОПроектахВнедренияИзCRM.Записать();
//	
//	РазностьДатДляЗапроса=(ТекущаяДата()-ПромежуточнаяДата)/86400;
//	КоэффициентУмноженияДлиныСуток=1;
//	Если РазностьДатДляЗапроса>1 Тогда
//		КоэффициентУмноженияДлиныСуток=Окр(РазностьДатДляЗапроса);
//	КонецЕсли;	
//	
//	//переберем в цикле все проекты CRM у которых изменилась дата AMND_DATE
//	AMND_DATE="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	AMND_DATE_Status="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	
//	//запрос к CRM.CRM_PROJECT
//	ЗапросЧасть1="select p.code Code_from_Crm,   
//	|p.RECORD_IDT Code_IDT, 
//	|p.id Code_ID, 
//	|p.name ProjectName, 
//	|p.RESULT_DETAILS Result_details,
//	|p.EST_START_DATE EST_START_DATE,
//	|p.DUE_DATE DUE_DATE,
//	|p.END_DATE End_date,
//	|p.Start_Date Start_date,
//	|p.Approve_Date Approve_date,
//	|p.BUDGET_TOTAL Budget,
//	|p.INPUT_DATE Input_date,
//	|p.USED_TIME_TOTAL Used_time_total,
//	|p.PROJECT_USER Project_user,
//	|p.STATUS Status,
//	|crm.XWCRM_PROJECT('STATUS', p.STATUS) Status_name,
//	|p.AMND_PREV Amnd_prev,
//	|p.AMND_DATE Amnd_date,
//	|p.IS_Active IS_Active_Status,
//	|( case when p.CRM_CUST__ID is not null then (select cc.NAME from crm.crm_cust cc where cc.id = p.crm_cust__id ) else 'UNKNOWN' end )  Customer_Name,
//	|p.text_1 Text_1,
//	|p.main_project Main_Project_ID,
//	|p.text_2 Text_2,
//	|p.text_3 Text_3,
//	|p.text_4 Text_4,
//	|p.Status_details Status_details,
//	|p.Local_Path Local_Path,
//	|p.Full_Path Full_Path,
//	|p.Limitation Limitation,
//	|p.Details Details,
//	|( case when p.CRM_CUST__ID is not null then (select cc.ID_1C from crm.crm_cust cc where cc.id = p.crm_cust__id ) else null end ) CUSTOMER_ID_1C,		
//	|p.PROJECT_OFFICER OFFICER_CRM_ID,
//	|(select o.name from crm.CRM_OFFICER o where o.id = p.PROJECT_OFFICER ) OFFICER_CRM_NAME,
//	|nvl( p.PROJECT_QUEUE, 3847) TEAM_CRM_ID,
//	|(select q.NAME from crm.CRM_QUEUE q where q.id = nvl( p.PROJECT_QUEUE, 3847) ) TEAM_NAME,
//	|case when p.DELIVERY_TYPE is not null then ( select dt.Name from crm.CRM_DLV_TYPE dt where dt.id = p.DELIVERY_TYPE ) else 'Way4 Cards' end DELIVERY_TYPE,
//	|nvl ( case when p.DELIVERY_TYPE is not null then ( select min( h.CODE ) from CRM.SY_HANDBOOK h 
//	|   where  h.AMND_STATE = 'A' and h.GROUP_CODE = 'PROJECT_TYPE' and ( h.ID_FILTER1 = p.DELIVERY_TYPE or h.ID_FILTER2 = p.DELIVERY_TYPE ) ) 
//	|   else 'W4C' end, 'W4C' )PROJECT_TYPE,
//	|( select nvl( crm.CRM_U.EMAIL_BY_USERID( min(pp.PROJECT_USER) ), 'amarinchenko@openwaygroup.com' )
//	|  from crm.CRM_PROJECT pp where pp.ID = (  
//	|    select min(pr.CRM_PROJECT__OID) from crm.CRM_ITEM_PRED pr where pr.amnd_state = 'A' and
//	|   pr.PREDESESSOR = p.id ) ) ADM_EMAIL,
//	|nvl( p.SS_TYPE, 'Medium' ) PRIORITY,
//	|decode(p.IS_ACTIVE, 'Y', 'Active', 'N', 'Closed', 'W', 'Waiting', 'A', 'Acceptance', 'F', 'Frozen', 'J', 'Rejected', null ) IS_ACTIVE_Status
//	|from 
//	|CRM.CRM_PROJECT p
//	|where p.AMND_STATE='A' and p.ITEM_TYPE='P' and p.IS_HISTORY='N' 
//	|and p.AMND_DATE>";
//	ЗапросЧасть2=ЗапросЧасть1+AMND_DATE+"";
//	ЗапросCRM=ЗапросЧасть2+" order by p.AMND_DATE";
//	
//	oOraDynaset = OraDatabase.CreateDynaset(ЗапросCRM,0);
//	
//	Пока oOraDynaset.EOF = 0 Цикл
//		//в цикле перебираем записи
//		СотрудникИзCRMКод=oOraDynaset.Fields("Project_user").Value;
//		
//		Если СотрудникИзCRMКод<>NULL Тогда
//			//выберем пользователя 
//			ЗапросПользователь="select name from crm.crm_user where id="+СотрудникИзCRMКод;
//			oOraDynaset2 = OraDatabase.CreateDynaset(ЗапросПользователь,0);
//			
//			Пока oOraDynaset2.EOF = 0 Цикл
//				СотрудникИзCRM=oOraDynaset2.Fields("name").Value;
//				oOraDynaset2.MoveNext();
//			КонецЦикла;
//			oOraDynaset2.Close();
//		Иначе
//			КодПроектаCRM="";
//			СотрудникИзCRM="";
//		КонецЕсли;	
//		
//		//Customer_ID=oOraDynaset.Fields("Customer_ID").Value;
//		CUSTOMER_ID_1C=oOraDynaset.Fields("CUSTOMER_ID_1C").Value;
//		Customer_Name=oOraDynaset.Fields("Customer_Name").Value;
//		КодПроектаCRM=oOraDynaset.Fields("Code_from_Crm").Value;
//		Amnd_prev_ПроектаCRM=oOraDynaset.Fields("Amnd_prev").Value;
//		IDT_ПроектаCRM=oOraDynaset.Fields("Code_IDT").Value;
//		НаименованиеИзCRM=oOraDynaset.Fields("ProjectName").Value;
//		ЦифровойКодПроектаCRM=oOraDynaset.Fields("Code_ID").Value;
//		ДатаОкончания=ПреобразоватьКДате(oOraDynaset.Fields("End_date").Value);
//		ДатаНачала=ПреобразоватьКДате(oOraDynaset.Fields("Start_date").Value);
//		ДатаУтвержденияCRM=ПреобразоватьКДате(oOraDynaset.Fields("Approve_date").Value);
//		ДатаВводаПроектаCRM=ПреобразоватьКДате(oOraDynaset.Fields("Input_date").Value);
//		БюджетCRM=oOraDynaset.Fields("Budget").Value;
//		ФактCRM=oOraDynaset.Fields("Used_time_total").Value;
//		ОписаниеРезультата=oOraDynaset.Fields("Result_details").Value;
//		Статус=oOraDynaset.Fields("Status_name").Value;
//		ДатаИзмененияСтадии=ПреобразоватьКДате(oOraDynaset.Fields("Amnd_date").Value);
//		IS_Active_Status=oOraDynaset.Fields("IS_Active_Status").Value;
//		ПроектНаименование=oOraDynaset.Fields("ProjectName").Value;
//		ТипПроектаБуквенный=oOraDynaset.Fields("Text_1").Value;
//		DUE_DATE=ПреобразоватьКДате(oOraDynaset.Fields("DUE_DATE").Value);
//		EST_START_DATE= ПреобразоватьКДате(oOraDynaset.Fields("EST_START_DATE").Value);
//		Main_Project_ID=oOraDynaset.Fields("Main_Project_ID").Value;
//		Text_1=oOraDynaset.Fields("Text_1").Value;
//		Text_2=oOraDynaset.Fields("Text_2").Value;
//		Text_3=oOraDynaset.Fields("Text_3").Value;
//		Text_4=oOraDynaset.Fields("Text_4").Value;
//		Status_details=oOraDynaset.Fields("Status_details").Value;
//		Local_Path=oOraDynaset.Fields("Local_Path").Value;
//		Full_Path=oOraDynaset.Fields("Full_Path").Value;
//		Limitation=oOraDynaset.Fields("Limitation").Value;
//		Details=oOraDynaset.Fields("Details").Value;
//		TEAM_CRM_ID=oOraDynaset.Fields("TEAM_CRM_ID").Value;
//		OFFICER_CRM_ID=oOraDynaset.Fields("OFFICER_CRM_ID").Value;
//		PROJECT_TYPE=oOraDynaset.Fields("PROJECT_TYPE").Value;
//		ADM_EMAIL=oOraDynaset.Fields("ADM_EMAIL").Value;
//		PRIORITY=oOraDynaset.Fields("PRIORITY").Value;
//		
//		//проверяем есть ли клиент
//		Если Customer_Name=NULL Тогда
//			oOraDynaset.MoveNext();
//			Продолжить;
//		КонецЕсли;
//		
//		Если КодПроектаCRM=NULL Тогда
//			oOraDynaset.MoveNext();
//			Продолжить;
//		КонецЕсли;
//		
//		//находим проект может быть создан проект внедрения
//		СпрПроект=Справочники.ЗадачиПроектов.ПустаяСсылка();
//		СпрПроект=Справочники.ЗадачиПроектов.НайтиПоРеквизиту("КодПроектаCRM", КодПроектаCRM);
//		Если СпрПроект=Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//			СпрПроект=Справочники.ЗадачиПроектов.НайтиПоРеквизиту("Amnd_prev_ПроектаCRM", Amnd_prev_ПроектаCRM);
//		КонецЕсли;	
//		Если СпрПроект<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//			//есть проекта	
//			ОбъектПроект=СпрПроект.ПолучитьОбъект();
//		Иначе
//			oOraDynaset.MoveNext();
//			Продолжить;
//		КонецЕсли;
//		
//		ОбъектПроект.КодПроектаCRM=КодПроектаCRM;
//		//проверим изменился ли сотрудник в CRM
//		СотрудникИзCRMСтарый=ОбъектПроект.СотрудникИзCRM;
//		ОбъектПроект.СотрудникИзCRM=СотрудникИзCRM;
//		Если  СотрудникИзCRMСтарый<>ОбъектПроект.СотрудникИзCRM Тогда
//			//запишем строчку в историю проекта
//			ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""Implementation officer"" was updated. Old value: "+СотрудникИзCRMСтарый+". New value: "+ОбъектПроект.СотрудникИзCRM+Символы.ПС;
//		КонецЕсли;
//		
//		//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//		ОбъектПроект.ОтветственныйЗаВнедрение=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", СотрудникИзCRMКод);
//		
//		//остальные параметры
//		ОбъектПроект.Amnd_prev_ПроектаCRM=Amnd_prev_ПроектаCRM;
//		ОбъектПроект.Main_Project_ID=Main_Project_ID;
//		ОбъектПроект.IDT_ПроектаCRM=IDT_ПроектаCRM;
//		ОбъектПроект.ТипПроектаБуквенный=ТипПроектаБуквенный;
//		ОбъектПроект.НаименованиеИзCRM=НаименованиеИзCRM;
//		ОбъектПроект.ЦифровойКодПроектаCRM=ЦифровойКодПроектаCRM;
//		ОбъектПроект.ДатаОкончания=ДатаОкончания;
//		ОбъектПроект.ДатаВводаПроектаCRM=ДатаВводаПроектаCRM;
//		ОбъектПроект.ДатаУтвержденияCRM=ДатаУтвержденияCRM;
//		ОбъектПроект.ДатаНачала=ДатаНачала;
//		ОбъектПроект.БюджетCRM=БюджетCRM;
//		
//		//проверим изменился ли бюджет CRM
//		//+ Пилюгин В.Е. 23.07.2018 поправил сохранение в запись информации об изменении CRM факта по постингу
//		ФактCRMСтарый = ОбъектПроект.ФактCRM;
//		ОбъектПроект.ФактCRM=ФактCRM;		
//		Если  ФактCRMСтарый<>ОбъектПроект.ФактCRM Тогда
//			//запишем строчку в историю проекта
//			ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""CRM actual budget"" was updated. Old value: "+ФактCRMСтарый+". New value: "+ОбъектПроект.ФактCRM+Символы.ПС;
//		КонецЕсли;	
//		ОбъектПроект.ОписаниеРезультата=ОписаниеРезультата;
//		
//		ОбъектПроект.Text_1=Text_1;
//		ОбъектПроект.Text_2=Text_2;
//		ОбъектПроект.Text_3=Text_3;
//		ОбъектПроект.Text_4=Text_4;
//		ОбъектПроект.Status_details=Status_details;
//		ОбъектПроект.Local_Path=Local_Path;
//		ОбъектПроект.Full_Path=Full_Path;
//		ОбъектПроект.Limitation=Limitation;
//		ОбъектПроект.Details=Details;
//		
//		//типы проектов
//		ОбъектПроект.ТипПроектаCRM=ОпределитьТипПроектаCRM(ТипПроектаБуквенный);
//		ОбъектПроект.ТипПроекта=ОпределитьТипПроекта(ТипПроектаБуквенный);
//		
//		//ОбъектПроект.ВведенТолькоВCRM=ВведенТолькоВCRM;
//		ОбъектПроект.ДатаОбновленияФлагаВведенТолькоВCRM=ТекущаяДата();
//		ОбъектПроект.ДатаОбновленияИнфыПоПроектам=ТекущаяДата();
//		
//		СтарыйСтатус_Оригинальный=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//		СтарыйСтатус=ОбъектПроект.СтатусЭтапаCRM;
//		Если Статус="Active" Тогда                                           //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Active;    //
//		ИначеЕсли Статус="Waiting" Тогда                                      //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Waiting;    //
//		ИначеЕсли Статус="Acceptance" Тогда                                     //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Acceptance;	//
//		ИначеЕсли Статус="Rejected" Тогда                                       //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Rejected;	//
//		ИначеЕсли Статус="Closed" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Closed;	
//		ИначеЕсли Статус="Sent" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Sent;
//		ИначеЕсли Статус="Dispatched" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Dispatched;
//		ИначеЕсли Статус="Frozen" Тогда                                          //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Frozen;	     //
//		ИначеЕсли Статус="Unconfirmed" Тогда                                           //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Unconfirmed;	           //
//		ИначеЕсли Статус="Preimplementation" Тогда                                     //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Preimplementation;	//
//		ИначеЕсли Статус="Initiated" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Initiated;
//		ИначеЕсли Статус="For Support" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.ForSupport;
//		ИначеЕсли Статус="Canceled" Тогда
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Canceled;
//		ИначеЕсли Статус="Input" Тогда                                           //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Input;	     //
//		ИначеЕсли Статус="Completed" Тогда                                        //
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=Перечисления.СтатусыЭтапов.Completed;     //
//		Иначе
//			ОбъектПроект.СтатусЭтапаCRM_Оригинальный=СтарыйСтатус_Оригинальный;
//		КонецЕсли;	
//		ОбъектПроект.ДатаИзмененияСтадии=ДатаИзмененияСтадии;
//		
//		Если СтарыйСтатус_Оригинальный<>ОбъектПроект.СтатусЭтапаCRM_Оригинальный Тогда
//			//запишем строчку в историю проекта
//			ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""Project status from CRM"" was updated. Old value: "+СтарыйСтатус_Оригинальный+". New value: "+ОбъектПроект.СтатусЭтапаCRM_Оригинальный+Символы.ПС;
//			
//			НаборЗаписей = РегистрыСведений.OW_ИзменениеСтатусаПроектаCRMДляРассылки.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.Проект.Установить(ОбъектПроект.Ссылка);
//			
//			Запись = НаборЗаписей.Добавить();
//			Запись.Проект      =  ОбъектПроект.Ссылка;
//			Запись.Период	   =  ТекущаяДата();
//			Запись.Клиент     		 = ОбъектПроект.Партнер;
//			Запись.КодПроекта   =  ОбъектПроект.КодПроектаCRM;
//			Запись.ДатаИзмененияСтатуса  =  ОбъектПроект.ДатаИзмененияСтадии;
//			Запись.СтатусПроектаCRM= ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//			Запись.ПредыдущийСтатусИзCRM=СтарыйСтатус_Оригинальный;
//			
//			НаборЗаписей.Записать(Ложь);
//			
//		КонецЕсли;	
//		
//		Если IS_Active_Status="Y" Тогда
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Active;
//		ИначеЕсли IS_Active_Status="N" Тогда
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Completed;
//		ИначеЕсли IS_Active_Status="J" Тогда
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Rejected;
//		ИначеЕсли IS_Active_Status="W" Тогда
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Waiting;
//		ИначеЕсли IS_Active_Status="A" Тогда                                     //
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Acceptance;
//		ИначеЕсли IS_Active_Status="I" Тогда                                     //
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Input;
//		ИначеЕсли IS_Active_Status="F" Тогда                                     //
//			ОбъектПроект.СтатусЭтапаCRM=Перечисления.СтатусыЭтапов.Frozen;		
//		Иначе
//			ОбъектПроект.СтатусЭтапаCRM=СтарыйСтатус;
//		КонецЕсли;			
//		
//		//записываем объект
//		Попытка
//			ОбъектПроект.Записать();
//			ЗаписьИзмененияСтатусаПроектаВнедренияCRM(ОбъектПроект.Ссылка);
//		Исключение
//			//Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+ОбъектПроект.Наименование+") для клиента "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки());
//			Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+ОбъектПроект.Наименование+") для клиента "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+КодПроектаCRM+"("+ОбъектПроект.Наименование+") for client "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки()));
//		КонецПопытки;
//		//КонецЕсли;	
//		oOraDynaset.MoveNext();
//	КонецЦикла; 
//	oOraDynaset.Close(); //запрос к CRM.CRM_PROJECT
//	
//	//загрузка изменений статуса по проекту
//	//смотрим статусы проекта
//	ЗапросСтатус1="select st.id,  
//	|st.AMND_DATE AMND_date, 
//	|st.CRM_PROJECT__OID, 
//	|st.AMND_STATE,
//	|st.AMND_OFFICER,
//	|st.Name status_name, 
//	|st.Details, 
//	|crm.XWCRM_PRJ_STATUS('REGISTERED_BY', st.registered_by) register_user,
//	|crm.XWCRM_PRJ_STATUS('PRJ_STATUS_TYPE',st.prj_status_type) prj_status_type,
//	|(select code from CRM.CRM_ATT_TYPE where AMND_STATE = 'A' and id = st.prj_status_type and GROUP_CODE = 'STATUS') status_code,
//	|st.INPUT_DATE Input_date,
//	|st.EXPIRE_DATE EXPIRE_date,
//	|st.CRM_PROJECT__OID Amnd_prev
//	|from
//	|CRM.crm_prj_status st where st.amnd_state = 'A'
//	|and st.source_role = 'STATUS'
//	|and st.AMND_DATE>"; 
//	ЗапросСтатус=ЗапросСтатус1+ AMND_DATE_Status+"";
//	ЗапросСтатус3=" order by st.AMND_DATE";
//	ЗапросСтатус=ЗапросСтатус+ЗапросСтатус3;
//	
//	oOraDynaset3 = OraDatabase.CreateDynaset(ЗапросСтатус,0); 
//	
//	Пока oOraDynaset3.EOF = 0 Цикл
//		//в цикле перебираем записи	
//		Amnd_prev=oOraDynaset3.Fields("Amnd_prev").Value;
//		Дата=oOraDynaset3.Fields("Input_date").Value;
//		Детали=oOraDynaset3.Fields("Details").Value;
//		ИмяСтатуса= oOraDynaset3.Fields("status_name").Value;
//		ID= oOraDynaset3.Fields("id").Value;
//		Статус= oOraDynaset3.Fields("prj_status_type").Value;
//		Пользователь= oOraDynaset3.Fields("register_user").Value;
//		ДатаИстеченияСрока= oOraDynaset3.Fields("EXPIRE_date").Value;
//		СтатусКод= oOraDynaset3.Fields("status_code").Value;
//		
//		СпрПроект=Справочники.ЗадачиПроектов.ПустаяСсылка();
//		Если СпрПроект=Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//			СпрПроект=Справочники.ЗадачиПроектов.НайтиПоРеквизиту("Amnd_prev_ПроектаCRM", Amnd_prev);
//		КонецЕсли;	
//		Если СпрПроект<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//			//есть проекта	
//			ОбъектПроект=СпрПроект.ПолучитьОбъект();
//		Иначе
//			oOraDynaset3.MoveNext();
//			Продолжить;
//		КонецЕсли;
//		
//		Отбор = Новый Структура();
//		Отбор.Вставить("Дата",Дата);
//		Отбор.Вставить("ИмяСтатуса",ИмяСтатуса);
//		ППОтбор=ОбъектПроект.ИсторияПроектаИзCRM.НайтиСтроки(Отбор);
//		Если ППОтбор.Количество()=0 Тогда
//			Строка=ОбъектПроект.ИсторияПроектаИзCRM.Добавить();
//			Строка.Дата=Дата;
//			Строка.Детали=Детали;
//			Строка.ИмяСтатуса= ИмяСтатуса;
//			Строка.ДатаИстеченияСрока=ДатаИстеченияСрока;
//			Строка.ТипСтатуса=Статус;
//			Строка.СотрудникCRM= Пользователь;
//			Строка.ID= ID;
//			
//			//вставка Скочилова А.Т. 25/08/2016 по задаче №1020
//			ОбъектПроект.CRM_StatusDate = Дата;
//			ОбъектПроект.CRM_StatusDetails = Детали;
//			ОбъектПроект.CRM_StatusName = ИмяСтатуса; 
//			//конец вставки Скочилова А.Т. 25/08/2016 по задаче №1020
//			
//			Если Строка.ИмяСтатуса<>"" Тогда
//				//запишем инфу в регистр для рассылки			
//				НаборЗаписей = РегистрыСведений.OW_ИзменениеИсторииПроектаCRMДляРассылки.СоздатьНаборЗаписей();
//				НаборЗаписей.Отбор.Проект.Установить(ОбъектПроект.Ссылка);
//				НаборЗаписей.Отбор.ID.Установить(ID);
//				
//				Запись = НаборЗаписей.Добавить();
//				Запись.Проект      =  ОбъектПроект.Ссылка;
//				Запись.Период	   =  ТекущаяДата();
//				Запись.Клиент     		 = ОбъектПроект.Партнер;
//				Запись.КодПроекта   =  ОбъектПроект.КодПроектаCRM;
//				Запись.ID= ID;
//				
//				Запись.ТипСтатуса=Статус;
//				Запись.ДатаСтатуса  =  Дата;
//				Запись.ИмяСтатуса= ИмяСтатуса;
//				Запись.Детали=Детали;
//				Запись.СотрудникCRM=Пользователь;
//				
//				НаборЗаписей.Записать();
//			КонецЕсли;	
//			
//			//DUE_DATE
//			Если СтатусКод="DUE_DATE" Тогда
//				//разбираем строчку с Due_date
//				Дата_DUE_DATE=ПолучитьDue_Date(ИмяСтатуса);
//				Если ТипЗнч(Дата_DUE_DATE)=Тип("Дата") И ЗначениеЗаполнено(Дата_DUE_DATE) Тогда
//					Если Дата_DUE_DATE<>Дата("00010101000000")Тогда
//						//Запишем due_date
//						Due_Date_old=ОбъектПроект.Due_Date;
//						ОбъектПроект.Due_Date=Дата_DUE_DATE;
//						//проверим изменилась ли DUE_DATE
//						//)Если изменилась, то запишем строчку в историю проекта 
//						Если Due_Date_old<>ОбъектПроект.Due_Date И Due_Date_old<>Дата("00010101000000") Тогда
//							//запишем строчку в историю проекта
//							ОбъектПроект.ИсторияИзмененияПроекта=ОбъектПроект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+"CRM -> ""Due Date"" was updated. Old value: "+Due_Date_old+". New value: "+ОбъектПроект.Due_Date+Символы.ПС;
//							
//							НаборЗаписей = РегистрыСведений.OW_ИзменениеDueDateПроектаCRMДляРассылки.СоздатьНаборЗаписей();
//							НаборЗаписей.Отбор.Проект.Установить(ОбъектПроект.Ссылка);	
//							НаборЗаписей.Отбор.ID.Установить(ID);
//							Запись = НаборЗаписей.Добавить();
//							Запись.Проект      =  ОбъектПроект.Ссылка;
//							Запись.ID= ID;
//							Запись.Период	   =  ТекущаяДата();
//							Запись.Клиент     		 = ОбъектПроект.Партнер;
//							Запись.КодПроекта   =  ОбъектПроект.КодПроектаCRM;
//							Запись.DueDateПроектаCRM= ОбъектПроект.Due_Date;
//							Запись.ПредыдущаяDueDateПроектаCRM=Due_Date_old;										
//							НаборЗаписей.Записать(Ложь);
//						КонецЕсли;
//					КонецЕсли;	
//				КонецЕсли; //Если ТипЗнч(Дата_DUE_DATE)=Тип("Дата") И ЗначениеЗаполнено(Дата_DUE_DATE) Тогда
//			КонецЕсли;	//Если СтатусКод="DUE_DATE" Тогда
//		КонецЕсли; //Если ППОтбор.Количество()=0 Тогда
//		
//		ОбъектПроект.ДатаСинхронизацииТЧ_ИсторияПроектаИзCRM=ТекущаяДата();
//		ОбъектПроект.ИсторияПроектаИзCRM.Сортировать("Дата убыв");
//		//записываем объект
//		Попытка
//			ОбъектПроект.Записать();
//		Исключение
//			//Сообщить("Невозможно модифицировать задачу с кодом "+ОбъектПроект.КодПроектаCRM+"("+ОбъектПроект.Наименование+") для клиента "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки());
//			Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+ОбъектПроект.КодПроектаCRM+"("+ОбъектПроект.Наименование+") для клиента "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+ОбъектПроект.КодПроектаCRM+"("+ОбъектПроект.Наименование+") for client "+ОбъектПроект.Партнер+" "+ ОписаниеОшибки()));
//		КонецПопытки;
//		
//		oOraDynaset3.MoveNext();
//	КонецЦикла;
//	oOraDynaset3.Close();
//	
//	Попытка
//		OraDatabase.Close();
//	Исключение
//		Сообщить("Cannot close connection to Oracle " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
//	КонецПопытки;	
//	
//	OraDatabase=Неопределено;
//	OraSession=Неопределено;
//	
//КонецПроцедуры	
//
////изменим статусы
//Процедура ЗаписьИзмененияСтатусаПроектаCRM(ОбъектПроект) 
//	
//	Если ОбъектПроект.СтатусЭтапаCRM_Оригинальный<>Перечисления.СтатусыЭтапов.ПустаяСсылка() Тогда
//		
//		Запрос=Новый Запрос;
//		Запрос.Текст="ВЫБРАТЬ
//		|	ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.ОценочныйПроект
//		|ИЗ
//		|	РегистрСведений.ИзменениеСтатусаОценочногоПроектаCRM.СрезПоследних(, ) КАК ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних
//		|ГДЕ
//		|	ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.Статус = &Статус
//		|	И ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.ОценочныйПроект = &ОценочныйПроект
//		|	И ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.Период = &Период";
//		
//		
//		Запрос.УстановитьПараметр("Статус", ОбъектПроект.СтатусЭтапаCRM_Оригинальный);
//		Запрос.УстановитьПараметр("ОценочныйПроект", ОбъектПроект.Ссылка);
//		Запрос.УстановитьПараметр("Период", ОбъектПроект.ДатаИзмененияСтадии);
//		
//		Результат=Запрос.Выполнить().Выбрать();
//		
//		Если Не Результат.Следующий() Тогда
//			
//			//проверяем что в этот момент времени существует только 1 статус
//			
//			Запрос2=Новый Запрос;
//			Запрос2.Текст="ВЫБРАТЬ
//			|	ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.ОценочныйПроект
//			|ИЗ
//			|	РегистрСведений.ИзменениеСтатусаОценочногоПроектаCRM.СрезПоследних(, ) КАК ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних
//			|ГДЕ
//			|	ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.ОценочныйПроект = &ОценочныйПроект
//			|	И ИзменениеСтатусаОценочногоПроектаCRMСрезПоследних.Период = &Период";
//			
//			
//			Запрос2.УстановитьПараметр("ОценочныйПроект", ОбъектПроект.Ссылка);
//			Запрос2.УстановитьПараметр("Период", ОбъектПроект.ДатаИзмененияСтадии);
//			
//			
//			Результат2=Запрос2.Выполнить().Выбрать();
//			Если Не Результат2.Следующий() Тогда
//				
//				Регистр = РегистрыСведений.ИзменениеСтатусаОценочногоПроектаCRM.СоздатьНаборЗаписей();
//				Движение=Регистр.Добавить();
//				Движение.Период=ОбъектПроект.ДатаИзмененияСтадии;
//				Движение.Партнер =ОбъектПроект.Партнер;
//				Движение.ОценочныйПроект=ОбъектПроект.Ссылка;
//				Движение.Статус=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//				Регистр.Записать(Ложь);
//			Иначе
//				Регистр = РегистрыСведений.ИзменениеСтатусаОценочногоПроектаCRM.СоздатьНаборЗаписей();
//				Движение=Регистр.Добавить();
//				Движение.Период=ОбъектПроект.ДатаИзмененияСтадии+1;
//				Движение.Партнер =ОбъектПроект.Партнер;
//				Движение.ОценочныйПроект=ОбъектПроект.Ссылка;
//				Движение.Статус=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//				Регистр.Записать(Ложь);
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;	
//	
//КонецПроцедуры	
//
//Процедура ЗаписьИзмененияСтатусаПроектаВнедренияCRM(ОбъектПроект) 
//	
//	Если ОбъектПроект.СтатусЭтапаCRM_Оригинальный<>Перечисления.СтатусыЭтапов.ПустаяСсылка() Тогда
//		
//		Запрос=Новый Запрос;
//		Запрос.Текст="ВЫБРАТЬ
//		|	ИзменениеСтатусаПроектаВнедренияСрезПоследних.ПроектВнедрения
//		|ИЗ
//		|	РегистрСведений.ИзменениеСтатусаПроектаВнедренияCRM.СрезПоследних(, ) КАК ИзменениеСтатусаПроектаВнедренияСрезПоследних
//		|ГДЕ
//		|	ИзменениеСтатусаПроектаВнедренияСрезПоследних.Статус = &Статус
//		|	И ИзменениеСтатусаПроектаВнедренияСрезПоследних.ПроектВнедрения = &ПроектВнедрения
//		|	И ИзменениеСтатусаПроектаВнедренияСрезПоследних.Период = &Период";
//		
//		
//		Запрос.УстановитьПараметр("Статус", ОбъектПроект.СтатусЭтапаCRM_Оригинальный);
//		Запрос.УстановитьПараметр("ПроектВнедрения", ОбъектПроект.Ссылка);
//		Запрос.УстановитьПараметр("Период", ОбъектПроект.ДатаИзмененияСтадии);
//		
//		Результат=Запрос.Выполнить().Выбрать();
//		
//		Если Не Результат.Следующий() Тогда
//			
//			//проверяем что в этот момент времени существует только 1 статус
//			
//			Запрос2=Новый Запрос;
//			Запрос2.Текст="ВЫБРАТЬ
//			|	ИзменениеСтатусаПроектаВнедренияСрезПоследних.ПроектВнедрения
//			|ИЗ
//			|	РегистрСведений.ИзменениеСтатусаПроектаВнедренияCRM.СрезПоследних(, ) КАК ИзменениеСтатусаПроектаВнедренияСрезПоследних
//			|ГДЕ
//			|	ИзменениеСтатусаПроектаВнедренияСрезПоследних.ПроектВнедрения = &ПроектВнедрения
//			|	И ИзменениеСтатусаПроектаВнедренияСрезПоследних.Период = &Период";
//			
//			
//			Запрос2.УстановитьПараметр("ПроектВнедрения", ОбъектПроект.Ссылка);
//			Запрос2.УстановитьПараметр("Период", ОбъектПроект.ДатаИзмененияСтадии);
//			
//			
//			Результат2=Запрос2.Выполнить().Выбрать();
//			Если Не Результат2.Следующий() Тогда
//				
//				Регистр = РегистрыСведений.ИзменениеСтатусаПроектаВнедренияCRM.СоздатьНаборЗаписей();
//				Движение=Регистр.Добавить();
//				Движение.Период=ОбъектПроект.ДатаИзмененияСтадии;
//				Движение.Партнер =ОбъектПроект.Партнер;
//				Движение.ПроектВнедрения=ОбъектПроект.Ссылка;
//				Движение.Статус=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//				Регистр.Записать(Ложь);
//			Иначе
//				Регистр = РегистрыСведений.ИзменениеСтатусаПроектаВнедренияCRM.СоздатьНаборЗаписей();
//				Движение=Регистр.Добавить();
//				Движение.Период=ОбъектПроект.ДатаИзмененияСтадии+1;
//				Движение.Партнер =ОбъектПроект.Партнер;
//				Движение.ПроектВнедрения=ОбъектПроект.Ссылка;
//				Движение.Статус=ОбъектПроект.СтатусЭтапаCRM_Оригинальный;
//				Регистр.Записать(Ложь);
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;	
//	
//КонецПроцедуры	
//
//Функция ПреобразоватьКДате(ТекДата) Экспорт
//	
//	Если ТекДата=NULL Тогда
//		Возврат Дата(1,1,1);
//	КонецЕсли;
//	
//	Попытка
//		
//		Если ТипЗнч(ТекДата)<>Тип("Дата") И ЗначениеЗаполнено(ТекДата) Тогда
//			День  = Число(Лев(СокрЛП(ТекДата),2));
//			Месяц = Число(Сред(СокрЛП(ТекДата),4,2));
//			Год   = Число(Прав(СокрЛП(ТекДата),4));
//			
//			ТекДата = Дата(Год,Месяц,День); 
//		КонецЕсли;
//		
//	Исключение
//		Возврат Дата(1,1,1);
//	КонецПопытки;
//	
//	Если ТипЗнч(ТекДата)=Тип("Дата") И ЗначениеЗаполнено(ТекДата) Тогда
//		Если ТекДата>Дата("39990101000000") Тогда
//			Возврат Дата("39990101000000");
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	Возврат ТекДата;	
//	
//КонецФункции // ПреобразоватьКДате()
//
//Функция ПолучитьDue_Date(Due_Date_Строка)
//	Попытка
//		
//		День  = Число(Сред(СОКРЛП(Due_Date_Строка), 47, 2));
//		Месяц = Число(Сред(СОКРЛП(Due_Date_Строка), 44, 2));
//		Год   = Число(Сред(СОКРЛП(Due_Date_Строка), 39, 4));
//		
//		ТекДата = Дата(Год,Месяц,День);
//	Исключение
//		Возврат Дата(1,1,1);
//	КонецПопытки;
//	
//	Если ТипЗнч(ТекДата)=Тип("Дата") И ЗначениеЗаполнено(ТекДата) Тогда
//		Если ТекДата>Дата("39990101000000") Тогда
//			Возврат Дата("39990101000000");
//		КонецЕсли;	
//	КонецЕсли;
//	Возврат ТекДата;
//КонецФункции
//
//Процедура OW_УдалениеПомеченныхОбъектов() Экспорт
//	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
//	
//	Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъектыИзРегламентногоЗадания();
//	
//КонецПроцедуры
//
//Процедура ПриНачалеВыполненияРегламентногоЗадания() Экспорт
//	
//	//Если СтандартныеПодсистемыСервер.НеобходимоОбновлениеПараметровРаботыПрограммы() Тогда
//	//	ВызватьИсключение
//	//		НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением на новую версию.'");
//	//КонецЕсли;
//	//
//	//УстановитьПривилегированныйРежим(Истина);
//	//
//	//Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено()
//	//   И ПланыОбмена.ГлавныйУзел() = Неопределено
//	//   И ЗначениеЗаполнено(Константы.ГлавныйУзел.Получить()) Тогда
//	//	
//	//	ВызватьИсключение
//	//		НСтр("ru = 'Вход в программу временно невозможен до восстановления связи с главным узлом.'");
//	//КонецЕсли;
//	
//КонецПроцедуры
//
//Функция ПолучитьКонечныйПрофиль(Пользователь) Экспорт
//	СтрД = СтрДлина(Пользователь);
//	НайденнаяСтр = Найти(Пользователь,"@");
//	Адрес = Прав(Пользователь,СтрД-НайденнаяСтр);
//	
//	Профиль = Новый ИнтернетПочтовыйПрофиль;
//	//Профиль.Таймаут=0;
//	Профиль.АутентификацияSMTP=СпособSMTPАутентификации.БезАутентификации;
//	// SMTP сервер
//	Профиль.АдресСервераSMTP = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.СерверИсходящейПочтыSMTP;
//	
//	// Порт SMTP сервера
//	Профиль.ПортSMTP = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПортSMTP;
//	
//	// POP3 сервер
//	//Профиль.АдресСервераPOP3 = ПрофильПочты.СерверВходящейПочтыPOP3;
//	
//	// Порт POP3 сервера
//	//	Профиль.ПортPOP3 = ПрофильПочты.ПортPOP3;
//	
//	// Пароль к почтовому ящику
//	//	Профиль.Пароль = ПрофильПочты.Пароль;
//	
//	// Пароль пользователя для SMTP сервера
//	Профиль.ПарольSMTP = "";
//	
//	// Логин пользователя
//	Профиль.Пользователь = Пользователь;
//	
//	// Логин пользователя для SMTP сервера
//	Профиль.ПользовательSMTP = Пользователь;
//	
//	// Время ожидания выполнения операции в секундах
//	
//	Профиль.ВремяОжидания = 50; 
//	Возврат Профиль;
//КонецФункции
//
//Функция ПолучитьСписокФайлов(ТекСсылка) Экспорт
//	ЗапросФайлы = Новый Запрос;
//	ЗапросФайлы.Текст = "ВЫБРАТЬ
//	                    |	Файлы.Ссылка КАК Файл,
//	                    |	Файлы.Наименование КАК Имя,
//	                    |	ПрисоединенныеФайлы.ХранимыйФайл,
//	                    |	Файлы.Расширение
//	                    |ИЗ
//	                    |	Справочник.ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы КАК Файлы
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	                    |		ПО (ПрисоединенныеФайлы.ПрисоединенныйФайл = Файлы.Ссылка)
//	                    |ГДЕ
//	                    |	Файлы.ВладелецФайла = &ВладелецФайла
//	                    |	И НЕ Файлы.ВыгруженJIRA
//	                    |	И НЕ ПрисоединенныеФайлы.ВыгруженВLFH";
//	ЗапросФайлы.УстановитьПараметр("ВладелецФайла",ТекСсылка);
//	Возврат ЗапросФайлы.Выполнить().Выгрузить();  		
//КонецФункции
//
//Функция ПолучитьСписокФайлов_Пусто(ТекСсылка) Экспорт
//	ЗапросФайлы = Новый Запрос;
//	ЗапросФайлы.Текст = "ВЫБРАТЬ
//	                    |	Файлы.Ссылка КАК Файл,
//	                    |	Файлы.Наименование КАК Имя,
//	                    |	ПрисоединенныеФайлы.ХранимыйФайл,
//	                    |	Файлы.Расширение
//	                    |ИЗ
//	                    |	Справочник.ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы КАК Файлы
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	                    |		ПО (ПрисоединенныеФайлы.ПрисоединенныйФайл = Файлы.Ссылка)
//	                    |ГДЕ
//	                    |	Файлы.ВладелецФайла = &ВладелецФайла
//	                    |	И НЕ Файлы.ВыгруженJIRA
//	                    |	И НЕ ПрисоединенныеФайлы.ВыгруженВLFH";
//	ЗапросФайлы.УстановитьПараметр("ВладелецФайла",ТекСсылка);
//	Возврат ЗапросФайлы.Выполнить().Пустой();  		
//КонецФункции
//
//Функция ОтсылкаПисьма(Пользователь,ТекСсылка,ТемаПисьма,ТелоПисьма,КураторEmail=Неопределено,ТекОтправкаФайлов,Получатель=Неопределено,Менеджер2=Неопределено,Исполнитель=Неопределено) Экспорт
//	Почта = Новый ИнтернетПочта;
//	КонечныйПрофильПочты = ПолучитьКонечныйПрофиль(Пользователь);
//	Попытка
//		Почта.Подключиться(КонечныйПрофильПочты);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	
//	Сообщение = Новый ИнтернетПочтовоеСообщение;
//	Если ТекОтправкаФайлов Тогда
//		СписокВложений = ПолучитьСписокФайлов(ТекСсылка);
//		Для Каждого СтрВложение из СписокВложений Цикл
//			ИмяФайла = СтрВложение.Имя;
//			Сообщение.Вложения.Добавить(СтрВложение.ХранимыйФайл.Получить(),""+СтрЗаменить(ИмяФайла,СокрЛП(СтрВложение.Расширение),"")+"."+СокрЛП(СтрВложение.Расширение));
//		КонецЦикла;
//	КонецЕсли;
//	//
//	Сообщение.Отправитель = Пользователь;
//	Сообщение.ИмяОтправителя = Пользователь;
//	
//	////***
//	ПочтовыеАдреса = Сообщение.Получатели;
//	
//	Если Получатель = Неопределено или ТипЗнч(ТекСсылка) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") тогда
//		ПочтовыйАдрес = ПочтовыеАдреса.Добавить();
//		ПочтовыйАдрес.Адрес = Константы.EmailАдресJira_ОценкаПроектов.Получить();
//	КонецЕсли;
//	
//	Если КураторEmail <> Неопределено Тогда
//		ПочтовыеАдресаКопии = Сообщение.Получатели;
//		ПочтовыйАдресКопии = ПочтовыеАдресаКопии.Добавить();
//		ПочтовыйАдресКопии.Адрес = КураторEmail;
//		//**********
//		//	ПочтовыеАдресаКопии_2 = Сообщение.Копии;
//		//	ПочтовыеАдресаКопии_2 = ПочтовыеАдресаКопии.Добавить();
//		//	ПочтовыеАдресаКопии_2.Адрес = КураторEmail;
//	КонецЕсли; 
//	
//	Если Менеджер2 <> Неопределено Тогда
//		ПочтовыеАдресаКопии = Сообщение.Получатели;
//		ПочтовыйАдресКопии = ПочтовыеАдресаКопии.Добавить();
//		ПочтовыйАдресКопии.Адрес = Менеджер2;
//		//**********
//		//	ПочтовыеАдресаКопии_2 = Сообщение.Копии;
//		//	ПочтовыеАдресаКопии_2 = ПочтовыеАдресаКопии.Добавить();
//		//	ПочтовыеАдресаКопии_2.Адрес = Менеджер2;
//	КонецЕсли; 
//	
//	Если Исполнитель <> Неопределено Тогда
//		ПочтовыеАдресаКопии = Сообщение.Получатели;
//		ПочтовыйАдресКопии = ПочтовыеАдресаКопии.Добавить();
//		ПочтовыйАдресКопии.Адрес = Исполнитель;
//		//**********
//		//	ПочтовыеАдресаКопии_2 = Сообщение.Копии;
//		//	ПочтовыеАдресаКопии_2 = ПочтовыеАдресаКопии.Добавить();
//		//	ПочтовыеАдресаКопии_2.Адрес = Исполнитель;
//	КонецЕсли; 
//	
//	Сообщение.Тема =ТемаПисьма; 
//	//
//	ИнтернетТекстПочтовогоСообщения = Сообщение.Тексты.Добавить();
//	ИнтернетТекстПочтовогоСообщения.Текст = ТелоПисьма;
//	ИнтернетТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
//	ТекПроверка = Ложь;
//	Попытка
//		// Пытаемся послать письмо
//		ТекПроверка = Истина;
//		Почта.Послать(Сообщение);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	Если ТекПроверка Тогда
//		Если СписокВложений<>Неопределено тогда
//			Для Каждого СтрВложение из СписокВложений Цикл
//				ТекФайл = СтрВложение.Файл.ПолучитьОбъект();
//				Попытка
//					ТекФайл.ОтправленВ_JIRA = истина;
//				Исключение
//					ТекФайл.ВыгруженJIRA = истина;
//				КонецПопытки;	
//				ТекФайл.Записать();
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	//// отключение
//	Почта.Отключиться();  
//	Возврат Истина;
//КонецФункции
//
//
//Функция ОтсылкаПисьмаHTML(Пользователь,ТекСсылка,ТемаПисьма,ТелоПисьма,КураторEmail=Неопределено,ТекОтправкаФайлов,Получатель=Неопределено) Экспорт
//	Почта = Новый ИнтернетПочта;
//	КонечныйПрофильПочты = ПолучитьКонечныйПрофиль(Пользователь);
//	Попытка
//		Почта.Подключиться(КонечныйПрофильПочты);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	
//	Сообщение = Новый ИнтернетПочтовоеСообщение;
//	Если ТекОтправкаФайлов Тогда
//		СписокВложений = ПолучитьСписокФайлов(ТекСсылка);
//		Для Каждого СтрВложение из СписокВложений Цикл
//			ИмяФайла = СтрВложение.Имя;
//			Сообщение.Вложения.Добавить(СтрВложение.ХранимыйФайл.Получить(),""+СтрЗаменить(ИмяФайла,СокрЛП(СтрВложение.Расширение),"")+"."+СокрЛП(СтрВложение.Расширение));
//		КонецЦикла;
//	КонецЕсли;
//	//
//	//Сообщение.Отправитель = Пользователь;
//	Сообщение.Отправитель.Адрес = Пользователь;
//	//Сообщение.Отправитель.Пользователь = Пользователь;
//	Сообщение.Отправитель.ОтображаемоеИмя = "Рассылка по статусам задач из 1С";
//	//Сообщение..ИмяОтправителя = Пользователь;
//	
//	////***
//	ПочтовыеАдреса = Сообщение.Получатели;
//	ПочтовыйАдрес = ПочтовыеАдреса.Добавить();
//	ПочтовыйАдрес.Адрес = Получатель;
//	
//	Сообщение.Тема =ТемаПисьма; 
//	//
//	ИнтернетТекстПочтовогоСообщения = Сообщение.Тексты.Добавить();
//	ИнтернетТекстПочтовогоСообщения.Текст = ТелоПисьма;
//	ИнтернетТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
//	ТекПроверка = Ложь;
//	Попытка
//		// Пытаемся послать письмо
//		ТекПроверка = Истина;
//		Почта.Послать(Сообщение);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	//// отключение
//	Почта.Отключиться();  
//	Возврат Истина;
//КонецФункции
//
////***
////Пользователь - Email пользователя отпровителя если пуст помжо указать стандартный 1C_notification@openwaygroup.com
////Получатель - email проекта из справочника JIRA проекты 
////НомерЗадачи - номер задачи в JIRA, например BA-122, это необходимо чтобы привязать файлы к тикету
//
//Функция ОтсылкаПисьмаHTML_ДляПроектовJIRA(Пользователь,ТекСсылка,СписокФайлов,Получатель,НомерЗадачи) Экспорт
//	Почта = Новый ИнтернетПочта;
//	КонечныйПрофильПочты = ПолучитьКонечныйПрофиль(Пользователь);
//	Попытка
//		Почта.Подключиться(КонечныйПрофильПочты);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	
//	Сообщение = Новый ИнтернетПочтовоеСообщение;
//	ТаблицаВложений = ПолучитьТаблицуВложенийДляСпискаФайловПоСоглашению(СписокФайлов);
//	Для Каждого СтрВложение из ТаблицаВложений Цикл
//		ИмяФайла = СтрВложение.Имя;
//		Сообщение.Вложения.Добавить(СтрВложение.ХранимыйФайл.Получить(),""+СтрЗаменить(ИмяФайла,СокрЛП(СтрВложение.Расширение),"")+"."+СокрЛП(СтрВложение.Расширение));
//	КонецЦикла;
//	//
//	Сообщение.Отправитель.Адрес = Пользователь;
//	//Сообщение.Отправитель.Пользователь = Пользователь;
//	Сообщение.Отправитель.ОтображаемоеИмя = "1С";
//	
//	ПочтовыеАдреса = Сообщение.Получатели;
//	ПочтовыйАдрес = ПочтовыеАдреса.Добавить();
//	ПочтовыйАдрес.Адрес = Получатель;
//	
//	Сообщение.Тема ="Task: "+НомерЗадачи; 
//	//
//	ИнтернетТекстПочтовогоСообщения = Сообщение.Тексты.Добавить();
//	ИнтернетТекстПочтовогоСообщения.Текст = "Files have been attached.";
//	ИнтернетТекстПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
//	ТекПроверка = Ложь;
//	Попытка
//		// Пытаемся послать письмо
//		ТекПроверка = Истина;
//		Почта.Послать(Сообщение);
//	Исключение
//		Сообщить(ОписаниеОшибки()); 
//		Возврат Ложь;
//	КонецПопытки;
//	//// отключение
//	Почта.Отключиться();  
//	Возврат Истина;
//КонецФункции
//
//
//
//Процедура OW_ОбновитьИнформациюПоПроекту() Экспорт
//	//в счетах
//	ЗапросСчета=Новый Запрос;
//	ЗапросСчета.Текст= "ВЫБРАТЬ
//	|	СчетНаОплатуКлиентуПроектыCRM.Ссылка КАК Ссылка,
//	|	СчетНаОплатуКлиентуПроектыCRM.КодПроектаCRM КАК КодПроектаCRM
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту.ПроектыCRM КАК СчетНаОплатуКлиентуПроектыCRM
//	|ГДЕ
//	|	СчетНаОплатуКлиентуПроектыCRM.Ссылка.ПометкаУдаления = ЛОЖЬ
//	|	И СчетНаОплатуКлиентуПроектыCRM.Ссылка.Партнер.Рассылка = ИСТИНА";
//	
//	ЗапросСчета.УстановитьПараметр("ЗадачаПроектаПустаяСсылка", Справочники.ЗадачиПроектов.ПустаяСсылка());				   
//	Выборка = ЗапросСчета.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		СчетСсылка=Документы.СчетНаОплатуКлиенту.ПустаяСсылка();
//		СчетСсылка=Выборка.Ссылка;
//		Если СчетСсылка<>Документы.СчетНаОплатуКлиенту.ПустаяСсылка() Тогда
//			СчетОбъект=СчетСсылка.ПолучитьОбъект();	 
//			
//			КодПроектаCRM="";
//			КодПроектаCRM=Выборка.КодПроектаCRM;
//			Если КодПроектаCRM<>"" Тогда
//				ПроектCRM=Справочники.ЗадачиПроектов.ПустаяСсылка();
//				ПроектCRM=Справочники.ЗадачиПроектов.НайтиПоРеквизиту("КодПроектаCRM", КодПроектаCRM);
//				Если ПроектCRM<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда 
//					Отбор = Новый Структура();
//					Отбор.Вставить("КодПроектаCRM",КодПроектаCRM);
//					ППОтбор=СчетОбъект.ПроектыCRM.НайтиСтроки(Отбор);
//					Если ППОтбор.Количество()>0 Тогда
//						ПП=ППОтбор[0];
//						ПП.ЗадачаПроекта=ПроектCRM;
//						ПП.ОписаниеПроекта=ПроектCRM.ПолноеНаименование;
//						ПП.СуммаИзПроекта=ПроектCRM.СуммаБезНалогов;
//						ПП.ВалютаИзПроекта=ПроектCRM.Валюта;
//						ПроцентПлатежаПоСчету=0;
//						ПроцентПлатежаПоСчету=СчетОбъект.ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");
//						//	Если ПП.Выставлено=0 Тогда
//						ПП.Выставлено=ПроектCRM.СуммаБезНалогов*ПроцентПлатежаПоСчету/100;
//						Если СчетОбъект.СтатусСчета=Перечисления.СтатусыСчета.СчетОплачен Тогда
//							ПП.Оплачено=ПП.Выставлено;
//						КонецЕсли;	
//						//	КонецЕсли;
//						
//						Попытка
//							СчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
//							Сообщить(НСтр("ru = 'Счет № '; en = 'Invoice '")+СчетОбъект.Номер+ НСтр("ru = ' от '; en = ' from '")+ СчетОбъект.Дата+ НСтр("ru = ' успешно изменен'; en = ' successfully updated'"));
//						Исключение
//							Сообщить(НСтр("ru = 'Не удалось записать счет клиента № '; en = 'Failed to save Invoice '")+СчетОбъект.Номер+ НСтр("ru = ' от '; en = ' from '")+ СчетОбъект.Дата);
//						КонецПопытки      
//					КонецЕсли;	
//					
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//КонецПроцедуры
//
//Процедура OW_ОбновитьИнформациюПоПроекту_1() Экспорт
//	//в счетах
//	ЗапросСчета=Новый Запрос;
//	ЗапросСчета.Текст= "ВЫБРАТЬ
//	|	СчетНаОплатуКлиентуПроектыCRM.Ссылка КАК Ссылка,
//	|	СчетНаОплатуКлиентуПроектыCRM.КодПроектаCRM КАК КодПроектаCRM
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту.ПроектыCRM КАК СчетНаОплатуКлиентуПроектыCRM
//	|ГДЕ
//	|	СчетНаОплатуКлиентуПроектыCRM.Ссылка.ПометкаУдаления = ЛОЖЬ
//	|	И СчетНаОплатуКлиентуПроектыCRM.ЗадачаПроекта = &ЗадачаПроектаПустаяСсылка
//	|	И СчетНаОплатуКлиентуПроектыCRM.Ссылка.Партнер.Рассылка = ИСТИНА";
//	
//	ЗапросСчета.УстановитьПараметр("ЗадачаПроектаПустаяСсылка", Справочники.ЗадачиПроектов.ПустаяСсылка());				   
//	Выборка = ЗапросСчета.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		СчетСсылка=Документы.СчетНаОплатуКлиенту.ПустаяСсылка();
//		СчетСсылка=Выборка.Ссылка;
//		Если СчетСсылка<>Документы.СчетНаОплатуКлиенту.ПустаяСсылка() Тогда
//			СчетОбъект=СчетСсылка.ПолучитьОбъект();	 
//			
//			КодПроектаCRM="";
//			КодПроектаCRM=Выборка.КодПроектаCRM;
//			Если КодПроектаCRM<>"" Тогда
//				ПроектCRM=Справочники.ЗадачиПроектов.ПустаяСсылка();
//				ПроектCRM=Справочники.ЗадачиПроектов.НайтиПоРеквизиту("КодПроектаCRM", КодПроектаCRM);
//				Если ПроектCRM<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда 
//					Отбор = Новый Структура();
//					Отбор.Вставить("КодПроектаCRM",КодПроектаCRM);
//					ППОтбор=СчетОбъект.ПроектыCRM.НайтиСтроки(Отбор);
//					Если ППОтбор.Количество()>0 Тогда
//						ПП=ППОтбор[0];
//						ПП.ЗадачаПроекта=ПроектCRM;
//						ПП.ОписаниеПроекта=ПроектCRM.ПолноеНаименование;
//						ПП.СуммаИзПроекта=ПроектCRM.СуммаБезНалогов;
//						ПП.ВалютаИзПроекта=ПроектCRM.Валюта;
//						Если ПП.Выставлено=0 Тогда
//							ПП.Выставлено=ПроектCRM.СуммаБезНалогов;
//						КонецЕсли;
//						
//						Попытка
//							СчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
//							Сообщить(НСтр("ru = 'Счет № '; en = 'Invoice '")+СчетОбъект.Номер+ НСтр("ru = ' от '; en = ' from '")+ СчетОбъект.Дата+ НСтр("ru = ' успешно изменен'; en = ' successfully updated'"));
//						Исключение
//							Сообщить(НСтр("ru = 'Не удалось записать счет клиента № '; en = 'Failed to save Invoice '")+СчетОбъект.Номер+ НСтр("ru = ' от '; en = ' from '")+ СчетОбъект.Дата);
//						КонецПопытки
//					КонецЕсли;	
//					
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//КонецПроцедуры
//
//Процедура OW_ПолучитьВремя_CRM() Экспорт
//	//ПолучитьВремя_CRM(); Закомментировала т.к. теперь новый механизм 2017/07/18
//КонецПроцедуры	
//
//Процедура ПолучитьВремя_CRM()
//	//Закомментировала т.к. теперь новый механизм 2017/07/18
//	//
//	//Юзер = "user1c";
//	//Пароль = "user1c";
//	//Подключились=Истина;
//	//Попытка 
//	//	OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession"); 
//	//	OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//	//Исключение 
//	//	OraDatabase=Неопределено;
//	//	OraSession=Неопределено;
//	//	
//	//	Подключились=Ложь;
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Получить время из CRM'"), 
//	//	//УровеньЖурналаРегистрации.Информация,,,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	
//	//	//запишем в журнал регистрации
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Получить время из CRM'"), 
//	//	//УровеньЖурналаРегистрации.Информация,,,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	
//	//	//сформируем письмо
//	//	ТекстПисьма = "Ошибка при выполнении фонового задания ""Получить время из CRM"":"+Символы.ПС+Символы.ПС; 
//	//	ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//	//	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Получить время из CRM"" - %1'"), Метаданные.КраткаяИнформация);
//	//	
//	//	//отправим письмо на первый адрес
//	//	ПочтовыйАдресПолучателя="akurbatova@openwaygroup.com";
//	//	ПараметрыПисьма = Новый Структура;
//	//	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//	//
//	//	Попытка 
//	//		РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//		РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	Исключение
//	//		ЗаписьЖурналаРегистрации("Фоновое задание: ""Получить время из CRM"". Уведомление об ошибках при подключении к CRM", 
//	//			УровеньЖурналаРегистрации.Ошибка,,,
//	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//		   		"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//	//		   		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	КонецПопытки;
//	//			
//	//	//отправим письмо на второй адрес
//	//	ПочтовыйАдресПолучателя="pbodnar@openwaygroup.com";
//	//	ПараметрыПисьма = Новый Структура;
//	//	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//	//
//	//	Попытка 
//	//		РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//		РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	Исключение
//	//		ЗаписьЖурналаРегистрации("Фоновое задание: ""Получить время из CRM"". Уведомление об ошибках при подключении к CRM", 
//	//			УровеньЖурналаРегистрации.Ошибка,,,
//	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//		   		"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//	//		   		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	КонецПопытки;
//	
//	////	Сообщить(OraSession.LastServerErrText);
//	//КонецПопытки; 
//	////Если OraSession.LastServerErr <> 0 Тогда
//	//// 	Возврат
//	////КонецЕсли; 
//	//
//	//Если Подключились=Ложь Тогда
//	// 	Возврат
//	//КонецЕсли; 
//	
//	//ЗапросГрейда=Новый Запрос;
//	//ЗапросГрейда.Текст= "ВЫБРАТЬ
//	//                    |	Грейд.ЗначениеГрейда КАК GradeAmount,
//	//                    |	Грейд.ГрейдСотрудника КАК Grade,
//	//                    |	Грейд.ПозицияСотрудника КАК EmployeePosition,
//	//                    |	Грейд.ФункцииСотрудника КАК EmployeeFunction,
//	//                    |	Грейд.Сотрудник,
//	//                    |	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//                    |	Грейд.Период КАК GradeDate
//	//                    |ИЗ
//	//                    |	(ВЫБРАТЬ
//	//                    |		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник КАК Сотрудник,
//	//                    |		OW_СоответствиеПозицииИГрейдаСрезПоследних.ЗначениеГрейда КАК ЗначениеГрейда,
//	//                    |		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник.СсылкаНаКонтактноеЛицоИзCRM КАК СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//                    |		OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника КАК ГрейдСотрудника,
//	//                    |		OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника КАК ПозицияСотрудника,
//	//                    |		OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника КАК ФункцииСотрудника,
//	//                    |		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Период КАК Период
//	//                    |	ИЗ
//	//                    |		РегистрСведений.OW_СоответствиеСотрудникаИГрейда.СрезПоследних КАК OW_СоответствиеСотрудникаИГрейдаСрезПоследних
//	//                    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.OW_СоответствиеПозицииИГрейда.СрезПоследних КАК OW_СоответствиеПозицииИГрейдаСрезПоследних
//	//                    |			ПО OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ПозицияСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника
//	//                    |				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ФункцииСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника
//	//                    |				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ГрейдСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника) КАК Грейд
//	//                    |ГДЕ
//	//                    |	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM = &СотрудникСсылкаНаКонтактноеЛицоИзCRM
//	//                    |
//	//                    |СГРУППИРОВАТЬ ПО
//	//                    |	Грейд.ЗначениеГрейда,
//	//                    |	Грейд.ГрейдСотрудника,
//	//                    |	Грейд.ПозицияСотрудника,
//	//                    |	Грейд.ФункцииСотрудника,
//	//                    |	Грейд.Сотрудник,
//	//                    |	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//                    |	Грейд.Период";
//	
//	//ДлинаСуток=86400; //длина суток в секундах
//	////дата получения инфы из CRM
//	//ДатаПолученияВремениИзCRM = Константы.ДатаПолученияВремениИзCRM.СоздатьМенеджерЗначения();
//	//ДатаПолученияВремениИзCRM.Прочитать();
//	//ПромежуточнаяДата=ДатаПолученияВремениИзCRM.Значение;
//	////запишем текущую дату
//	//ДатаПолученияВремениИзCRM.Значение = ТекущаяДата();
//	//ДатаПолученияВремениИзCRM.Записать();
//	//
//	//РазностьДатДляЗапроса=(ТекущаяДата()-ПромежуточнаяДата)/86400;
//	//КоэффициентУмноженияДлиныСуток=1;
//	//Если РазностьДатДляЗапроса>1 Тогда
//	//	КоэффициентУмноженияДлиныСуток=Окр(РазностьДатДляЗапроса);
//	//КонецЕсли;	
//	//
//	//ДатаДляВыборки="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	
//	//Таблица="CRM.CRM_PROJECT";
//	//
//	////переберем в цикле все проекты, у которых нет кода CRM
//	//ЗапросВнедрение=Новый Запрос;
//	//ЗапросВнедрение.Текст= "ВЫБРАТЬ
//	//                       |	ЗадачиПроектов.Ссылка,
//	//                       |	ЗадачиПроектов.Партнер,
//	//                       |	ЗадачиПроектов.КодПроектаCRM,
//	//                       |	ЗадачиПроектов.Main_Project_ID,
//	//                       |	ЗадачиПроектов.Наименование,
//	//                       |	ЗадачиПроектов.Amnd_prev_ПроектаCRM
//	//                       |ИЗ
//	//                       |	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	//                       |ГДЕ
//	//                       |	ЗадачиПроектов.КодПроектаCRM <> """"
//	//                       |	И ЗадачиПроектов.Партнер.Обмен_с_CRM = ИСТИНА
//	//                       |	И ЗадачиПроектов.ПометкаУдаления = ЛОЖЬ";
//	//					   				   
//	//Выборка = ЗапросВнедрение.Выполнить().Выбрать();
//	//Пока Выборка.Следующий() Цикл
//	//	КодПроектаCRM="";
//	//	Если Выборка.КодПроектаCRM="" Тогда
//	//		Продолжить;
//	//	КонецЕсли;	
//	//    КодПроектаCRM="'"+Выборка.КодПроектаCRM+"'";
//	//	Amnd_prev_ПроектаCRM="";
//	//    Если Выборка.Amnd_prev_ПроектаCRM="" Тогда
//	//		Продолжить;
//	//	КонецЕсли;
//	//    Amnd_prev_ПроектаCRM="'"+Выборка.Amnd_prev_ПроектаCRM+"'";
//	
//	//	Сообщить(Выборка.Партнер.Наименование + ":"+Выборка.Ссылка);
//	//	ОбъектПроект=Выборка.Ссылка.ПолучитьОбъект();
//	//			
//	//	ЗапросЧасть1="select
//	//	|act.id Action_ID,
//	//	|act.ACTION_DETAILS Action_Details,
//	//	|act.ACTION_USER Action_User_ID,
//	//	|act.used_time/8 Posted_Time,
//	//	|act.used_time Posted_Hour,
//	//	|act.action_date Action_Date,
//	//	|act.amnd_date Amnd_Date,
//	//	|crm.XWCRM_PROJECT('PROJECT_QUEUE', p.PROJECT_QUEUE) Project_Queue,
//	//	|cp.name Action_Name,
//	//	|crm.XWCRM_PROJECT('CODE', p.CODE) Project_Code, 
//	//	|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//	//	|cp.IS_Active IS_Active,
//	//	|cp.Details Details,
//	//	|cp.Result_Details Result_Details,
//	//	|cp.id Task_Name_id,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', cp.id) Task_Name,
//	//	|cp.crm_project__oid  Milestone_Name_id,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', cp.crm_project__oid) Milestone_Name,
//	//	|'T' Type,
//	//	|act.Amnd_State Amnd_State,
//	//	|act.Amnd_Officer Amnd_Officer_ID,
//	//	|act.Amnd_Prev Amnd_Prev_ID,
//	//	|act.CRM_Project__oid CRM_Project__oid,
//	//	|act.CRM_Issue__oid CRM_Issue__oid,
//	//	|act.Action_Status Action_Status,
//	//	|act.PCNT_Completed PCNT_Completed,
//	//	|to_char('') Issue_IDT,
//	//	|to_number('') Issue_ID,
//	//	|to_char('') Issue_Main_IDT,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_Input_Date,
//	//	|to_number('') Issue_Project,
//	//	|to_number('') Issue_Help_Desk_Queue,
//	//	|to_char('') Issue_Amnd_State,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_Amnd_Date,
//	//	|to_number('') Issue_Amnd_Officer_ID,
//	//	|to_number('') Issue_Amnd_Prev_ID,
//	//	|to_number('') Issue_CRM_Issue__oid,
//	//	|to_number('') Issue_CRM_Issue__ID,
//	//	|to_number('') Issue_Original_Issue,
//	//	|to_number('') Issue_Help_Desk_Officer_ID,
//	//	|to_number('') Issue_Delivery_Type,
//	//	|to_char('') Issue_IS_Active,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_Start_Date,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_End_Date,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_Due_Date,
//	//	|to_date('','yyyy.mm.dd HH24:mi:ss') Issue_Estim_Start_Date
//	//	|from crm.crm_action_log act, crm.crm_project cp, crm.crm_project p
//	//	|where act.used_time > 0
//	//	|	and act.amnd_state = 'A' 
//	//	|	and cp.amnd_state = 'A'  and p.amnd_state = 'A' 
//	//	//|	and  crm.opt_reports.inv_level_total(action_user, action_date) is not null
//	//	|	and act.crm_project__oid = cp.id 
//	//	|	and cp.main_project = p.id
//	//	//|	and (p.text_1 not in ('IN', 'SC', 'MG', 'OWS', 'ST', 'AC', 'CE') or p.text_1 is null)
//	//	|	and p.main_project = p.id
//	//	|	and p.is_history = 'N' 
//	//	|  	and act.amnd_date>";
//	//	
//	//	ЗапросЧасть2=ЗапросЧасть1+ДатаДляВыборки+"";
//	//	ЗапросЧасть3=" and p.amnd_prev=";
//	//	ЗапросЧасть4=ЗапросЧасть2+ЗапросЧасть3+Amnd_prev_ПроектаCRM;
//	//	
//	//	ЗапросЧасть5=" union all
//	//	|select
//	//	|act.id Action_ID,
//	//	|act.ACTION_DETAILS Action_Details,
//	//	|act.ACTION_USER Action_User_ID,
//	//	|(nvl(act.used_time, ci.used_time))/8 Posted_Time,
//	//	|(nvl(act.used_time, ci.used_time))  Posted_Hour,
//	//	|act.action_date Action_Date,
//	//	|act.amnd_date Amnd_Date,
//	//	|crm.XWCRM_PROJECT('PROJECT_QUEUE', p.PROJECT_QUEUE) Project_Queue,
//	//	|ci.name Action_Name,
//	//	|crm.XWCRM_PROJECT('CODE', p.CODE) Project_Code, 
//	//	|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//	//	|ci.IS_Active IS_Active,
//	//	|ci.Details Details,
//	//	|ci.Result_Details Result_Details,
//	//	|ci.product Task_Name_id,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', ci.product) Task_Name,
//	//	|(select m.crm_project__oid from crm.crm_project m where amnd_state='A' and is_history='N' and id=CI.PRODUCT) Milestone_Name_id,
//	//	|(select crm.XWCRM_PROJECT('CRM_PROJECT__OID', m.crm_project__oid) from crm.crm_project m where amnd_state='A' and is_history='N' and id=CI.PRODUCT) Milestone_Name,
//	//	|'I' Type,
//	//	|act.Amnd_State Amnd_State,
//	//	|act.Amnd_Officer Amnd_Officer_ID,
//	//	|act.Amnd_Prev Amnd_Prev_ID,
//	//	|act.CRM_Project__oid CRM_Project__oid,
//	//	|act.CRM_Issue__oid CRM_Issue__oid,
//	//	|act.Action_Status Action_Status,
//	//	|act.PCNT_Completed PCNT_Completed,
//	//	|ci.Issue_IDT Issue_IDT,
//	//	|ci.ID Issue_ID,
//	//	|ci.Main_IDT Issue_Main_IDT,
//	//	|ci.Input_Date Issue_Input_Date,
//	//	|ci.Project Issue_Project,
//	//	|ci.Help_Desk_Queue Issue_Help_Desk_Queue,
//	//	|ci.Amnd_State Issue_Amnd_State,
//	//	|ci.Amnd_Date Issue_Amnd_Date,
//	//	|ci.Amnd_Officer Issue_Amnd_Officer_ID,
//	//	|ci.Amnd_Prev Issue_Amnd_Prev_ID,
//	//	|ci.CRM_Issue__oid Issue_CRM_Issue__oid,
//	//	|ci.CRM_Issue__ID Issue_CRM_Issue__ID,
//	//	|ci.Original_Issue Issue_Original_Issue,
//	//	|ci.Help_Desk_Officer Issue_Help_Desk_Officer_ID,
//	//	|ci.Delivery_Type Issue_Delivery_Type,
//	//	|ci.IS_Active Issue_IS_Active,
//	//	|ci.Start_Date Issue_Start_Date,
//	//	|ci.End_Date Issue_End_Date,
//	//	|ci.Due_Date Issue_Due_Date,
//	//	|ci.Estim_Start_Date Issue_Estim_Start_Date
//	//	|from crm.crm_action_log act,  crm.crm_issue ci, crm.crm_project p
//	//	|where act.used_time > 0
//	//	| 	and act.amnd_state = 'A'
//	//	//| 	and crm.opt_reports.inv_level_total(action_user, action_date) is not null
//	//	|   and act.crm_project__oid is null 
//	//	|   and nvl(act.used_time, ci.used_time) > 0 
//	//	|   and act.crm_issue__oid  = ci.id
//	//	|   and ci.project = p.id
//	//	|   and p.amnd_state = 'A'
//	//	//|	and (p.text_1 not in ('IN', 'SC', 'MG', 'OWS', 'ST', 'AC', 'CE') or p.text_1 is null)
//	//	|	and p.main_project = p.id
//	//	|	and p.is_history = 'N' 
//	//	|  	and act.amnd_date>";
//	//	
//	//	ЗапросЧасть6=ЗапросЧасть4+ЗапросЧасть5+ДатаДляВыборки+"";
//	//	ЗапросЧасть7=" and p.amnd_prev=";
//	//	
//	//	Запрос=ЗапросЧасть6+ЗапросЧасть7+Amnd_prev_ПроектаCRM+" order by Action_Date";
//	//	
//	//	oOraDynaset = OraDatabase.CreateDynaset(Запрос,0); 
//	//	
//	//	Пока oOraDynaset.EOF = 0 Цикл
//	//		
//	//		//в цикле перебираем записи	
//	//		Action_ID=oOraDynaset.Fields("Action_ID").Value;
//	//		Action_Details=oOraDynaset.Fields("Action_Details").Value;
//	//		Action_User_ID=oOraDynaset.Fields("Action_User_ID").Value;
//	//		Posted_Time=oOraDynaset.Fields("Posted_Time").Value;
//	//		Posted_Hour=oOraDynaset.Fields("Posted_Hour").Value;
//	//		Action_Date=ПреобразоватьКДате(oOraDynaset.Fields("Action_Date").Value);
//	//		Action_Mounth=НачалоМесяца(Action_Date);
//	//		Task_Name_id=oOraDynaset.Fields("Task_Name_id").Value;
//	//		Type=oOraDynaset.Fields("Type").Value;
//	//		Milestone_Name_id=oOraDynaset.Fields("Milestone_Name_id").Value;
//	//		Milestone_Name=oOraDynaset.Fields("Milestone_Name").Value;
//	//		Task_Name=oOraDynaset.Fields("Task_Name").Value;
//	//		
//	//		Amnd_Date=ПреобразоватьКДате(oOraDynaset.Fields("Amnd_Date").Value);
//	//		
//	//		//---
//	//		Amnd_State=oOraDynaset.Fields("Amnd_State").Value;
//	//		Amnd_Officer_ID=oOraDynaset.Fields("Amnd_Officer_ID").Value;
//	//		Amnd_Prev_ID=oOraDynaset.Fields("Amnd_Prev_ID").Value;
//	//		Action_CRM_Project__oid=oOraDynaset.Fields("CRM_Project__oid").Value;
//	//		Action_CRM_Issue__oid=oOraDynaset.Fields("CRM_Issue__oid").Value;
//	//		Action_Status=oOraDynaset.Fields("Action_Status").Value;
//	//		Action_PCNT_Completed=oOraDynaset.Fields("PCNT_Completed").Value;
//	//		
//	//		Issue_IDT=oOraDynaset.Fields("Issue_IDT").Value;
//	//		Issue_ID=oOraDynaset.Fields("Issue_ID").Value;
//	//		Issue_Main_IDT=oOraDynaset.Fields("Issue_Main_IDT").Value;
//	//		Issue_Input_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_Input_Date").Value);
//	//		Issue_Project=oOraDynaset.Fields("Issue_Project").Value;
//	//		Issue_Help_Desk_Queue=oOraDynaset.Fields("Issue_Help_Desk_Queue").Value;
//	//		Issue_Amnd_State=oOraDynaset.Fields("Issue_Amnd_State").Value;
//	//		Issue_Amnd_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_Amnd_Date").Value);
//	//		
//	//		Issue_Amnd_Officer_ID=oOraDynaset.Fields("Issue_Amnd_Officer_ID").Value;
//	//		Issue_Amnd_Prev_ID=oOraDynaset.Fields("Issue_Amnd_Prev_ID").Value;
//	//		Issue_CRM_Issue__oid=oOraDynaset.Fields("Issue_CRM_Issue__oid").Value;
//	//		
//	//		Issue_CRM_Issue__ID=oOraDynaset.Fields("Issue_CRM_Issue__ID").Value;
//	//		Issue_Original_Issue=oOraDynaset.Fields("Issue_Original_Issue").Value;
//	//		Issue_Help_Desk_Officer_ID=oOraDynaset.Fields("Issue_Help_Desk_Officer_ID").Value;
//	//		
//	//		Issue_Delivery_Type=oOraDynaset.Fields("Issue_Delivery_Type").Value;
//	//		Issue_IS_Active=oOraDynaset.Fields("Issue_IS_Active").Value;
//	//		Issue_Start_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_Start_Date").Value);
//	//		
//	//		Issue_End_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_End_Date").Value);
//	//		Issue_Due_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_Due_Date").Value);
//	//		Issue_Estim_Start_Date=ПреобразоватьКДате(oOraDynaset.Fields("Issue_Estim_Start_Date").Value);
//	//		
//	//		Project_Queue=oOraDynaset.Fields("Project_Queue").Value;
//	//		Action_Name=oOraDynaset.Fields("Action_Name").Value;
//	//		
//	//		Action_User_ID=oOraDynaset.Fields("Action_User_ID").Value;
//	//		Если Action_User_ID<>NULL Тогда
//	//			//выберем пользователя 
//	//			ЗапросПользователь="select name from crm.crm_user where id="+Action_User_ID;
//	//			oOraDynaset2 = OraDatabase.CreateDynaset(ЗапросПользователь,0);
//	//			
//	//			Пока oOraDynaset2.EOF = 0 Цикл
//	//				Action_User=oOraDynaset2.Fields("name").Value;
//	//				oOraDynaset2.MoveNext();
//	//			КонецЦикла;
//	//			oOraDynaset2.Close();
//	//			
//	//		Иначе
//	//			Action_User_ID="";
//	//			Action_User="";
//	//		КонецЕсли;	 
//	//		//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//	//		Если Action_User_ID<>"" Тогда
//	//			СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", Action_User_ID);
//	//		Иначе
//	//			СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка();
//	//		КонецЕсли;
//	//		EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//	//		PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//	//		Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//	//		GradeValue=0;
//	//		EstimationOfPostedDays=0;
//	//		GradeDate='00010101';
//	//		Если СотрудникИзCRM<>Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка() Тогда 							   
//	//			ЗапросГрейда.УстановитьПараметр("СотрудникСсылкаНаКонтактноеЛицоИзCRM", СотрудникИзCRM);
//	//			РезультатГрейда=ЗапросГрейда.Выполнить().Выбрать();
//	//			Если РезультатГрейда.Следующий() Тогда
//	//				EmployeeFunction=РезультатГрейда.EmployeeFunction;
//	//				PositionOfEmployee=РезультатГрейда.EmployeePosition;
//	//				Grade=РезультатГрейда.Grade;
//	//				GradeValue=РезультатГрейда.GradeAmount;
//	//				EstimationOfPostedDays=GradeValue*Posted_Time;
//	//				GradeDate=РезультатГрейда.GradeDate;
//	//			Иначе
//	//				EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//	//				PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//	//				Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//	//				GradeValue=0;
//	//				EstimationOfPostedDays=0;
//	//				GradeDate='00010101';
//	//			КонецЕсли;
//	//		Иначе
//	//			EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//	//			PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//	//			Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//	//			GradeValue=0;
//	//			EstimationOfPostedDays=0;
//	//			GradeDate='00010101';
//	//		КонецЕсли;	
//	//		
//	//		IS_Active=oOraDynaset.Fields("IS_Active").Value;
//	//		
//	//		Если IS_Active="Y" Тогда
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Active;
//	//		ИначеЕсли IS_Active="N" Тогда
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Completed;
//	//		ИначеЕсли IS_Active="J" Тогда
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Rejected;
//	//		ИначеЕсли IS_Active="W" Тогда
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Waiting;
//	//		ИначеЕсли IS_Active="A" Тогда                                     //
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Acceptance;
//	//		ИначеЕсли IS_Active="I" Тогда                                     //
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Input;
//	//		ИначеЕсли IS_Active="F" Тогда                                     //
//	//			IS_Active_Status=Перечисления.СтатусыЭтапов.Frozen;	
//	//		КонецЕсли;
//	//		
//	//		//проверим есть ли Milestone
//	//		СправочникMilestonesOfProject=Справочники.MilestonesOfProject.ПустаяСсылка();
//	//		Если Milestone_Name_id<>"" Тогда
//	//			СправочникMilestonesOfProject=Справочники.MilestonesOfProject.НайтиПоРеквизиту("КодCRM", Milestone_Name_id);
//	//			Если СправочникMilestonesOfProject=Справочники.MilestonesOfProject.ПустаяСсылка() Тогда	
//	//				//запишем Milestone
//	//				ОбъектMilestonesOfProject=Справочники.MilestonesOfProject.СоздатьЭлемент();
//	//				ОбъектMilestonesOfProject.Владелец =ОбъектПроект.Ссылка;
//	//				ОбъектMilestonesOfProject.Клиент=ОбъектПроект.Партнер;
//	//				ОбъектMilestonesOfProject.КодCRM=Milestone_Name_id;
//	//				ОбъектMilestonesOfProject.Наименование=Milestone_Name;
//	//				Попытка 
//	//					ОбъектMilestonesOfProject.Записать();
//	//					СправочникMilestonesOfProject=ОбъектMilestonesOfProject.Ссылка;
//	//				Исключение	
//	//				КонецПопытки;
//	//			КонецЕсли;
//	//		КонецЕсли;	
//	//		
//	//		СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.ПустаяСсылка();
//	//		Если СправочникMilestonesOfProject<>Справочники.MilestonesOfProject.ПустаяСсылка() Тогда	
//	//			//проверим есть ли TasksOfMilestomes
//	//			Если Task_Name_id<>"" Тогда
//	//				СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.НайтиПоРеквизиту("КодCRM", Task_Name_id);
//	//				Если СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.ПустаяСсылка() Тогда	
//	//					//запишем TasksOfMilestomes
//	//					ОбъектTasksOfMilestomes=Справочники.TasksOfMilestomes.СоздатьЭлемент();
//	//					ОбъектTasksOfMilestomes.Владелец =СправочникMilestonesOfProject;
//	//					ОбъектTasksOfMilestomes.ПроектВнедрения =ОбъектПроект.Ссылка;
//	//					ОбъектTasksOfMilestomes.Клиент=ОбъектПроект.Партнер;
//	//					ОбъектTasksOfMilestomes.КодCRM=Task_Name_id;
//	//					ОбъектTasksOfMilestomes.Наименование=Task_Name;
//	//					Попытка 
//	//						ОбъектTasksOfMilestomes.Записать();
//	//						СправочникTasksOfMilestomes=ОбъектTasksOfMilestomes.Ссылка;
//	//					Исключение	
//	//					КонецПопытки;		
//	//				КонецЕсли;
//	//			КонецЕсли;	
//	//		КонецЕсли;	
//	//		
//	//		//теперь запишем инфу в объект	
//	//		Отбор = Новый Структура();
//	//		Отбор.Вставить("Action_ID",Action_ID);
//	//		//Отбор.Вставить("Action_Date",Action_Date);
//	//		ППОтбор=ОбъектПроект.ВремяПотраченноеНаПроект.НайтиСтроки(Отбор);
//	//		Если ППОтбор.Количество()=0 Тогда
//	//			Строка=ОбъектПроект.ВремяПотраченноеНаПроект.Добавить();
//	//			Строка.Action_ID=Action_ID;
//	//			Строка.Action_Details=Action_Details;
//	//			Строка.Action_User_ID=Action_User_ID;
//	//			Строка.Posted_Time=Posted_Time;
//	//			Строка.Posted_Hour=Posted_Hour;
//	//			Строка.Action_Date=Action_Date;
//	//			Строка.Amnd_Date=Amnd_Date;
//	//			Строка.Action_Mounth=Action_Mounth;
//	//			Строка.Project_Queue=Project_Queue;
//	//			Строка.Action_Name=Action_Name;
//	//			Строка.Action_User=Action_User;
//	//			Строка.IS_Active=IS_Active;
//	//			Строка.IS_Active_Status=IS_Active_Status;
//	//			//Строка.Details =Details;
//	//			//Строка.Result_Details=Result_Details;
//	//			Строка.СотрудникИзCRM=СотрудникИзCRM;
//	//			Строка.EmployeeFunction=EmployeeFunction;
//	//			Строка.PositionOfEmployee=PositionOfEmployee;
//	//			Строка.Grade=Grade;
//	//			Строка.GradeValue=GradeValue;
//	//			Строка.EstimationOfPostedDays=EstimationOfPostedDays;
//	//			Строка.GradeDate=GradeDate;
//	//			Строка.Type=Type;
//	//			Строка.Milestone_Name_id=Milestone_Name_id;
//	//			Строка.Milestone_Name=Milestone_Name;
//	//			Строка.Task_Name_id=Task_Name_id;
//	//			Строка.Task_Name=Task_Name;
//	//			Строка.TasksOfMilestomes=СправочникTasksOfMilestomes;
//	//			Строка.MilestonesOfProject=СправочникMilestonesOfProject;
//	//			
//	//			//---
//	//			Строка.Amnd_State=Amnd_State;
//	//			Строка.Amnd_Officer_ID=Amnd_Officer_ID;
//	//			Строка.Amnd_Prev_ID=Amnd_Prev_ID;
//	//			Строка.Action_CRM_Project__oid=Action_CRM_Project__oid;
//	//			Строка.Action_CRM_Issue__oid=Action_CRM_Issue__oid;
//	//			Строка.Action_Status=Action_Status;
//	//			Строка.Action_PCNT_Completed=Action_PCNT_Completed;
//	//			
//	//			Строка.Issue_IDT=Issue_IDT;
//	//			Строка.Issue_ID=Issue_ID;
//	//			Строка.Issue_Main_IDT=Issue_Main_IDT;
//	//			Строка.Issue_Input_Date=Issue_Input_Date;
//	//			Строка.Issue_Project=Issue_Project;
//	//			Строка.Issue_Help_Desk_Queue=Issue_Help_Desk_Queue;
//	//			Строка.Issue_Amnd_State=Issue_Amnd_State;
//	//			Строка.Issue_Amnd_Date=Issue_Amnd_Date;
//	//			
//	//			Строка.Issue_Amnd_Officer_ID=Issue_Amnd_Officer_ID;
//	//			Строка.Issue_Amnd_Prev_ID=Issue_Amnd_Prev_ID;
//	//			Строка.Issue_CRM_Issue__oid=Issue_CRM_Issue__oid;
//	//			
//	//			Строка.Issue_CRM_Issue__ID=Issue_CRM_Issue__ID;
//	//			Строка.Issue_Original_Issue=Issue_Original_Issue;
//	//			Строка.Issue_Help_Desk_Officer_ID=Issue_Help_Desk_Officer_ID;
//	//			
//	//			Строка.Issue_Delivery_Type=Issue_Delivery_Type;
//	//			Строка.Issue_IS_Active=Issue_IS_Active;
//	//			Строка.Issue_Start_Date=Issue_Start_Date;
//	//			
//	//			Строка.Issue_End_Date=Issue_End_Date;
//	//			Строка.Issue_Due_Date=Issue_Due_Date;
//	//			Строка.Issue_Estim_Start_Date=Issue_Estim_Start_Date;
//	//			//---
//	//			
//	//		Иначе
//	//			Строка=ППОтбор[0];
//	//			Строка.Action_ID=Action_ID;
//	//			Строка.Action_Details=Action_Details;
//	//			Строка.Action_User_ID=Action_User_ID;
//	//			Строка.Posted_Time=Posted_Time;
//	//			Строка.Posted_Hour=Posted_Hour;
//	//			Строка.Action_Date=Action_Date;
//	//			Строка.Amnd_Date=Amnd_Date;
//	//			Строка.Action_Mounth=Action_Mounth;
//	//			Строка.Project_Queue=Project_Queue;
//	//			Строка.Action_Name=Action_Name;
//	//			Строка.Action_User=Action_User;
//	//			Строка.IS_Active=IS_Active;
//	//			Строка.IS_Active_Status=IS_Active_Status;
//	//			//Строка.Details =Details;
//	//			//Строка.Result_Details=Result_Details;
//	//			Строка.СотрудникИзCRM=СотрудникИзCRM;
//	//			Строка.EmployeeFunction=EmployeeFunction;
//	//			Строка.PositionOfEmployee=PositionOfEmployee;
//	//			Строка.Grade=Grade;
//	//			Строка.GradeValue=GradeValue;
//	//			Строка.EstimationOfPostedDays=EstimationOfPostedDays;
//	//			Строка.GradeDate=GradeDate;
//	//			Строка.Type=Type;
//	//			Строка.Milestone_Name_id=Milestone_Name_id;
//	//			Строка.Milestone_Name=Milestone_Name;
//	//			Строка.Task_Name_id=Task_Name_id;
//	//			Строка.Task_Name=Task_Name;
//	//			Строка.TasksOfMilestomes=СправочникTasksOfMilestomes;
//	//			Строка.MilestonesOfProject=СправочникMilestonesOfProject;
//	//			
//	//			//---
//	//			Строка.Amnd_State=Amnd_State;
//	//			Строка.Amnd_Officer_ID=Amnd_Officer_ID;
//	//			Строка.Amnd_Prev_ID=Amnd_Prev_ID;
//	//			Строка.Action_CRM_Project__oid=Action_CRM_Project__oid;
//	//			Строка.Action_CRM_Issue__oid=Action_CRM_Issue__oid;
//	//			Строка.Action_Status=Action_Status;
//	//			Строка.Action_PCNT_Completed=Action_PCNT_Completed;
//	//			
//	//			Строка.Issue_IDT=Issue_IDT;
//	//			Строка.Issue_ID=Issue_ID;
//	//			Строка.Issue_Main_IDT=Issue_Main_IDT;
//	//			Строка.Issue_Input_Date=Issue_Input_Date;
//	//			Строка.Issue_Project=Issue_Project;
//	//			Строка.Issue_Help_Desk_Queue=Issue_Help_Desk_Queue;
//	//			Строка.Issue_Amnd_State=Issue_Amnd_State;
//	//			Строка.Issue_Amnd_Date=Issue_Amnd_Date;
//	//			
//	//			Строка.Issue_Amnd_Officer_ID=Issue_Amnd_Officer_ID;
//	//			Строка.Issue_Amnd_Prev_ID=Issue_Amnd_Prev_ID;
//	//			Строка.Issue_CRM_Issue__oid=Issue_CRM_Issue__oid;
//	//			
//	//			Строка.Issue_CRM_Issue__ID=Issue_CRM_Issue__ID;
//	//			Строка.Issue_Original_Issue=Issue_Original_Issue;
//	//			Строка.Issue_Help_Desk_Officer_ID=Issue_Help_Desk_Officer_ID;
//	//			
//	//			Строка.Issue_Delivery_Type=Issue_Delivery_Type;
//	//			Строка.Issue_IS_Active=Issue_IS_Active;
//	//			Строка.Issue_Start_Date=Issue_Start_Date;
//	//			
//	//			Строка.Issue_End_Date=Issue_End_Date;
//	//			Строка.Issue_Due_Date=Issue_Due_Date;
//	//			Строка.Issue_Estim_Start_Date=Issue_Estim_Start_Date;
//	//			//---
//	//			
//	//		КонецЕсли;
//	//		
//	//		oOraDynaset.MoveNext();
//	//	КонецЦикла;
//	//	oOraDynaset.Close();
//	//	
//	//	ОбъектПроект.ВремяПотраченноеНаПроект.Сортировать("Action_Date убыв");
//	//	
//	//	//забираем бюджет из CRM
//	//	////
//	//	КодПроектаCRM="'"+ОбъектПроект.КодПроектаCRM+"'";
//	//	ДлинаСуток=86400; //длина суток в секундах
//	//	
//	//	ОбъектПроект.TaskBudget.Очистить();			
//	//	
//	//	ЗапросЧасть1="select
//	//	|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//	//	|p.CRM_CUST__ID Customer_Name_id,
//	//	|p.id Project_Name_id,
//	//	|m.id Milestone_Name_id,
//	//	|t.id Task_Name_id,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', p.id) Project_Name,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', m.id) Milestone_Name,
//	//	|m.BUDGET_TOTAL Milestone_Planned_Time_Hour,
//	//  	|m.USED_TIME_TOTAL  Milestone_Used_Time_Hour,
//	//  	|m.budget_own Milestone_Not_Planned,
//	//  	|m.BUDGET_TOTAL/8 Milestone_Planned_Time,
//	//  	|m.USED_TIME_TOTAL/8 Milestone_Used_Time,
//	//   	|m.budget_own/8 Milestone_Not_Planned_Time,
//	//  	|m.is_active Milestone_Is_Active,
//	//	|crm.XWCRM_PROJECT('IS_ACTIVE', m.IS_Active) Milestone_IS_Active_String,
//	//  	|m.PROJECT_OFFICER Milestone_Project_Officer_Code,
//	//  	|crm.XWCRM_PROJECT('PROJECT_OFFICER',m.PROJECT_OFFICER) Milestone_Project_Officer,
//	//  	|m.START_DATE Milestone_Start_Date,
//	// 	|m.end_date Milestone_End_Date,
//	// 	|m.input_date Milestone_Input_Date,
//	//	|crm.XWCRM_PROJECT('CRM_PROJECT__OID', t.id) Task_Name,
//	//	|t.BUDGET_TOTAL Planned_Hour,
//	//	|t.USED_TIME_TOTAL Used_Hour,
//	//	|t.BUDGET_TOTAL/8 Planned_Time,
//	//	|t.USED_TIME_TOTAL/8 Used_Time,
//	//	|t.is_active Task_is_active,
//	//	|crm.XWCRM_PROJECT('IS_ACTIVE', t.IS_Active) Task_Is_Active_String,
//	//	|t.PROJECT_OFFICER  Project_Officer_Code,
//	//  	|crm.XWCRM_PROJECT('PROJECT_OFFICER', t.PROJECT_OFFICER) Project_Officer,
//	//	|t.FULL_PATH Task_Full_PATH,
//	//	|t.AMND_DATE Task_AMND_DATE,
//	//	|t.APPROVE_DATE Task_APPROVE_DATE,
//	//	|t.OPEN_DATE Task_OPEN_DATE,
//	//	|t.INPUT_DATE Task_INPUT_DATE,
//	//	|t.DUE_DATE Task_DUE_DATE,
//	//	|t.START_DATE Task_START_DATE,
//	//	|t.END_DATE Task_END_DATE,
//	//	|t.AMND_STATE Task_AMND_STATE,
//	//	|t.CLOSE_DATE Task_CLOSE_DATE,
//	//	|t.DELIVERY_TYPE Task_DELIVERY_TYPE,
//	//	|t.EST_FINISH_DATE Task_EST_FINISH_DATE,
//	//	|t.EST_START_DATE Task_EST_START_DATE,
//	//	|t.ITEM_TYPE Task_ITEM_TYPE,
//	//	|'T' Type,
//	//	|(select min(crm_user__id) from crm.crm_officer where amnd_state='A' and id=t.PROJECT_OFFICER) Project_Officer_ID, 
//	//	|p.code Project_Code
//	//	|from crm.crm_project t, crm.crm_project m, crm.crm_project p, crm.crm_cust cust
//	//	|where t.amnd_state='A' and m.amnd_state='A' and p.amnd_state='A' and cust.amnd_state='A'
//	//	|and m.crm_project__oid = p.id 
//	//	|and t.crm_project__oid = m.id
//	//	//|and (p.text_1 not in ('IN', 'SC', 'MG', 'OWS', 'TR', 'BA') or p.text_1 is null or (p.text_1 = 'BA' and p.budget_total >10))
//	//	|and p.is_history='N'
//	//	|and m.is_history='N'
//	//	|and t.is_history='N'
//	//	|and t.item_type='I'
//	//	|and m.item_type = 'M'
//	//	//|and cust.fax_number not in ('OWMSC', 'OWSPB', 'OWUKR')
//	//	|and p.id = p.main_project
//	//	|and p.crm_cust__id = cust.id
//	//	//|and p.project_queue in (select id from crm.crm_queue where CRM_QUEUE.is_external = 'N' AND (CRM_QUEUE.email = 'support@openwaygroup.com' or CODE ='KA'))
//	//	|";
//	//	
//	//	ЗапросЧасть2=" and p.amnd_prev=";
//	//	Запрос=ЗапросЧасть1+ЗапросЧасть2+Amnd_prev_ПроектаCRM;	
//	//	
//	//	oOraDynaset = OraDatabase.CreateDynaset(Запрос,0); 
//	//	
//	//	Пока oOraDynaset.EOF = 0 Цикл
//	//		
//	//		//в цикле перебираем записи	
//	//		Project_Name_id=oOraDynaset.Fields("Project_Name_id").Value;
//	//		Milestone_Name_id=oOraDynaset.Fields("Milestone_Name_id").Value;
//	//		Task_Name_id=oOraDynaset.Fields("Task_Name_id").Value;
//	//		Project_Name=oOraDynaset.Fields("Project_Name").Value;
//	//		Milestone_Name=oOraDynaset.Fields("Milestone_Name").Value;
//	//		Task_Name=oOraDynaset.Fields("Task_Name").Value;
//	//		Planned_Hour=oOraDynaset.Fields("Planned_Hour").Value;
//	//		Used_Hour=oOraDynaset.Fields("Used_Hour").Value;
//	//		Planned_Time=oOraDynaset.Fields("Planned_Time").Value;
//	//		Used_Time=oOraDynaset.Fields("Used_Time").Value;
//	//		
//	//		Milestone_Planned_Time_Hour=oOraDynaset.Fields("Milestone_Planned_Time_Hour").Value;  //
//	//		Milestone_Used_Time_Hour= oOraDynaset.Fields("Milestone_Used_Time_Hour").Value;  //
//	//    	Milestone_Not_Planned= oOraDynaset.Fields("Milestone_Not_Planned").Value;  //
//	//    	Milestone_Planned_Time= oOraDynaset.Fields("Milestone_Planned_Time").Value;  //
//	//		Milestone_Used_Time= oOraDynaset.Fields("Milestone_Used_Time").Value;  //
//	//    	Milestone_Not_Planned_Time= oOraDynaset.Fields("Milestone_Not_Planned_Time").Value;  //
//	//    	Milestone_Is_Active=oOraDynaset.Fields("Milestone_Is_Active").Value;  //
//	//		Milestone_IS_Active_String=oOraDynaset.Fields("Milestone_IS_Active_String").Value;  //
//	//		Milestone_Project_Officer_Code=oOraDynaset.Fields("Milestone_Project_Officer_Code").Value;  //
//	//    	Milestone_Project_Officer=oOraDynaset.Fields("Milestone_Project_Officer").Value;  //
//	//    	Milestone_Start_Date=ПреобразоватьКДате(oOraDynaset.Fields("Milestone_Start_Date").Value);  //
//	//   	 	Milestone_End_Date=ПреобразоватьКДате(oOraDynaset.Fields("Milestone_End_Date").Value);   //
//	//		Milestone_Input_Date= ПреобразоватьКДате(oOraDynaset.Fields("Milestone_Input_Date").Value);   //
//	//	
//	//		Task_is_active=oOraDynaset.Fields("Task_is_active").Value;
//	//		Task_Is_Active_String=oOraDynaset.Fields("Task_Is_Active_String").Value;
//	//		Task_Project_Officer_Code = oOraDynaset.Fields("Project_Officer_Code").Value;//
//	//   		Task_Project_Officer= oOraDynaset.Fields("Project_Officer").Value; //
//	
//	//		Task_Full_PATH=oOraDynaset.Fields("Task_Full_PATH").Value;
//	//		Task_AMND_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_AMND_DATE").Value);
//	//		Task_APPROVE_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_APPROVE_DATE").Value);
//	//		Task_OPEN_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_OPEN_DATE").Value);
//	//		
//	//		Task_INPUT_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_INPUT_DATE").Value);
//	//		Task_DUE_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_DUE_DATE").Value);
//	//		Task_START_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_START_DATE").Value);
//	//		Task_END_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_END_DATE").Value);
//	//		
//	//		Task_AMND_STATE=oOraDynaset.Fields("Task_AMND_STATE").Value;
//	//		Task_CLOSE_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_CLOSE_DATE").Value);
//	//		Task_DELIVERY_TYPE=oOraDynaset.Fields("Task_DELIVERY_TYPE").Value;
//	//		Task_EST_FINISH_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_EST_FINISH_DATE").Value);
//	//		
//	//		Task_EST_START_DATE=ПреобразоватьКДате(oOraDynaset.Fields("Task_EST_START_DATE").Value);
//	//		Task_ITEM_TYPE=oOraDynaset.Fields("Task_ITEM_TYPE").Value;
//	//		//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//	//		Если Task_Project_Officer_Code<>"" Тогда
//	//			СотрудникИзCRM_Task=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", Task_Project_Officer_Code);
//	//		Иначе
//	//			СотрудникИзCRM_Task=Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка();
//	//		КонецЕсли;
//	//		Если СотрудникИзCRM_Task=Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка() Тогда
//	//			СотрудникИзCRM_Task=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("НаименованиеCRM", Task_Project_Officer);
//	//		КонецЕсли;	
//	
//	//		//Project_Officer=oOraDynaset.Fields("Project_Officer").Value;
//	//		Project_Officer_ID=oOraDynaset.Fields("Project_Officer_ID").Value;
//	//		Type=oOraDynaset.Fields("Type").Value;
//	//		Если Project_Officer_ID<>NULL Тогда
//	//			//выберем пользователя 
//	//			ЗапросПользователь="select name from crm.crm_user where id="+Project_Officer_ID;
//	//			oOraDynaset2 = OraDatabase.CreateDynaset(ЗапросПользователь,0);
//	//			
//	//			Пока oOraDynaset2.EOF = 0 Цикл
//	//				Project_Officer=oOraDynaset2.Fields("name").Value;
//	//				oOraDynaset2.MoveNext();
//	//			КонецЦикла;
//	//			oOraDynaset2.Close();
//	//			
//	//		Иначе
//	//			Project_Officer_ID="";
//	//			Project_Officer="";
//	//		КонецЕсли;	 
//	//		//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//	//		Если Project_Officer_ID<>"" Тогда
//	//			СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", Project_Officer_ID);
//	//		Иначе
//	//			СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка();
//	//		КонецЕсли;
//	//		//проверим есть ли Milestone
//	//		СправочникMilestonesOfProject=Справочники.MilestonesOfProject.ПустаяСсылка();
//	//		Если Milestone_Name_id<>"" Тогда
//	//			СправочникMilestonesOfProject=Справочники.MilestonesOfProject.НайтиПоРеквизиту("КодCRM", Milestone_Name_id);
//	//			Если СправочникMilestonesOfProject=Справочники.MilestonesOfProject.ПустаяСсылка() Тогда	
//	//				//запишем Milestone
//	//				ОбъектMilestonesOfProject=Справочники.MilestonesOfProject.СоздатьЭлемент();
//	//				ОбъектMilestonesOfProject.Владелец =ОбъектПроект.Ссылка;
//	//				ОбъектMilestonesOfProject.Клиент=ОбъектПроект.Партнер;
//	//				ОбъектMilestonesOfProject.КодCRM=Milestone_Name_id;
//	//				ОбъектMilestonesOfProject.Наименование=Milestone_Name;
//	//				ОбъектMilestonesOfProject.БюджетПлановыйВЧасах=Milestone_Planned_Time_Hour;  //
//	//				ОбъектMilestonesOfProject.ПотраченоВЧасах=Milestone_Used_Time_Hour;  //
//	//   				ОбъектMilestonesOfProject.НеРаспланированоВЧасах=Milestone_Not_Planned;  //
//	//    			ОбъектMilestonesOfProject.БюджетПлановыйВДнях=Milestone_Planned_Time;  //
//	//				ОбъектMilestonesOfProject.ПотраченоВДнях=Milestone_Used_Time;  //
//	//    			ОбъектMilestonesOfProject.НеРаспланированоВДнях=Milestone_Not_Planned_Time;  //
//	//    			ОбъектMilestonesOfProject.IS_Active=Milestone_Is_Active;  //
//	//				ОбъектMilestonesOfProject.IS_Active_String =Milestone_IS_Active_String;
//	//				ОбъектMilestonesOfProject.Project_Officer=Milestone_Project_Officer_Code;  //
//	//    			ОбъектMilestonesOfProject.Project_Officer_String=Milestone_Project_Officer;  //
//	//    			Если Milestone_Start_Date='00010101' И Milestone_End_Date<>'00010101' Тогда
//	//					ОбъектMilestonesOfProject.StartDate=Milestone_End_Date;
//	//				Иначе	
//	//    				ОбъектMilestonesOfProject.StartDate=Milestone_Start_Date;  //
//	//				КОнецЕсли;
//	//   				ОбъектMilestonesOfProject.EndDate= Milestone_End_Date;   //
//	//				ОбъектMilestonesOfProject.InputDate=Milestone_Input_Date;   //
//	//				Попытка 
//	//					ОбъектMilestonesOfProject.Записать();
//	//					СправочникMilestonesOfProject=ОбъектMilestonesOfProject.Ссылка;
//	//				Исключение	
//	//				КонецПопытки;
//	
//	//			Иначе
//	//				ОбъектMilestonesOfProject=СправочникMilestonesOfProject.ПолучитьОбъект();
//	//				ОбъектMilestonesOfProject.Владелец =ОбъектПроект.Ссылка;
//	//				ОбъектMilestonesOfProject.Клиент=ОбъектПроект.Партнер;
//	//				ОбъектMilestonesOfProject.КодCRM=Milestone_Name_id;
//	//				ОбъектMilestonesOfProject.Наименование=Milestone_Name;
//	//				ОбъектMilestonesOfProject.БюджетПлановыйВЧасах=Milestone_Planned_Time_Hour;  //
//	//				ОбъектMilestonesOfProject.ПотраченоВЧасах=Milestone_Used_Time_Hour;  //
//	//   				ОбъектMilestonesOfProject.НеРаспланированоВЧасах=Milestone_Not_Planned;  //
//	//    			ОбъектMilestonesOfProject.БюджетПлановыйВДнях=Milestone_Planned_Time;  //
//	//				ОбъектMilestonesOfProject.ПотраченоВДнях=Milestone_Used_Time;  //
//	//    			ОбъектMilestonesOfProject.НеРаспланированоВДнях=Milestone_Not_Planned_Time;  //
//	//    			ОбъектMilestonesOfProject.IS_Active=Milestone_Is_Active;  //
//	//				ОбъектMilestonesOfProject.IS_Active_String =Milestone_IS_Active_String;
//	//				ОбъектMilestonesOfProject.Project_Officer=Milestone_Project_Officer_Code;  //
//	//    			ОбъектMilestonesOfProject.Project_Officer_String=Milestone_Project_Officer;  //
//	//    			Если Milestone_Start_Date='00010101' И Milestone_End_Date<>'00010101' Тогда
//	//					ОбъектMilestonesOfProject.StartDate=Milestone_End_Date;
//	//				Иначе	
//	//    				ОбъектMilestonesOfProject.StartDate=Milestone_Start_Date;  //
//	//				КОнецЕсли;
//	//   				ОбъектMilestonesOfProject.EndDate= Milestone_End_Date;   //
//	//				ОбъектMilestonesOfProject.InputDate=Milestone_Input_Date;   //
//	//				Попытка 
//	//					ОбъектMilestonesOfProject.Записать();
//	//					СправочникMilestonesOfProject=ОбъектMilestonesOfProject.Ссылка;
//	//				Исключение	
//	//				КонецПопытки;
//	//			КонецЕсли;	
//	//		КонецЕсли;	
//	//				
//	//		СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.ПустаяСсылка();
//	//		Если СправочникMilestonesOfProject<>Справочники.MilestonesOfProject.ПустаяСсылка() Тогда	
//	//			//проверим есть ли TasksOfMilestomes
//	//			Если Task_Name_id<>"" Тогда
//	//				СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.НайтиПоРеквизиту("КодCRM", Task_Name_id);
//	//				Если СправочникTasksOfMilestomes=Справочники.TasksOfMilestomes.ПустаяСсылка() Тогда	
//	//					//запишем TasksOfMilestomes
//	//					ОбъектTasksOfMilestomes=Справочники.TasksOfMilestomes.СоздатьЭлемент();
//	//					ОбъектTasksOfMilestomes.Владелец =СправочникMilestonesOfProject;
//	//					ОбъектTasksOfMilestomes.ПроектВнедрения =ОбъектПроект.Ссылка;
//	//					ОбъектTasksOfMilestomes.Клиент=ОбъектПроект.Партнер;
//	//					ОбъектTasksOfMilestomes.КодCRM=Task_Name_id;
//	//					ОбъектTasksOfMilestomes.Наименование=Task_Name;
//	//				
//	//					ОбъектTasksOfMilestomes.БюджетПлановыйВЧасах=Planned_Hour;  
//	//					ОбъектTasksOfMilestomes.ПотраченоВЧасах=Used_Hour;  
//	//     				ОбъектTasksOfMilestomes.БюджетПлановыйВДнях=Planned_Time;  
//	//					ОбъектTasksOfMilestomes.ПотраченоВДнях=Used_Time; 
//	//    				ОбъектTasksOfMilestomes.IS_Active=Task_is_active;  
//	//					ОбъектTasksOfMilestomes.IS_Active_String =Task_IS_Active_String;
//	//					ОбъектTasksOfMilestomes.Project_Officer=Task_Project_Officer_Code;  //
//	//    				ОбъектTasksOfMilestomes.Project_Officer_String=Task_Project_Officer;  //
//	//    				Если Task_START_DATE='00010101' И Task_END_DATE<>'00010101' Тогда
//	//						ОбъектTasksOfMilestomes.StartDate=Task_END_DATE;
//	//					Иначе	
//	//    					ОбъектTasksOfMilestomes.StartDate=Task_START_DATE;  //
//	//					КОнецЕсли;
//	//   					ОбъектTasksOfMilestomes.EndDate= Task_END_DATE;   //
//	//					ОбъектTasksOfMilestomes.InputDate=Task_INPUT_DATE;   //
//	//                	ОбъектTasksOfMilestomes.СотрудникИзCRM=СотрудникИзCRM_Task;
//	//					Попытка 
//	//						ОбъектTasksOfMilestomes.Записать();
//	//						СправочникTasksOfMilestomes=ОбъектTasksOfMilestomes.Ссылка;
//	//					Исключение	
//	//					КонецПопытки;
//	//				Иначе
//	//					ОбъектTasksOfMilestomes=СправочникTasksOfMilestomes.ПолучитьОбъект();
//	//					ОбъектTasksOfMilestomes.Владелец =СправочникMilestonesOfProject;
//	//					ОбъектTasksOfMilestomes.ПроектВнедрения =ОбъектПроект.Ссылка;
//	//					ОбъектTasksOfMilestomes.Клиент=ОбъектПроект.Партнер;
//	//					ОбъектTasksOfMilestomes.КодCRM=Task_Name_id;
//	//					ОбъектTasksOfMilestomes.Наименование=Task_Name;
//	//				
//	//					ОбъектTasksOfMilestomes.БюджетПлановыйВЧасах=Planned_Hour;  
//	//					ОбъектTasksOfMilestomes.ПотраченоВЧасах=Used_Hour;  
//	//     				ОбъектTasksOfMilestomes.БюджетПлановыйВДнях=Planned_Time;  
//	//					ОбъектTasksOfMilestomes.ПотраченоВДнях=Used_Time; 
//	//    				ОбъектTasksOfMilestomes.IS_Active=Task_is_active;  
//	//					ОбъектTasksOfMilestomes.IS_Active_String =Task_IS_Active_String;
//	//					ОбъектTasksOfMilestomes.Project_Officer=Task_Project_Officer_Code;  //
//	//    				ОбъектTasksOfMilestomes.Project_Officer_String=Task_Project_Officer;  //
//	//    				Если Task_START_DATE='00010101' И Task_END_DATE<>'00010101' Тогда
//	//						ОбъектTasksOfMilestomes.StartDate=Task_END_DATE;
//	//					Иначе	
//	//    					ОбъектTasksOfMilestomes.StartDate=Task_START_DATE;  //
//	//					КОнецЕсли;
//	//   					ОбъектTasksOfMilestomes.EndDate= Task_END_DATE;   //
//	//					ОбъектTasksOfMilestomes.InputDate=Task_INPUT_DATE;   //
//	//                	ОбъектTasksOfMilestomes.СотрудникИзCRM=СотрудникИзCRM_Task;
//	//					Попытка 
//	//						ОбъектTasksOfMilestomes.Записать();
//	//						СправочникTasksOfMilestomes=ОбъектTasksOfMilestomes.Ссылка;
//	//					Исключение	
//	//					КонецПопытки;
//	//				КонецЕсли;
//	//			КонецЕсли;	
//	//		КонецЕсли;	
//	//		
//	//		//теперь запишем инфу в объект	
//	//		Строка=ОбъектПроект.TaskBudget.Добавить();
//	//		
//	//		Строка.Project_Name_id=Project_Name_id;
//	//		Строка.Milestone_Name_id=Milestone_Name_id;
//	//		Строка.Task_Name_id=Task_Name_id;
//	//		Строка.Project_Name=Project_Name;
//	//		Строка.Milestone_Name=Milestone_Name;
//	//		Строка.Task_Name=Task_Name;
//	//		Строка.Planned_Hour=Planned_Hour;
//	//		Строка.Used_Hour=Used_Hour;
//	//		Строка.Planned_Time=Planned_Time;
//	//		Строка.Used_Time=Used_Time;
//	//		
//	//		Строка.Milestone_is_active=Milestone_is_active;
//	//		Строка.Task_is_active=Task_is_active;
//	//		Строка.Task_Full_PATH=Task_Full_PATH;
//	//		Строка.Task_AMND_DATE=Task_AMND_DATE;
//	//		Строка.Task_APPROVE_DATE=Task_APPROVE_DATE;
//	//		Строка.Task_OPEN_DATE=Task_OPEN_DATE;
//	//		
//	//		Строка.Task_INPUT_DATE=Task_INPUT_DATE;
//	//		Строка.Task_DUE_DATE=Task_DUE_DATE;
//	//		Строка.Task_START_DATE=Task_START_DATE;
//	//		Строка.Task_END_DATE=Task_END_DATE;
//	//		
//	//		Строка.Task_AMND_STATE=Task_AMND_STATE;
//	//		Строка.Task_CLOSE_DATE=Task_CLOSE_DATE;
//	//		Строка.Task_DELIVERY_TYPE=Task_DELIVERY_TYPE;
//	//		Строка.Task_EST_FINISH_DATE=Task_EST_FINISH_DATE;
//	//		
//	//		Строка.Task_EST_START_DATE=Task_EST_START_DATE;
//	//		Строка.Task_ITEM_TYPE=Task_ITEM_TYPE;
//	//		Строка.Project_Officer_ID=Project_Officer_ID;
//	//		Строка.Project_Officer=Project_Officer;
//	//		Строка.СотрудникИзCRM=СотрудникИзCRM;
//	//		Строка.Type=Type;
//	//		Строка.TasksOfMilestomes=СправочникTasksOfMilestomes;
//	//		Строка.MilestonesOfProject=СправочникMilestonesOfProject;
//	//		
//	//		oOraDynaset.MoveNext();
//	//	КонецЦикла;
//	//	oOraDynaset.Close();
//	//	
//	//	ЗапросГрейда=Новый Запрос;
//	//	ЗапросГрейда.Текст= "ВЫБРАТЬ
//	//	|	Грейд.ЗначениеГрейда КАК GradeAmount,
//	//	|	Грейд.ГрейдСотрудника КАК Grade,
//	//	|	Грейд.ПозицияСотрудника КАК EmployeePosition,
//	//	|	Грейд.ФункцииСотрудника КАК EmployeeFunction,
//	//	|	Грейд.Сотрудник,
//	//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//	|	Грейд.Период КАК GradeDate
//	//	|ИЗ
//	//	|	(ВЫБРАТЬ
//	//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник КАК Сотрудник,
//	//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ЗначениеГрейда КАК ЗначениеГрейда,
//	//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник.СсылкаНаКонтактноеЛицоИзCRM КАК СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника КАК ГрейдСотрудника,
//	//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника КАК ПозицияСотрудника,
//	//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника КАК ФункцииСотрудника,
//	//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Период КАК Период
//	//	|	ИЗ
//	//	|		РегистрСведений.OW_СоответствиеСотрудникаИГрейда.СрезПоследних КАК OW_СоответствиеСотрудникаИГрейдаСрезПоследних
//	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.OW_СоответствиеПозицииИГрейда.СрезПоследних КАК OW_СоответствиеПозицииИГрейдаСрезПоследних
//	//	|			ПО OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ПозицияСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника
//	//	|				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ФункцииСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника
//	//	|				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ГрейдСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника) КАК Грейд
//	//	|ГДЕ
//	//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM = &СотрудникСсылкаНаКонтактноеЛицоИзCRM
//	//	|
//	//	|СГРУППИРОВАТЬ ПО
//	//	|	Грейд.ЗначениеГрейда,
//	//	|	Грейд.ГрейдСотрудника,
//	//	|	Грейд.ПозицияСотрудника,
//	//	|	Грейд.ФункцииСотрудника,
//	//	|	Грейд.Сотрудник,
//	//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	//	|	Грейд.Период";
//	//	
//	//	Для Каждого Строка Из ОбъектПроект.TaskBudget Цикл
//	//		Если Строка.СотрудникИзCRM<>Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка() Тогда 							   
//	//			ЗапросГрейда.УстановитьПараметр("СотрудникСсылкаНаКонтактноеЛицоИзCRM", Строка.СотрудникИзCRM);
//	//			РезультатГрейда=ЗапросГрейда.Выполнить().Выбрать();
//	//			Если РезультатГрейда.Следующий() Тогда
//	//				Строка.EmployeeFunction=РезультатГрейда.EmployeeFunction;
//	//				Строка.PositionOfEmployee=РезультатГрейда.EmployeePosition;
//	//				Строка.Grade=РезультатГрейда.Grade;
//	//				Строка.GradeValue=РезультатГрейда.GradeAmount;
//	//				Строка.EstimationOfPlannedDays=Строка.GradeValue*Строка.Planned_Time;
//	//				Строка.GradeDate=РезультатГрейда.GradeDate;
//	//			Иначе
//	//				Строка.EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//	//				Строка.PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//	//				Строка.Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//	//				Строка.GradeValue=0;
//	//				Строка.EstimationOfPlannedDays=0;
//	//				Строка.GradeDate='00010101';
//	//			КонецЕсли;
//	//		Иначе
//	//			Строка.EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//	//			Строка.PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//	//			Строка.Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//	//			Строка.GradeValue=0;
//	//			Строка.EstimationOfPlannedDays=0;
//	//			Строка.GradeDate='00010101';
//	//		КонецЕсли;	
//	//	КонецЦикла;
//	//	
//	//	ОбъектПроект.TaskBudget.Сортировать("Milestone_Name, Task_Name");
//	//	////
//	//	//рассчитаем группировку на сервере
//	//	РассчитатьГруппировкуНаСервере(ОбъектПроект);
//	//	ОбъектПроект.ДатаСинхронизацииДанных=ТекущаяДата();
//	//	
//	//	Попытка
//	//		ОбъектПроект.Записать();
//	//		Попытка 
//	//			ЗаписатьПостинг(ОбъектПроект);
//	//		Исключение
//	//			Сообщить("Невозможно записать постингу для задачи с кодом "+КодПроектаCRM+" для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//	//		КонецПопытки	
//	//	Исключение
//	//		Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+" для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//	//	КонецПопытки;
//	//КонецЦикла;	
//	//
//	//Попытка
//	//	OraDatabase.Close();
//	//Исключение
//	//	Сообщить("Cannot close connection to Oracle " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
//	//КонецПопытки;	
//	//
//	//OraDatabase=Неопределено;
//	//OraSession=Неопределено;
//	////OraSession="";
//	
//КонецПроцедуры	
//
//Процедура OW_ОбновитьИнфуОЖизненномЦиклеПроектовИзCRM() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//
//	ОбновитьИнфуОЖизненномЦиклеПроектовИзCRM();
//КонецПроцедуры	
//
//Процедура ОбновитьИнфуОЖизненномЦиклеПроектовИзCRM() 
//	Юзер = "user1c";
//	Пароль = "user1c";
//	Подключились=Истина;
//	Попытка 
//		OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession"); 
//		OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//	Исключение 
//		OraDatabase=Неопределено;
//		OraSession=Неопределено;
//		
//		Подключились=Ложь;
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Обновить инфу о жизненном цикле проектов из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация,,,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		
//		//запишем в журнал регистрации
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Обновить инфу о жизненном цикле проектов из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация,,,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		
//		//сформируем письмо
//		ТекстПисьма = "Ошибка при выполнении фонового задания ""Обновить инфу о жизненном цикле проектов из CRM"":"+Символы.ПС+Символы.ПС; 
//		ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Обновить инфу о жизненном цикле проектов из CRM"" - %1'"), Метаданные.КраткаяИнформация);
//		
//		//++OW Копачев А.С. 07.09.2022 ONEC-7882
//		
//		////отправим письмо на первый адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить инфу о жизненном цикле проектов из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		////отправим письмо на второй адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновить инфу о жизненном цикле проектов из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		
//		СписокАдресовКому = Новый СписокЗначений;	
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//		
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 07.09.2022 ONEC-7882
//
//	КонецПопытки;  
//	
//	Если Подключились=Ложь Тогда
//		Возврат
//	КонецЕсли;  
//	
//	ДлинаСуток=86400; //длина суток в секундах
//	//дата получения инфы из CRM
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM = Константы.ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.СоздатьМенеджерЗначения();
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.Прочитать();
//	ПромежуточнаяДата=НачалоДня(ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.Значение);
//	//запишем текущую дату
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.Значение = НачалоДня(ТекущаяДата());
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.Записать();
//	
//	//РазностьДатДляЗапроса=(ТекущаяДата()-ПромежуточнаяДата)/86400;
//	//КоэффициентУмноженияДлиныСуток=1;
//	//Если РазностьДатДляЗапроса>1 Тогда
//	//	КоэффициентУмноженияДлиныСуток=Окр(РазностьДатДляЗапроса);
//	//КонецЕсли;
//	
//	//ДатаДляВыборки="to_date('"+Формат(ТекущаяДата()-ДлинаСуток*КоэффициентУмноженияДлиныСуток,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	
//	ДатаЗагрузки=НачалоДня(ТекущаяДата());
//	ДатаДляВыборкиНачало="to_date('"+Формат(ПромежуточнаяДата,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	ДатаДляВыборкиКонец="to_date('"+Формат(НачалоДня(ТекущаяДата()),"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//	
//	ЗапросВнедрение=Новый Запрос;
//	ЗапросВнедрение.Текст= "ВЫБРАТЬ
//	|	ЗадачиПроектов.Ссылка,
//	|	ЗадачиПроектов.Партнер,
//	|	ЗадачиПроектов.КодПроектаCRM,
//	|	ЗадачиПроектов.ДатаСинхронизацииДанных,
//	|	ЗадачиПроектов.Main_Project_ID,
//	|	ЗадачиПроектов.Наименование,
//	|	ЗадачиПроектов.Amnd_prev_ПроектаCRM
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|ГДЕ
//	|	ЗадачиПроектов.КодПроектаCRM <> """"
//	|	И ЗадачиПроектов.ПометкаУдаления = ЛОЖЬ";				   
//	
//	Выборка = ЗапросВнедрение.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		КодПроектаCRM="";
//		Если Выборка.КодПроектаCRM="" Тогда
//			Продолжить;
//		КонецЕсли;
//		КодПроектаCRM=Выборка.КодПроектаCRM;
//		Amnd_prev_ПроектаCRM="";
//		Если Выборка.Amnd_prev_ПроектаCRM="" Тогда
//			Продолжить;
//		КонецЕсли;
//		Amnd_prev_ПроектаCRM="'"+Выборка.Amnd_prev_ПроектаCRM+"'";
//		Проект=Выборка.Ссылка;
//		
//		Попытка 
//			ОбъектПроект=Проект.ПолучитьОбъект();
//			
//			//запрос к CRM.CRM_PROJECT
//			ЗапросЧасть1="select 
//			|p.amnd_state Amnd_State, 
//			|crm.XWCRM_PROJECT('AMND_STATE', p.amnd_state) Amnd_State_String, 
//			|p.main_project Main_Project_ID,
//			|p.AMND_DATE Amnd_date,
//			|p.amnd_officer Amnd_Officer,
//			|crm.XWCRM_PROJECT('AMND_OFFICER', amnd_officer) Amnd_Officer_String,
//			|p.AMND_PREV Amnd_prev,
//			|p.id ID,  
//			|p.RECORD_IDT RECORD_IDT, 
//			|p.Project_Queue Project_Queue,
//			|crm.XWCRM_PROJECT('PROJECT_QUEUE', p.Project_Queue) Project_Queue_String,
//			|p.Project_Officer Project_Officer,
//			|crm.XWCRM_PROJECT('PROJECT_OFFICER', p.PROJECT_OFFICER) Project_Officer_String,
//			|p.CRM_CUST__ID CRM_CUST__ID, 
//			|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//			|p.name Name, 
//			|p.DETAILS Details,
//			|p.RESULT_DETAILS Result_details,
//			|p.IS_Active IS_Active,
//			|crm.XWCRM_PROJECT('IS_ACTIVE', p.IS_Active) IS_Active_String,
//			|p.DUE_DATE DUE_DATE,
//			|p.END_DATE End_date,
//			|p.Start_Date Start_date,
//			|p.Estimated_Time Estimated_Time,
//			|p.Estimated_Time_Total Estimated_Time_Total,
//			|p.Estimated_Time/8 Estimated_Time_Days,
//			|p.Estimated_Time_Total/8 Estimated_Time_Total_Days,
//			|p.Budget_OWN Budget_OWN,
//			|p.Budget_OWN/8 Budget_OWN_Days,
//			|p.Budget_Total Budget_Total,
//			|p.Budget_Total/8 Budget_Total_Days,
//			|p.USED_TIME_TOTAL Used_Time_Total,
//			|p.USED_TIME_TOTAL/8 Used_Time_Total_Days,
//			|p.USED_TIME Used_Time,
//			|p.USED_TIME/8 Used_Time_Days,
//			|p.CRM_Issue__ID CRM_Issue__ID,
//			|crm.XWCRM_PROJECT('CRM_ISSUE__ID', p.CRM_Issue__ID) CRM_Issue__ID_String, 
//			|p.CRM_Project__OID CRM_Project__OID,
//			|crm.XWCRM_PROJECT('CRM_PROJECT__OID', p.id) Project_Name,
//			|p.Item_Type Item_Type,
//			|crm.XWCRM_PROJECT('ITEM_TYPE', p.Item_Type) Item_Type_String,
//			|p.Delivery_type Delivery_type,
//			|crm.XWCRM_PROJECT('DELIVERY_TYPE', p.Delivery_type) Delivery_type_String,
//			|p.Code ProjectCode,
//			|p.Ext_Data Ext_Data,
//			|p.IS_Ready IS_Ready,
//			|crm.XWCRM_PROJECT('IS_READY', p.IS_Ready) IS_Ready_String,
//			|p.Status_details Status_details,
//			|p.Input_Date Input_Date,
//			|p.Comp_Type Comp_Type,
//			|crm.XWCRM_PROJECT('COMP_TYPE', p.Comp_Type) Comp_Type_String,
//			|p.Parent_Comp_Type Parent_Comp_Type,
//			|crm.XWCRM_PROJECT('PARENT_COMP_TYPE', p.Parent_Comp_Type) Parent_Comp_Type_String,
//			|p.Project_User Project_User,
//			|(select name from crm.crm_user where id = p.project_user and amnd_state = 'A') Project_User_String,
//			|p.PRJ_Sign_Officer PRJ_Sign_Officer,
//			|crm.XWCRM_PROJECT('PRJ_SIGN_OFFICER', p.PRJ_Sign_Officer) PRJ_Sign_Officer_String,
//			|p.Cust_Person Cust_Person,
//			|crm.XWCRM_PROJECT('CUST_PERSON', p.Cust_Person) Cust_Person_String,
//			|p.Cust_Sign_Pers Cust_Sign_Pers,
//			|crm.XWCRM_PROJECT('CUST_SIGN_PERS', p.Cust_Sign_Pers) Cust_Sign_Pers_String,
//			|p.Consumer Consumer,
//			|crm.XWCRM_PROJECT('CONSUMER', p.Consumer) Consumer_String,
//			|p.Consumer_User Consumer_User,
//			|crm.XWCRM_PROJECT('CONSUMER_USER', p.Consumer_User) Consumer_User_String,
//			|p.Cons_Sign_User Cons_Sign_User,
//			|crm.XWCRM_PROJECT('CONS_SIGN_USER', p.Cons_Sign_User) Cons_Sign_User_String,
//			|p.Limitation Limitation,
//			|p.Status_Group Status_Group,
//			|crm.XWCRM_PROJECT('STATUS_GROUP', p.Status_Group) Status_Group_String,
//			|p.Status Status_Code,
//			|crm.XWCRM_PROJECT('STATUS', p.STATUS) Status,
//			|(select name from crm.crm_status status where id = p.status and amnd_state = 'A') Project_Status,
//			|p.EXT_Status EXT_Status,
//			|crm.XWCRM_PROJECT('EXT_STATUS', p.EXT_Status) EXT_Status_String,
//			|p.History_Record History_Record,
//			|p.History_Date History_Date,
//			|p.History_User History_User,
//			|(select name from crm.crm_user where id = p.History_User and amnd_state = 'A') History_User_String,
//			|p.IS_History IS_History,
//			|crm.XWCRM_PROJECT('IS_HISTORY', p.IS_History) IS_History_String,
//			|p.Start_Shift Start_Shift,
//			|p.SS_Type SS_Type,
//			|p.EST_START_DATE EST_START_DATE,
//			|p.EST_Finish_Date EST_Finish_Date,
//			|p.Approve_Date Approve_Date,
//			|p.Open_Date Open_Date,
//			|p.Close_Date Close_Date,
//			|p.Delivery Delivery,
//			|crm.XWCRM_PROJECT('DELIVERY', p.Delivery) Delivery_String,
//			|p.Cost_BEF_Taxes Cost_BEF_Taxes,
//			|p.TAX TAX,
//			|p.CURR CURR,
//			|p.Mail_Status Mail_Status,
//			|p.Local_Path Local_Path,
//			|p.Full_Path Full_Path,
//			|p.Prev_Officer Prev_Officer,
//			|crm.XWCRM_PROJECT('PREV_OFFICER', p.Prev_Officer) Prev_Officer_String,
//			|p.Prev_Review Prev_Review,
//			|p.New_Officer New_Officer,
//			|crm.XWCRM_PROJECT('NEW_OFFICER', p.New_Officer) New_Officer_String,
//			|p.Maint_Flag Maint_Flag,
//			|crm.XWCRM_PROJECT('MAINT_FLAG', p.Maint_Flag) Maint_Flag_String,
//			|p.Contract_AMNT Contract_AMNT,
//			|p.Date_1 Date_1,
//			|p.Date_2 Date_2,
//			|p.Date_3 Date_3,
//			|p.Date_4 Date_4,
//			|p.Text_1 Text_1,
//			|p.Text_2 Text_2,
//			|p.Text_3 Text_3,
//			|p.Text_4 Text_4,
//			|p.Licence Licence,
//			|p.Licence_Type Licence_Type,
//			|p.Invoice Invoice,
//			|p.FI FI,
//			|p.PCNT_Completed PCNT_Completed,
//			|p.PCNT_Completed_Total PCNT_Completed_Total,
//			|p.SEQV_Number SEQV_Number
//			|from 
//			|CRM.CRM_PROJECT p
//			|where p.item_type='P' and p.IS_History='N' 	
//			|  	and p.amnd_date between ";
//			
//			ЗапросЧасть2=ЗапросЧасть1+ДатаДляВыборкиНачало+" and "+ДатаДляВыборкиКонец+"";
//			ЗапросЧасть3=" and p.amnd_prev=";
//			ЗапросЧасть4=ЗапросЧасть2+ЗапросЧасть3+Amnd_prev_ПроектаCRM;
//			
//			ЗапросCRM=ЗапросЧасть4+" order by p.AMND_DATE";
//			
//			oOraDynaset = OraDatabase.CreateDynaset(ЗапросCRM,0);
//			
//			Пока oOraDynaset.EOF = 0 Цикл
//				//в цикле перебираем записи
//				Amnd_State=oOraDynaset.Fields("Amnd_State").Value;   //1
//				Amnd_State_String=oOraDynaset.Fields("Amnd_State_String").Value;
//				Main_Project_ID=oOraDynaset.Fields("Main_Project_ID").Value; //29
//				Amnd_date=ПреобразоватьКДате(oOraDynaset.Fields("Amnd_date").Value);   //2
//				Amnd_Officer=oOraDynaset.Fields("Amnd_Officer").Value;  //3
//				Amnd_Officer_String=oOraDynaset.Fields("Amnd_Officer_String").Value;
//				Amnd_prev=oOraDynaset.Fields("Amnd_prev").Value;  //4
//				ID=oOraDynaset.Fields("ID").Value;  //5
//				RECORD_IDT=oOraDynaset.Fields("RECORD_IDT").Value; //6
//				Project_Queue=oOraDynaset.Fields("Project_Queue").Value;  //7
//				Project_Queue_String=oOraDynaset.Fields("Project_Queue_String").Value;
//				Project_Officer=oOraDynaset.Fields("Project_Officer").Value; //8
//				Project_Officer_String=oOraDynaset.Fields("Project_Officer_String").Value;
//				CRM_CUST__ID=oOraDynaset.Fields("CRM_CUST__ID").Value;  //9
//				Customer_Name=oOraDynaset.Fields("Customer_Name").Value;
//				Name=oOraDynaset.Fields("Name").Value; //10
//				Details=oOraDynaset.Fields("Details").Value; //11
//				Result_details=oOraDynaset.Fields("Result_details").Value;//12
//				IS_Active=oOraDynaset.Fields("IS_Active").Value;   //13
//				IS_Active_String=oOraDynaset.Fields("IS_Active_String").Value;
//				DUE_DATE=ПреобразоватьКДате(oOraDynaset.Fields("DUE_DATE").Value); //14
//				End_date=ПреобразоватьКДате(oOraDynaset.Fields("End_date").Value);  //16
//				Start_date=ПреобразоватьКДате(oOraDynaset.Fields("Start_date").Value);//15
//				Estimated_Time=oOraDynaset.Fields("Estimated_Time").Value;  //17
//				Estimated_Time_Total=oOraDynaset.Fields("Estimated_Time_Total").Value; //18
//				Estimated_Time_Days=oOraDynaset.Fields("Estimated_Time_Days").Value;
//				Estimated_Time_Total_Days=oOraDynaset.Fields("Estimated_Time_Total_Days").Value;
//				Budget_OWN=oOraDynaset.Fields("Budget_OWN").Value;  //23
//				Budget_OWN_Days=oOraDynaset.Fields("Budget_OWN_Days").Value;
//				Budget_Total=oOraDynaset.Fields("Budget_Total").Value; //24
//				Budget_Total_Days=oOraDynaset.Fields("Budget_Total_Days").Value;
//				Used_Time=oOraDynaset.Fields("Used_Time").Value;   //19
//				Used_Time_Days=oOraDynaset.Fields("Used_Time_Days").Value; 
//				Used_Time_Total=oOraDynaset.Fields("Used_Time_Total").Value; //20
//				Used_Time_Total_Days=oOraDynaset.Fields("Used_Time_Total_Days").Value;
//				CRM_Issue__ID=oOraDynaset.Fields("CRM_Issue__ID").Value; //25
//				CRM_Issue__ID_String=oOraDynaset.Fields("CRM_Issue__ID_String").Value; 
//				CRM_Project__OID=oOraDynaset.Fields("CRM_Project__OID").Value;//26
//				Project_Name=oOraDynaset.Fields("Project_Name").Value;
//				Item_Type=oOraDynaset.Fields("Item_Type").Value; //27
//				Item_Type_String=oOraDynaset.Fields("Item_Type_String").Value;
//				Delivery_type=oOraDynaset.Fields("Delivery_type").Value; //28
//				Delivery_type_String=oOraDynaset.Fields("Delivery_type_String").Value;
//				ProjectCode=oOraDynaset.Fields("ProjectCode").Value;  //32
//				Ext_Data=oOraDynaset.Fields("Ext_Data").Value; //31
//				IS_Ready=oOraDynaset.Fields("IS_Ready").Value; //33
//				IS_Ready_String=oOraDynaset.Fields("IS_Ready_String").Value;
//				Status_details=oOraDynaset.Fields("Status_details").Value;//34
//				Input_Date=ПреобразоватьКДате(oOraDynaset.Fields("Input_Date").Value); //35
//				Comp_Type=oOraDynaset.Fields("Comp_Type").Value;  //36
//				Comp_Type_String=oOraDynaset.Fields("Comp_Type_String").Value;
//				Parent_Comp_Type=oOraDynaset.Fields("Parent_Comp_Type").Value; //37
//				Parent_Comp_Type_String=oOraDynaset.Fields("Parent_Comp_Type_String").Value;
//				Project_User=oOraDynaset.Fields("Project_User").Value; //38
//				Project_User_String=oOraDynaset.Fields("Project_User_String").Value;
//				PRJ_Sign_Officer=oOraDynaset.Fields("PRJ_Sign_Officer").Value;//39
//				PRJ_Sign_Officer_String=oOraDynaset.Fields("PRJ_Sign_Officer_String").Value;
//				Cust_Person=oOraDynaset.Fields("Cust_Person").Value;//40
//				Cust_Person_String=oOraDynaset.Fields("Cust_Person_String").Value;
//				Cust_Sign_Pers=oOraDynaset.Fields("Cust_Sign_Pers").Value; //41
//				Cust_Sign_Pers_String=oOraDynaset.Fields("Cust_Sign_Pers_String").Value;
//				Consumer=oOraDynaset.Fields("Consumer").Value; //42
//				Consumer_String=oOraDynaset.Fields("Consumer_String").Value;
//				Consumer_User=oOraDynaset.Fields("Consumer_User").Value; //43
//				Consumer_User_String=oOraDynaset.Fields("Consumer_User_String").Value;
//				Cons_Sign_User=oOraDynaset.Fields("Cons_Sign_User").Value; //44
//				Cons_Sign_User_String=oOraDynaset.Fields("Cons_Sign_User_String").Value;
//				Limitation=oOraDynaset.Fields("Limitation").Value; //45
//				Status_Group=oOraDynaset.Fields("Status_Group").Value;  //46
//				Status_Group_String=oOraDynaset.Fields("Status_Group_String").Value;
//				Status_Code=oOraDynaset.Fields("Status_Code").Value; //47
//				Status=oOraDynaset.Fields("Status").Value;
//				Project_Status=oOraDynaset.Fields("Project_Status").Value;
//				EXT_Status=oOraDynaset.Fields("EXT_Status").Value; //48
//				EXT_Status_String=oOraDynaset.Fields("EXT_Status_String").Value;
//				History_Record=oOraDynaset.Fields("History_Record").Value; //49
//				History_Date=ПреобразоватьКДате(oOraDynaset.Fields("History_Date").Value); //50
//				History_User=oOraDynaset.Fields("History_User").Value; //51
//				History_User_String=oOraDynaset.Fields("History_User_String").Value;
//				IS_History=oOraDynaset.Fields("IS_History").Value;  //52
//				IS_History_String= oOraDynaset.Fields("IS_History_String").Value; 
//				Start_Shift=oOraDynaset.Fields("Start_Shift").Value;   //53
//				SS_Type=oOraDynaset.Fields("SS_Type").Value;   //54
//				EST_START_DATE=ПреобразоватьКДате(oOraDynaset.Fields("EST_START_DATE").Value); //55
//				EST_Finish_Date=ПреобразоватьКДате(oOraDynaset.Fields("EST_Finish_Date").Value);  //56
//				Approve_Date=ПреобразоватьКДате(oOraDynaset.Fields("Approve_Date").Value); //57
//				Open_Date=ПреобразоватьКДате(oOraDynaset.Fields("Open_Date").Value); //58
//				Close_Date=ПреобразоватьКДате(oOraDynaset.Fields("Close_Date").Value);  //59
//				Delivery=oOraDynaset.Fields("Delivery").Value;         //60
//				Delivery_String=oOraDynaset.Fields("Delivery_String").Value; 
//				Cost_BEF_Taxes=oOraDynaset.Fields("Cost_BEF_Taxes").Value; //61
//				TAX=oOraDynaset.Fields("TAX").Value;    //62
//				CURR=oOraDynaset.Fields("CURR").Value; //63
//				Mail_Status=oOraDynaset.Fields("Mail_Status").Value; //64
//				Local_Path=oOraDynaset.Fields("Local_Path").Value; //65
//				Full_Path=oOraDynaset.Fields("Full_Path").Value;    //66
//				Prev_Officer=oOraDynaset.Fields("Prev_Officer").Value; //67
//				Prev_Officer_String=oOraDynaset.Fields("Prev_Officer_String").Value;
//				Prev_Review=oOraDynaset.Fields("Prev_Review").Value;     //68
//				New_Officer=oOraDynaset.Fields("New_Officer").Value; //69
//				New_Officer_String=oOraDynaset.Fields("New_Officer_String").Value;
//				Maint_Flag=oOraDynaset.Fields("Maint_Flag").Value;       //70
//				Maint_Flag_String=oOraDynaset.Fields("Maint_Flag_String").Value;
//				Contract_AMNT=oOraDynaset.Fields("Contract_AMNT").Value;  //71
//				Date_1=ПреобразоватьКДате(oOraDynaset.Fields("Date_1").Value);  //72
//				Date_2=ПреобразоватьКДате(oOraDynaset.Fields("Date_2").Value);  //73
//				Date_3=ПреобразоватьКДате(oOraDynaset.Fields("Date_3").Value);  //74
//				Date_4=ПреобразоватьКДате(oOraDynaset.Fields("Date_4").Value);  //75
//				ТипПроектаБуквенный=oOraDynaset.Fields("Text_1").Value;
//				Text_1=oOraDynaset.Fields("Text_1").Value;    //76
//				Text_2=oOraDynaset.Fields("Text_2").Value;    //77
//				Text_3=oOraDynaset.Fields("Text_3").Value;    //78
//				Text_4=oOraDynaset.Fields("Text_4").Value;    //79
//				Licence_Type=oOraDynaset.Fields("Licence_Type").Value;    //80
//				Licence=oOraDynaset.Fields("Licence").Value;   //81
//				Invoice=oOraDynaset.Fields("Invoice").Value;   //82
//				FI=oOraDynaset.Fields("FI").Value;             //83
//				PCNT_Completed=oOraDynaset.Fields("PCNT_Completed").Value; //21
//				PCNT_Completed_Total=oOraDynaset.Fields("PCNT_Completed_Total").Value; //22
//				SEQV_Number=oOraDynaset.Fields("SEQV_Number").Value;//30
//				
//				Запрос=Новый Запрос;
//				Запрос.Текст="ВЫБРАТЬ
//				|	ProjectLogBudget.Период,
//				|	ProjectLogBudget.Клиент,
//				|	ProjectLogBudget.Проект,
//				|	ProjectLogBudget.Main_Project_ID,
//				|	ProjectLogBudget.ID,
//				|	ProjectLogBudget.Record_IDT,
//				|	ProjectLogBudget.Amnd_State
//				|ИЗ
//				|	РегистрСведений.ProjectLogBudget КАК ProjectLogBudget
//				|ГДЕ
//				|	ProjectLogBudget.Период = &Период
//				|	И ProjectLogBudget.Проект = &Проект
//				|	И ProjectLogBudget.Main_Project_ID = &Main_Project_ID
//				|	И ProjectLogBudget.ID = &ID
//				|	И ProjectLogBudget.Record_IDT = &Record_IDT
//				|	И ProjectLogBudget.Amnd_State = &Amnd_State";
//				
//				Запрос.УстановитьПараметр("ID", ID);
//				Запрос.УстановитьПараметр("Проект", Проект);
//				Запрос.УстановитьПараметр("Период", Amnd_date);
//				Запрос.УстановитьПараметр("Main_Project_ID", Main_Project_ID);
//				Запрос.УстановитьПараметр("Record_IDT", Record_IDT);
//				Запрос.УстановитьПараметр("Amnd_State", Amnd_State);
//				
//				Результат=Запрос.Выполнить().Выбрать();
//				Если Не Результат.Следующий() Тогда 
//					
//					НаборЗаписей = РегистрыСведений.ProjectLogBudget.СоздатьНаборЗаписей();
//					НаборЗаписей.Отбор.Период.Установить(Amnd_date);
//					НаборЗаписей.Отбор.Проект.Установить(Проект);
//					НаборЗаписей.Отбор.ID.Установить(ID);
//					НаборЗаписей.Отбор.Main_Project_ID.Установить(Main_Project_ID);
//					НаборЗаписей.Отбор.Record_IDT.Установить(Record_IDT);
//					НаборЗаписей.Отбор.Amnd_State.Установить(Amnd_State);
//					
//					Запись = НаборЗаписей.Добавить();
//					Запись.Проект=Проект;
//					Запись.Клиент=Проект.Партнер;
//					Запись.Период=Amnd_date;
//					
//					Запись.Amnd_State=Amnd_State;
//					Запись.Amnd_State_String=Amnd_State_String;
//					Запись.Main_Project_ID=Main_Project_ID;
//					Запись.Amnd_date=Amnd_date;
//					Запись.Amnd_Officer=Amnd_Officer;
//					Запись.Amnd_Officer_String=Amnd_Officer_String;
//					Запись.Amnd_prev=Amnd_prev;
//					Запись.ID=ID; 
//					Запись.RECORD_IDT=RECORD_IDT;
//					Запись.Project_Queue=Project_Queue;
//					Запись.Project_Queue_String=Project_Queue_String;
//					Запись.Project_Officer=Project_Officer;
//					Запись.Project_Officer_String=Project_Officer_String;
//					Запись.CRM_CUST__ID=CRM_CUST__ID; 
//					Запись.Customer_Name=Customer_Name;
//					Запись.Name=Name; 
//					Запись.Details=Details;
//					Запись.Result_details=Result_details;
//					Запись.IS_Active=IS_Active;
//					Запись.IS_Active_String=IS_Active_String;
//					Запись.DUE_DATE=DUE_DATE;
//					Запись.End_date=End_date;
//					Запись.Start_date=Start_date;
//					Запись.Estimated_Time=Estimated_Time;
//					Запись.Estimated_Time_Total=Estimated_Time_Total;
//					Запись.Estimated_Time_Days=Estimated_Time_Days;
//					Запись.Estimated_Time_Total_Days=Estimated_Time_Total_Days;
//					Запись.Budget_OWN=Budget_OWN;
//					Запись.Budget_OWN_Days=Budget_OWN_Days;
//					Запись.Budget_Total=Budget_Total;
//					Запись.Used_Time_Total=Used_Time_Total;
//					Запись.Budget_Total_Days=Budget_Total_Days;
//					Запись.Used_Time_Total_Days=Used_Time_Total_Days;
//					Запись.Used_Time=Used_Time;
//					Запись.Used_Time_Days=Used_Time_Days;
//					Запись.CRM_Issue__ID=CRM_Issue__ID;
//					Запись.CRM_Issue__ID_String=CRM_Issue__ID_String;
//					Запись.CRM_Project__OID=CRM_Project__OID;
//					Запись.Project_Name=Project_Name;
//					Запись.Item_Type=Item_Type;
//					Запись.Item_Type_String=Item_Type_String;
//					Запись.Delivery_type=Delivery_type;
//					Запись.Delivery_type_String=Delivery_type_String;
//					Запись.ProjectCode=ProjectCode;
//					Запись.Ext_Data=Ext_Data;
//					Запись.IS_Ready=IS_Ready;
//					Запись.IS_Ready_String=IS_Ready_String;
//					Запись.Status_details=Status_details;
//					Запись.Input_Date=Input_Date;
//					Запись.Comp_Type=Comp_Type;
//					Запись.Comp_Type_String=Comp_Type_String;
//					Запись.Parent_Comp_Type=Parent_Comp_Type;
//					Запись.Parent_Comp_Type_String=Parent_Comp_Type_String;
//					Запись.Project_User=Project_User;
//					Запись.Project_User_String=Project_User_String;
//					Запись.PRJ_Sign_Officer=PRJ_Sign_Officer;
//					Запись.PRJ_Sign_Officer_String=PRJ_Sign_Officer_String;
//					Запись.Cust_Person=Cust_Person;
//					Запись.Cust_Person_String=Cust_Person_String;
//					Запись.Cust_Sign_Pers=Cust_Sign_Pers;
//					Запись.Cust_Sign_Pers_String=Cust_Sign_Pers_String;
//					Запись.Consumer=Consumer;
//					Запись.Consumer_String=Consumer_String;
//					Запись.Consumer_User=Consumer_User;
//					Запись.Consumer_User_String=Consumer_User_String;
//					Запись.Cons_Sign_User=Cons_Sign_User;
//					Запись.Cons_Sign_User_String=Cons_Sign_User_String;
//					Запись.Limitation=Limitation;
//					Запись.Status_Group=Status_Group;
//					Запись.Status_Group_String=Status_Group_String;
//					Запись.Status_Code=Status_Code;
//					Запись.Status=Status;
//					Запись.EXT_Status=EXT_Status;
//					Запись.EXT_Status_String=EXT_Status_String;
//					Запись.History_Record=History_Record;
//					Запись.History_Date=ПреобразоватьКДате(History_Date);
//					Запись.History_User=History_User;
//					Запись.History_User_String=History_User_String;
//					Запись.IS_History=IS_History;
//					Запись.IS_History_String=IS_History_String;
//					Запись.Start_Shift=Start_Shift;
//					Запись.SS_Type=SS_Type;
//					Запись.EST_START_DATE=ПреобразоватьКДате(EST_START_DATE);
//					Запись.EST_Finish_Date=ПреобразоватьКДате(EST_Finish_Date);
//					Запись.Approve_Date=ПреобразоватьКДате(Approve_Date);
//					Запись.Open_Date=ПреобразоватьКДате(Open_Date);
//					Запись.Close_Date=ПреобразоватьКДате(Close_Date);
//					Запись.Delivery=Delivery;
//					Запись.Delivery_String=Delivery_String;
//					Запись.Cost_BEF_Taxes=Cost_BEF_Taxes;
//					Запись.TAX=TAX;
//					Запись.CURR=CURR;
//					Запись.Mail_Status=Mail_Status;
//					Запись.Local_Path=Local_Path;
//					Запись.Full_Path=Full_Path;
//					Запись.Prev_Officer=Prev_Officer;
//					Запись.Prev_Officer_String=Prev_Officer_String;
//					Запись.Prev_Review=Prev_Review;
//					Запись.New_Officer=New_Officer;
//					Запись.New_Officer_String=New_Officer_String;
//					Запись.Maint_Flag=Maint_Flag;
//					Запись.Maint_Flag_String=Maint_Flag_String;
//					Запись.Contract_AMNT=Contract_AMNT;
//					Запись.Date_1=ПреобразоватьКДате(Date_1);
//					Запись.Date_2=ПреобразоватьКДате(Date_2);
//					Запись.Date_3=ПреобразоватьКДате(Date_3);
//					Запись.Date_4=ПреобразоватьКДате(Date_4);
//					Запись.ТипПроектаБуквенный=Text_1;
//					Запись.Text_1=Text_1;
//					Запись.Text_2=Text_2;
//					Запись.Text_3=Text_3;
//					Запись.Text_4=Text_4;
//					Запись.Licence=Licence;
//					Запись.Licence_Type=Licence_Type; 
//					Запись.Invoice=Invoice;
//					Запись.FI=FI;
//					Запись.PCNT_Completed=PCNT_Completed;
//					Запись.PCNT_Completed_Total=PCNT_Completed_Total;
//					Запись.SEQV_Number=SEQV_Number;
//					
//					Если ТипПроектаБуквенный="AU" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Implementation_AU; //
//					ИначеЕсли ТипПроектаБуквенный="AC" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Academy; //
//					ИначеЕсли ТипПроектаБуквенный="CE" Тогда	
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Coaching; //
//					ИначеЕсли ТипПроектаБуквенный="ST" Тогда	
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Studing; //
//					ИначеЕсли ТипПроектаБуквенный="MG" Тогда	
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Migration; //
//					ИначеЕсли ТипПроектаБуквенный="OS" Тогда	
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Onsite_Support; //	
//					ИначеЕсли ТипПроектаБуквенный="OWS" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.InternalWithBudget;  //
//					ИначеЕсли ТипПроектаБуквенный="OLD" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Old;  //	
//					ИначеЕсли ТипПроектаБуквенный="INT" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Internal;  //
//					ИначеЕсли ТипПроектаБуквенный="SC" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.SupportConsulting;   //
//					ИначеЕсли ТипПроектаБуквенный="TR" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Training;   //
//					ИначеЕсли ТипПроектаБуквенный="CV" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Certification;
//					ИначеЕсли ТипПроектаБуквенный="IN" Тогда                             
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.InternalProject;  //
//					ИначеЕсли ТипПроектаБуквенный="DM" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Demonstration;  //
//					ИначеЕсли ТипПроектаБуквенный="HW" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.HardwareConfiguration;  //
//					ИначеЕсли ТипПроектаБуквенный="BA" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.BusinessAnalysis;  //
//					ИначеЕсли ТипПроектаБуквенный="TRM" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.TRMActivity;  //
//					ИначеЕсли ТипПроектаБуквенный="RF" Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.TenderDocumentationPeparation; //
//					ИначеЕсли ТипПроектаБуквенный=NULL Тогда
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Implementation;
//					Иначе
//						Запись.ТипПроектаCRM=Перечисления.ТипыПроектовCRM.Other;
//					КонецЕсли;
//					
//					ТипПроекта_=Справочники.OW_ТипыПроектов.ПустаяСсылка();
//					Если Проект.ТипПроекта<>Справочники.OW_ТипыПроектов.ПустаяСсылка() Тогда
//						ТипПроекта_=Проект.ТипПроекта;
//					Иначе
//						Если ТипПроектаБуквенный="AU" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.ImplementationNotCharged; //
//						ИначеЕсли ТипПроектаБуквенный="AC" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Internal; //
//						ИначеЕсли ТипПроектаБуквенный="CE" Тогда	
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Internal; //
//						ИначеЕсли ТипПроектаБуквенный="ST" Тогда	
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Internal; //
//						ИначеЕсли ТипПроектаБуквенный="MG" Тогда	
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Upgrade; //
//						ИначеЕсли ТипПроектаБуквенный="OS" Тогда	
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Onsite_Support; //	
//						ИначеЕсли ТипПроектаБуквенный="OWS" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Implementation;  //
//						ИначеЕсли ТипПроектаБуквенный="INT" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Internal;  //
//						ИначеЕсли ТипПроектаБуквенный="SC" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Support;   //
//						ИначеЕсли ТипПроектаБуквенный="TR" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Training;   //
//						ИначеЕсли ТипПроектаБуквенный="CV" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Certification;
//						ИначеЕсли ТипПроектаБуквенный="IN" Тогда                             
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Internal;  //
//						ИначеЕсли ТипПроектаБуквенный="DM" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Demonstration;  //
//						ИначеЕсли ТипПроектаБуквенный="HW" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Hardware_Configuration;  //
//						ИначеЕсли ТипПроектаБуквенный="BA" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Estimation;  //
//						ИначеЕсли ТипПроектаБуквенный="TRM" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.TRM_Activity;  //
//						ИначеЕсли ТипПроектаБуквенный="RF" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.RFI; //
//						ИначеЕсли ТипПроектаБуквенный="GRM" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.GRM_Activity;
//						ИначеЕсли ТипПроектаБуквенный="PRS" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.PreSale;	
//						ИначеЕсли ТипПроектаБуквенный="IMPL" Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Implementation;		
//						ИначеЕсли ТипПроектаБуквенный=NULL Тогда
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Implementation;
//						Иначе
//							ТипПроекта_=Справочники.OW_ТипыПроектов.Other;	
//						КонецЕсли;
//						
//					КонецЕсли;	
//					Запись.ТипПроекта=ТипПроекта_;
//					Запись.ВнутреннийБюджет=Проект.ВнутреннийБюджет;
//					Запись.ВнутреннийБюджетВДнях= Проект.ВнутреннийБюджет/8;
//					Запись.ОбщийБюджетПоПроекту=Проект.ОбщийБюджетПоПроекту;
//					Запись.ОбщийБюджетПоПроектуВДнях=Проект.ОбщийБюджетПоПроекту/8;
//					Запись.БюджетПлановый=Проект.БюджетПлановый;
//					Запись.БюджетПлановыйВДнях=Проект.БюджетПлановый/8;
//					
//					Запись.ДатаЗагрузкиДанных=ДатаЗагрузки;
//					
//					НаборЗаписей.Записать(Ложь);
//					
//				КонецЕсли;	
//				
//				oOraDynaset.MoveNext();
//			КонецЦикла; 
//			oOraDynaset.Close(); //запрос к CRM.CRM_PROJECT
//			ОбъектПроект.ДатаСинхронизацииЖизненногоЦикла =ДатаЗагрузки;
//			
//			Попытка
//				ОбъектПроект.Записать();
//			Исключение
//				//Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+" для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//				Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+КодПроектаCRM+"("+Выборка.Наименование+") for client "+Выборка.Партнер+" "+ ОписаниеОшибки()));
//			КонецПопытки;
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	
//	
//	Попытка
//		OraDatabase.Close();
//	Исключение
//		Сообщить("Cannot close connection to Oracle " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
//	КонецПопытки;	
//	
//	OraDatabase=Неопределено;
//	OraSession=Неопределено;
//	
//КонецПроцедуры	
//
//Процедура РассчитатьГруппировкуНаСервере(ОбъектПроект)
//	//Закомментировала т.к. теперь новый механизм 2017/07/18
//	//
//	//перезаполнить группировку
//	//
//	//ЗапросВнедрение=Новый Запрос;
//	//ЗапросВнедрение.Текст= "ВЫБРАТЬ
//	//                       |	Постинг.Ссылка,
//	//                       |	Постинг.Task_Name_id,
//	//                       |	Постинг.Task_Name,
//	//                       |	Постинг.Action_User_ID,
//	//                       |	Постинг.Action_User,
//	//                       |	Постинг.Posted_Time,
//	//                       |	Постинг.Posted_Hour,
//	//                       |	Постинг.Grade,
//	//                       |	Постинг.GradeValue,
//	//                       |	Постинг.EstimationOfPostedDays,
//	//                       |	Постинг.EmployeeFunction,
//	//                       |	Постинг.PositionOfEmployee,
//	//                       |	Постинг.Project_Queue,
//	//                       |	Постинг.СотрудникИзCRM,
//	//                       |	Постинг.Type,
//	//                       |	ЗадачиПроектовTaskBudget.Planned_Hour,
//	//                       |	ЗадачиПроектовTaskBudget.Planned_Time,
//	//                       |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDays,
//	//                       |	ЗадачиПроектовTaskBudget.Planned_GradeValueManual,
//	//                       |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDaysManual,
//	//                       |	Постинг.Milestone_Name,
//	//                       |	Постинг.Milestone_Name_id,
//	//                       |	ЗадачиПроектовTaskBudget.MilestonesOfProject,
//	//                       |	ЗадачиПроектовTaskBudget.TasksOfMilestomes
//	//                       |ИЗ
//	//                       |	(ВЫБРАТЬ
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Ссылка КАК Ссылка,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Action_User_ID КАК Action_User_ID,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Action_User КАК Action_User,
//	//                       |		СУММА(ЗадачиПроектовВремяПотраченноеНаПроект.Posted_Time) КАК Posted_Time,
//	//                       |		СУММА(ЗадачиПроектовВремяПотраченноеНаПроект.Posted_Hour) КАК Posted_Hour,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Grade КАК Grade,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.GradeValue КАК GradeValue,
//	//                       |		СУММА(ЗадачиПроектовВремяПотраченноеНаПроект.EstimationOfPostedDays) КАК EstimationOfPostedDays,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.EmployeeFunction КАК EmployeeFunction,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.PositionOfEmployee КАК PositionOfEmployee,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Project_Queue КАК Project_Queue,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.СотрудникИзCRM КАК СотрудникИзCRM,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Task_Name_id КАК Task_Name_id,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Type КАК Type,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Task_Name КАК Task_Name,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Milestone_Name КАК Milestone_Name,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Milestone_Name_id КАК Milestone_Name_id
//	//                       |	ИЗ
//	//                       |		Справочник.ЗадачиПроектов.ВремяПотраченноеНаПроект КАК ЗадачиПроектовВремяПотраченноеНаПроект
//	//                       |	ГДЕ
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Ссылка = &СсылкаНаПроект
//	//                       |	
//	//                       |	СГРУППИРОВАТЬ ПО
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Ссылка,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Task_Name_id,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Task_Name,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Type,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Action_User_ID,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Action_User,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Grade,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.GradeValue,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.EmployeeFunction,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.PositionOfEmployee,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Project_Queue,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.СотрудникИзCRM,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Milestone_Name,
//	//                       |		ЗадачиПроектовВремяПотраченноеНаПроект.Milestone_Name_id) КАК Постинг
//	//                       |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроектов.TaskBudget КАК ЗадачиПроектовTaskBudget
//	//                       |		ПО Постинг.Ссылка = ЗадачиПроектовTaskBudget.Ссылка
//	//                       |			И Постинг.Task_Name_id = ЗадачиПроектовTaskBudget.Task_Name_id
//	//                       |			И Постинг.Action_User_ID = ЗадачиПроектовTaskBudget.Project_Officer_ID
//	//                       |			И Постинг.Type = ЗадачиПроектовTaskBudget.Type";
//	//					   
//	//					   
//	//	
//	//ЗапросВнедрение2=Новый Запрос;
//	//ЗапросВнедрение2.Текст= "ВЫБРАТЬ
//	//                        |	ЗадачиПроектовTaskBudget.Milestone_Name КАК Milestone_Name,
//	//                        |	ЗадачиПроектовTaskBudget.Task_Name КАК Task_Name,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Name_id,
//	//                        |	ЗадачиПроектовTaskBudget.Milestone_Name_id,
//	//                        |	ЗадачиПроектовTaskBudget.Task_Name_id,
//	//                        |	СУММА(ЗадачиПроектовTaskBudget.Planned_Hour) КАК Planned_Hour,
//	//                        |	СУММА(ЗадачиПроектовTaskBudget.Used_Hour) КАК Used_Hour,
//	//                        |	СУММА(ЗадачиПроектовTaskBudget.Planned_Time) КАК Planned_Time,
//	//                        |	СУММА(ЗадачиПроектовTaskBudget.Used_Time) КАК Used_Time,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Officer_ID КАК Action_User_ID,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Officer КАК Action_User,
//	//                        |	ЗадачиПроектовTaskBudget.СотрудникИзCRM,
//	//                        |	ЗадачиПроектовTaskBudget.Type,
//	//                        |	ЗадачиПроектовTaskBudget.Ссылка,
//	//                        |	ЗадачиПроектовTaskBudget.Grade,
//	//                        |	ЗадачиПроектовTaskBudget.GradeValue,
//	//                        |	ЗадачиПроектовTaskBudget.EmployeeFunction,
//	//                        |	ЗадачиПроектовTaskBudget.PositionOfEmployee,
//	//                        |	ЗадачиПроектовTaskBudget.GradeDate,
//	//                        |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDays,
//	//                        |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDaysManual,
//	//                        |	ЗадачиПроектовTaskBudget.Planned_GradeValueManual,
//	//                        |	ЗадачиПроектовTaskBudget.MilestonesOfProject,
//	//                        |	ЗадачиПроектовTaskBudget.TasksOfMilestomes
//	//                        |ИЗ
//	//                        |	Справочник.ЗадачиПроектов.TaskBudget КАК ЗадачиПроектовTaskBudget
//	//                        |ГДЕ
//	//                        |	ЗадачиПроектовTaskBudget.Ссылка = &СсылкаНаПроект
//	//                        |
//	//                        |СГРУППИРОВАТЬ ПО
//	//                        |	ЗадачиПроектовTaskBudget.Milestone_Name,
//	//                        |	ЗадачиПроектовTaskBudget.Task_Name,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Name_id,
//	//                        |	ЗадачиПроектовTaskBudget.Milestone_Name_id,
//	//                        |	ЗадачиПроектовTaskBudget.Task_Name_id,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Officer_ID,
//	//                        |	ЗадачиПроектовTaskBudget.Project_Officer,
//	//                        |	ЗадачиПроектовTaskBudget.СотрудникИзCRM,
//	//                        |	ЗадачиПроектовTaskBudget.Type,
//	//                        |	ЗадачиПроектовTaskBudget.Ссылка,
//	//                        |	ЗадачиПроектовTaskBudget.Grade,
//	//                        |	ЗадачиПроектовTaskBudget.GradeValue,
//	//                        |	ЗадачиПроектовTaskBudget.EmployeeFunction,
//	//                        |	ЗадачиПроектовTaskBudget.PositionOfEmployee,
//	//                        |	ЗадачиПроектовTaskBudget.GradeDate,
//	//                        |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDays,
//	//                        |	ЗадачиПроектовTaskBudget.EstimationOfPlannedDaysManual,
//	//                        |	ЗадачиПроектовTaskBudget.Planned_GradeValueManual,
//	//                        |	ЗадачиПроектовTaskBudget.MilestonesOfProject,
//	//                        |	ЗадачиПроектовTaskBudget.TasksOfMilestomes";
//	//				   
//	//ОбъектПроект.ВремяПотраченноеНаПроектСГруппировкой.Очистить();
//	//ЗапросВнедрение.УстановитьПараметр("СсылкаНаПроект", ОбъектПроект.Ссылка);
//	//ВыборкаВнедрение = ЗапросВнедрение.Выполнить().Выбрать();
//	//Пока ВыборкаВнедрение.Следующий() Цикл
//	//	Строка=ОбъектПроект.ВремяПотраченноеНаПроектСГруппировкой.Добавить();
//	//	ЗаполнитьЗначенияСвойств(Строка, ВыборкаВнедрение);
//	//КонецЦикла;
//	//
//	//ЗапросВнедрение2.УстановитьПараметр("СсылкаНаПроект", ОбъектПроект.Ссылка);
//	//ВыборкаВнедрение2 = ЗапросВнедрение2.Выполнить().Выгрузить();
//	//Для Каждого Строка Из ВыборкаВнедрение2 Цикл
//	//    Отбор = Новый Структура();
//	//	Отбор.Вставить("Task_Name_id",Строка.Task_Name_id);
//	//	Отбор.Вставить("Type",Строка.Type);
//	//    Отбор.Вставить("Action_User_ID",Строка.Action_User_ID);
//	
//	//	ППОтбор=ОбъектПроект.ВремяПотраченноеНаПроектСГруппировкой.НайтиСтроки(Отбор);
//	//	Если ППОтбор.Количество()=0 Тогда
//	
//	//		СтрокаТЧ=ОбъектПроект.ВремяПотраченноеНаПроектСГруппировкой.Добавить();
//	//		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
//	//	КонецЕсли;	
//	//КонецЦикла;
//	
//	//	
//	//ОбъектПроект.ВремяПотраченноеНаПроектСГруппировкой.Сортировать("Milestone_Name, Task_Name, Action_User Возр");					   
//	
//КонецПроцедуры
//
//Процедура ЗаписатьПостинг(ОбъектПроект)
//	//Закомментировала т.к. теперь новый механизм 2017/07/18
//	
//	////проверяем, что запись с Action_ID существует
//	//Для Каждого Строка Из ОбъектПроект.ВремяПотраченноеНаПроект Цикл
//	//	Запрос=Новый Запрос;
//	//	Запрос.Текст="ВЫБРАТЬ
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Период,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Action_ID,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Action_Date,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Amnd_Date,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Action_User_ID,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Posted_Time,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Posted_Hour,
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Amnd_State
//	//	             |ИЗ
//	//	             |	РегистрСведений.ИзмененияПостингаПоПроектамВнедрения КАК ИзмененияПостингаПоПроектамВнедрения
//	//	             |ГДЕ
//	//	             |	ИзмененияПостингаПоПроектамВнедрения.Action_ID = &Action_ID
//	//	             |	И ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения = &ПроектВнедрения";
//	//				 
//	//	Запрос.УстановитьПараметр("Action_ID", Строка.Action_ID);
//	//	Запрос.УстановитьПараметр("ПроектВнедрения", ОбъектПроект.Ссылка);
//	//	Результат=Запрос.Выполнить().Выбрать();
//	// 	
//	//	Если Не Результат.Следующий() Тогда //нет записи с Action_ID
//	//		//создаем ее
//	//		НаборЗаписей = РегистрыСведений.ИзмененияПостингаПоПроектамВнедрения.СоздатьНаборЗаписей();
//	//		НаборЗаписей.Отбор.ПроектВнедрения.Установить(ОбъектПроект.Ссылка);
//	//		НаборЗаписей.Отбор.Action_ID.Установить(Строка.Action_ID);
//	//		НаборЗаписей.Отбор.Action_Date.Установить(Строка.Action_Date);
//	//		НаборЗаписей.Отбор.Amnd_Date.Установить(Строка.Amnd_Date);
//	//		НаборЗаписей.Отбор.Action_User_ID.Установить(Строка.Action_User_ID);
//	//		НаборЗаписей.Отбор.Posted_Time.Установить(Строка.Posted_Time);
//	//		НаборЗаписей.Отбор.Posted_Hour.Установить(Строка.Posted_Hour);
//	//		НаборЗаписей.Отбор.Amnd_State.Установить(Строка.Amnd_State);
//	//		
//	//		Запись = НаборЗаписей.Добавить();
//	//		Запись.ПроектВнедрения     =  ОбъектПроект.Ссылка;
//	//		Запись.Период=ТекущаяДата();
//	//		Запись.КодПроектаCRM = ОбъектПроект.Ссылка.КодПроектаCRM;
//	//		Запись.СтатусЗаписиПоПостингу  =  Перечисления.СтатусЗаписиПоПостингу.ЗаписьДобавлена;	
//	//		ЗаполнитьЗначенияСвойств(Запись, Строка);		
//	//		НаборЗаписей.Записать(Ложь);
//	
//	//	Иначе //есть запись, проверяем изменилась ли запись 
//	//		Запрос=Новый Запрос;
//	//		Запрос.Текст="ВЫБРАТЬ
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Период,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Action_ID,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Action_Date,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Amnd_Date,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Action_User_ID,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Posted_Time,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Posted_Hour,
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Amnd_State
//	//		             |ИЗ
//	//		             |	РегистрСведений.ИзмененияПостингаПоПроектамВнедрения КАК ИзмененияПостингаПоПроектамВнедрения
//	//		             |ГДЕ
//	//		             |	ИзмененияПостингаПоПроектамВнедрения.Action_ID = &Action_ID
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения = &ПроектВнедрения
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Action_Date = &Action_Date
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Amnd_Date = &Amnd_Date
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Action_User_ID = &Action_User_ID
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Posted_Time = &Posted_Time
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Posted_Hour = &Posted_Hour
//	//		             |	И ИзмененияПостингаПоПроектамВнедрения.Amnd_State = &Amnd_State";
//	//		Запрос.УстановитьПараметр("Action_ID", Строка.Action_ID);
//	//		Запрос.УстановитьПараметр("ПроектВнедрения", ОбъектПроект.Ссылка);
//	//		Запрос.УстановитьПараметр("Action_Date", Строка.Action_Date);
//	//		Запрос.УстановитьПараметр("Amnd_Date", Строка.Amnd_Date);
//	//        Запрос.УстановитьПараметр("Action_User_ID", Строка.Action_User_ID);
//	//        Запрос.УстановитьПараметр("Posted_Time", Строка.Posted_Time);
//	//        Запрос.УстановитьПараметр("Posted_Hour", Строка.Posted_Hour);
//	//		Запрос.УстановитьПараметр("Amnd_State", Строка.Amnd_State);
//	//		
//	//		Результат=Запрос.Выполнить().Выбрать();
//	
//	//		Если Не Результат.Следующий() Тогда //по записи с Action_ID есть изменение
//	//			//создаем отдельную запись с изменениями
//	//			НаборЗаписей = РегистрыСведений.ИзмененияПостингаПоПроектамВнедрения.СоздатьНаборЗаписей();
//	//			НаборЗаписей.Отбор.ПроектВнедрения.Установить(ОбъектПроект.Ссылка);
//	//			НаборЗаписей.Отбор.Action_ID.Установить(Строка.Action_ID);
//	//			НаборЗаписей.Отбор.Action_Date.Установить(Строка.Action_Date);
//	//			НаборЗаписей.Отбор.Amnd_Date.Установить(Строка.Amnd_Date);
//	//			НаборЗаписей.Отбор.Action_User_ID.Установить(Строка.Action_User_ID);
//	//			НаборЗаписей.Отбор.Posted_Time.Установить(Строка.Posted_Time);
//	//			НаборЗаписей.Отбор.Posted_Hour.Установить(Строка.Posted_Hour);
//	//            НаборЗаписей.Отбор.Amnd_State.Установить(Строка.Amnd_State);
//	//			
//	//			Запись = НаборЗаписей.Добавить();
//	//			Запись.ПроектВнедрения     =  ОбъектПроект.Ссылка;
//	//			Запись.Период=ТекущаяДата();
//	//			Запись.КодПроектаCRM = ОбъектПроект.Ссылка.КодПроектаCRM;
//	//			Запись.СтатусЗаписиПоПостингу  =  Перечисления.СтатусЗаписиПоПостингу.ЗаписьИзменена;	
//	//			ЗаполнитьЗначенияСвойств(Запись, Строка);		
//	//			НаборЗаписей.Записать(Ложь);
//	//       КонецЕсли;
//	//		
//	//	КонецЕсли;
//	//КонецЦикла;
//КонецПроцедуры
//
////Обработка Договоров, которые находяться в статусе On HOLD больше 3 месяцев
//
//Процедура OW_ПроверкаАкуальностиДоговоров() Экспорт
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("OW_ПроверкаАкуальностиДоговоров");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ИзменениеСтатусаСоглашенияСрезПоследних.Статус,
//	|	ИзменениеСтатусаСоглашенияСрезПоследних.Период,
//	|	ИзменениеСтатусаСоглашенияСрезПоследних.СоглашениеСКлиентом КАК Документ,
//	|	ДОБАВИТЬКДАТЕ(ИзменениеСтатусаСоглашенияСрезПоследних.Период, Месяц, 3) КАК ДатаАннулированияДоговора
//	|ИЗ
//	|	РегистрСведений.ИзменениеСтатусаСоглашения.СрезПоследних(&ТекДата, ) КАК ИзменениеСтатусаСоглашенияСрезПоследних
//	|ГДЕ
//	|	ИзменениеСтатусаСоглашенияСрезПоследних.Статус = &СтатусПриостановлено
//	| И ДОБАВИТЬКДАТЕ(ИзменениеСтатусаСоглашенияСрезПоследних.Период, Месяц, 3) <= &ТекДата
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	| И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//	|		ИЛИ (ИзменениеСтатусаСоглашенияСрезПоследних.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|			ИЛИ ИзменениеСтатусаСоглашенияСрезПоследних.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА
//	|				И ИзменениеСтатусаСоглашенияСрезПоследних.Организация.ВидИнстансJIRA = &ВидИнстансJIRA))
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	|
//	|";
//	
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	Запрос.УстановитьПараметр("СтатусПриостановлено", Перечисления.СтатусыСоглашений.Приостановлено);
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		мДатаПроверки = ТекущаяДата();
//		мВероятность  =0;
//		Если Выборка.Документ.СтатусСоглашения=Перечисления.СтатусыСоглашений.Приостановлено Тогда
//			ЗаписатьИзмененияВДоговоре(Выборка.Документ,мВероятность,мДатаПроверки);
//		КонецЕсли;	
//		
//	КонецЦикла;
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ЗаписатьИзмененияВДоговоре(Документ,Вероятность,ДатаПроверки)
//	
//	Попытка
//		
//		мДокОбъект = Документ.ПолучитьОбъект();
//		мДокОбъект.Вероятность = Вероятность;
//		
//		мДокОбъект.ДатаИзмененияСтатуса  = ДатаПроверки;
//		мДокОбъект.СтатусСоглашения=  Перечисления.СтатусыСоглашений.Аннулирован;
//		ПричинаИзмененияСтатуса="";
//		ПричинаИзмененияСтатуса=мДокОбъект.ПричиныИзмененияСтатуса;
//		мДокОбъект.ПричиныИзмененияСтатуса="Договор находился в статусе ""Приостановлено (On Hold)"" больше трех месяцев"+
//		", дата проверки - "+Формат(ДатаПроверки, "ДЛФ=Д")+Символы.ПС+ПричинаИзмененияСтатуса;
//		
//		мДокОбъект.Записать();
//		мДокумент = мДокОбъект.Ссылка;
//		
//		//записать изменение статуса договора
//		Регистр = РегистрыСведений.ИзменениеСтатусаСоглашения.СоздатьНаборЗаписей();
//		Движение=Регистр.Добавить();
//		Движение.Период=мДокумент.ДатаИзмененияСтатуса;
//		Движение.ДатаИзмененияСтатуса=мДокумент.ДатаИзмененияСтатуса;
//		Движение.Партнер =мДокумент.Партнер;
//		Движение.СоглашениеСКлиентом=мДокумент;
//		Движение.Организация=мДокумент.Организация;
//		Движение.Статус=мДокумент.СтатусСоглашения;
//		Движение.ПричинаИзмененияСтатуса="Договор находился в статусе ""Приостановлено (On Hold)"" больше трех месяцев, дата проверки -  " +Формат(ДатаПроверки, "ДЛФ=Д");
//		Движение.Вероятность=мДокумент.Вероятность;
//		Регистр.Записать(Ложь);
//		
//		//ОтправитьУведомлениеОбИзмененииСтатусаДоговора(мДокумент)
//	Исключение
//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ЗаписьВероятности", 
//		УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.СоглашенияСКлиентами,
//		"Не удалось отменить соглашение, находящееся в статусе Приостановлено больше 3 месяцев: " + Документ); 
//	КонецПопытки;
//	
//КонецПроцедуры
//
////Процедура ОтправитьУведомлениеОбИзмененииСтатусаДоговора(Соглашение) Экспорт
////	
////	Получатели="";
////	
////	ПользовательПолучатель = Соглашение.Партнер.Куратор;
////	Если OW_Нотификации.ОтправкаРассылкиВключена(ПользовательПолучатель, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусов) 
////		И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ПользовательПолучатель) Тогда   //OW Копачев А.С. 20.04.2023 ONEC-7812
////		ПочтовыйАдресПолучателяКуратор = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПользовательПолучатель);
////		Если НЕ ПустаяСтрока(ПочтовыйАдресПолучателяКуратор) Тогда
////			Если Получатели="" Тогда
////				Получатели = ПочтовыйАдресПолучателяКуратор ;
////			Иначе	
////				Получатели = Получатели +";"+ ПочтовыйАдресПолучателяКуратор;
////			КонецЕсли;	
////		КонецЕсли;
////	КонецЕсли;
////	
////	
////	//***OW Start [БПВ]05.06.2018 
////	ПользовательПолучатель = Соглашение.Партнер.ОсновнойМенеджер;
////	Если Не OW.ПроверитьПользователяНаРоль(ПользовательПолучатель,"НеОтпралятьНотификациюДляEMEAA") тогда   			
////		Если OW_Нотификации.ОтправкаРассылкиВключена(ПользовательПолучатель, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусов) 
////			И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ПользовательПолучатель) Тогда //OW Копачев А.С. 20.04.2023 ONEC-7812
////			ПочтовыйАдресПолучателяМенеджер = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПользовательПолучатель);
////			Если НЕ ПустаяСтрока(ПочтовыйАдресПолучателяМенеджер) Тогда
////				Если Получатели="" Тогда
////					Получатели = ПочтовыйАдресПолучателяМенеджер ;
////				Иначе	
////					Получатели = Получатели +";"+ ПочтовыйАдресПолучателяМенеджер;
////				КонецЕсли;		
////			КонецЕсли;
////		КонецЕсли;
////	КонецЕсли;        
////	
////	ПользовательПолучатель = Соглашение.Партнер.ВторойМенеджер;
////	Если Не OW.ПроверитьПользователяНаРоль(ПользовательПолучатель,"НеОтпралятьНотификациюДляEMEAA") тогда   
////		Если Соглашение.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			Если OW_Нотификации.ОтправкаРассылкиВключена(ПользовательПолучатель, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусов) 
////				И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ПользовательПолучатель) Тогда //OW Копачев А.С. 20.04.2023 ONEC-7812 
////				ПочтовыйАдресПолучателяВторойМенеджер = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПользовательПолучатель);
////				Если НЕ ПустаяСтрока(ПочтовыйАдресПолучателяВторойМенеджер) Тогда
////					Если Получатели="" Тогда
////						Получатели = ПочтовыйАдресПолучателяВторойМенеджер ;
////					Иначе	
////						Получатели = Получатели +";"+ ПочтовыйАдресПолучателяВторойМенеджер;
////					КонецЕсли;		
////				КонецЕсли;
////			КонецЕсли;
////		КонецЕсли;
////	КонецЕсли;      
////	
////	ПользовательПолучатель = Соглашение.Партнер.ТретийМенеджер;
////	Если Не OW.ПроверитьПользователяНаРоль(ПользовательПолучатель,"НеОтпралятьНотификациюДляEMEAA") тогда   
////		Если Соглашение.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			Если OW_Нотификации.ОтправкаРассылкиВключена(ПользовательПолучатель, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусов)
////				И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ПользовательПолучатель) Тогда //OW Копачев А.С. 20.04.2023 ONEC-7812 	
////				ПочтовыйАдресПолучателяТретийМенеджер = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПользовательПолучатель);
////				Если НЕ ПустаяСтрока(ПочтовыйАдресПолучателяТретийМенеджер) Тогда
////					Если Получатели="" Тогда
////						Получатели = ПочтовыйАдресПолучателяТретийМенеджер ;
////					Иначе	
////						Получатели = Получатели +";"+ ПочтовыйАдресПолучателяТретийМенеджер;
////					КонецЕсли;		
////				КонецЕсли;
////			КонецЕсли;
////		КонецЕсли;
////	КонецЕсли;
////	//***OW End [БПВ]05.06.2018 
////	
////	
////	ТекстПисьма = "  "+"Уведомление об изменении статуса соглашения:"+Символы.ПС+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Customer: "+СОКРЛП(Соглашение.Партнер.НаименованиеARM)+" ("+Соглашение.Партнер.Наименование+")"+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Contract: "+СОКРЛП(Соглашение.Номер)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Main Project: "+СОКРЛП(Соглашение.Проект.Родитель.Наименование)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Sub Project: "+СОКРЛП(Соглашение.Проект.Наименование)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Sale Manager: "+СОКРЛП(Соглашение.Партнер.Куратор.НаименованиеARM)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Account Manager: "+СОКРЛП(Соглашение.Партнер.ОсновнойМенеджер.НаименованиеARM)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"From Status: "+СОКРЛП(Соглашение.СтатусСоглашенияСтарыйДляРассылки)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"To Status: "+СОКРЛП(Соглашение.СтатусСоглашения)+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+"Performed by: Статус изменен ""Регламентным заданием"": Договор находился в статусе ""Приостановлено (On Hold)"" больше трех месяцев.";
////	ТекстПисьма = ТекстПисьма+ "  "+"Perform date: "+Соглашение.ДатаИзмененияСтатуса;
////	ТемаПисьма =СОКРЛП(Соглашение.Партнер.НаименованиеARM) + ". New status: "+Соглашение.СтатусСоглашения;
////	
////	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
////	Если ЭтоРабочаяБаза=Ложь Тогда
////		//в тестовой базе шлем письма только на отдел 1С
////		Получатели="";
////		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
////		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
////		Получатели = СлужебныйEmail;
////	КонецЕсли; 
////	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
////	//ПараметрыПисьма = Новый Структура;
////	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
////	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
////	//ПараметрыПисьма.Вставить("Кому", Получатели);
////	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
////	//
////	//Попытка 
////	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
////	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
////	//Исключение
////	//	Возврат;
////	//КонецПопытки;	
////	
////	СписокАдресовКому = Новый СписокЗначений;	
////	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
////	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//
////		
////КонецПроцедуры
//
//Процедура OW_ТестСоединенияСOracle() Экспорт
//	
//	Подключились=Ложь;
//	Попытка //OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession")
//		OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession");	
//		Попытка
//			OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//			Подключились=Истина;
//		Исключение 
//			OraDatabase=Неопределено;
//			OraSession=Неопределено;
//			Подключились=Ложь;
//			//запишем в журнал регистрации
//			//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Тест соединения с Oracle'"), 
//			//УровеньЖурналаРегистрации.Информация,,,
//			//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//			
//			//Скрипт=Новый COMОбъект("WScript.Network");
//			//User=Скрипт.UserName;
//			
//						
//			//сформируем письмо 1
//			ТекстПисьма = "Ошибка при выполнении фонового задания ""Тест соединения с Oracle"":"+Символы.ПС+Символы.ПС; 
//			ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())+Символы.ПС;
//			ТекстПисьма=ТекстПисьма+Строка(OraSession.LastServerErrText)+Символы.ПС;
//			ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Тест соединения с Oracle"" - %1'"), Метаданные.КраткаяИнформация);
//			
//			//++OW Копачев А.С. 07.09.2022 ONEC-7882
//
//			////отправим письмо на первый адрес
//			//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//			//ПараметрыПисьма = Новый Структура;
//			//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//			//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//			//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//			//
//			//Попытка 
//			//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//			//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//			//Исключение
//			//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Тест соединения с Oracle"". Уведомление об ошибках при подключении к CRM", 
//			//	УровеньЖурналаРегистрации.Ошибка,,,
//			//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//			//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//			//КонецПопытки;
//			//
//			////отправим письмо на второй адрес
//			//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//			//ПараметрыПисьма = Новый Структура;
//			//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//			//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//			//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//			//
//			//Попытка 
//			//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//			//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//			//Исключение
//			//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Тест соединения с Oracle"". Уведомление об ошибках при подключении к CRM", 
//			//	УровеньЖурналаРегистрации.Ошибка,,,
//			//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//			//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//			//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//			//КонецПопытки;
//					
//			СписокАдресовКому = Новый СписокЗначений;	
//			СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//			СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//			OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//			//--OW Копачев А.С. 07.09.2022 ONEC-7882
//			
//		КонецПопытки;		
//		
//		//	Сообщить(OraSession.LastServerErrText);
//	Исключение //OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession")
//		Подключились=Ложь;
//		//запишем в журнал регистрации
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Тест соединения с Oracle'"), 
//		//УровеньЖурналаРегистрации.Информация,,,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Не удалось создать Новый COMОбъект(""OracleInProcServer.XOraSession"").'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		
//		//сформируем письмо
//		ТекстПисьма = "Ошибка при выполнении фонового задания ""Тест соединения с Oracle"": Не удалось создать Новый COMОбъект(""OracleInProcServer.XOraSession"")"+Символы.ПС+Символы.ПС; 
//		ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Тест соединения с Oracle"" - %1'"), Метаданные.КраткаяИнформация);
//		
//		//++OW Копачев А.С. 07.09.2022 ONEC-7882
//		
//		////отправим письмо на первый адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Тест соединения с Oracle"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		////отправим письмо на 2 адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Тест соединения с Oracle"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//			
//		СписокАдресовКому = Новый СписокЗначений;	
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 07.09.2022 ONEC-7882
//		
//	КонецПопытки; 
//	
//	Если Подключились=Ложь Тогда				
//		Возврат;
//	КонецЕсли;
//	
//	Попытка
//		OraDatabase.Close();
//	Исключение
//		ЗаписьЖурналаРегистрации("Фоновое задание: ""Тест соединения с Oracle"". Уведомление об ошибках при подключении к CRM", 
//		УровеньЖурналаРегистрации.Ошибка,,,
//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		"Не удается закрыть подключение к Oracle: %1", 
//		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	КонецПопытки;	
//	
//	OraDatabase=Неопределено;
//	OraSession=Неопределено;
//КонецПроцедуры
//
////анализ задолженности по счету
//Процедура OW_АнализЗадолженностиПоСчету2() Экспорт
//	
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	СчетНаОплатуКлиенту.Ссылка КАК Счет,
//	|	СчетНаОплатуКлиенту.Партнер КАК Партнер,
//	|	СчетНаОплатуКлиенту.ДатаВыставленияСчета КАК ДатаВыставленияСчета,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 30)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 30), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше30Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше60Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше90Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше120Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше150Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше180Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше210Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше240Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше270Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше300Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше330Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360), ДЕНЬ, 1)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше360Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СчетНаОплатуКлиенту.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 390)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК СДатыВыставленияСчетаПрошлоБольше390Дней,
//	|	СчетНаОплатуКлиенту.Соглашение
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//	|ГДЕ
//	|	(СчетНаОплатуКлиенту.СтатусСчета = &СозданСчет
//	|			ИЛИ СчетНаОплатуКлиенту.СтатусСчета = &СчетДоставленКлиенту
//	|			ИЛИ СчетНаОплатуКлиенту.СтатусСчета = &СчетОтправленКлиенту
//	|			ИЛИ СчетНаОплатуКлиенту.СтатусСчета = &СчетОтправленНаПодпись
//	|			ИЛИ СчетНаОплатуКлиенту.СтатусСчета = &CчетПринятКОплате
//	|			ИЛИ СчетНаОплатуКлиенту.СтатусСчета = &Активен)
//	|	И СчетНаОплатуКлиенту.ПометкаУдаления = ЛОЖЬ
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	СчетНаОплатуКлиенту.Ссылка,
//	|	СчетНаОплатуКлиенту.Партнер,
//	|	СчетНаОплатуКлиенту.ДатаВыставленияСчета,
//	|	СчетНаОплатуКлиенту.Соглашение";
//	
//	Запрос.УстановитьПараметр("СозданСчет", Перечисления.СтатусыСчета.СозданСчет);
//	Запрос.УстановитьПараметр("СчетДоставленКлиенту", Перечисления.СтатусыСчета.СчетДоставленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленКлиенту", Перечисления.СтатусыСчета.СчетОтправленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленНаПодпись", Перечисления.СтатусыСчета.СчетОтправленНаПодпись);
//	Запрос.УстановитьПараметр("CчетПринятКОплате", Перечисления.СтатусыСчета.CчетПринятКОплате);
//	Запрос.УстановитьПараметр("Активен", Перечисления.СтатусыСчета.Активен);
//	
//	
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		ОтправляемНотификацию=Ложь;
//		//От 30 до 60 дней	
//		Если Выборка.СДатыВыставленияСчетаПрошлоБольше30Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 30 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 60 до 90 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше60Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 60 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 90 до 120 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше90Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 90 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 120 до 150 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше120Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 120 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 150 до 180 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше150Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 150 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 180 до 210 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше180Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 180 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 210 до 240 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше210Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 210 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 240 до 270 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше240Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 240 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 270 до 300 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше270Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 270 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 300 до 330 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше300Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 300 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 330 до 360 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше330Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 330 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//От 360 до 390 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше360Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 360 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//			//Больше 390 дней	
//		ИначеЕсли Выборка.СДатыВыставленияСчетаПрошлоБольше390Дней=Истина Тогда
//			ОтправляемНотификацию=Истина;
//			НаименованиеУведомления="С даты выставления счета прошло больше 390 дней";
//			ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" по клиенту "+Выборка.Партнер.НаименованиеARM;
//		КонецЕсли;	
//		Если ОтправляемНотификацию=Истина Тогда	
//			
//			//++OW Копачев А.С. 23.08.2023 ONEC-8710
//			//Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			////для каждого менеджера отправим нотификацию об изменении статуса
//			//Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;
//			//КонецЕсли;
//				
//			
//			// Определяем получателей
//			ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаИнформацияПоСчетам;		
//			МассивДоступныхПользователейРассылки = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);		
//			
//			МассивПользователейРассылки = Новый Массив;  
//			
//			Партнер = Выборка.Партнер;
//			// куратор   
//			Куратор = Партнер.Куратор;
//			Если МассивДоступныхПользователейРассылки.Найти(Куратор) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(Куратор);
//			КонецЕсли;
//			
//			// основной менеджер   
//			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ОсновнойМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ОсновнойМенеджер);
//			КонецЕсли;	
//			
//			// второй менеджер   
//			ВторойМенеджер = Партнер.ВторойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ВторойМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ВторойМенеджер);
//			КонецЕсли;
//			
//			// третий менеджер   
//			ТретийМенеджер = Партнер.ТретийМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ТретийМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ТретийМенеджер);
//			КонецЕсли;	
//			
//			СписокАдресов = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(МассивПользователейРассылки);  
//			
//			ТемаПисьма = НаименованиеУведомления;
//			ТекстПисьма = "  "+НаименованиеУведомления+":"+Символы.ПС+Символы.ПС;
//			ТекстПисьма = ТекстПисьма+ "  "+ТекстСообщения;
//			
//           	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресов,,,,, Выборка.Счет,,Выборка.Счет,Неопределено,,Истина);			
//			//--OW Копачев А.С. 23.08.2023 ONEC-8710
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецПроцедуры
//
//Процедура АнализЗадолженностиРУСCIS()
//    Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_АктуальностьСчетов.Документ КАК Счет,
//	|	OW_АктуальностьСчетов.Документ.Партнер КАК Партнер,
//	|	OW_АктуальностьСчетов.ДатаВыставленияСчета КАК ДатаВыставленияСчета,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 30)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше30Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше60Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше90Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше120Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше150Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше180Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше210Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше240Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше270Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше300Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше330Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 390)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше360Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 390)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше390Дней,
//	|	OW_АктуальностьСчетов.Документ.Соглашение КАК Соглашение,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше30Дней КАК СДатыВыставленияСчетаПрошлоБольше30Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше60Дней КАК СДатыВыставленияСчетаПрошлоБольше60Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше90Дней КАК СДатыВыставленияСчетаПрошлоБольше90Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше120Дней КАК СДатыВыставленияСчетаПрошлоБольше120Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше150Дней КАК СДатыВыставленияСчетаПрошлоБольше150Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше180Дней КАК СДатыВыставленияСчетаПрошлоБольше180Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше210Дней КАК СДатыВыставленияСчетаПрошлоБольше210Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше240Дней КАК СДатыВыставленияСчетаПрошлоБольше240Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше270Дней КАК СДатыВыставленияСчетаПрошлоБольше270Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше300Дней КАК СДатыВыставленияСчетаПрошлоБольше300Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше330Дней КАК СДатыВыставленияСчетаПрошлоБольше330Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше360Дней КАК СДатыВыставленияСчетаПрошлоБольше360Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше390Дней КАК СДатыВыставленияСчетаПрошлоБольше390Дней
//	|ИЗ
//	|	РегистрСведений.OW_АктуальностьСчетов КАК OW_АктуальностьСчетов
//	|ГДЕ
//	|	(OW_АктуальностьСчетов.СтатусСчета В (&СозданСчет, &СчетДоставленКлиенту, &СчетОтправленКлиенту, &СчетОтправленНаПодпись, &CчетПринятКОплате, &Активен))
//	|	И OW_АктуальностьСчетов.Документ.ПометкаУдаления = ЛОЖЬ
//	|	И OW_АктуальностьСчетов.Партнер.Рассылка = ИСТИНА
//	|	И НЕ OW_АктуальностьСчетов.Партнер.БизнесРегион В (&СписокБизнесРегионов)
//	|
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	|И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//	|		ИЛИ (OW_АктуальностьСчетов.Документ.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|			ИЛИ OW_АктуальностьСчетов.Документ.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА
//	|				И OW_АктуальностьСчетов.Документ.Организация.ВидИнстансJIRA = &ВидИнстансJIRA))
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	OW_АктуальностьСчетов.Документ,
//	|	OW_АктуальностьСчетов.Документ.Партнер,
//	|	OW_АктуальностьСчетов.ДатаВыставленияСчета,
//	|	OW_АктуальностьСчетов.Документ.Соглашение,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше30Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше60Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше90Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше120Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше150Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше180Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше210Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше240Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше270Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше300Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше330Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше360Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше390Дней";
//	
//	Запрос.УстановитьПараметр("СозданСчет", Перечисления.СтатусыСчета.СозданСчет);
//	Запрос.УстановитьПараметр("СчетДоставленКлиенту", Перечисления.СтатусыСчета.СчетДоставленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленКлиенту", Перечисления.СтатусыСчета.СчетОтправленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленНаПодпись", Перечисления.СтатусыСчета.СчетОтправленНаПодпись);
//	Запрос.УстановитьПараметр("CчетПринятКОплате", Перечисления.СтатусыСчета.CчетПринятКОплате);
//	Запрос.УстановитьПараметр("Активен", Перечисления.СтатусыСчета.Активен);
//	//+ Пилюгин В.Е. 23.08.2017
//	СписокБизнесРегионов = Новый СписокЗначений;
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.Asia);
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.Europe);
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.MiddleEast);
//	Запрос.УстановитьПараметр("СписокБизнесРегионов", СписокБизнесРегионов);
//	//- Пилюгин В.Е. 23.08.2017	
//	
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		ОтправляемНотификацию=Ложь;
//		//От 30 до 60 дней	
//		Если Выборка.ПрошлоБольше30Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше30Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 30 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 60 до 90 дней	
//		ИначеЕсли Выборка.ПрошлоБольше60Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше60Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 60 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 90 до 120 дней	
//		ИначеЕсли Выборка.ПрошлоБольше90Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше90Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 90 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;
//			//От 120 до 150 дней	
//		ИначеЕсли Выборка.ПрошлоБольше120Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше120Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 120 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 150 до 180 дней	
//		ИначеЕсли Выборка.ПрошлоБольше150Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше150Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 150 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 180 до 210 дней	
//		ИначеЕсли Выборка.ПрошлоБольше180Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше180Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 180 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 210 до 240 дней	
//		ИначеЕсли Выборка.ПрошлоБольше210Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше210Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 210 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 240 до 270 дней	
//		ИначеЕсли Выборка.ПрошлоБольше240Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше240Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 240 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 270 до 300 дней	
//		ИначеЕсли Выборка.ПрошлоБольше270Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше270Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 270 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 300 до 330 дней	
//		ИначеЕсли Выборка.ПрошлоБольше300Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше300Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 300 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 330 до 360 дней	
//		ИначеЕсли Выборка.ПрошлоБольше330Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше330Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 330 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;		
//			//От 360 до 390 дней	
//		ИначеЕсли Выборка.ПрошлоБольше360Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше360Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 360 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//Больше 390 дней	
//		ИначеЕсли Выборка.ПрошлоБольше390Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше390Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". С даты выставления счета прошло больше 390 дней";
//				ТекстСообщения="Счет № "+СОКРЛП(Выборка.Счет.Номер)+" по договору № "+СОКРЛП(Выборка.Соглашение.Номер)+" (бизнес-проект = """+Выборка.Соглашение.Проект+""") по клиенту "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//		КонецЕсли;	
//		
//		//анализируем нужно ли отправлять нотификацию
//		Если ОтправляемНотификацию=Истина Тогда	
//						
//			
//			//++OW Копачев А.С. 23.08.2023 ONEC-8710
//			//Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			////для каждого менеджера отправим нотификацию об изменении статуса
//			//Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//	КонецЕсли;
//			//КонецЕсли;
//			//
//			////временно отправляю уведомление себе
//			////ОтправитьУведомлениеОЗадолженностиПоСчетуАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			////
//			//ОбновитьАктуальностьДанныхПоСчету(Выборка.Счет, ДатаПроверки, Выборка.ПрошлоБольше30Дней, Выборка.ПрошлоБольше60Дней, Выборка.ПрошлоБольше90Дней, Выборка.ПрошлоБольше120Дней, Выборка.ПрошлоБольше150Дней, Выборка.ПрошлоБольше180Дней, Выборка.ПрошлоБольше210Дней, Выборка.ПрошлоБольше240Дней, Выборка.ПрошлоБольше270Дней,Выборка.ПрошлоБольше300Дней, Выборка.ПрошлоБольше330Дней, Выборка.ПрошлоБольше360Дней, Выборка.ПрошлоБольше390Дней);	
//
//			
//			// Определяем получателей
//			ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаИнформацияПоСчетам;		
//			МассивДоступныхПользователейРассылки = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);		
//			
//			МассивПользователейРассылки = Новый Массив;  
//			
//			Партнер = Выборка.Партнер;
//			// куратор   
//			Куратор = Партнер.Куратор;
//			Если МассивДоступныхПользователейРассылки.Найти(Куратор) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(Куратор);
//			КонецЕсли;
//			
//			// основной менеджер   
//			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ОсновнойМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ОсновнойМенеджер);
//			КонецЕсли;	
//			
//			// второй менеджер   
//			ВторойМенеджер = Партнер.ВторойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ВторойМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ВторойМенеджер);
//			КонецЕсли;
//			
//			// третий менеджер   
//			ТретийМенеджер = Партнер.ТретийМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ТретийМенеджер) <> Неопределено Тогда
//				МассивПользователейРассылки.Добавить(ТретийМенеджер);
//			КонецЕсли;	
//			
//			СписокАдресов = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(МассивПользователейРассылки);  
//			
//			ТемаПисьма = НаименованиеУведомления;
//			ТекстПисьма = "  "+НаименованиеУведомления+":"+Символы.ПС+Символы.ПС;
//			ТекстПисьма = ТекстПисьма+ "  "+ТекстСообщения;
//			
//           	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресов,,,,, Выборка.Счет,,Выборка.Счет,Неопределено,,Истина);			
//						
//			ОбновитьАктуальностьДанныхПоСчету(Выборка.Счет, ДатаПроверки, Выборка.ПрошлоБольше30Дней, Выборка.ПрошлоБольше60Дней, Выборка.ПрошлоБольше90Дней, Выборка.ПрошлоБольше120Дней, Выборка.ПрошлоБольше150Дней, Выборка.ПрошлоБольше180Дней, Выборка.ПрошлоБольше210Дней, Выборка.ПрошлоБольше240Дней, Выборка.ПрошлоБольше270Дней,Выборка.ПрошлоБольше300Дней, Выборка.ПрошлоБольше330Дней, Выборка.ПрошлоБольше360Дней, Выборка.ПрошлоБольше390Дней);	
//			//--OW Копачев А.С. 23.08.2023 ONEC-8710
//
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры
//
//Процедура АнализЗадолженностиInternational()  Экспорт
//    Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_АктуальностьСчетов.Документ КАК Счет,
//	|	OW_АктуальностьСчетов.Документ.Партнер КАК Партнер,
//	|	OW_АктуальностьСчетов.ДатаВыставленияСчета КАК ДатаВыставленияСчета,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 30)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше30Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 60)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше60Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 90)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше90Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 120)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше120Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 150)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше150Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 180)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше180Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 210)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше210Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 240)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше240Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 270)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше270Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 300)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше300Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 330)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше330Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 360)
//	|					И &ТекДата < ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 390)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше360Дней,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(OW_АктуальностьСчетов.ДатаВыставленияСчета, ДЕНЬ), ДЕНЬ, 390)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПрошлоБольше390Дней,
//	|	OW_АктуальностьСчетов.Документ.Соглашение КАК Соглашение,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше30Дней КАК СДатыВыставленияСчетаПрошлоБольше30Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше60Дней КАК СДатыВыставленияСчетаПрошлоБольше60Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше90Дней КАК СДатыВыставленияСчетаПрошлоБольше90Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше120Дней КАК СДатыВыставленияСчетаПрошлоБольше120Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше150Дней КАК СДатыВыставленияСчетаПрошлоБольше150Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше180Дней КАК СДатыВыставленияСчетаПрошлоБольше180Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше210Дней КАК СДатыВыставленияСчетаПрошлоБольше210Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше240Дней КАК СДатыВыставленияСчетаПрошлоБольше240Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше270Дней КАК СДатыВыставленияСчетаПрошлоБольше270Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше300Дней КАК СДатыВыставленияСчетаПрошлоБольше300Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше330Дней КАК СДатыВыставленияСчетаПрошлоБольше330Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше360Дней КАК СДатыВыставленияСчетаПрошлоБольше360Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше390Дней КАК СДатыВыставленияСчетаПрошлоБольше390Дней
//	|ИЗ
//	|	РегистрСведений.OW_АктуальностьСчетов КАК OW_АктуальностьСчетов
//	|ГДЕ
//	|	(OW_АктуальностьСчетов.СтатусСчета = &СозданСчет
//	|			ИЛИ OW_АктуальностьСчетов.СтатусСчета = &СчетДоставленКлиенту
//	|			ИЛИ OW_АктуальностьСчетов.СтатусСчета = &СчетОтправленКлиенту
//	|			ИЛИ OW_АктуальностьСчетов.СтатусСчета = &СчетОтправленНаПодпись
//	|			ИЛИ OW_АктуальностьСчетов.СтатусСчета = &CчетПринятКОплате
//	|			ИЛИ OW_АктуальностьСчетов.СтатусСчета = &Активен)
//	|	И OW_АктуальностьСчетов.Документ.ПометкаУдаления = ЛОЖЬ
//	|	И OW_АктуальностьСчетов.Партнер.Рассылка = ИСТИНА
//	|	И OW_АктуальностьСчетов.Партнер.БизнесРегион В (&СписокБизнесРегионов)
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	|И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//	|		ИЛИ (OW_АктуальностьСчетов.Документ.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|			ИЛИ OW_АктуальностьСчетов.Документ.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА
//	|				И OW_АктуальностьСчетов.Документ.Организация.ВидИнстансJIRA = &ВидИнстансJIRA))
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	OW_АктуальностьСчетов.Документ,
//	|	OW_АктуальностьСчетов.Документ.Партнер,
//	|	OW_АктуальностьСчетов.ДатаВыставленияСчета,
//	|	OW_АктуальностьСчетов.Документ.Соглашение,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше30Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше60Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше90Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше120Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше150Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше180Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше210Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше240Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше270Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше300Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше330Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше360Дней,
//	|	OW_АктуальностьСчетов.СДатыВыставленияСчетаПрошлоБольше390Дней";
//	
//	Запрос.УстановитьПараметр("СозданСчет", Перечисления.СтатусыСчета.СозданСчет);
//	Запрос.УстановитьПараметр("СчетДоставленКлиенту", Перечисления.СтатусыСчета.СчетДоставленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленКлиенту", Перечисления.СтатусыСчета.СчетОтправленКлиенту);
//	Запрос.УстановитьПараметр("СчетОтправленНаПодпись", Перечисления.СтатусыСчета.СчетОтправленНаПодпись);
//	Запрос.УстановитьПараметр("CчетПринятКОплате", Перечисления.СтатусыСчета.CчетПринятКОплате);
//	Запрос.УстановитьПараметр("Активен", Перечисления.СтатусыСчета.Активен);
//	//+ Пилюгин В.Е. 23.08.2017
//	СписокБизнесРегионов = Новый СписокЗначений;
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.Asia);
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.Europe);
//	СписокБизнесРегионов.Добавить(Справочники.БизнесРегионы.MiddleEast);
//	Запрос.УстановитьПараметр("СписокБизнесРегионов", СписокБизнесРегионов);
//	//- Пилюгин В.Е. 23.08.2017	
//	
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		ОтправляемНотификацию=Ложь;
//		//От 30 до 60 дней	
//		Если Выборка.ПрошлоБольше30Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше30Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ". From the date issued of the invoice has been more than 30 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 60 до 90 дней	
//		ИначеЕсли Выборка.ПрошлоБольше60Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше60Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 60 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 90 до 120 дней	
//		ИначеЕсли Выборка.ПрошлоБольше90Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше90Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 90 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;
//			//От 120 до 150 дней	
//		ИначеЕсли Выборка.ПрошлоБольше120Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше120Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 120 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 150 до 180 дней	
//		ИначеЕсли Выборка.ПрошлоБольше150Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше150Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 150 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 180 до 210 дней	
//		ИначеЕсли Выборка.ПрошлоБольше180Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше180Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 180 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 210 до 240 дней	
//		ИначеЕсли Выборка.ПрошлоБольше210Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше210Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 210 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 240 до 270 дней	
//		ИначеЕсли Выборка.ПрошлоБольше240Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше240Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 240 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 270 до 300 дней	
//		ИначеЕсли Выборка.ПрошлоБольше270Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше270Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 270 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 300 до 330 дней	
//		ИначеЕсли Выборка.ПрошлоБольше300Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше300Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 300 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//От 330 до 360 дней	
//		ИначеЕсли Выборка.ПрошлоБольше330Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше330Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 330 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;		
//			//От 360 до 390 дней	
//		ИначеЕсли Выборка.ПрошлоБольше360Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше360Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 360 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//			//Больше 390 дней	
//		ИначеЕсли Выборка.ПрошлоБольше390Дней=Истина Тогда
//			Если Выборка.СДатыВыставленияСчетаПрошлоБольше390Дней=Ложь Тогда
//				ОтправляемНотификацию=Истина;
//				НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ".From the date issued of the invoice has been more than 390 days";
//				ТекстСообщения="Invoice № "+СОКРЛП(Выборка.Счет.Номер)+" by contract № "+СОКРЛП(Выборка.Соглашение.Номер)+" (business project = """+Выборка.Соглашение.Проект+""") Client "+Выборка.Партнер.НаименованиеARM;
//			КонецЕсли;	
//		КонецЕсли;	
//		
//		//анализируем нужно ли отправлять нотификацию
//		Если ОтправляемНотификацию=Истина Тогда          
//						
//            //***OW @20205121055151  Start [БПВ] ONEC-5965
//            Если  Выборка.Партнер.БизнесРегион = Справочники.БизнесРегионы.Asia Тогда
//                ЭтоДляAsia = истина;
//            Иначе
//                ЭтоДляAsia = Ложь;
//            КонецЕсли;
//            //***OW @20205121055158  End [БПВ] ONEC-5965
//				
//			//++OW Копачев А.С. 23.08.2023 ONEC-8710  
//			//СписокЮзеров = Новый СписокЗначений;
//
//			//Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) или ЭтоДляAsia Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//        СписокЮзеров.Добавить(Выборка.Партнер.Куратор);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			////для каждого менеджера отправим нотификацию об изменении статуса
//			//Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) или ЭтоДляAsia Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//        СписокЮзеров.Добавить(Выборка.Партнер.ОсновнойМенеджер);
//			//	КонецЕсли;	
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) или ЭтоДляAsia Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//        СписокЮзеров.Добавить(Выборка.Партнер.ВторойМенеджер);
//			//	КонецЕсли;
//			//КонецЕсли;	
//			//Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			//	Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ИнформацияПоСчетам) или ЭтоДляAsia Тогда
//			//		ОтправитьУведомлениеОЗадолженностиПоСчету(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//        СписокЮзеров.Добавить(Выборка.Партнер.ТретийМенеджер);     
//			//	КонецЕсли;
//			//КонецЕсли;
//			////***OW @20205121055151  Start [БПВ] ONEC-5965   
//			//СписокЮзеров.Добавить(Справочники.Пользователи.ПустаяСсылка());     
//			//ПолучитьДопСписокДляРассылки = ПолучитьСписокДопПользоватлейДляРассылкиПоОплатам(Выборка.Партнер,СписокЮзеров);
//			//Для каждого СтрРассылки из  ПолучитьДопСписокДляРассылки Цикл
//			//    ОтправитьУведомлениеОЗадолженностиПоСчету(СтрРассылки.Значение, ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			//КонецЦикла;
//			////***OW @20205121055158  End [БПВ] ONEC-5965           
//			// 
//			////временно отправляю уведомление себе
//			////ОтправитьУведомлениеОЗадолженностиПоСчетуАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Счет);
//			////
//			//ОбновитьАктуальностьДанныхПоСчету(Выборка.Счет, ДатаПроверки, Выборка.ПрошлоБольше30Дней, Выборка.ПрошлоБольше60Дней, Выборка.ПрошлоБольше90Дней, Выборка.ПрошлоБольше120Дней, Выборка.ПрошлоБольше150Дней, Выборка.ПрошлоБольше180Дней, Выборка.ПрошлоБольше210Дней, Выборка.ПрошлоБольше240Дней, Выборка.ПрошлоБольше270Дней,Выборка.ПрошлоБольше300Дней, Выборка.ПрошлоБольше330Дней, Выборка.ПрошлоБольше360Дней, Выборка.ПрошлоБольше390Дней);	
//						
//			// Определяем получателей
//			ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаИнформацияПоСчетам;		
//			МассивДоступныхПользователейРассылки = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);		
//			
//			МассивПользователейРассылки = Новый Массив;  
//			
//			Партнер = Выборка.Партнер;
//			// куратор   
//			Куратор = Партнер.Куратор;
//			Если МассивДоступныхПользователейРассылки.Найти(Куратор) <> Неопределено ИЛИ ЭтоДляAsia Тогда
//				МассивПользователейРассылки.Добавить(Куратор);
//			КонецЕсли;
//			
//			// основной менеджер   
//			ОсновнойМенеджер = Партнер.ОсновнойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ОсновнойМенеджер) <> Неопределено ИЛИ ЭтоДляAsia Тогда
//				МассивПользователейРассылки.Добавить(ОсновнойМенеджер);
//			КонецЕсли;	
//			
//			// второй менеджер   
//			ВторойМенеджер = Партнер.ВторойМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ВторойМенеджер) <> Неопределено ИЛИ ЭтоДляAsia Тогда
//				МассивПользователейРассылки.Добавить(ВторойМенеджер);
//			КонецЕсли;
//			
//			// третий менеджер   
//			ТретийМенеджер = Партнер.ТретийМенеджер;        
//			Если МассивДоступныхПользователейРассылки.Найти(ТретийМенеджер) <> Неопределено ИЛИ ЭтоДляAsia Тогда
//				МассивПользователейРассылки.Добавить(ТретийМенеджер);
//			КонецЕсли;	
//					
//			//***OW @20205121055151  Start [БПВ] ONEC-5965       
//			ПолучитьДопСписокДляРассылки = ПолучитьСписокДопПользоватлейДляРассылкиПоОплатам(Выборка.Партнер,МассивПользователейРассылки);
//            Для каждого СтрРассылки из  ПолучитьДопСписокДляРассылки Цикл
//                МассивПользователейРассылки.Добавить(СтрРассылки.Значение);
//            КонецЦикла;
//            //***OW @20205121055158  End [БПВ] ONEC-5965           
//  	
//			СписокАдресов = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(МассивПользователейРассылки);  
//			
//			ТемаПисьма = НаименованиеУведомления;
//			ТекстПисьма = "  "+НаименованиеУведомления+":"+Символы.ПС+Символы.ПС;
//			ТекстПисьма = ТекстПисьма+ "  "+ТекстСообщения;
//			
//           	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресов,,,,, Выборка.Счет,,Выборка.Счет,Неопределено,,Истина);			
//			
//			ОбновитьАктуальностьДанныхПоСчету(Выборка.Счет, ДатаПроверки, Выборка.ПрошлоБольше30Дней, Выборка.ПрошлоБольше60Дней, Выборка.ПрошлоБольше90Дней, Выборка.ПрошлоБольше120Дней, Выборка.ПрошлоБольше150Дней, Выборка.ПрошлоБольше180Дней, Выборка.ПрошлоБольше210Дней, Выборка.ПрошлоБольше240Дней, Выборка.ПрошлоБольше270Дней,Выборка.ПрошлоБольше300Дней, Выборка.ПрошлоБольше330Дней, Выборка.ПрошлоБольше360Дней, Выборка.ПрошлоБольше390Дней);	
//			//--OW Копачев А.С. 23.08.2023 ONEC-8710
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры
//
//Функция ПолучитьСписокДопПользоватлейДляРассылкиПоОплатам(Клиент,исключениеЮзера)  Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    СписокП = Новый СписокЗначений;
//    Запрос = Новый Запрос;
//    Запрос.УстановитьПараметр("Клиент",Клиент);
//    Запрос.УстановитьПараметр("Тип",Перечисления.ТипыДляГруппРассылок.РассылкаПоНеоплаченнымСчетам);
//    Запрос.УстановитьПараметр("Пользователь",исключениеЮзера);
//    Запрос.Текст ="ВЫБРАТЬ
//                  | ГруппыПользователейДляРассылкиСостав.Пользователь
//                  |ИЗ
//                  | Справочник.ГруппыПользователейДляРассылки.Состав КАК ГруппыПользователейДляРассылкиСостав
//                  |ГДЕ
//                  | ГруппыПользователейДляРассылкиСостав.Ссылка.Тип = &Тип
//                  | И НЕ ГруппыПользователейДляРассылкиСостав.Ссылка.ПометкаУдаления
//                  | И ГруппыПользователейДляРассылкиСостав.Ссылка.Клиент = &Клиент
//                  | И НЕ ГруппыПользователейДляРассылкиСостав.Пользователь В (&Пользователь)" ;
//    СписокП.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь"));
//    Возврат СписокП;
//КонецФункции
//
//Процедура OW_АнализЗадолженностиПоСчету() Экспорт
//    //***OW @20201029031353  Start [БПВ] ONEC-5982
//    Если не OW_ФоновыеЗадания.ПроверкаЧтоМожноЗапуститьРегЗадание() Тогда
//        Возврат;
//    КонецЕсли;
//    //***OW @20201029031356  End [БПВ] ONEC-5982 
//    
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("OW_ПроверкаЗадолженностиПоСчету");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	АнализЗадолженностиРУСCIS();
//	АнализЗадолженностиInternational();	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ОбновитьАктуальностьДанныхПоСчету(Документ,ДатаПроверки, СДатыВыставленияСчетаПрошлоБольше30Дней, СДатыВыставленияСчетаПрошлоБольше60Дней, СДатыВыставленияСчетаПрошлоБольше90Дней, СДатыВыставленияСчетаПрошлоБольше120Дней, СДатыВыставленияСчетаПрошлоБольше150Дней, СДатыВыставленияСчетаПрошлоБольше180Дней, СДатыВыставленияСчетаПрошлоБольше210Дней, СДатыВыставленияСчетаПрошлоБольше240Дней, СДатыВыставленияСчетаПрошлоБольше270Дней, СДатыВыставленияСчетаПрошлоБольше300Дней, СДатыВыставленияСчетаПрошлоБольше330Дней, СДатыВыставленияСчетаПрошлоБольше360Дней, СДатыВыставленияСчетаПрошлоБольше390Дней)
//	
//	НаборЗаписей = РегистрыСведений.OW_АктуальностьСчетов.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Документ.Установить(Документ);
//	
//	Запись = НаборЗаписей.Добавить();
//	
//	Запись.Документ      = Документ;
//	Запись.Партнер       = Документ.Партнер;
//	Запись.ДатаПроверки  = ДатаПроверки;
//	
//	Запись.СтатусСчета = Документ.СтатусСчета;
//	Запись.ДатаВыставленияСчета=Документ.ДатаВыставленияСчета;
//	
//	Запись.СДатыВыставленияСчетаПрошлоБольше30Дней=СДатыВыставленияСчетаПрошлоБольше30Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше60Дней=СДатыВыставленияСчетаПрошлоБольше60Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше90Дней=СДатыВыставленияСчетаПрошлоБольше90Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше120Дней=СДатыВыставленияСчетаПрошлоБольше120Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше150Дней=СДатыВыставленияСчетаПрошлоБольше150Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше180Дней=СДатыВыставленияСчетаПрошлоБольше180Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше210Дней=СДатыВыставленияСчетаПрошлоБольше210Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше240Дней=СДатыВыставленияСчетаПрошлоБольше240Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше270Дней=СДатыВыставленияСчетаПрошлоБольше270Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше300Дней=СДатыВыставленияСчетаПрошлоБольше300Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше330Дней=СДатыВыставленияСчетаПрошлоБольше330Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше360Дней=СДатыВыставленияСчетаПрошлоБольше360Дней;
//	Запись.СДатыВыставленияСчетаПрошлоБольше390Дней=СДатыВыставленияСчетаПрошлоБольше390Дней;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры
//
////Процедура ОтправитьУведомлениеОЗадолженностиПоСчету(КомуОтправляем, ТекстСообщения, НаименованиеУведомления, СчетСсылка) Экспорт
////	
////	Получатели="";
////	
////	ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(КомуОтправляем);
////	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////		//УровеньЖурналаРегистрации.Информация, Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(КомуОтправляем)));
////	Иначе
////		Если Получатели="" Тогда
////			Получатели = ПочтовыйАдресПолучателя;
////		Иначе	
////			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
////		КонецЕсли;
////	КонецЕсли;
////	
////	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
////	Если ЭтоРабочаяБаза=Ложь Тогда
////		//в тестовой базе шлем письма только на отдел 1С
////		Получатели="";
////		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
////		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
////		Получатели = СлужебныйEmail;
////	КонецЕсли; 
////	
////	ТемаПисьма =НаименованиеУведомления;
////	ТекстПисьма = "  "+НаименованиеУведомления+":"+Символы.ПС+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+ТекстСообщения;
////	
////	//++OW Копачев А.С. 07.09.2022 ONEC-7882
////	
////	//ПараметрыПисьма = Новый Структура;
////	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
////	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
////	//ПараметрыПисьма.Вставить("Кому", Получатели);
////	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
////	//
////	//Попытка 
////	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
////	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
////	//	
////	//Исключение
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	   НСтр("ru = 'Ошибка при отправке уведомления о задолженности по счету: %1'"), 
////	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
////	//	Возврат;
////	//КонецПопытки;	
////	//
////	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////	//	
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
////	//КонецЕсли;		
////	
////	СписокАдресовКому = Новый СписокЗначений;	
////	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
////	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, СчетСсылка,,СчетСсылка,Неопределено,,Истина);	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
////		
////КонецПроцедуры
//
////Процедура ОтправитьУведомлениеОЗадолженностиПоСчетуАдминистратор(ТекстСообщения, НаименованиеУведомления, СчетСсылка) Экспорт
////	
////	Получатели="";
////	
////	ПочтовыйАдресПолучателя = ow.ВернутьПочтуСДоменом("akurbatova");
////	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////		//УровеньЖурналаРегистрации.Информация,Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(ПочтовыйАдресПолучателя)));
////	Иначе
////		Если Получатели="" Тогда
////			Получатели = ПочтовыйАдресПолучателя;
////		Иначе	
////			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
////		КонецЕсли;
////	КонецЕсли;
////	
////	ТемаПисьма =НаименованиеУведомления;
////	ТекстПисьма = "  "+НаименованиеУведомления+":"+Символы.ПС+Символы.ПС;
////	ТекстПисьма = ТекстПисьма+ "  "+ТекстСообщения;
////	
////	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
////	Если ЭтоРабочаяБаза=Ложь Тогда
////		//в тестовой базе шлем письма только на отдел 1С
////		Получатели="";
////		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
////		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
////		Получатели = СлужебныйEmail;
////	КонецЕсли; 
////	
////	//++OW Копачев А.С. 07.09.2022 ONEC-7882
////	
////	//ПараметрыПисьма = Новый Структура;
////	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
////	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
////	//ПараметрыПисьма.Вставить("Кому", Получатели);
////	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
////	//
////	//Попытка 
////	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
////	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
////	//	
////	//Исключение
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	   НСтр("ru = 'Ошибка при отправке уведомления о задолженности по счету: %1'"), 
////	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
////	//	Возврат;
////	//КонецПопытки;	
////	//
////	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////	//	
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о задолженности по счету'"), 
////	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Документы.СчетНаОплатуКлиенту,СчетСсылка,
////	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
////	//КонецЕсли;	
////	
////	СписокАдресовКому = Новый СписокЗначений;	
////	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
////	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, СчетСсылка,,СчетСсылка,Неопределено,,Истина);	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
////	
////КонецПроцедуры
//
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////***OW Start [БПВ]30.01.2015
//Функция ПолучитьПроверкуСообщения(Пользователь) Экспорт
//	Возврат  Пользователь.ВыводСообщения;
//КонецФункции
//
//Функция ПолучитьСообщениеПоПользователю(АвторС)  Экспорт
//	ЗапросВ = Новый Запрос;
//	ЗапросВ.Текст =  "ВЫБРАТЬ
//	|	OW_СообщениеПользователям.Сообщение,
//	|	OW_СообщениеПользователям.ДатаСообщения
//	|ИЗ
//	|	РегистрСведений.OW_СообщениеПользователям КАК OW_СообщениеПользователям
//	|ГДЕ
//	|	OW_СообщениеПользователям.Автор = &Автор
//	|	И НЕ OW_СообщениеПользователям.Выведено";
//	ЗапросВ.УстановитьПараметр("Автор",АвторС);
//	Возврат ЗапросВ.Выполнить().Выгрузить().ВыгрузитьКолонку("Сообщение");
//КонецФункции
//
//Функция ПолучитьДатуСообщенияоПользователю(АвторС,текст)  Экспорт
//	ЗапросВ = Новый Запрос;
//	ЗапросВ.Текст =  "ВЫБРАТЬ
//	|	OW_СообщениеПользователям.Сообщение,
//	|	OW_СообщениеПользователям.ДатаСообщения
//	|ИЗ
//	|	РегистрСведений.OW_СообщениеПользователям КАК OW_СообщениеПользователям
//	|ГДЕ
//	|	OW_СообщениеПользователям.Автор = &Автор
//	|	И НЕ OW_СообщениеПользователям.Выведено
//	|	И OW_СообщениеПользователям.Сообщение = &Сообщение";
//	ЗапросВ.УстановитьПараметр("Автор",АвторС);
//	ЗапросВ.УстановитьПараметр("Сообщение",текст);
//	ТекВыборка = ЗапросВ.Выполнить().Выбрать();
//	Пока ТекВыборка.Следующий() Цикл
//		Возврат ТекВыборка.ДатаСообщения;
//	КонецЦикла;
//	Возврат Дата("00010101");
//КонецФункции
//
//
//Процедура ЗаписатьИзменениеВСообщенияПользователя(АвторС,ДатаС,Сообщение) Экспорт
//	НМЗ = РегистрыСведений.OW_СообщениеПользователям.СоздатьМенеджерЗаписи();
//	НМЗ.Автор = АвторС;
//	НМЗ.ДатаСообщения = ДатаС;
//	НМЗ.Сообщение = Сообщение;
//	НМЗ.Выведено = Истина;
//	НМЗ.Записать(Истина);
//КонецПроцедуры
//
//Функция ПолучитьТекущегоПользователя() Экспорт
//	Возврат ПараметрыСеанса.ТекущийПользователь;
//КонецФункции
//
//Процедура ЗаписатьИзменениеВСообщенияПользователяНаВывод(АвторС,ДатаС,Сообщение,объект = Неопределено) Экспорт
//	НМЗ = РегистрыСведений.OW_СообщениеПользователям.СоздатьМенеджерЗаписи();
//	НМЗ.Автор = АвторС;
//	НМЗ.ДатаСообщения = ДатаС;
//	НМЗ.Сообщение = Сообщение;
//	НМЗ.Объект = объект;
//	НМЗ.Выведено = Ложь;
//	НМЗ.Записать(Истина);
//КонецПроцедуры
//
//Функция ПолучитьПользователяПоИмени(ИмяП) Экспорт
//	Возврат Справочники.Пользователи.НайтиПоНаименованию(ИмяП,Истина);
//КонецФункции
//
//Процедура ЗагрузкаДанныхДляЗУП(НачалоПериода="",КонецПериода="") Экспорт
//	
//	Если НачалоПериода="" Тогда
//		НачалоПериода = НачалоКвартала(ТекущаяДата());
//	КонецЕсли;
//	Если КонецПериода="" Тогда
//		КонецПериода = КонецКвартала(ТекущаяДата());
//	КонецЕсли;
//	//************
//	ТекБазы = Справочники.OW_БазыДанных1С.Выбрать();
//	Пока ТекБазы.Следующий() Цикл
//		Если ТекБазы.ЗагружатьДанные и ТекБазы.ВидБазы=Перечисления.OW_ВидБазы1С.ЗУП Тогда
//			OW_МодульИнтеграцияС_ЗУП.ЗагружаемДанныеИзЗУП(ТекБазы,НачалоПериода,КонецПериода);			
//		КонецЕсли;
//	КонецЦикла;
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст =  "ВЫБРАТЬ
//	|	OW_КадроваяИсторияСрезПоследних.Сотрудник,
//	|	OW_КадроваяИсторияСрезПоследних.ГрафикРаботы КАК OW_ГрафикРаботы,
//	|	OW_КадроваяИсторияСрезПоследних.Ставка КАК ЗанимаемыхСтавок,
//	|	OW_КадроваяИсторияСрезПоследних.Должность КАК OW_Должность,
//	|	OW_КадроваяИсторияСрезПоследних.Подразделения КАК OW_Подразделение,
//	|	OW_КадроваяИсторияСрезПоследних.ДатаПриема,
//	|	OW_КадроваяИсторияСрезПоследних.ДатаУвольнения КАК OW_ДатаУвольнения,
//	|	OW_КадроваяИсторияСрезПоследних.ВидДоговора,
//	|	OW_КадроваяИсторияСрезПоследних.ТипЗанятости
//	|ИЗ
//	|	РегистрСведений.OW_КадроваяИстория.СрезПоследних(&Период, НЕ Организация.ИностраннаяОрганизация) КАК OW_КадроваяИсторияСрезПоследних
//	|ГДЕ
//	|	(OW_КадроваяИсторияСрезПоследних.ГрафикРаботы <> OW_КадроваяИсторияСрезПоследних.Сотрудник.OW_ГрафикРаботы
//	|			ИЛИ OW_КадроваяИсторияСрезПоследних.Ставка <> OW_КадроваяИсторияСрезПоследних.Сотрудник.ЗанимаемыхСтавок
//	|			ИЛИ OW_КадроваяИсторияСрезПоследних.Должность <> OW_КадроваяИсторияСрезПоследних.Сотрудник.OW_Должность
//	|			ИЛИ OW_КадроваяИсторияСрезПоследних.Подразделения <> OW_КадроваяИсторияСрезПоследних.Сотрудник.OW_Подразделение
//	|			ИЛИ OW_КадроваяИсторияСрезПоследних.ДатаУвольнения <> OW_КадроваяИсторияСрезПоследних.Сотрудник.OW_ДатаУвольнения)";
//	ЗапросД.УстановитьПараметр("период",ТекущаяДата());
//	ТВ = ЗапросД.Выполнить().Выбрать();
//	Пока ТВ.Следующий() Цикл
//		ОБ = ТВ.Сотрудник.ПолучитьОбъект();
//		ОБ.OW_ГрафикРаботы = ТВ.OW_ГрафикРаботы;
//		ОБ.ЗанимаемыхСтавок = ТВ.ЗанимаемыхСтавок;
//		ОБ.OW_Должность = ТВ.OW_Должность;
//		ОБ.OW_Подразделение = ТВ.OW_Подразделение;
//		ОБ.OW_ДатаУвольнения = ТВ.OW_ДатаУвольнения;
//		ОБ.Записать();
//	КонецЦикла;
//КонецПроцедуры
//
//Процедура ЗагрузкаДанныхДляБУХ(НачалоПериода="",КонецПериода="") Экспорт
//	Если НачалоПериода="" Тогда
//		НачалоПериода = НачалоГода(ТекущаяДата());
//	КонецЕсли;
//	Если КонецПериода="" Тогда
//		КонецПериода = КонецКвартала(ТекущаяДата());
//	КонецЕсли;
//	//************
//	ТекБазы = Справочники.OW_БазыДанных1С.Выбрать();
//	Пока ТекБазы.Следующий() Цикл
//		Если ТекБазы.ЗагружатьДанные и ТекБазы.ВидБазы=Перечисления.OW_ВидБазы1С.БУХ Тогда
//			OW_МодульИнтеграцииС_БУХ.ЗагружаемДанныеИзБУХ(ТекБазы,НачалоПериода,КонецПериода);			
//		КонецЕсли;
//	КонецЦикла;
//	
//	//******
//    //***Закоментировал пока не используем
//	//OW_МодульИнтеграцииС_БУХ.ЗагрузитьДоходыРасходыБУХ();
//    //***Закоментировал пока не используем
//КонецПроцедуры
//
//Процедура OW_ОчисткаИсторииСообщений() Экспорт
//	ТекПольз = Новый СписокЗначений;
//	
//	ЗапросН = Новый Запрос;
//	ЗапросН.Текст = "ВЫБРАТЬ
//	|	OW_ВыводитьСообщениеНаРабочийСтол.Пользователь
//	|ИЗ
//	|	РегистрСведений.OW_ВыводитьСообщениеНаРабочийСтол КАК OW_ВыводитьСообщениеНаРабочийСтол
//	|ГДЕ
//	|	OW_ВыводитьСообщениеНаРабочийСтол.СохранятьСообщения
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	OW_ВыводитьСообщениеНаРабочийСтол.Пользователь";
//	ТекПольз.ЗагрузитьЗначения(ЗапросН.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь"));
//	
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	OW_СообщенияПользователям.Получатель,
//	|	OW_СообщенияПользователям.Автор,
//	|	OW_СообщенияПользователям.ТипСообщения,
//	|	OW_СообщенияПользователям.ТекущаяСессия,
//	|	OW_СообщенияПользователям.ДатаСообщения
//	|ИЗ
//	|	РегистрСведений.OW_СообщенияПользователям КАК OW_СообщенияПользователям
//	|ГДЕ
//	|	(НЕ OW_СообщенияПользователям.Автор В (&Автор)
//	|			И НЕ OW_СообщенияПользователям.Получатель В (&Автор))
//	|	И OW_СообщенияПользователям.ДатаСообщения < &Период";
//	ЗапросД.УстановитьПараметр("Автор",ТекПольз);
//	ЗапросД.УстановитьПараметр("Период",ТекущаяДата()-31*24*60*60);
//	
//	ТекВыборка = ЗапросД.Выполнить().Выбрать();
//	Пока ТекВыборка.Следующий() Цикл
//		КЗ = РегистрыСведений.OW_СообщенияПользователям.СоздатьНаборЗаписей();
//		КЗ.Отбор.Получатель.Значение = ТекВыборка.Получатель; 
//		КЗ.Отбор.Получатель.Использование = истина;
//		//***
//		КЗ.Отбор.Автор.Значение = ТекВыборка.Автор; 
//		КЗ.Отбор.Автор.Использование = истина;
//		//***
//		КЗ.Отбор.ДатаСообщения.Значение = ТекВыборка.ДатаСообщения; 
//		КЗ.Отбор.ДатаСообщения.Использование = истина;
//		//***
//		КЗ.Прочитать();
//		КЗ.Очистить();
//		КЗ.Записать(Истина);
//	КонецЦикла;
//	// Вставить содержимое обработчика.
//КонецПроцедуры
//
//Функция ВернутьЗначениеНовогоПисьмаЧата() Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ЗапросТ = Новый Запрос;
//	ЗапросТ.Текст =  "ВЫБРАТЬ
//	|	OW_СообщенияПользователям.Получатель
//	|ИЗ
//	|	РегистрСведений.OW_СообщенияПользователям КАК OW_СообщенияПользователям
//	|ГДЕ
//	|	OW_СообщенияПользователям.Получатель = &Получатель
//	|	И НЕ OW_СообщенияПользователям.Прочитано";
//	ЗапросТ.УстановитьПараметр("Получатель",ПараметрыСеанса.ТекущийПользователь.ссылка);
//	УстановитьПривилегированныйРежим(Ложь);
//	Возврат ЗапросТ.Выполнить().Пустой();
//КонецФункции//***OW End [БПВ]30.01.2015 
//
//Функция ПолучитьСписокКлиентовОграничений(Юзер) Экспорт
//	СписокКлиентов = Новый СписокЗначений;
//	//++OW Копачев А.С. 23.03.2022 ONEC-7463
//	//ЗапросД = Новый Запрос;
//	//ЗапросД.Текст = "ВЫБРАТЬ
//	//|	ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент
//	//|ИЗ
//	//|	Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентамСписокКлиентов
//	//|ГДЕ
//	//|	ПраваДоступаПользователейККлиентамСписокКлиентов.Ссылка.Владелец = &Пользователь
//	//|
//	//|СГРУППИРОВАТЬ ПО
//	//|	ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент";
//	//ЗапросД.УстановитьПараметр("Пользователь",Юзер);
//	//ТекМассивКлиентов = ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
//	
//	ТекМассивКлиентов = ПолучитьКлиентовДоступныхПользователю(Юзер, Ложь, Ложь);
//	//--OW Копачев А.С. 23.03.2022 ONEC-7463
//	СписокКлиентов.ЗагрузитьЗначения(ТекМассивКлиентов);	
//	Возврат СписокКлиентов;
//КонецФункции
//
//Функция ПолучитьСписокКлиентовОграничений_Наименование(Юзер) Экспорт
//	СписокКлиентов = Новый СписокЗначений;
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент.Наименование  КАК Клиент
//	|ИЗ
//	|	Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентамСписокКлиентов
//	|ГДЕ
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Ссылка.Владелец = &Пользователь
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент.Наименование";
//	ЗапросД.УстановитьПараметр("Пользователь",Юзер);
//	ТекМассивКлиентов = ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
//	СписокКлиентов.ЗагрузитьЗначения(ТекМассивКлиентов);	
//	Возврат СписокКлиентов;
//КонецФункции
//
//Процедура ИзменитьРеквизитыФормы(ЭтотОбъект) Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ИмяФормы = ЭтотОбъект.ИмяФормы;
//	ВидО = "";
//	ТекОбъект = "";
//	Если Найти(ИмяФормы,"Справочник")>0 Тогда
//		ВидО = "Справочники";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Справочник.","");
//	ИначеЕсли Найти(ИмяФормы,"Документ")>0 Тогда
//		ВидО = "Документы";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Документ.","");
//	ИначеЕсли Найти(ИмяФормы,"Отчет")>0 Тогда
//		ВидО = "Отчеты";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Отчет.","");
//	ИначеЕсли Найти(ИмяФормы,"Обработка")>0 Тогда
//		ВидО = "Обработки";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Обработка.","");
//	ИначеЕсли Найти(ИмяФормы,"РегистрСведений")>0 Тогда
//		ВидО = "РегистрыСведений";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"РегистрСведений.","");
//	КонецЕсли;
//	ТекДлина = СтрДлина(ИмяФормы);
//	СимОб = Найти(ИмяФормы,".Форма.");
//	ТекОбъект = Лев(ИмяФормы,СимОб-1);
//	ИмяФормы = СтрЗаменить(ИмяФормы,""+ТекОбъект+".","");
//	ИмяФормы =  СтрЗаменить(ИмяФормы,"Форма.","");
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	OW_ПраваОграниченияДоступаКОбъектам.ТолькоПросмотр,
//	|	OW_ПраваОграниченияДоступаКОбъектам.Видимость,
//	|	OW_ПраваОграниченияДоступаКОбъектам.Реквизит
//	|ИЗ
//	|	РегистрСведений.OW_ПраваОграниченияДоступаКОбъектам КАК OW_ПраваОграниченияДоступаКОбъектам
//	|ГДЕ
//	|	OW_ПраваОграниченияДоступаКОбъектам.Пользователь = &Пользователь
//	|	И OW_ПраваОграниченияДоступаКОбъектам.Объект = &Объект
//	|	И OW_ПраваОграниченияДоступаКОбъектам.Форма = &Форма
//	|	И OW_ПраваОграниченияДоступаКОбъектам.ВидОбъекта = &ВидОбъекта";
//	ЗапросД.УстановитьПараметр("Форма",ИмяФормы);
//	ЗапросД.УстановитьПараметр("Объект",ТекОбъект);
//	ЗапросД.УстановитьПараметр("ВидОбъекта",ВидО);
//	ЗапросД.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь.Ссылка);
//	
//	ТекВыборкаДанных = ЗапросД.Выполнить().Выбрать();	
//	Пока ТекВыборкаДанных.Следующий() Цикл
//		Если ТекВыборкаДанных.Реквизит<>"" тогда
//			Попытка
//				ЭтотОбъект.Элементы[ТекВыборкаДанных.Реквизит].Видимость = ТекВыборкаДанных.Видимость;
//				ЭтотОбъект.Элементы[ТекВыборкаДанных.Реквизит].ТолькоПросмотр = ТекВыборкаДанных.ТолькоПросмотр;
//			Исключение
//			КонецПопытки;
//		Иначе
//			Попытка
//				ЭтотОбъект.ТолькоПросмотр = ТекВыборкаДанных.ТолькоПросмотр;
//			Исключение
//			КонецПопытки;
//		КонецЕсли;
//	КонецЦикла;
//	УстановитьПривилегированныйРежим(Ложь);
//КонецПроцедуры
//
//Процедура ПроверитьПравоНаРедактированиеОбъекта(Клиент, Пользователь, ЭтотОбъект) Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ИмяФормы = ЭтотОбъект.ИмяФормы;
//	ВидО = "";
//	ТекОбъект = "";
//	Если Найти(ИмяФормы,"Справочник")>0 Тогда
//		ВидО = "Справочники";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Справочник.","");
//	ИначеЕсли Найти(ИмяФормы,"Документ")>0 Тогда
//		ВидО = "Документы";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Документ.","");
//	ИначеЕсли Найти(ИмяФормы,"Отчет")>0 Тогда
//		ВидО = "Отчеты";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Отчет.","");
//	ИначеЕсли Найти(ИмяФормы,"Обработка")>0 Тогда
//		ВидО = "Обработки";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"Обработка.","");
//	ИначеЕсли Найти(ИмяФормы,"РегистрСведений")>0 Тогда
//		ВидО = "РегистрыСведений";
//		ИмяФормы = СтрЗаменить(ИмяФормы,"РегистрСведений.","");
//	КонецЕсли;
//	ТекДлина = СтрДлина(ИмяФормы);
//	СимОб = Найти(ИмяФормы,".Форма.");
//	ТекОбъект = Лев(ИмяФормы,СимОб-1);
//	ИмяФормы = СтрЗаменить(ИмяФормы,""+ТекОбъект+".","");
//	ИмяФормы =  СтрЗаменить(ИмяФормы,"Форма.","");
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Ссылка,
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Редактирование,
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.ВыборочноеРедактирование,
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент
//	|ИЗ
//	|	Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентамСписокКлиентов
//	|ГДЕ
//	|	ПраваДоступаПользователейККлиентамСписокКлиентов.Ссылка.Владелец = &Пользователь
//	|	И ПраваДоступаПользователейККлиентамСписокКлиентов.Клиент = &Клиент
//	|	И ПраваДоступаПользователейККлиентамСписокКлиентов.ВыборочноеРедактирование=Истина";
//	ЗапросД.УстановитьПараметр("Клиент",Клиент);
//	ЗапросД.УстановитьПараметр("Пользователь",Пользователь);
//	
//	ТекВыборкаДанных = ЗапросД.Выполнить().Выбрать();	
//	Если ТекВыборкаДанных.Следующий() Тогда
//		Попытка
//			ЭтотОбъект.ТолькоПросмотр =Ложь;
//		Исключение
//		КонецПопытки;
//	Иначе
//		Попытка
//			ЭтотОбъект.ТолькоПросмотр = Истина;
//		Исключение
//		КонецПопытки;
//	КонецЕсли;
//	УстановитьПривилегированныйРежим(Ложь);
//	
//КонецПроцедуры	
//
//Процедура ЗаписьКонтрагентаВСЭД(Клиент) Экспорт
//	ТекБаза = ПолучитьБазуСЭД();
//	БазаПодключения = OW_ПодклбченияКБазам.ПодключениеКБазеДанных1С(ТекБаза.Версия1С,ТекБаза.БазаПодключения,ТекБаза.СерверПодключения,ТекБаза.Пароль,ТекБаза.Логин);
//	Если БазаПодключения<>Неопределено Тогда
//		НайденныйКонтр = БазаПодключения.Справочники.Корреспонденты.НайтиПоНаименованию(Клиент.Наименование,истина);
//		Если НЕ НайденныйКонтр.Пустая() Тогда
//			ТекОбъект = НайденныйКонтр.ПолучитьОбъект();
//			ТекОбъект.ПолноеНаименование = Клиент.НаименованиеПолное;
//			ТекОбъект.ЮрФизЛицо = БазаПодключения.Перечисления.ЮрФизЛицо.ЮрЛицо;
//			ТекОбъект.Записать();
//		Иначе
//			ТекОбъект = БазаПодключения.Справочники.Корреспонденты.СоздатьЭлемент();
//			ТекОбъект.ПолноеНаименование = Клиент.НаименованиеПолное;
//			ТекОбъект.ЮрФизЛицо = БазаПодключения.Перечисления.ЮрФизЛицо.ЮрЛицо;
//			ТекОбъект.Записать();
//		КонецЕсли;
//	КонецЕсли;	
//	
//	
//КонецПроцедуры
//
//Процедура ЗаписьПользователяВСЭД(Пользователь) Экспорт
//	ТекБаза = ПолучитьБазуСЭД();
//	БазаПодключения = OW_ПодклбченияКБазам.ПодключениеКБазеДанных1С(ТекБаза.Версия1С,ТекБаза.БазаПодключения,ТекБаза.СерверПодключения,ТекБаза.Пароль,ТекБаза.Логин);
//	Если БазаПодключения<>Неопределено Тогда
//		НайденныйПольз = БазаПодключения.Справочники.Пользователи.НайтиПоНаименованию(Пользователь.Наименование,истина);
//		Если НЕ НайденныйПольз.Пустая() Тогда
//			ТекОбъект = НайденныйПольз.ПолучитьОбъект();
//			ТекОбъект.Код = Пользователь.Наименование;
//			ТекОбъект.Записать();
//		Иначе
//			ТекОбъект = БазаПодключения.Справочники.Пользователи.СоздатьЭлемент();
//			ТекОбъект.Код = Пользователь.Наименование;
//			ТекОбъект.Description = Пользователь.Наименование;
//			ТекОбъект.Записать();
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры
//
//Функция ПолучитьБазуСЭД()
//	ТекВыборка = Справочники.OW_БазыДанных1С.Выбрать();
//	пока ТекВыборка.Следующий() Цикл
//		Если ТекВыборка.ВидБазы = Перечисления.OW_ВидБазы1С.СЭД Тогда
//			Возврат ТекВыборка.Ссылка;
//		КонецЕсли;
//	КонецЦикла;	
//КонецФункции
//
//Функция ПолучитьДанныеПоФизЛицамНеCRM() Экспорт
//	ТекПодр = Новый СписокЗначений;
//	ТекП = Справочники.Подразделения.Выбрать();
//	пока ТекП.Следующий() Цикл
//		Если ТекП.Наименование=НСтр("ru = 'Департамент внедрения и клиентской поддержки'; en = 'Implementation and client support department'") или ТекП.Наименование=НСтр("ru = 'Отдел внедрения'; en = 'Implementation division'") или ТекП.Наименование=НСтр("ru = 'Отдел кастомизации и обеспечения качества'; en = 'Customization and quality division'") или ТекП.Наименование=НСтр("ru = 'Отдел клиентской поддержки'; en = 'Client support division'") Тогда
//			ТекПодр.Добавить(ТекП.Ссылка);
//		КонецЕсли;
//	КонецЦикла;
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	ФизическиеЛица.Ссылка КАК ФИО
//	|ИЗ
//	|	Справочник.Сотрудники КАК Сотрудники
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
//	|		ПО Сотрудники.Физлицо = ФизическиеЛица.Ссылка
//	|ГДЕ
//	|	НЕ ФизическиеЛица.ПометкаУдаления
//	|	И ФизическиеЛица.СсылкаНаКонтактноеЛицоИзCRM = &СсылкаНаКонтактноеЛицоИзCRM
//	|	И Сотрудники.OW_ДатаПриема >= ДАТАВРЕМЯ(2014, 1, 1)
//	|	И Сотрудники.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
//	|	И Сотрудники.OW_Подразделение В ИЕРАРХИИ(&Подразделение)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ФизическиеЛица.Ссылка
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ФизическиеЛица.Наименование";
//	ЗапросД.УстановитьПараметр("СсылкаНаКонтактноеЛицоИзCRM",Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка());
//	ЗапросД.УстановитьПараметр("Подразделение",ТекПодр);
//	
//	Возврат ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("ФИО");
//КонецФункции
//
//Функция ПолучитьДанныеПоСотрудникам() Экспорт
//	//++OW Копачев А.С. 19.03.2019 ONEC-4402
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Сотрудники.Ссылка КАК Сотрудник,
//	|	Сотрудники.OW_Организация КАК Организация,
//	|	ЕстьNULL(ФизическиеЛица.Ссылка, Значение(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицо,
//	|	ЕстьNULL(РегистрСведенийРуководителиПодразделений.Руководитель, Значение(Справочник.Сотрудники.ПустаяСсылка)) КАК РуководительСотрудник
//	|ИЗ
//	|	Справочник.Сотрудники КАК Сотрудники
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
//	|		ПО Сотрудники.Физлицо = ФизическиеЛица.Ссылка
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РуководителиПодразделений.СрезПоследних КАК РегистрСведенийРуководителиПодразделений
//	|		ПО Сотрудники.Ссылка = РегистрСведенийРуководителиПодразделений.Сотрудник
//	|ГДЕ
//	|	НЕ ФизическиеЛица.ПометкаУдаления
//	|	И Сотрудники.OW_ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
//	|	И Сотрудники.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Сотрудники.Ссылка
//	|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	ТЗ_Данные = РезультатЗапроса.Выгрузить();
//	
//	Возврат ТЗ_Данные;
//	//--OW Копачев А.С. 19.03.2019 ONEC-4402
//КонецФункции
//
//Функция ПолучитьПоВыводуСообщенияФизЛицаCRM() Экспорт
//	Возврат ПараметрыСеанса.ТекущийПользователь.ВыводСотрудниковБезСвязкиСCRM;
//КонецФункции
//
//Процедура OW_ОбновлениеВремениПоПроектамВнедрения() Экспорт
//	// Вставить содержимое обработчика.
//	//ОбновлениеОбщегоВремениПоПроектамВнедрения();
//	//ОбновлениеВремениПоПроектамВнедрения();
//	
//КонецПроцедуры
//
//Процедура ОбновлениеВремениПоПроектамВнедрения()
//	Юзер = "user1c";
//	Пароль = "user1c";
//	Подключились=Истина;
//	Попытка 
//		OraSession  = Новый COMОбъект("OracleInProcServer.XOraSession"); 
//		OraDatabase = OraSession.OpenDatabase("cust2", "user1c/user1c", 0);
//	Исключение 
//		OraDatabase=Неопределено;
//		OraSession=Неопределено;
//		
//		Подключились=Ложь;
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Обновление времени по проектам внедрения из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация,,,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		
//		//запишем в журнал регистрации
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Фоновое задание: Обновление времени по проектам внедрения из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация,,,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Не удалось подключиться к базе CRM %1.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		
//		//сформируем письмо
//		ТекстПисьма = "Ошибка при выполнении фонового задания ""Обновление времени по проектам внедрения из CRM"":"+Символы.ПС+Символы.ПС; 
//		ТекстПисьма=ТекстПисьма+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при выполнении фонового задания ""Обновление времени по проектам внедрения из CRM"" - %1'"), Метаданные.КраткаяИнформация);
//		
//		
//		//++OW Копачев А.С. 07.09.2022 ONEC-7882
//		
//		////отправим письмо на первый адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("akurbatova");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновление времени по проектам внедрения из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		//
//		////отправим письмо на второй адрес
//		//ПочтовыйАдресПолучателя=ow.ВернутьПочтуСДоменом("pbodnar");
//		//ПараметрыПисьма = Новый Структура;
//		//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//		//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//		//ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
//		//
//		//Попытка 
//		//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//		//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//		//Исключение
//		//	ЗаписьЖурналаРегистрации("Фоновое задание: ""Обновление времени по проектам внедрения из CRM"". Уведомление об ошибках при подключении к CRM", 
//		//	УровеньЖурналаРегистрации.Ошибка,,,
//		//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//	"Ошибка при отправке уведомления о ошибках при подключении к CRM: %1", 
//		//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//		//КонецПопытки;
//		
//		СписокАдресовКому = Новый СписокЗначений;	
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
//		СписокАдресовКому.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//		//	Сообщить(OraSession.LastServerErrText);
//	КонецПопытки; 
//	//Если OraSession.LastServerErr <> 0 Тогда
//	// 	Возврат
//	//КонецЕсли; 
//	
//	Если Подключились=Ложь Тогда
//		Возврат
//	КонецЕсли; 
//	
//	ЗапросГрейда=Новый Запрос;
//	ЗапросГрейда.Текст= "ВЫБРАТЬ
//	|	Грейд.ЗначениеГрейда КАК GradeAmount,
//	|	Грейд.ГрейдСотрудника КАК Grade,
//	|	Грейд.ПозицияСотрудника КАК EmployeePosition,
//	|	Грейд.ФункцииСотрудника КАК EmployeeFunction,
//	|	Грейд.Сотрудник,
//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	|	Грейд.Период КАК GradeDate
//	|ИЗ
//	|	(ВЫБРАТЬ
//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник КАК Сотрудник,
//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ЗначениеГрейда КАК ЗначениеГрейда,
//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Сотрудник.СсылкаНаКонтактноеЛицоИзCRM КАК СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника КАК ГрейдСотрудника,
//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника КАК ПозицияСотрудника,
//	|		OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника КАК ФункцииСотрудника,
//	|		OW_СоответствиеСотрудникаИГрейдаСрезПоследних.Период КАК Период
//	|	ИЗ
//	|		РегистрСведений.OW_СоответствиеСотрудникаИГрейда.СрезПоследних КАК OW_СоответствиеСотрудникаИГрейдаСрезПоследних
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.OW_СоответствиеПозицииИГрейда.СрезПоследних КАК OW_СоответствиеПозицииИГрейдаСрезПоследних
//	|			ПО OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ПозицияСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ПозицияСотрудника
//	|				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ФункцииСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ФункцииСотрудника
//	|				И OW_СоответствиеСотрудникаИГрейдаСрезПоследних.ГрейдСотрудника = OW_СоответствиеПозицииИГрейдаСрезПоследних.ГрейдСотрудника) КАК Грейд
//	|ГДЕ
//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM = &СотрудникСсылкаНаКонтактноеЛицоИзCRM
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Грейд.ЗначениеГрейда,
//	|	Грейд.ГрейдСотрудника,
//	|	Грейд.ПозицияСотрудника,
//	|	Грейд.ФункцииСотрудника,
//	|	Грейд.Сотрудник,
//	|	Грейд.СотрудникСсылкаНаКонтактноеЛицоИзCRM,
//	|	Грейд.Период";
//	
//	ДлинаСуток=86400; //длина суток в секундах
//	//дата получения инфы из CRM
//	Таблица="CRM.CRM_PROJECT";
//	
//	//переберем в цикле все проекты, у которых нет кода CRM
//	ЗапросВнедрение=Новый Запрос;
//	ЗапросВнедрение.Текст= "ВЫБРАТЬ
//	|	ЗадачиПроектов.Ссылка,
//	|	ЗадачиПроектов.Партнер,
//	|	ЗадачиПроектов.КодПроектаCRM
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|ГДЕ
//	|	ЗадачиПроектов.КодПроектаCRM <> """"
//	//     |	И ЗадачиПроектов.Партнер.Обмен_с_CRM = ИСТИНА
//	|	И ЗадачиПроектов.ПометкаУдаления = ЛОЖЬ
//	|	И ЗадачиПроектов.НеСовпадаютСуммыВЧасах =  ИСТИНА";
//	
//	Выборка = ЗапросВнедрение.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		КодПроектаCRM="";
//		Если Выборка.КодПроектаCRM="" Тогда
//			Продолжить;
//		КонецЕсли;	
//		
//		КодПроектаCRM="'"+Выборка.КодПроектаCRM+"'";
//		
//		ОбъектПроект=Выборка.Ссылка.ПолучитьОбъект();
//		ДатаДляВыборки="to_date('"+Формат(НачалоДня(ОбъектПроект.ДатаВводаПроектаCRM)-ДлинаСуток*60,"ДФ=""гггг.ММ.дд ЧЧ:мм:сс""")+"','yyyy.mm.dd HH24:mi:ss')";  //текущая дата
//		
//		ОбъектПроект.ВремяПотраченноеНаПроект.Очистить();
//		
//		ЗапросЧасть1="select
//		|act.id Action_ID,
//		|act.ACTION_DETAILS Action_Details,
//		|act.ACTION_USER Action_User_ID,
//		|act.used_time/8 Posted_Time,
//		|act.used_time Posted_Hour,
//		|act.action_date Action_Date,
//		|act.amnd_date Amnd_Date,
//		|crm.XWCRM_PROJECT('PROJECT_QUEUE', p.PROJECT_QUEUE) Project_Queue,
//		|cp.name Action_Name,
//		|crm.XWCRM_PROJECT('CODE', p.CODE) Project_Code, 
//		|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//		|cp.IS_Active IS_Active,
//		|cp.Details Details,
//		|cp.Result_Details Result_Details
//		|from crm.crm_action_log act, crm.crm_project cp, crm.crm_project p
//		|where act.used_time > 0
//		|	and act.amnd_state = 'A' and cp.amnd_state = 'A'  and p.amnd_state = 'A' 
//		//|	and  crm.opt_reports.inv_level_total(action_user, action_date) is not null
//		|	and act.crm_project__oid = cp.id 
//		|	and cp.main_project = p.id
//		|	and (p.text_1 not in ('IN', 'SC', 'MG', 'OWS', 'ST', 'AC', 'CE') or p.text_1 is null)
//		|	and p.main_project = p.id
//		|	and p.is_history = 'N' 
//		|  	and act.amnd_date>";
//		
//		ЗапросЧасть2=ЗапросЧасть1+ДатаДляВыборки+"";
//		ЗапросЧасть3=" and p.CODE=";
//		ЗапросЧасть4=ЗапросЧасть2+ЗапросЧасть3+КодПроектаCRM;
//		
//		ЗапросЧасть5=" union all
//		|select
//		|act.id Action_ID,
//		|act.ACTION_DETAILS Action_Details,
//		|act.ACTION_USER Action_User_ID,
//		|(nvl(act.used_time, ci.used_time))/8 Posted_Time,
//		|(nvl(act.used_time, ci.used_time))  Posted_Hour,
//		|act.action_date Action_Date,
//		|act.amnd_date Amnd_Date,
//		|crm.XWCRM_PROJECT('PROJECT_QUEUE', p.PROJECT_QUEUE) Project_Queue,
//		|ci.name Action_Name,
//		|crm.XWCRM_PROJECT('CODE', p.CODE) Project_Code, 
//		|crm.XWCRM_ISSUE('CRM_CUST__ID', p.CRM_CUST__ID) Customer_Name,
//		|ci.IS_Active IS_Active,
//		|ci.Details Details,
//		|ci.Result_Details Result_Details
//		|from crm.crm_action_log act,  crm.crm_issue ci, crm.crm_project p
//		|where act.used_time > 0
//		| 	and act.amnd_state = 'A'
//		//| 	and  crm.opt_reports.inv_level_total(action_user, action_date) is not null
//		|   and act.crm_project__oid is null 
//		|   and nvl(act.used_time, ci.used_time) > 0 
//		|   and act.crm_issue__oid  = ci.id
//		|   and ci.project = p.id
//		|   and p.amnd_state = 'A'
//		|	and (p.text_1 not in ('IN', 'SC', 'MG', 'OWS', 'ST', 'AC', 'CE') or p.text_1 is null)
//		|	and p.main_project = p.id
//		|	and p.is_history = 'N' 
//		|  	and act.amnd_date>";
//		
//		ЗапросЧасть6=ЗапросЧасть4+ЗапросЧасть5+ДатаДляВыборки+"";
//		ЗапросЧасть7=" and p.CODE=";
//		
//		Запрос=ЗапросЧасть6+ЗапросЧасть7+КодПроектаCRM+" order by Action_Date";
//		
//		oOraDynaset = OraDatabase.CreateDynaset(Запрос,0); 
//		
//		Пока oOraDynaset.EOF = 0 Цикл
//			
//			//в цикле перебираем записи	
//			Action_ID=oOraDynaset.Fields("Action_ID").Value;
//			Action_Details=oOraDynaset.Fields("Action_Details").Value;
//			Action_User_ID=oOraDynaset.Fields("Action_User_ID").Value;
//			Posted_Time=oOraDynaset.Fields("Posted_Time").Value;
//			Posted_Hour=oOraDynaset.Fields("Posted_Hour").Value;
//			Action_Date=ПреобразоватьКДате(oOraDynaset.Fields("Action_Date").Value);
//			Action_Mounth=НачалоМесяца(Action_Date);
//			
//			Amnd_Date=ПреобразоватьКДате(oOraDynaset.Fields("Amnd_Date").Value);
//			
//			Project_Queue=oOraDynaset.Fields("Project_Queue").Value;
//			Action_Name=oOraDynaset.Fields("Action_Name").Value;
//			
//			Action_User_ID=oOraDynaset.Fields("Action_User_ID").Value;
//			Если Action_User_ID<>NULL Тогда
//				//выберем пользователя 
//				ЗапросПользователь="select name from crm.crm_user where id="+Action_User_ID;
//				oOraDynaset2 = OraDatabase.CreateDynaset(ЗапросПользователь,0);
//				
//				Пока oOraDynaset2.EOF = 0 Цикл
//					Action_User=oOraDynaset2.Fields("name").Value;
//					oOraDynaset2.MoveNext();
//				КонецЦикла;
//				oOraDynaset2.Close();
//				
//			Иначе
//				Action_User_ID="";
//				Action_User="";
//			КонецЕсли;	 
//			//найдем сотрудника из CRM в справочнике "КонтактныеЛицаИзCRM"
//			Если Action_User_ID<>"" Тогда
//				СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.НайтиПоРеквизиту("КодCRM", Action_User_ID);
//			Иначе
//				СотрудникИзCRM=Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка();
//			КонецЕсли;
//			EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//			PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//			Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//			GradeValue=0;
//			EstimationOfPostedDays=0;
//			GradeDate='00010101';
//			Если СотрудникИзCRM<>Справочники.КонтактныеЛицаИзCRM.ПустаяСсылка() Тогда 							   
//				ЗапросГрейда.УстановитьПараметр("СотрудникСсылкаНаКонтактноеЛицоИзCRM", СотрудникИзCRM);
//				РезультатГрейда=ЗапросГрейда.Выполнить().Выбрать();
//				Если РезультатГрейда.Следующий() Тогда
//					EmployeeFunction=РезультатГрейда.EmployeeFunction;
//					PositionOfEmployee=РезультатГрейда.EmployeePosition;
//					Grade=РезультатГрейда.Grade;
//					GradeValue=РезультатГрейда.GradeAmount;
//					EstimationOfPostedDays=GradeValue*Posted_Time;
//					GradeDate=РезультатГрейда.GradeDate;
//				Иначе
//					EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//					PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//					Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//					GradeValue=0;
//					EstimationOfPostedDays=0;
//					GradeDate='00010101';
//				КонецЕсли;
//			Иначе
//				EmployeeFunction=Справочники.OW_ФункцииСотрудников.ПустаяСсылка();
//				PositionOfEmployee=Справочники.OW_ПозицииСотрудников.ПустаяСсылка();
//				Grade=Справочники.OW_ГрейдыСотрудников.ПустаяСсылка();
//				GradeValue=0;
//				EstimationOfPostedDays=0;
//				GradeDate='00010101';
//			КонецЕсли;	
//			
//			IS_Active=oOraDynaset.Fields("IS_Active").Value;
//			
//			Если IS_Active="Y" Тогда
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Active;
//			ИначеЕсли IS_Active="N" Тогда
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Completed;
//			ИначеЕсли IS_Active="J" Тогда
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Rejected;
//			ИначеЕсли IS_Active="W" Тогда
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Waiting;
//			ИначеЕсли IS_Active="A" Тогда                                     //
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Acceptance;
//			ИначеЕсли IS_Active="I" Тогда                                     //
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Input;
//			ИначеЕсли IS_Active="F" Тогда                                     //
//				IS_Active_Status=Перечисления.СтатусыЭтапов.Frozen;	
//			КонецЕсли;
//			
//			//теперь запишем инфу в объект	
//			Отбор = Новый Структура();
//			Отбор.Вставить("Action_ID",Action_ID);
//			//Отбор.Вставить("Action_Date",Action_Date);
//			ППОтбор=ОбъектПроект.ВремяПотраченноеНаПроект.НайтиСтроки(Отбор);
//			Если ППОтбор.Количество()=0 Тогда
//				Строка=ОбъектПроект.ВремяПотраченноеНаПроект.Добавить();
//				Строка.Action_ID=Action_ID;
//				Строка.Action_Details=Action_Details;
//				Строка.Action_User_ID=Action_User_ID;
//				Строка.Posted_Time=Posted_Time;
//				Строка.Posted_Hour=Posted_Hour;
//				Строка.Action_Date=Action_Date;
//				Строка.Amnd_Date=Amnd_Date;
//				Строка.Action_Mounth=Action_Mounth;
//				Строка.Project_Queue=Project_Queue;
//				Строка.Action_Name=Action_Name;
//				Строка.Action_User=Action_User;
//				Строка.IS_Active=IS_Active;
//				Строка.IS_Active_Status=IS_Active_Status;
//				//Строка.Details =Details;
//				//Строка.Result_Details=Result_Details;
//				Строка.СотрудникИзCRM=СотрудникИзCRM;
//				Строка.EmployeeFunction=EmployeeFunction;
//				Строка.PositionOfEmployee=PositionOfEmployee;
//				Строка.Grade=Grade;
//				Строка.GradeValue=GradeValue;
//				Строка.EstimationOfPostedDays=EstimationOfPostedDays;
//				Строка.GradeDate=GradeDate;
//				
//			Иначе
//				Строка=ППОтбор[0];
//				Строка.Action_ID=Action_ID;
//				Строка.Action_Details=Action_Details;
//				Строка.Action_User_ID=Action_User_ID;
//				Строка.Posted_Time=Posted_Time;
//				Строка.Posted_Hour=Posted_Hour;
//				Строка.Action_Date=Action_Date;
//				Строка.Amnd_Date=Amnd_Date;
//				Строка.Action_Mounth=Action_Mounth;
//				Строка.Project_Queue=Project_Queue;
//				Строка.Action_Name=Action_Name;
//				Строка.Action_User=Action_User;
//				Строка.IS_Active=IS_Active;
//				Строка.IS_Active_Status=IS_Active_Status;
//				//Строка.Details =Details;
//				//Строка.Result_Details=Result_Details;
//				Строка.СотрудникИзCRM=СотрудникИзCRM;
//				Строка.EmployeeFunction=EmployeeFunction;
//				Строка.PositionOfEmployee=PositionOfEmployee;
//				Строка.Grade=Grade;
//				Строка.GradeValue=GradeValue;
//				Строка.EstimationOfPostedDays=EstimationOfPostedDays;
//				Строка.GradeDate=GradeDate;
//				
//			КонецЕсли;
//			
//			oOraDynaset.MoveNext();
//		КонецЦикла;
//		oOraDynaset.Close();
//		
//		ОбъектПроект.ВремяПотраченноеНаПроект.Сортировать("Action_Date убыв");
//		ОбъектПроект.EstimationOfPostedDays=ОбъектПроект.ВремяПотраченноеНаПроект.Итог("EstimationOfPostedDays");
//		ОбъектПроект.Posted_Time =ОбъектПроект.ВремяПотраченноеНаПроект.Итог("Posted_Time");
//		
//		//обновим
//		Попытка
//			ОбъектПроект.Записать();
//			Попытка ЗаписатьПостинг(ОбъектПроект);
//			Исключение
//				//Сообщить("Невозможно записать постингу для задачи с кодом "+КодПроектаCRM+" для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//				Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно записать постинг для задачи с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки(),"Cannot write posting for task with code "+КодПроектаCRM+"("+Выборка.Наименование+") for client "+Выборка.Партнер+" "+ ОписаниеОшибки()));
//			КонецПопытки	
//		Исключение
//			//Сообщить("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+" для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки());
//			Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Невозможно модифицировать задачу с кодом "+КодПроектаCRM+"("+Выборка.Наименование+") для клиента "+Выборка.Партнер+" "+ ОписаниеОшибки(),"Unable to modify task with code "+КодПроектаCRM+"("+Выборка.Наименование+") for client "+Выборка.Партнер+" "+ ОписаниеОшибки()));
//		КонецПопытки;
//		ПроверитьНаУдаленныеЗаписи(ОбъектПроект);
//	КонецЦикла;	
//	
//	Попытка
//		OraDatabase.Close();
//	Исключение
//		Сообщить("Cannot close connection to Oracle " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
//	КонецПопытки;	
//	
//	OraDatabase=Неопределено;
//	OraSession=Неопределено;
//	
//КонецПроцедуры
//
//Процедура ПроверитьНаУдаленныеЗаписи(ОбъектПроект)
//	
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения КАК ПроектВнедрения,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_ID КАК Action_ID,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_Date КАК Action_Date,
//	|	ИзмененияПостингаПоПроектамВнедрения.Amnd_Date КАК Amnd_Date,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_User_ID КАК Action_User_ID,
//	|	ИзмененияПостингаПоПроектамВнедрения.Posted_Time КАК Posted_Time,
//	|	ИзмененияПостингаПоПроектамВнедрения.Posted_Hour КАК Posted_Hour,
//	|	ИзмененияПостингаПоПроектамВнедрения.КодПроектаCRM КАК КодПроектаCRM,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_Mounth КАК Action_Mounth,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_Name КАК Action_Name,
//	|	ИзмененияПостингаПоПроектамВнедрения.Project_Queue КАК Project_Queue,
//	|	ИзмененияПостингаПоПроектамВнедрения.IS_Active КАК IS_Active,
//	|	ИзмененияПостингаПоПроектамВнедрения.IS_Active_Status КАК IS_Active_Status,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_Details КАК Action_Details,
//	|	ИзмененияПостингаПоПроектамВнедрения.Action_User КАК Action_User
//	|ИЗ
//	|	РегистрСведений.ИзмененияПостингаПоПроектамВнедрения КАК ИзмененияПостингаПоПроектамВнедрения
//	|ГДЕ
//	|	ИзмененияПостингаПоПроектамВнедрения.ПроектВнедрения = &ПроектВнедрения";
//	
//	Запрос.УстановитьПараметр("ПроектВнедрения", ОбъектПроект.Ссылка);
//	Результат=Запрос.Выполнить().Выбрать();
//	
//	Пока Результат.Следующий() Цикл
//		ID_Записи=Результат.Action_ID;
//		Отбор = Новый Структура();
//		Отбор.Вставить("Action_ID",ID_Записи);
//		ППОтбор=ОбъектПроект.ВремяПотраченноеНаПроект.НайтиСтроки(Отбор);
//		Если ППОтбор.Количество()=0 Тогда  //удалили запись
//			НаборЗаписей = РегистрыСведений.ИзмененияПостингаПоПроектамВнедрения.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.ПроектВнедрения.Установить(ОбъектПроект.Ссылка);
//			НаборЗаписей.Отбор.Action_ID.Установить(ID_Записи);
//			
//			Запись = НаборЗаписей.Добавить();
//			Запись.ПроектВнедрения     =  ОбъектПроект.Ссылка;
//			Запись.Период=ТекущаяДата();
//			Запись.КодПроектаCRM = ОбъектПроект.Ссылка.КодПроектаCRM;
//			Запись.СтатусЗаписиПоПостингу  =  Перечисления.СтатусЗаписиПоПостингу.ЗаписьУдалена;	
//			ЗаполнитьЗначенияСвойств(Запись, Результат);		
//			НаборЗаписей.Записать(Ложь);
//			
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецПроцедуры		
//
//Процедура OW_ОбновитьTransactionLogBudget() Экспорт
//	//+ Пилюгин В.Е. 29.07.2015
//	НачалоПериода = Дата(1,1,1);
//	КонецПериода = Дата(1,1,1);
//	КоличествоСекундВСутках = 24*60*60;
//	
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM = Константы.ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM.Получить();
//	ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM = ?(ЗначениеЗаполнено(ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM), ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM, Дата(1,1,1));
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	TransactionLogBudget.ДатаЗагрузкиДанных КАК ДатаЗагрузкиДанных
//	|ИЗ
//	|	РегистрСведений.TransactionLogBudget КАК TransactionLogBudget
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДатаЗагрузкиДанных УБЫВ";
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		КрайняяДатаЗагрузки = НачалоДня(Выборка.ДатаЗагрузкиДанных);
//	Иначе
//		КрайняяДатаЗагрузки = Дата(1,1,1);
//	КонецЕсли; 
//	
//	Если КрайняяДатаЗагрузки < ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM Тогда
//		НачалоПериода = КрайняяДатаЗагрузки+КоличествоСекундВСутках;
//		НачалоПериода = НачалоДня(НачалоПериода);
//		КонецПериода = КонецДня(ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM);
//	ИначеЕсли КрайняяДатаЗагрузки = Дата(1,1,1) И ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM = Дата(1,1,1) Тогда
//	ИначеЕсли КрайняяДатаЗагрузки >= ДатаОбновленияИнфыОЖизненномЦиклеПроектовИзCRM Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	Обработка = Обработки.OW_ЗаполнениеTransactionLogBudget_.Создать();
//	Обработка.ЗагрузитьTransactionLog(Справочники.ЗадачиПроектов.ПустаяСсылка(),НачалоПериода,КонецПериода);
//	
//	//- Пилюгин В.Е. 29.07.2015
//	
//	//+ Пилюгин В.Е. 07.09.2015
//	//рассчитываем накопительные итоги
//	Обработка = Обработки.OW_ЗаполнениеНакопительногоИтогаПоTransactionLog.Создать();
//	Обработка.ЗаполнитьНакопительныйИтогНаСервере(НачалоПериода,КонецПериода);
//	//- Пилюгин В.Е. 07.09.2015
//КонецПроцедуры
//
//Процедура УказатьФайлИзJIRAВЗадачу(ФайлПрис,СсылкаНаФайл) Экспорт
//	ТекЗапись = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
//	ТекЗапись.ПрисоединенныйФайл = ФайлПрис;
//	ТекЗапись.ХранимыйФайл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СсылкаНаФайл));
//	ТекЗапись.Записать(Истина); 
//КонецПроцедуры
//
//Процедура OW_ОтправитьСообщениеОбСозданныхПроектахИзCRM() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//	
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_ПроектыИзCRM.Период,
//	|	OW_ПроектыИзCRM.Проект,
//	|	OW_ПроектыИзCRM.Клиент КАК Партнер,
//	|	OW_ПроектыИзCRM.КодПроекта,
//	|	OW_ПроектыИзCRM.ТипПроектаCRM,
//	|	OW_ПроектыИзCRM.ТипПроектаБуквенный,
//	|	OW_ПроектыИзCRM.ДатаВводаПроектаВCRM,
//	|	OW_ПроектыИзCRM.СтатусПроектаCRM,
//	|	OW_ПроектыИзCRM.СотрудникИзCRM,
//	|	OW_ПроектыИзCRM.НотификацияОтправлена
//	|ИЗ
//	|	РегистрСведений.OW_ПроектыИзCRM КАК OW_ПроектыИзCRM
//	|ГДЕ
//	// |	OW_ПроектыИзCRM.Период > &ТекДата
//	//  |	И 
//	|OW_ПроектыИзCRM.НотификацияОтправлена = ЛОЖЬ";
//	
//	//	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		
//		НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + НСтр("ru = '. Загружен проект из CRM: '; en = '. CRM project downloaded: '")+СОКРЛП(Выборка.КодПроекта);
//		ТекстСообщения=НСтр("ru = 'Создан проект из CRM: '; en = 'Project created from CRM: '")+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Клиент: '; en = 'Customer: '")+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Наименование проекта: '; en = 'Project name: '")+СОКРЛП(Выборка.Проект.Наименование)+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Код проекта: '; en = 'Project code: '")+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Тип проекта из CRM: '; en = 'CRM project type : '")+СОКРЛП(Выборка.ТипПроектаCRM)+";"+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Статус проекта: '; en = 'CRM project status: '")+СОКРЛП(Выборка.СтатусПроектаCRM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Сотрудник из CRM: '; en = 'CRM Employee: '")+СОКРЛП(Выборка.СотрудникИзCRM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Дата создания проекта в CRM: '; en = 'CRM project creation date: '")+Формат(Выборка.ДатаВводаПроектаВCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		
//		Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		//для каждого менеджера отправим нотификацию об изменении статуса
//		Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;	
//		Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если Выборка.Партнер.НеКлиенты1С=Ложь Тогда
//			//проверяем на роль ИнформироватьОНовыхПроектахИзCRM
//			ЗапросПользователя = Новый Запрос;
//			ЗапросПользователя.Текст = 
//			"ВЫБРАТЬ
//			|	Пользователи.Ссылка
//			|ИЗ
//			|	Справочник.Пользователи КАК Пользователи
//			|ГДЕ
//			|	Пользователи.ПометкаУдаления = ЛОЖЬ
//			|	И Пользователи.Предопределенный  = ЛОЖЬ";
//			РезультатЗапросаПользователя = ЗапросПользователя.Выполнить();
//			ВыборкаПользователя = РезультатЗапросаПользователя.Выбрать();
//			Пока ВыборкаПользователя.Следующий() Цикл
//				Польз=ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаПользователя.Ссылка.ИдентификаторПользователяИБ);
//				Если Польз<>Неопределено Тогда
//					Если Польз.Роли.Содержит(Метаданные.Роли.ИнформироватьОНовыхПроектахИзCRM)  Тогда
//						ОтправитьУведомлениеОСозданномПроектеИзCRM(ВыборкаПользователя.Ссылка, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//					КонецЕсли;
//				КонецЕсли;		
//			КонецЦикла; 
//		КонецЕсли;
//		
//		//временно отправляю уведомление себе
//		ОтправитьУведомлениеОСозданномПроектеИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//		
//		ОбновитьДатуОтправкиНотификацииОСозданномПроектеИзCRM(Выборка.Проект, ДатаПроверки);	
//	КонецЦикла;	
//	
//КонецПроцедуры
//
//Процедура OW_ОтправитьСообщениеОбСозданныхПроектахИзCRMПоДокументу(Проект) Экспорт
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_ПроектыИзCRM.Период,
//	|	OW_ПроектыИзCRM.Проект,
//	|	OW_ПроектыИзCRM.Клиент КАК Партнер,
//	|	OW_ПроектыИзCRM.КодПроекта,
//	|	OW_ПроектыИзCRM.ТипПроектаCRM,
//	|	OW_ПроектыИзCRM.ТипПроектаБуквенный,
//	|	OW_ПроектыИзCRM.ДатаВводаПроектаВCRM,
//	|	OW_ПроектыИзCRM.СтатусПроектаCRM,
//	|	OW_ПроектыИзCRM.СотрудникИзCRM
//	|ИЗ
//	|	РегистрСведений.OW_ПроектыИзCRM КАК OW_ПроектыИзCRM
//	|ГДЕ
//	|	OW_ПроектыИзCRM.Проект = &Проект";
//	
//	Запрос.УстановитьПараметр("Проект", Проект);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		
//		НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + НСтр("ru = '. Загружен проект из CRM: '; en = '. CRM project downloaded: '")+СОКРЛП(Выборка.КодПроекта);
//		ТекстСообщения=НСтр("ru = 'Создан проект из CRM: '; en = 'Project created from CRM: '")+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Клиент: '; en = 'Customer: '")+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Наименование проекта: '; en = 'Project name: '")+СОКРЛП(Выборка.Проект.Наименование)+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Код проекта: '; en = 'Project code: '")+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Тип проекта из CRM: '; en = 'CRM project type : '")+СОКРЛП(Выборка.ТипПроектаCRM)+";"+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Статус проекта: '; en = 'CRM project status: '")+СОКРЛП(Выборка.СтатусПроектаCRM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Сотрудник из CRM: '; en = 'CRM Employee: '")+СОКРЛП(Выборка.СотрудникИзCRM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Дата создания проекта в CRM: '; en = 'CRM project creation date: '")+Формат(Выборка.ДатаВводаПроектаВCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		
//		Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		//для каждого менеджера отправим нотификацию об изменении статуса
//		Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Проект);
//			КонецЕсли;
//		КонецЕсли;	
//		Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриСозданииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОСозданномПроектеИзCRM(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Проект);
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если Выборка.Партнер.НеКлиенты1С=Ложь Тогда
//			//проверяем на роль ИнформироватьОНовыхПроектахИзCRM
//			ЗапросПользователя = Новый Запрос;
//			ЗапросПользователя.Текст = 
//			"ВЫБРАТЬ
//			|	Пользователи.Ссылка
//			|ИЗ
//			|	Справочник.Пользователи КАК Пользователи
//			|ГДЕ
//			|	Пользователи.ПометкаУдаления = ЛОЖЬ
//			|	И Пользователи.Предопределенный  = ЛОЖЬ";
//			РезультатЗапросаПользователя = ЗапросПользователя.Выполнить();
//			ВыборкаПользователя = РезультатЗапросаПользователя.Выбрать();
//			Пока ВыборкаПользователя.Следующий() Цикл
//				Польз=ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаПользователя.Ссылка.ИдентификаторПользователяИБ);
//				Если Польз<>Неопределено Тогда
//					Если Польз.Роли.Содержит(Метаданные.Роли.ИнформироватьОНовыхПроектахИзCRM)  Тогда
//						ОтправитьУведомлениеОСозданномПроектеИзCRM(ВыборкаПользователя.Ссылка, ТекстСообщения, НаименованиеУведомления, Проект);
//					КонецЕсли;
//				КонецЕсли;		
//			КонецЦикла; 
//		КонецЕсли;
//		
//		//временно отправляю уведомление себе
//		ОтправитьУведомлениеОСозданномПроектеИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, Проект);
//		
//		ОбновитьДатуОтправкиНотификацииОСозданномПроектеИзCRM(Выборка.Проект, ДатаПроверки);	
//	КонецЦикла;	
//	
//КонецПроцедуры
//
//Процедура ОбновитьДатуОтправкиНотификацииОСозданномПроектеИзCRM(Документ,ДатаПроверки)
//	
//	НаборЗаписей = РегистрыСведений.OW_ПроектыИзCRM.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Проект.Установить(Документ);
//	
//	НаборЗаписей.Прочитать();
//	Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
//		ТекущаяЗапись.ДатаНотификации    = ДатаПроверки;
//		ТекущаяЗапись.НотификацияОтправлена=Истина;
//	КонецЦикла;
//	НаборЗаписей.Записать();	
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОСозданномПроектеИзCRM(КомуОтправляем, ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//		
//	ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(КомуОтправляем);		
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(КомуОтправляем)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
//	Если ЭтоРабочаяБаза=Ложь Тогда
//		//в тестовой базе шлем письма только на отдел 1С
//		Получатели="";
//		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
//		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
//		Получатели = СлужебныйEmail;
//	КонецЕсли; 
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);	
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	   НСтр("ru = 'Ошибка при отправке уведомления о созданном проекте из CRM: %1'"), 
//	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
//	//КонецЕсли;		
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОСозданномПроектеИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//	
//	ПочтовыйАдресПолучателя = ow.ВернутьПочтуСДоменом("akurbatova");
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(ПочтовыйАдресПолучателя)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
//	Если ЭтоРабочаяБаза=Ложь Тогда
//		//в тестовой базе шлем письма только на отдел 1С
//		Получатели="";
//		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
//		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
//		Получатели = СлужебныйEmail;
//	КонецЕсли; 
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	   НСтр("ru = 'Ошибка при отправке уведомления о созданном проекте из CRM: %1'"), 
//	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление о созданном проекте из CRM'"), 
//	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
//	//КонецЕсли;		
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//
//КонецПроцедуры
//
//Процедура OW_ОчисткаЛишнейВерсионности() Экспорт
//	АвторВерсии = новый СписокЗначений;
//	АвторВерсии.Добавить(Справочники.Пользователи.НайтиПоНаименованию("<Не указан>",истина));
//	//АвторВерсии.Добавить(Справочники.Пользователи.НайтиПоНаименованию("ComОбмен",истина));
//	
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 10000
//	|	ВерсииОбъектов.Объект,
//	|	ВерсииОбъектов.НомерВерсии,
//	|	ВерсииОбъектов.ВерсияОбъекта
//	|ИЗ
//	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
//	|ГДЕ
//	|	ВерсииОбъектов.АвторВерсии В(&АвторВерсии)";
//	ЗапросД.УстановитьПараметр("АвторВерсии",АвторВерсии);
//	ТекВыборка = ЗапросД.Выполнить().Выбрать();
//	Пока ТекВыборка.Следующий() Цикл
//		ОТВП = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
//		//******
//		ОТВП.Отбор.Объект.Значение = ТекВыборка.Объект;
//		ОТВП.Отбор.Объект.Использование = Истина; 
//		//******
//		ОТВП.Отбор.НомерВерсии.Значение = ТекВыборка.НомерВерсии;
//		ОТВП.Отбор.НомерВерсии.Использование = Истина; 
//		//******
//		Попытка
//			ОТВП.Очистить();
//			ОТВП.Записать(Истина);
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//КонецПроцедуры
//
//Процедура ПроставитьКодПроектаCRMВДокументах() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//	
//	// Вставить содержимое обработчика.
//	//Для заказа
//	Запрос=Новый Запрос;
//	Запрос.Текст= "ВЫБРАТЬ
//	|	ЗаказКлиента.Ссылка
//	|ИЗ
//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ЗаказКлиентаПроектыCRM.Ссылка КАК Ссылка
//	|		ИЗ
//	|			Документ.ЗаказКлиента.ПроектыCRM КАК ЗаказКлиентаПроектыCRM
//	|		ГДЕ
//	|			ЗаказКлиентаПроектыCRM.НомерСтроки > 0
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			ЗаказКлиентаПроектыCRM.Ссылка) КАК ВложенныйЗапрос
//	|		ПО ЗаказКлиента.Ссылка = ВложенныйЗапрос.Ссылка
//	|ГДЕ
//	|	ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
//	|	И ЗаказКлиента.Проведен = ИСТИНА";
//	
//	Выборка=Запрос.Выполнить().Выбрать();	
//	
//	Пока Выборка.Следующий() = 1 Цикл
//		ДокументСсылка=Выборка.Ссылка;
//		Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда
//			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
//			
//			Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда
//				//изменяем код проекта CRM
//				НужноЗаписатьДокумент=Ложь;
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.ЗадачаПроекта<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//						Если Строка.КодПроектаCRM="" Тогда
//							НужноЗаписатьДокумент=Истина;
//							Строка.КодПроектаCRM=Строка.ЗадачаПроекта.КодПроектаCRM;
//						КонецЕсли;
//					КонецЕсли;	
//				КонецЦикла;	//Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//				
//				Если НужноЗаписатьДокумент=Истина ИЛИ ДокументОбъект.КодCRM="" Тогда
//					КодВрем="";
//					Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//						Если Строка.КодПроектаCRM<>"" Тогда
//							Если КодВрем="" Тогда 
//								КодВрем=Строка.КодПроектаCRM;
//							Иначе
//								КодВрем=КодВрем+" ; "+Строка.КодПроектаCRM;
//							КонецЕсли;
//						КонецЕсли;		
//					КонецЦикла;	
//					
//					ДокументОбъект.КодCRM=КодВрем;
//					Попытка
//						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//					Исключение
//						Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не удалось записать заказ","Failed to save Customer order")+ДокументОбъект);
//					КонецПопытки;
//				КонецЕсли;	//Если НужноЗаписатьДокумент=Истина Тогда
//				
//			КонецЕсли;	//Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда	
//		КонецЕсли;	//	Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда		
//	КонецЦикла; //Пока Выборка.Следующий() = 1 Цикл
//	
//	//Для счета
//	Запрос=Новый Запрос;
//	Запрос.Текст= "ВЫБРАТЬ
//	|	СчетНаОплатуКлиенту.Ссылка
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			СчетНаОплатуКлиентуПроектыCRM.Ссылка КАК Ссылка
//	|		ИЗ
//	|			Документ.СчетНаОплатуКлиенту.ПроектыCRM КАК СчетНаОплатуКлиентуПроектыCRM
//	|		ГДЕ
//	|			СчетНаОплатуКлиентуПроектыCRM.НомерСтроки > 0
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			СчетНаОплатуКлиентуПроектыCRM.Ссылка) КАК ВложенныйЗапрос
//	|		ПО СчетНаОплатуКлиенту.Ссылка = ВложенныйЗапрос.Ссылка
//	|ГДЕ
//	|	СчетНаОплатуКлиенту.ПометкаУдаления = ЛОЖЬ
//	|	И СчетНаОплатуКлиенту.Проведен = ИСТИНА";
//	
//	Выборка=Запрос.Выполнить().Выбрать();	
//	
//	Пока Выборка.Следующий() = 1 Цикл
//		ДокументСсылка=Выборка.Ссылка;
//		Если ДокументСсылка<>Документы.СчетНаОплатуКлиенту.ПустаяСсылка() Тогда
//			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
//			
//			Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда
//				//изменяем код проекта CRM
//				НужноЗаписатьДокумент=Ложь;
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.ЗадачаПроекта<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//						Если Строка.КодПроектаCRM="" Тогда
//							НужноЗаписатьДокумент=Истина;
//							Строка.КодПроектаCRM=Строка.ЗадачаПроекта.КодПроектаCRM;
//						КонецЕсли;
//					КонецЕсли;	
//				КонецЦикла;	//Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//				
//				Если НужноЗаписатьДокумент=Истина ИЛИ ДокументОбъект.КодПроектаCRM="" Тогда
//					КодВрем="";
//					Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//						Если Строка.КодПроектаCRM<>"" Тогда
//							Если КодВрем="" Тогда 
//								КодВрем=Строка.КодПроектаCRM;
//							Иначе
//								КодВрем=КодВрем+" ; "+Строка.КодПроектаCRM;
//							КонецЕсли;
//						КонецЕсли;		
//					КонецЦикла;	
//					
//					ДокументОбъект.КодПроектаCRM=КодВрем;
//					Попытка
//						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//					Исключение
//						Сообщить(НСтр("ru = 'Не удалось записать счет '; en = 'Failed to save Invoice '")+ДокументОбъект);
//					КонецПопытки;
//				КонецЕсли;	//Если НужноЗаписатьДокумент=Истина Тогда
//				
//			КонецЕсли;	//Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда	
//		КонецЕсли;	//	Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда		
//	КонецЦикла; //Пока Выборка.Следующий() = 1 Цикл
//	
//	
//	Сообщить(НСтр("ru = 'Загрузка окончена'; en = 'Download finished'"));
//	
//КонецПроцедуры
//
//Процедура ОбновитьИнфуПоПроектуCRMВДокументах() Экспорт
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//	
//	// Вставить содержимое обработчика.
//	//Для заказа
//	Запрос=Новый Запрос;
//	Запрос.Текст= "ВЫБРАТЬ
//	|	ЗаказКлиента.Ссылка
//	|ИЗ
//	|	Документ.ЗаказКлиента КАК ЗаказКлиента
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			ЗаказКлиентаПроектыCRM.Ссылка КАК Ссылка
//	|		ИЗ
//	|			Документ.ЗаказКлиента.ПроектыCRM КАК ЗаказКлиентаПроектыCRM
//	|		ГДЕ
//	|			ЗаказКлиентаПроектыCRM.НомерСтроки > 0
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			ЗаказКлиентаПроектыCRM.Ссылка) КАК ВложенныйЗапрос
//	|		ПО ЗаказКлиента.Ссылка = ВложенныйЗапрос.Ссылка
//	|ГДЕ
//	|	ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
//	|	И ЗаказКлиента.Проведен = ИСТИНА";
//	
//	Выборка=Запрос.Выполнить().Выбрать();	
//	
//	Пока Выборка.Следующий() = 1 Цикл
//		ДокументСсылка=Выборка.Ссылка;
//		Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда
//			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
//			
//			Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда
//				//изменяем код проекта CRM
//				НужноЗаписатьДокумент=Ложь;
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.ЗадачаПроекта<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//						Строка.КодПроектаCRM=Строка.ЗадачаПроекта.КодПроектаCRM;
//						Строка.ОписаниеПроекта=Строка.ЗадачаПроекта.ПолноеНаименование;
//						Строка.СуммаИзПроекта=Строка.ЗадачаПроекта.СуммаБезНалогов;
//						Строка.ВалютаИзПроекта=Строка.ЗадачаПроекта.Валюта;
//						
//					КонецЕсли;	
//				КонецЦикла;	//Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//				
//				КодВрем="";
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.КодПроектаCRM<>"" Тогда
//						Если КодВрем="" Тогда 
//							КодВрем=Строка.КодПроектаCRM;
//						Иначе
//							КодВрем=КодВрем+" ; "+Строка.КодПроектаCRM;
//						КонецЕсли;
//					КонецЕсли;		
//				КонецЦикла;	
//				
//				ДокументОбъект.КодCRM=КодВрем;
//				Попытка
//					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//				Исключение
//					Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не удалось записать заказ","Failed to save Customer order")+ДокументОбъект);
//				КонецПопытки;				
//			КонецЕсли;	//Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда	
//		КонецЕсли;	//	Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда		
//	КонецЦикла; //Пока Выборка.Следующий() = 1 Цикл
//	
//	//Для счета
//	Запрос=Новый Запрос;
//	Запрос.Текст= "ВЫБРАТЬ
//	|	СчетНаОплатуКлиенту.Ссылка
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			СчетНаОплатуКлиентуПроектыCRM.Ссылка КАК Ссылка
//	|		ИЗ
//	|			Документ.СчетНаОплатуКлиенту.ПроектыCRM КАК СчетНаОплатуКлиентуПроектыCRM
//	|		ГДЕ
//	|			СчетНаОплатуКлиентуПроектыCRM.НомерСтроки > 0
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			СчетНаОплатуКлиентуПроектыCRM.Ссылка) КАК ВложенныйЗапрос
//	|		ПО СчетНаОплатуКлиенту.Ссылка = ВложенныйЗапрос.Ссылка
//	|ГДЕ
//	|	СчетНаОплатуКлиенту.ПометкаУдаления = ЛОЖЬ
//	|	И СчетНаОплатуКлиенту.Проведен = ИСТИНА";
//	
//	Выборка=Запрос.Выполнить().Выбрать();	
//	
//	Пока Выборка.Следующий() = 1 Цикл
//		ДокументСсылка=Выборка.Ссылка;
//		Если ДокументСсылка<>Документы.СчетНаОплатуКлиенту.ПустаяСсылка() Тогда
//			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
//			
//			Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда
//				//изменяем код проекта CRM
//				НужноЗаписатьДокумент=Ложь;
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.ЗадачаПроекта<>Справочники.ЗадачиПроектов.ПустаяСсылка() Тогда
//						Строка.КодПроектаCRM=Строка.ЗадачаПроекта.КодПроектаCRM;
//						Строка.ОписаниеПроекта=Строка.ЗадачаПроекта.ПолноеНаименование;
//						Строка.СуммаИзПроекта=Строка.ЗадачаПроекта.СуммаБезНалогов;
//						Строка.ВалютаИзПроекта=Строка.ЗадачаПроекта.Валюта;
//					КонецЕсли;	
//				КонецЦикла;	//Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//				
//				КодВрем="";
//				Для Каждого Строка ИЗ ДокументОбъект.ПроектыCRM Цикл
//					Если Строка.КодПроектаCRM<>"" Тогда
//						Если КодВрем="" Тогда 
//							КодВрем=Строка.КодПроектаCRM;
//						Иначе
//							КодВрем=КодВрем+" ; "+Строка.КодПроектаCRM;
//						КонецЕсли;
//					КонецЕсли;		
//				КонецЦикла;	
//				
//				ДокументОбъект.КодПроектаCRM=КодВрем;
//				Попытка
//					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//				Исключение
//					Сообщить(НСтр("ru = 'Не удалось записать счет '; en = 'Failed to save Invoice '")+ДокументОбъект);
//				КонецПопытки;				
//			КонецЕсли;	//Если ДокументОбъект.ПроектыCRM.Количество()>0 Тогда	
//		КонецЕсли;	//	Если ДокументСсылка<>Документы.ЗаказКлиента.ПустаяСсылка() Тогда		
//	КонецЦикла; //Пока Выборка.Следующий() = 1 Цикл
//	
//	
//	Сообщить(НСтр("ru = 'Загрузка окончена'; en = 'Download finished'"));
//	
//КонецПроцедуры
//
////Процедура ОтправлятьНотификацииПриИзмененииСтатусаПроектаИзCRM() Экспорт
////	//ow Скочилова АТ 06/03/2017 onec-2121
////	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("УдалитьOW_ОтправлятьНотификацииПриИзмененииСтатусаПроектаИзCRM");
////	Если ЗначениеЗаполнено(Задание) Тогда
////		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
////	КонецЕсли; 
////	//ow конец Скочилова АТ 06/03/2017 onec-2121
////	
////	//++OW Копачев А.С. 02.11.2020 ONEC-6046
////	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
////	Если ОтключитьИспользованиеCRM Тогда 
////		Если ЗначениеЗаполнено(Задание) Тогда
////			OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
////		КонецЕсли;
////		Возврат
////	КонецЕсли;	
////	//--OW Копачев А.С. 02.11.2020 ONEC-6046
////	
////	Запрос=Новый Запрос;
////	Запрос.Текст="ВЫБРАТЬ
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.Период,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.Проект,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.Клиент КАК Партнер,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.КодПроекта,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.СтатусПроектаCRM,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.НотификацияОтправлена,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.ПредыдущийСтатусИзCRM,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.Проект.СотрудникИзCRM КАК СотрудникИзCRM,
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.ДатаИзмененияСтатуса
////	|ИЗ
////	|	РегистрСведений.OW_ИзменениеСтатусаПроектаCRMДляРассылки КАК OW_ИзменениеСтатусаПроектаCRMДляРассылки
////	|ГДЕ
////	|	OW_ИзменениеСтатусаПроектаCRMДляРассылки.НотификацияОтправлена = ЛОЖЬ";
////	
////	Выборка = Запрос.Выполнить().Выбрать();
////	
////	ДатаПроверки=ТекущаяДата();
////	Пока Выборка.Следующий() Цикл
////		НаименованиеУведомления="";
////		ТекстСообщения="";
////		
////		НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ", project : """+СОКРЛП(Выборка.КодПроекта)+""". New status -> """+СОКРЛП(Выборка.СтатусПроектаCRM)+"""";
////		ТекстСообщения=НСтр("ru = 'Изменен статус проекта в CRM: '; en = 'Changed status of the project in the CRM: '")+Символы.ПС+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Клиент: '; en = 'Customer: '")+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Наименование проекта: '; en = 'Project name: '")+СОКРЛП(Выборка.Проект.Наименование)+";"+Символы.ПС+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Код проекта: '; en = 'Project code: '")+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Статус проекта: '; en = 'CRM project status: '")+СОКРЛП(Выборка.СтатусПроектаCRM)+";"+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Предыдущий статус проекта: '; en = 'Previous CRM project status: '")+СОКРЛП(Выборка.ПредыдущийСтатусИзCRM)+";"+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Ответственный за внедрение из CRM: '; en = 'CRM Employee: '")+СОКРЛП(Выборка.СотрудникИзCRM)+";"+Символы.ПС+Символы.ПС;
////		ТекстСообщения=ТекстСообщения+НСтр("ru = 'Дата изменения статуса проекта в CRM: '; en = 'CRM project status updating date: '")+Формат(Выборка.ДатаИзмененияСтатуса,"ДЛФ=Д")+";"+Символы.ПС;
////		
////		//для каждого менеджера отправим нотификацию об изменении статуса
////		Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			//***OW Start [БПВ]05.06.2018
////			Если Не OW.ПроверитьПользователяНаРоль(Выборка.Партнер.ОсновнойМенеджер,"НеОтпралятьНотификациюДляEMEAA") тогда
////				Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусаПроектаИзCRM) Тогда
////					ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////				КонецЕсли;	
////			КонецЕсли;
////			//***OW End [БПВ]05.06.2018 
////			
////		КонецЕсли;	
////		Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			//***OW Start [БПВ]05.06.2018
////			Если Не OW.ПроверитьПользователяНаРоль(Выборка.Партнер.ВторойМенеджер,"НеОтпралятьНотификациюДляEMEAA") тогда
////				Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусаПроектаИзCRM) Тогда
////					ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////				КонецЕсли;	
////			КонецЕсли;
////			//***OW End [БПВ]05.06.2018 
////		КонецЕсли;	
////		Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			//***OW Start [БПВ]05.06.2018
////			Если Не OW.ПроверитьПользователяНаРоль(Выборка.Партнер.ТретийМенеджер,"НеОтпралятьНотификациюДляEMEAA") тогда
////				Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусаПроектаИзCRM) Тогда
////					ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////				КонецЕсли;	
////			КонецЕсли;
////			//***OW End [БПВ]05.06.2018 
////		КонецЕсли;
////		//+ Пилюгин В.Е. 08.06.2016
////		Если Выборка.Партнер.Куратор<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.Куратор, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусаПроектаИзCRM) Тогда
////				ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(Выборка.Партнер.Куратор, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////			КонецЕсли;
////		КонецЕсли;
////		Если Выборка.Партнер.BRM<>Справочники.Пользователи.ПустаяСсылка() Тогда
////			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.BRM, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииСтатусаПроектаИзCRM) Тогда
////				ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(Выборка.Партнер.BRM, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////			КонецЕсли;
////		КонецЕсли;
////		//- Пилюгин В.Е. 08.06.2016
////		
////		////временно отправляю уведомление себе
////		//ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
////		
////		//ОбновитьДатуОтправкиНотификацииОбИзмененииСтатусаПроектаИзCRM(Выборка.Проект, ДатаПроверки);	
////	КонецЦикла;	
////	
////	//ow Скочилова АТ 06/03/2017 onec-2121
////	Если ЗначениеЗаполнено(Задание) Тогда
////		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
////	КонецЕсли; 
////	//ow конец Скочилова АТ 06/03/2017 onec-2121
////	
////КонецПроцедуры
//
////Процедура ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRM(КомуОтправляем, ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
////	
////	Получатели="";
////	
////	ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(КомуОтправляем);	
////	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////		//УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(КомуОтправляем)));
////	Иначе
////		Если Получатели="" Тогда
////			Получатели = ПочтовыйАдресПолучателя;
////		Иначе	
////			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
////		КонецЕсли;
////	КонецЕсли;
////	
////	ТемаПисьма =НаименованиеУведомления;
////	ТекстПисьма = ТекстСообщения;
////	
////	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
////	Если ЭтоРабочаяБаза=Ложь Тогда
////		//в тестовой базе шлем письма только на отдел 1С
////		Получатели="";
////		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
////		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
////		Получатели = СлужебныйEmail;
////	КонецЕсли; 
////	
////	//++OW Копачев А.С. 07.09.2022 ONEC-7882
////	//ПараметрыПисьма = Новый Структура;
////	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
////	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
////	//ПараметрыПисьма.Вставить("Кому", Получатели);
////	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
////	//
////	//Попытка 
////	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
////	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
////	//	
////	//Исключение
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	   НСтр("ru = 'Ошибка при отправке уведомления об изменении статуса проекта из CRM: %1'"), 
////	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
////	//	Возврат;
////	//КонецПопытки;	
////	//
////	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////	//	
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
////	//КонецЕсли;		
////	
////	СписокАдресовКому = Новый СписокЗначений;	
////	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
////	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
////	
////КонецПроцедуры
//
////Процедура ОтправитьУведомлениеОбИзмененииСтатусаПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
////	
////	Получатели="";
////	
////	ПочтовыйАдресПолучателя = ow.ВернутьПочтуСДоменом("akurbatova");
////	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////		//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(ПочтовыйАдресПолучателя)));
////	Иначе
////		Если Получатели="" Тогда
////			Получатели = ПочтовыйАдресПолучателя;
////		Иначе	
////			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
////		КонецЕсли;
////	КонецЕсли;
////	
////	ТемаПисьма =НаименованиеУведомления;
////	ТекстПисьма = ТекстСообщения;
////	
////	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
////	Если ЭтоРабочаяБаза=Ложь Тогда
////		//в тестовой базе шлем письма только на отдел 1С
////		Получатели="";
////		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
////		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
////		Получатели = СлужебныйEmail;
////	КонецЕсли; 
////	
////	//++OW Копачев А.С. 07.09.2022 ONEC-7882
////	//ПараметрыПисьма = Новый Структура;
////	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
////	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
////	//ПараметрыПисьма.Вставить("Кому", Получатели);
////	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст);
////	//
////	//Попытка 
////	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
////	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
////	//	
////	//Исключение
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	   НСтр("ru = 'Ошибка при отправке уведомления об изменении статуса проекта из CRM: %1'"), 
////	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
////	//	Возврат;
////	//КонецПопытки;	
////	//
////	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
////	//	
////	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении статуса проекта из CRM'"), 
////	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
////	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
////	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
////	//КонецЕсли;		
////	
////	СписокАдресовКому = Новый СписокЗначений;	
////	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
////	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
////	//--OW Копачев А.С. 07.09.2022 ONEC-7882
////	
////КонецПроцедуры
//
////++OW Копачев А.С. 12.02.2021 ONEC-6432 
////Процедура ОбновитьДатуОтправкиНотификацииОбИзмененииСтатусаПроектаИзCRM(Документ,ДатаПроверки)
////	
////	НаборЗаписей = РегистрыСведений.OW_ИзменениеСтатусаПроектаCRMДляРассылки.СоздатьНаборЗаписей();
////	НаборЗаписей.Отбор.Проект.Установить(Документ);
////	
////	НаборЗаписей.Прочитать();
////	Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
////		ТекущаяЗапись.ДатаНотификации    = ДатаПроверки;
////		ТекущаяЗапись.НотификацияОтправлена=Истина;
////	КонецЦикла;
////	НаборЗаписей.Записать();	
////КонецПроцедуры
////--OW Копачев А.С. 12.02.2021 ONEC-6432
//
//Функция ПолучитьИсполнителяПоОрганизации(Организация) Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ТекЮзер = Справочники.Пользователи.НайтиПоРеквизиту("ОсновнаяОрганизация",Организация);
//	Если Организация = Справочники.Организации.OpenwaySystemsLtd Тогда
//		ТекЮзер = Справочники.Пользователи.НайтиПоНаименованию("Stefanel Mercieca Zammit",истина);	
//	КонецЕсли;
//	Возврат ТекЮзер;
//	УстановитьПривилегированныйРежим(ложь);
//	
//КонецФункции
//
//Процедура OW_ОтправлятьНотификацииПриИзмененииИсторииПроектаИзCRM() Экспорт
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("УдалитьOW_ОтправлятьНотификацииПриИзмененииИсторииПроектаИзCRM");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Если ЗначениеЗаполнено(Задание) Тогда
//			OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//		КонецЕсли;
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//	
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Период,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Клиент КАК Партнер,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.КодПроекта КАК КодПроекта,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.НотификацияОтправлена,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект.СотрудникИзCRM КАК СотрудникИзCRM,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ДатаСтатуса КАК ДатаСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ИмяСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Детали,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.СотрудникCRM,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ТипСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект.НаименованиеИзCRM КАК НаименованиеИзCRM
//	|ИЗ
//	|	РегистрСведений.OW_ИзменениеИсторииПроектаCRMДляРассылки КАК OW_ИзменениеИсторииПроектаCRMДляРассылки
//	|ГДЕ
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.НотификацияОтправлена = ЛОЖЬ
//	|	И НЕ OW_ИзменениеИсторииПроектаCRMДляРассылки.ТипСтатуса ПОДОБНО ""%Due Date%""
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Партнер,
//	|	КодПроекта,
//	|	ДатаСтатуса";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		
//		НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ": New status for <"+СОКРЛП(Выборка.КодПроекта)+">. "+СОКРЛП(Выборка.НаименованиеИзCRM)+". "+СОКРЛП(Выборка.ТипСтатуса);
//		ТекстСообщения="Changed status of the project in the CRM: "+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Client: "+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Project name: "+СОКРЛП(Выборка.Проект.Наименование)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Project code: "+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Status Name: "+СОКРЛП(Выборка.ИмяСтатуса)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Date: "+СОКРЛП(Выборка.ДатаСтатуса)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Details: "+СОКРЛП(Выборка.Детали)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"User from CRM: "+Формат(Выборка.СотрудникCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		
//		//для каждого менеджера отправим нотификацию об изменении статуса
//		Если Выборка.Партнер.BRM<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.BRM, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииИсторииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRM(Выборка.Партнер.BRM, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииИсторииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRM(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииИсторииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRM(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;	
//		Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииИсторииПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRM(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;
//		
//		//временно отправляю уведомление себе
//		//ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//		
//		//ОбновитьДатуОтправкиНотификацииОбИзмененииИсторииПроектаИзCRM(Выборка.Проект, Выборка.ТипСтатуса, ДатаПроверки);	
//	КонецЦикла;	
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRM(КомуОтправляем, ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//	
//	ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(КомуОтправляем);
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//		УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.", Строка(КомуОтправляем)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
//	Если ЭтоРабочаяБаза=Ложь Тогда
//		//в тестовой базе шлем письма только на отдел 1С
//		Получатели="";
//		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
//		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
//		Получатели = СлужебныйEmail;
//	КонецЕсли; 
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка при отправке уведомления об изменении статуса проекта из CRM: %1", 
//	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//	//	УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомления успешно отправлены на адрес %1.", ПочтовыйАдресПолучателя));
//	//КонецЕсли;		
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОбИзмененииИсторииПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//	
//	ПочтовыйАдресПолучателя = ow.ВернутьПочтуСДоменом("akurbatova");
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//		УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.", Строка(ПочтовыйАдресПолучателя)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка при отправке уведомления об изменении статуса проекта из CRM: %1", 
//	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	ЗаписьЖурналаРегистрации("Нотификации из 1С. Уведомление об изменении статуса проекта из CRM", 
//	//	УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомления успешно отправлены на адрес %1.", ПочтовыйАдресПолучателя));
//	//КонецЕсли;	
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//КонецПроцедуры
//
//Процедура OW_РассылкаНотификацийПриДостиженииДэдлайнаПоОплатеИПредоставлениюАкта() Экспорт
//    //***OW @20201029031353  Start [БПВ] ONEC-5982
//    Если не OW_ФоновыеЗадания.ПроверкаЧтоМожноЗапуститьРегЗадание() Тогда
//        Возврат;
//    КонецЕсли;
//    //***OW @20201029031356  End [БПВ] ONEC-5982 
//
//    
//    //ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("OW_РассылкаНотификацийПоДэдлайнуСчетовАктов");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	//++OW Копачев А.С. 15.08.2023 ONEC-8710
//	//ЮзерыРассылки = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПоДэдлайнамСчетовИАктов)
//	
//	ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаПоДэдлайнамСчетовИАктов;		
//	ЮзерыРассылки = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);						
//	//--OW Копачев А.С. 15.08.2023 ONEC-8710
//	
//	//+ Пилюгин В.Е. 25.11.2015
//	Запрос=Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	             |	СчетНаОплатуКлиенту.Ссылка КАК Ссылка,
//	             |	СчетНаОплатуКлиенту.Менеджер КАК Менеджер,
//	             |	СчетНаОплатуКлиенту.ДатаДэдлайна,
//	             |	РАЗНОСТЬДАТ(&ТекущаяДата, СчетНаОплатуКлиенту.ДатаДэдлайна, ДЕНЬ) КАК ДнейДоДэдлайна
//	             |ИЗ
//	             |	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//	             |ГДЕ
//	             |	СчетНаОплатуКлиенту.ДатаДэдлайна <> ДАТАВРЕМЯ(1, 1, 1)
//	             |	И НЕ СчетНаОплатуКлиенту.СозданоПоступлениеДС
//	             |	И НЕ СчетНаОплатуКлиенту.ПометкаУдаления
//	             |	И РАЗНОСТЬДАТ(&ТекущаяДата, СчетНаОплатуКлиенту.ДатаДэдлайна, ДЕНЬ) <= 10
//	             |	И НЕ СчетНаОплатуКлиенту.Партнер.ТестовыйКлиент
//	             |	И СчетНаОплатуКлиенту.Менеджер В(&ЮзерыРассылки)
//				 //++OW Копачев А.С. 20.06.2022 ONEC-7662 
//				 | И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//				 |		ИЛИ (СчетНаОплатуКлиенту.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//				 |			ИЛИ СчетНаОплатуКлиенту.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА
//				 |				И СчетНаОплатуКлиенту.Организация.ВидИнстансJIRA = &ВидИнстансJIRA))
//				 //--OW Копачев А.С. 20.06.2022 ONEC-7662
//				 |
//	             |
//	             |СГРУППИРОВАТЬ ПО
//	             |	СчетНаОплатуКлиенту.Менеджер,
//	             |	СчетНаОплатуКлиенту.Ссылка,
//	             |	СчетНаОплатуКлиенту.ДатаДэдлайна
//	             |ИТОГИ ПО
//	             |	Менеджер,
//	             |	Ссылка
//	             |;
//	             |
//	             |////////////////////////////////////////////////////////////////////////////////
//	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
//	             |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
//	             |	РеализацияТоваровУслуг.Менеджер КАК Менеджер,
//	             |	РеализацияТоваровУслуг.ДатаДэдлайна,
//	             |	РАЗНОСТЬДАТ(&ТекущаяДата, РеализацияТоваровУслуг.ДатаДэдлайна, ДЕНЬ) КАК ДнейДоДэдлайна
//	             |ИЗ
//	             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//	             |ГДЕ
//	             |	РеализацияТоваровУслуг.ДатаДэдлайна <> ДАТАВРЕМЯ(1, 1, 1)
//	             |	И НЕ РеализацияТоваровУслуг.ЕстьПодписанныйБумажныйЭкземпляр
//	             |	И НЕ РеализацияТоваровУслуг.ПолученСкан
//	             |	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
//	             |	И РАЗНОСТЬДАТ(&ТекущаяДата, РеализацияТоваровУслуг.ДатаДэдлайна, ДЕНЬ) <= 5
//	             |	И НЕ РеализацияТоваровУслуг.Партнер.ТестовыйКлиент
//	             |	И РеализацияТоваровУслуг.Менеджер В(&ЮзерыРассылки)
//				 //++OW Копачев А.С. 20.06.2022 ONEC-7662 
//				 | И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//				 |		ИЛИ (РеализацияТоваровУслуг.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//				 |			ИЛИ РеализацияТоваровУслуг.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА
//				 |				И РеализацияТоваровУслуг.Организация.ВидИнстансJIRA = &ВидИнстансJIRA))
//				 //--OW Копачев А.С. 20.06.2022 ONEC-7662
//				 |
//	             |
//	             |СГРУППИРОВАТЬ ПО
//	             |	РеализацияТоваровУслуг.Менеджер,
//	             |	РеализацияТоваровУслуг.Ссылка,
//	             |	РеализацияТоваровУслуг.ДатаДэдлайна,
//	             |	РАЗНОСТЬДАТ(&ТекущаяДата, РеализацияТоваровУслуг.ДатаДэдлайна, ДЕНЬ)
//	             |ИТОГИ ПО
//	             |	Менеджер";
//	
//	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ЮзерыРассылки", ЮзерыРассылки);
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	
//	ПакетЗапроса = Запрос.ВыполнитьПакет();
//	
//	//++OW Копачев А.С. 05.09.2022 ONEC-7882	
//	//ПараметрыОтправки = Новый Структура;
//	//ПараметрыОтправки.Вставить("Получатель","");
//	//ПараметрыОтправки.Вставить("Тема","");
//	//ПараметрыОтправки.Вставить("ТекстПисьма","");
//	//ПараметрыОтправки.Вставить("ОбъектМетаданных","");
//	//
//	////нотификация по счетам
//	//ПараметрыОтправки.Тема = НСтр("ru = 'Нотификации из 1С. Уведомление о дэдлайне оплаты счета'; ru = '1C notification. Notice of deadline Invoice payment'");   
//	//
//	//ПараметрыОтправки.ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
//	//Выборка = ПакетЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	//Пока Выборка.Следующий() Цикл
//	//	ПараметрыОтправки.Получатель = Выборка.Менеджер;
//	//	ПараметрыОтправки.ТекстПисьма = НСтр("ru = 'Список документов: '; en = 'List of documents: '");
//	//	Выборка1 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
//	//	Пока Выборка1.Следующий() Цикл
//	//		ПараметрыОтправки.ТекстПисьма = ПараметрыОтправки.ТекстПисьма + Символы.ПС + НСтр("ru = 'Дней до дэдлайна: '; en = 'Days before deadline: '") + Выборка1.ДнейДоДэдлайна + ?(Выборка1.ДнейДоДэдлайна < 0, " (просрочка!)","") + Символы.Таб + Выборка1.Ссылка.Номер + " от " + Выборка1.Ссылка.Дата;	
//	//	КонецЦикла; 
//	//	ОтправитьПисьмоПриДостиженииДэдлайнаПоОплатеИПредоставлениюАкта(ПараметрыОтправки);		
//	//КонецЦикла;	
//	
//	//нотификация по счетам
//
//	Тема = НСтр("ru = 'Нотификации из 1С. Уведомление о дэдлайне оплаты счета'; ru = '1C notification. Notice of deadline Invoice payment'");
//	Выборка = ПакетЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока Выборка.Следующий() Цикл
//		
//		ТекстПисьма = НСтр("ru = 'Список документов: '; en = 'List of documents: '");
//
//		Выборка1 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,);
//		Пока Выборка1.Следующий() Цикл
//			ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Дней до дэдлайна: '; en = 'Days before deadline: '") + Выборка1.ДнейДоДэдлайна + ?(Выборка1.ДнейДоДэдлайна < 0, " (просрочка!)","") + Символы.Таб + Выборка1.Ссылка.Номер + " от " + Выборка1.Ссылка.Дата;	
//		КонецЦикла; 
//		
//		СписокАдресов = Новый СписокЗначений;
//	
//		Менеджер = Выборка.Менеджер;
//		Если ЗначениеЗаполнено(Менеджер) 
//			//И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(Менеджер) //OW Копачев А.С. 20.04.2023 ONEC-7812
//			Тогда
//			Мыло = OW.ПолучитьМылоЮзера(Менеджер);
//			Если ЗначениеЗаполнено(Мыло) Тогда
//				СписокАдресов.Добавить(Мыло, Строка(Менеджер));
//			КонецЕсли;  
//		КонецЕсли;
//		
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресов,,,,, Неопределено,,,Неопределено);
//	КонецЦикла;
//	//--OW Копачев А.С. 05.09.2022 ONEC-7882
//
//	
//	//++OW Копачев А.С. 05.09.2022 ONEC-7882	
//	////нотификация по актам
//	//ПараметрыОтправки.Тема = "Нотификации из 1С. Уведомление о дэдлайне предоставления подписанного акта";
//	//ПараметрыОтправки.ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
//	//Выборка1 = ПакетЗапроса[1].Выбрать();
//	//ПараметрыОтправки.ТекстПисьма = НСтр("ru = 'Список документов: '; en = 'List of documents: '");
//	//Если Выборка1.Следующий() Тогда
//	//	Пока Выборка1.Следующий() Цикл
//	//		Если Выборка1.Ссылка <> Null Тогда
//	//			ПараметрыОтправки.ТекстПисьма = ПараметрыОтправки.ТекстПисьма + Символы.ПС + НСтр("ru = 'Дней до дэдлайна: '; en = 'Days before deadline: '") + Выборка1.ДнейДоДэдлайна + ?(Выборка1.ДнейДоДэдлайна < 0, " (просрочка!)","") + Символы.Таб + Выборка1.Ссылка.Номер + " от " + Выборка1.Ссылка.Дата;	
//	//		КонецЕсли;
//	//	КонецЦикла;	
//	//	
//	//ЮзерыРассылки = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПоДэдлайнамСчетовИАктов); 
//	//Для Каждого Юзер из ЮзерыРассылки Цикл
//	//	ПараметрыОтправки.Получатель = Юзер.Значение;
//	//	ОтправитьПисьмоПриДостиженииДэдлайнаПоОплатеИПредоставлениюАкта(ПараметрыОтправки);	
//	//КонецЦикла;
//	//КонецЕсли;
//	////***OW @20210315072625  End [САТ]
//	
//	
//	//нотификация по актам
//	Тема = "Нотификации из 1С. Уведомление о дэдлайне предоставления подписанного акта";	
//	
//	Выборка1 = ПакетЗапроса[1].Выбрать();
//	Если Выборка1.Следующий() Тогда
//	
//		ТекстПисьма = НСтр("ru = 'Список документов: '; en = 'List of documents: '");
//
//		Пока Выборка1.Следующий() Цикл
//			Если Выборка1.Ссылка <> Null Тогда
//				ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Дней до дэдлайна: '; en = 'Days before deadline: '") + Выборка1.ДнейДоДэдлайна + ?(Выборка1.ДнейДоДэдлайна < 0, " (просрочка!)","") + Символы.Таб + Выборка1.Ссылка.Номер + " от " + Выборка1.Ссылка.Дата;	
//			КонецЕсли;
//		КонецЦикла;	
//		
//		СписокАдресов = Новый СписокЗначений;
//		
//		//++OW Копачев А.С. 20.04.2023 ONEC-6185
//		//ЮзерыРассылки = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПоДэдлайнамСчетовИАктов); 
//		//Для Каждого Юзер из ЮзерыРассылки Цикл
//		//	Получатель = Юзер.Значение;
//		//	Если ЗначениеЗаполнено(Получатель) Тогда 
//		//		Мыло = OW.ПолучитьМылоЮзера(Получатель);
//		//		Если ЗначениеЗаполнено(Мыло) Тогда
//		//			СписокАдресов.Добавить(Мыло, Строка(Получатель));
//		//		КонецЕсли;  
//		//	КонецЕсли;
//		//	
//		//КонецЦикла;  
//		СписокАдресов = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(ЮзерыРассылки);
//		//--OW Копачев А.С. 20.04.2023 ONEC-6185
//		
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресов,,,,, Неопределено,,,Неопределено);
//	КонецЕсли;
//	//--OW Копачев А.С. 05.09.2022 ONEC-7882
//
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура OW_РассылкаОтчетаContractsUnderReview()
//	//+ Пилюгин В.Е. 14.04.2016		//вообще нужно делать одну универсальную процедуру для рассылок, но времени нет
//	
//	//ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПараметрыОтправки.Получатель);
//	//Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	ЗаписьЖурналаРегистрации(ПараметрыОтправки.Тема, 
//	//	УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПараметрыОтправки.Получатель,
//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.", Строка(ПараметрыОтправки.Получатель)));
//	//	Возврат;
//	//Иначе
//	//	Получатели = ПочтовыйАдресПолучателя+"; vpilugin@openwaygroup.com"; 	//временно добавил себя
//	//КонецЕсли;
//	//
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ПараметрыОтправки.Тема);
//	//ПараметрыПисьма.Вставить("Тело", ПараметрыОтправки.ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//	
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//Исключение
//	//	ЗаписьЖурналаРегистрации(ПараметрыОтправки.Тема, 
//	//		УровеньЖурналаРегистрации.Ошибка,ПараметрыОтправки.Метаданные, ,
//	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка при отправке уведомления об " +ПараметрыОтправки.Тема+": %1", 
//	//		   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	ЗаписьЖурналаРегистрации(ПараметрыОтправки.Тема, УровеньЖурналаРегистрации.Информация,ПараметрыОтправки.ОбъектМетаданных, ,
//	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уведомления успешно отправлены на адрес %1.", ПочтовыйАдресПолучателя));
//	//КонецЕсли;	
//	//- Пилюгин В.Е. 25.11.2015
//КонецПроцедуры
//
//Процедура НотификацияСЛогомОшибокАдминам1С() Экспорт
//    //***OW @20201029031353  Start [БПВ] ONEC-5982
//    Если не OW_ФоновыеЗадания.ПроверкаЧтоМожноЗапуститьРегЗадание() Тогда
//        Возврат;
//    КонецЕсли;
//    //***OW @20201029031356  End [БПВ] ONEC-5982 
//    
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ДатаВчера = НачалоДня(ТекущаяДата()) - 86400;
//	//+++ Брук Б 16.06.2020 
//	НачалоПериода =  НачалоДня(ТекущаяДата() - 60*60*24); // чтобы в этот период попадали ошибки, полученые после 00:00 текущей даты, выполненные этой ночью, до запуска рассылки
//	//--- Брук Б 16.06.2020 
//	
//	ТабЗаданий = Новый ТаблицаЗначений;
//	ТабЗаданий.Колонки.Добавить("Задание");
//	ТабЗаданий.Колонки.Добавить("Статус");
//	ТабЗаданий.Колонки.Добавить("Время");
//	ТабЗаданий.Колонки.Добавить("КоличествоСтартов");
//	ТабЗаданий.Колонки.Добавить("КоличествоЗавершений");
//	ТабЗаданий.Колонки.Добавить("Расписание");
//	
//	//OW Конец Скочилова АТ 06/03/2017 ONEC-2121
//	
//	//+ Пилюгин В.Е. 19.07.2016
//	//анализируем лог выполнения регламентных заданий
//	ТекстСообщения = "";
//	
//	ЗапросСписок = Новый Запрос;
//	ЗапросСписок.Текст = 
//	"ВЫБРАТЬ
//	|	OW_РегламентныеЗаданияДляКонтроля.Ссылка,
//	|	OW_РегламентныеЗаданияДляКонтроля.Наименование,
//	|	OW_РегламентныеЗаданияДляКонтроля.ПолноеНаименование
//	|ИЗ
//	|	Справочник.OW_РегламентныеЗаданияДляКонтроля КАК OW_РегламентныеЗаданияДляКонтроля
//	|ГДЕ
//	|	НЕ OW_РегламентныеЗаданияДляКонтроля.ПометкаУдаления";
//	
//	ВыборкаСписокРЗ = ЗапросСписок.Выполнить().Выбрать();
//	
//	Запрос = Новый Запрос;
//	
//	Пока ВыборкаСписокРЗ.Следующий() Цикл
//		
//		СтруктураОтбора = Новый Структура("Метаданные",ВыборкаСписокРЗ.Наименование);
//		
//		Попытка
//			Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
//		Исключение
//			ТекстСообщения = ТекстСообщения + Символы.ПС + "Не удалось получить регламентное задание по имени из спр. ""Регламентные задания для контроля"": "+ ВыборкаСписокРЗ.Наименование + Символы.ПС;
//			Продолжить;
//		КонецПопытки;
//		
//		Если Задания.Количество() = 0 Тогда
//			ТекстСообщения = ТекстСообщения + Символы.ПС + "Не удалось получить регламентное задание по имени из спр. ""Регламентные задания для контроля"": "+ ВыборкаСписокРЗ.Наименование + Символы.ПС;
//			Продолжить;
//		Иначе			
//			ТекРеглЗадание = Задания[0];
//			Если НЕ ТекРеглЗадание.Использование Тогда
//				Продолжить;
//			КонецЕсли; 
//			
//			ТребуетсяВыполнение = OW_ФоновыеЗадания.ТребуетсяВыполненияВЭтотДень(ДатаВчера, ТекРеглЗадание) ИЛИ OW_ФоновыеЗадания.ТребуетсяВыполненияВЭтотДень(НачалоПериода, ТекРеглЗадание);
//			
//			Если НЕ ТребуетсяВыполнение Тогда
//				Продолжить;
//			КонецЕсли; 
//		КонецЕсли; 
//		
//		//все проверки прошли
//		СтрокаТабЗаданий 			= ТабЗаданий.Добавить();
//		СтрокаТабЗаданий.Задание 	= ВыборкаСписокРЗ.ПолноеНаименование;
//		СтрокаТабЗаданий.Задание 	= ТекРеглЗадание;
//		СтрокаТабЗаданий.Расписание = Строка(ТекРеглЗадание.Расписание);
//		
//		ЗаданиеСтартовано 		= Ложь;
//		ЗаданиеЗавершено 		= Ложь;
//		КоличествоСтартов 		= 0;
//		КоличествоЗавершений 	= 0;
//		
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	OW_ЛогКонтроляРегламентныхЗаданий.Период КАК Период,
//		|	OW_ЛогКонтроляРегламентныхЗаданий.РегламентноеЗадание,
//		|	OW_ЛогКонтроляРегламентныхЗаданий.Статус
//		|ИЗ
//		|	РегистрСведений.OW_ЛогКонтроляРегламентныхЗаданий КАК OW_ЛогКонтроляРегламентныхЗаданий
//		|ГДЕ
//		|	OW_ЛогКонтроляРегламентныхЗаданий.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И OW_ЛогКонтроляРегламентныхЗаданий.РегламентноеЗадание = &РегламентноеЗадание
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	Период";
//		
//		//+++ Брук Б 16.06.2020 
//		//Запрос.УстановитьПараметр("ДатаНачала", 			НачалоДня(ДатаВчера));
//		//Запрос.УстановитьПараметр("ДатаОкончания", 		КонецДня(ДатаВчера));
//		Запрос.УстановитьПараметр("ДатаНачала", 			НачалоПериода);
//		Запрос.УстановитьПараметр("ДатаОкончания", 			ТекущаяДата());
//		//--- Брук Б 16.06.2020 
//		Запрос.УстановитьПараметр("РегламентноеЗадание", 	ВыборкаСписокРЗ.Ссылка);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			Если Выборка.Статус = Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт Тогда
//				КоличествоСтартов = КоличествоСтартов + 1;
//				ЗаданиеСтартовано = Истина;
//				СтрокаТабЗаданий.Время = Выборка.Период;
//			ИначеЕсли Выборка.Статус = Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш Тогда
//				КоличествоЗавершений = КоличествоЗавершений + 1;
//				ЗаданиеЗавершено = Истина;
//				СтрокаТабЗаданий.Время = Выборка.Период;
//			КонецЕсли; 			
//		КонецЦикла; 
//		
//		Если ЗаданиеСтартовано И ЗаданиеЗавершено И (КоличествоСтартов = КоличествоЗавершений) Тогда
//			СообщениеОбОшибке = "Регламентное задание """ + ВыборкаСписокРЗ.ПолноеНаименование + """ стартовало, всё ок" + Символы.ПС;
//			OW.ЗаписатьОшибку(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.РегламентныеЗаданияДляКонтроля, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Информация, СообщениеОбОшибке);
//			//ТекстСообщения = ТекстСообщения + Символы.ПС + СообщениеОбОшибке;
//			СтрокаТабЗаданий.Статус = "ОК";
//			СтрокаТабЗаданий.КоличествоСтартов = КоличествоСтартов;
//			Продолжить;
//		КонецЕсли; 
//		
//		Если ЗаданиеСтартовано И НЕ ЗаданиеЗавершено Тогда
//			СообщениеОбОшибке = "Регламентное задание """ + ВыборкаСписокРЗ.ПолноеНаименование + """ стартовало, но НЕ отработало! Количество попыток: " + КоличествоСтартов  + Символы.ПС;
//			OW.ЗаписатьОшибку(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.РегламентныеЗаданияДляКонтроля, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Ошибка, СообщениеОбОшибке);
//			//ТекстСообщения = ТекстСообщения + Символы.ПС + СообщениеОбОшибке;
//			
//			СтрокаТабЗаданий.Статус = "стартовалоНЕотработало";
//			СтрокаТабЗаданий.КоличествоСтартов = КоличествоСтартов;
//		ИначеЕсли ЗаданиеСтартовано И ЗаданиеЗавершено И (КоличествоСтартов <> КоличествоЗавершений) Тогда
//			СообщениеОбОшибке = "Регламентное задание """ + ВыборкаСписокРЗ.ПолноеНаименование + """ стартовало, отработало, но Количество стартов = " + КоличествоСтартов + ", а Количество завершений = " + КоличествоЗавершений + Символы.ПС;
//			OW.ЗаписатьОшибку(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.РегламентныеЗаданияДляКонтроля, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Информация, СообщениеОбОшибке);
//			//ТекстСообщения = ТекстСообщения + Символы.ПС + СообщениеОбОшибке;
//			СтрокаТабЗаданий.Статус = "ОК";	//стартовалоОтработало
//			СтрокаТабЗаданий.КоличествоСтартов = КоличествоСтартов;
//			СтрокаТабЗаданий.КоличествоЗавершений = КоличествоЗавершений;
//		ИначеЕсли НЕ ЗаданиеСтартовано Тогда
//			СообщениеОбОшибке = "Регламентное задание """ + ВыборкаСписокРЗ.ПолноеНаименование + """ НЕ стартовало! Количество попыток: " + КоличествоСтартов + Символы.ПС;
//			OW.ЗаписатьОшибку(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.РегламентныеЗаданияДляКонтроля, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Ошибка, СообщениеОбОшибке);
//			//ТекстСообщения = ТекстСообщения + Символы.ПС + СообщениеОбОшибке;
//			СтрокаТабЗаданий.Статус = "НЕстартовало";
//			СтрокаТабЗаданий.КоличествоСтартов = КоличествоСтартов;
//		КонецЕсли; 
//				
//	КонецЦикла; 
//	
//	Если ТабЗаданий.Количество() > 0 Тогда
//		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Проблемные регламентные задания:" + Символы.ПС;
//		ТабЗаданий.Сортировать("Статус,Задание");
//		ЕстьПроблемные = Ложь;
//		
//		Для Каждого Строк Из ТабЗаданий Цикл
//			Если Строк.Статус = "ОК" Тогда
//				Продолжить;
//			ИначеЕсли Строк.Статус = "стартовалоНЕотработало" Тогда
//				ТекстСообщения = ТекстСообщения + "" + Строк.Задание  + "" + " стартовало, но НЕ ОТРАБОТАЛО! Кол-во попыток: " + Строк.КоличествоСтартов + " (" + Строк.Время + "). Расписание: " + Строк.Расписание  + "." + Символы.ПС;
//				ЕстьПроблемные = Истина;	
//			ИначеЕсли Строк.Статус = "стартовалоОтработало" Тогда
//				ТекстСообщения = ТекстСообщения  + "" + Строк.Задание  + "" + " стартовало, отработало, но Кол-во стартов: " + Строк.КоличествоСтартов + ", а Кол-во завершений: " + Строк.КоличествоЗавершений + ". Расписание: " + Строк.Расписание  + "." + Символы.ПС;
//				ЕстьПроблемные = Истина;	
//			ИначеЕсли Строк.Статус = "НЕстартовало" Тогда
//				ТекстСообщения = ТекстСообщения  + "" + Строк.Задание  + "" + " НЕ СТАРТОВАЛО! Кол-во попыток: " + Строк.КоличествоСтартов + ". Расписание: " + Строк.Расписание + "." + Символы.ПС;
//				ЕстьПроблемные = Истина;	
//			КонецЕсли;                         
//		КонецЦикла; 
//		
//		Если НЕ ЕстьПроблемные Тогда
//			ТекстСообщения = ТекстСообщения  + "" + " - нет проблемных" + Символы.ПС;	
//		КонецЕсли; 
//		
//	КонецЕсли;
//	
//	//записываем ошибки в лог, затем включаем в письмо инфу в самом верху, а в стандартном письме ниже (по условию) их исключаем
//	ТекстСообщения = ТекстСообщения + Символы.ПС + "**********************************************************";
//	//+++ Брук Б 31.12.2019 ONEC-5232
//	//ДатаЛогаОшибок = НачалоДня(ТекущаяДата()) - 60*60*24;
//	ДатаЛогаОшибок = ТекущаяДата() - 60*60*24; // чтобы в этот период попадали ошибки, полученые после 00:00 текущей даты, выполненные этой ночью, до запуска рассылки
//	//--- Брук Б 31.12.2019 ONEC-5232
//	//***OW @20202430052400  Start [БПВ]
//    ТипыДляОтправки = Новый СписокЗначений;
//    ТипыДляОтправки.Добавить(Справочники.OW_ТипыОшибок.Ошибка);
//    ТипыДляОтправки.Добавить(Справочники.OW_ТипыОшибок.Контроль);   
//    //***OW @20202430052402  End [БПВ]
//    
//     	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//    |   OW_Ошибки.Период,
//    |   OW_Ошибки.Объект,
//    |   OW_Ошибки.РазделУчета,
//    |   OW_Ошибки.Пользователь,
//    |   OW_Ошибки.Ошибка
//    |ИЗ
//    |   РегистрСведений.OW_Ошибки КАК OW_Ошибки
//    |ГДЕ
//    |   OW_Ошибки.ТипОшибки В(&ТипОшибки)
//    |   И OW_Ошибки.Период МЕЖДУ &НачалоПериода И &КонецПериода
//    |   И (OW_Ошибки.РазделУчета <> ЗНАЧЕНИЕ(Справочник.OW_РазделыУчета.РегламентныеЗадания)
//    |           ИЛИ OW_Ошибки.ТипОшибки = ЗНАЧЕНИЕ(Справочник.OW_ТипыОшибок.Контроль)
//    |               И OW_Ошибки.РазделУчета = ЗНАЧЕНИЕ(Справочник.OW_РазделыУчета.РегламентныеЗадания))";
//	Запрос.УстановитьПараметр("ТипОшибки", 		ТипыДляОтправки);
//	Запрос.УстановитьПараметр("НачалоПериода", 	ДатаЛогаОшибок);
//	//+++ Брук Б 31.12.2019 ONEC-5232
//	//Запрос.УстановитьПараметр("КонецПериода", 	НачалоДня(ТекущаяДата())-1);
//	Запрос.УстановитьПараметр("КонецПериода", 	ТекущаяДата());  // чтобы в этот период попадали ошибки, полученые после 00:00 текущей даты, выполненные этой ночью, до запуска рассылки
//	//--- Брук Б 31.12.2019 ONEC-5232
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		ТекстСообщения = ТекстСообщения + Символы.ПС +
//		Строка(Выборка.Период) + Символы.Таб + Строка(Выборка.Объект) + Символы.Таб + Строка(Выборка.РазделУчета) + Символы.Таб +
//		Строка(Выборка.Пользователь) + Символы.ПС + Строка(Выборка.Ошибка);
//		ТекстСообщения = ТекстСообщения + Символы.ПС + "-------------";
//    КонецЦикла; 	
//    //***OW @20221108025524  Start [БПВ] 
//    ЗапросС = Новый Запрос;
//    ЗапросС.УстановитьПараметр("Конец",ТекущаяДата());
//    ЗапросС.УстановитьПараметр("Начало",НачалоДня(ДатаЛогаОшибок));
//
//    ЗапросС.Текст =  "ВЫБРАТЬ
//                     |  ИсторияИзмененийРегламентныхЗаданий.Расписание,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ОбъектМетаданных,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяНачала,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяКонца,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяЗавершения,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ПериодПовтораВТечениеДня,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяНачалаСтрока,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяКонцаСтрока,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ВремяЗавершенияСтрока,
//                     |  ИсторияИзмененийРегламентныхЗаданий.ПериодПовтораВТечениеДняСтрока,
//                     |  ИсторияИзмененийРегламентныхЗаданий.НС,
//                     |  ИсторияИзмененийРегламентныхЗаданий.Использование
//                     |ИЗ
//                     |  РегистрСведений.ИсторияИзмененийРегламентныхЗаданий КАК ИсторияИзмененийРегламентныхЗаданий
//                     |ГДЕ
//                     |  ИсторияИзмененийРегламентныхЗаданий.Период МЕЖДУ &Начало И &Конец" ;
//    //***OW @20221108025527  End [БПВ] 
//	ТВ = ЗапросС.Выполнить().Выбрать();
//    ТекстСообщенияОсн = "";
//    Пока ТВ.Следующий() Цикл
//        ТекстСообщенияОсн = ТекстСообщенияОсн + Символы.ПС + Строка(ТВ.ОбъектМетаданных) +  Символы.Таб +": "+ Строка(ТВ.Расписание) + Символы.Таб;
//        Если ТВ.НС=0 Тогда
//            ТекстСообщенияОсн = ТекстСообщенияОсн+ "Использование:"+ТВ.Использование+ " время начала:"+ТВ.ВремяНачала+ " время окончания:"+ТВ.ВремяКонца+ " время завершения:"+ТВ.ВремяЗавершения+ " период повтора в течении дня:"+ ТВ.ПериодПовтораВТечениеДня;        
//        Иначе
//            ТекстСообщенияОсн = ТекстСообщенияОсн+ "Использование:"+ТВ.Использование+ " время начала:"+ТВ.ВремяНачалаСтрока+ " время окончания:"+ТВ.ВремяКонцаСтрока+ " время завершения:"+ТВ.ВремяЗавершенияСтрока+ " период повтора в течении дня:"+ ТВ.ПериодПовтораВТечениеДняСтрока;
//        КонецЕсли;
//  		ТекстСообщенияОсн = ТекстСообщенияОсн + Символы.ПС + "-------------";     
//    КонецЦикла;
//    ТекстСообщенияОсн = СтрЗаменить(ТекстСообщенияОсн,"01.01.0001","");
//    ТекстСообщения = ТекстСообщения+Символы.ПС+"Изменены регламентные задания"+Символы.ПС+ТекстСообщенияОсн;
//	OW_Нотификации.НотификацияСЛогомОшибок(ТекстСообщения, ДатаЛогаОшибок);
//	//- Пилюгин В.Е. 19.07.2016
//КонецПроцедуры
//
//
//Функция ПолучитьПроверкуНаСменуПароля() Экспорт     
//    Возврат ЗначениеЗаполнено(ПолучитьДанныеПоПользователюП(ПараметрыСеанса.ТекущийПользователь.Ссылка));
//КонецФункции
//
//Функция ПолучитьПроверкуОрганизацииНаНомер(ТекИмяОрг) Экспорт 
//	Если ТекИмяОрг="ООО ""Лектон""" или ТекИмяОрг="ООО ""ОпенВэй Решения""" или ТекИмяОрг="ООО ""ОВ Интеграция""" Тогда 
//		Возврат 1;
//	ИначеЕсли ТекИмяОрг="OpenWay Technologies Ltd." или ТекИмяОрг="OpenWay Systems Ltd." Тогда 
//		Возврат 2;
//	Иначе
//		Возврат 3;
//	КонецЕсли;				
//КонецФункции
//
//Функция ПолучитьНомерПоСчету(Период,Организация,Партнер,ссылка) Экспорт
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуКлиенту.Ссылка) КАК Ссылка
//	|ИЗ
//	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//	|ГДЕ
//	|	СчетНаОплатуКлиенту.Проведен
//	|	И СчетНаОплатуКлиенту.Организация = &Организация
//	|	И СчетНаОплатуКлиенту.Партнер = &Партнер
//	|	И СчетНаОплатуКлиенту.Дата МЕЖДУ &НачалоПериода И &КонецПериода
//	|	И СчетНаОплатуКлиенту.Ссылка <> &Ссылка
//	//|	И СчетНаОплатуКлиенту.СтатусСчета <> &СтатусСчета
//	|";
//	ЗапросД.УстановитьПараметр("Организация",Организация);
//	ЗапросД.УстановитьПараметр("Партнер",Партнер);
//	ЗапросД.УстановитьПараметр("Ссылка",Ссылка);
//	//ЗапросД.УстановитьПараметр("СтатусСчета",Перечисления.СтатусыСчета.Аннулирован);  
//	ЗапросД.УстановитьПараметр("НачалоПериода",НачалоГода(Период));
//	ЗапросД.УстановитьПараметр("КонецПериода",КонецГода(Период));
//	ТВ = ЗапросД.Выполнить().Выбрать();
//	Пока ТВ.Следующий() Цикл
//		Возврат ТВ.Ссылка;
//	КонецЦикла;
//	Возврат 0;
//КонецФункции
//
//
////++++++++++++++++++++++++++++++++++++++++++++++++++++++ Процесс согласования договоров ++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
////------------------------------------------------------ Процесс согласования договоров ------------------------------------------------------
//
//
//
//
//Функция РеквизитСуществует(Ссылка, ИмяРеквизита) Экспорт
//	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли; 		
//КонецФункции
//
////++++++++++++++++++++++++++++++++++++++++++++++++++++++ Механизм универсальных параметров ++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Процедура ДобавитьПараметр(Параметр, Объект = Неопределено, Значение = Неопределено, Валюта = Неопределено, Организация = Неопределено) Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запись = РегистрыСведений.OW_Параметры.СоздатьМенеджерЗаписи();	
//	Запись.Параметр 	= Параметр;
//	Запись.Объект 		= Объект;
//	Запись.Значение 	= Значение;
//	Запись.Валюта 		= Валюта;
//	Запись.Организация = Организация;
//	
//	Запись.Период 	= ТекущаяДата();
//	Запись.Автор 	= ПараметрыСеанса.ТекущийПользователь;
//	Запись.Записать();
//	
//	УстановитьПривилегированныйРежим(Ложь);
//
//КонецПроцедуры
//
//Процедура УдалитьПараметр(Параметр, Объект = Неопределено, Валюта = Неопределено, Организация = Неопределено, Период = Неопределено) Экспорт
//
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Набор = РегистрыСведений.OW_Параметры.СоздатьНаборЗаписей();
//	
//	Набор.Отбор.Параметр.Установить(Параметр);
//	
//	Если Объект <> Неопределено Тогда 
//		Набор.Отбор.Объект.Установить(Объект);
//	КонецЕсли;	
//	Если Валюта <> Неопределено Тогда 
//		Набор.Отбор.Валюта.Установить(Валюта);
//	КонецЕсли;
//	Если Организация <> Неопределено Тогда 
//		Набор.Отбор.Организация.Установить(Организация);
//	КонецЕсли;
//	Если Период <> Неопределено Тогда 
//		Набор.Отбор.Период.Установить(Период);
//	КонецЕсли;
//	
//	Набор.Записать(Истина);
//	
//	УстановитьПривилегированныйРежим(Ложь);
//		
//КонецПроцедуры
//
//Функция ПолучитьСписокЗначенийПараметров(Параметр, НаДату = Неопределено, Объект = Неопределено, Валюта = Неопределено) Экспорт
//	//++OW Копачев А.С. 22.02.2019 ONEC-4171
//	// убираем дублирующееся условие	
//	
//	//УстановитьПривилегированныйРежим(истина);
//	////+ Пилюгин В.Е. 15.04.2016
//	//СписокПараметров = Новый СписокЗначений;
//	//Если не ЗначениеЗаполнено(Параметр) Тогда
//	//	Возврат СписокПараметров;
//	//КонецЕсли;
//	//Если не ЗначениеЗаполнено(НаДату) Тогда
//	//	НаДату = ТекущаяДата(); 
//	//КонецЕсли; 
//	//
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
//	//"ВЫБРАТЬ
//	//|	OW_ПараметрыСрезПоследних.Значение
//	//|ИЗ
//	//|	РегистрСведений.OW_Параметры.СрезПоследних(
//	//|			&НаДату,
//	//|			Параметр = &Параметр
//	//|				И ВЫБОР
//	//|					КОГДА &ЕстьВалюта
//	//|						ТОГДА Валюта = &Валюта
//	//|					ИНАЧЕ ИСТИНА
//	//|				КОНЕЦ
//	//|				И ВЫБОР
//	//|					КОГДА &ЕстьОбъект
//	//|						ТОГДА Объект = &Объект
//	//|					ИНАЧЕ ИСТИНА
//	//|				КОНЕЦ) КАК OW_ПараметрыСрезПоследних";
//	//
//	//Запрос.УстановитьПараметр("Параметр", Параметр);
//	//Запрос.УстановитьПараметр("НаДату", НаДату);
//	//Запрос.УстановитьПараметр("ЕстьОбъект", ЗначениеЗаполнено(Объект));
//	//Запрос.УстановитьПараметр("Объект", Объект);
//	//Запрос.УстановитьПараметр("ЕстьВалюта", ЗначениеЗаполнено(Валюта));
//	//Запрос.УстановитьПараметр("Валюта", Валюта);
//	//
//	//Выборка = Запрос.Выполнить().Выбрать();
//	//Пока Выборка.Следующий() Цикл
//	//	СписокПараметров.Добавить(Выборка.Значение);	
//	//КонецЦикла; 
//	//
//	//Возврат СписокПараметров
//	////- Пилюгин В.Е. 15.04.2016
//	
//	Возврат ПолучитьСписокЗначенийПараметровПоОрганизации(Параметр, НаДату, Неопределено, Объект, Валюта);
//	//--OW Копачев А.С. 22.02.2019 ONEC-4171
//	
//КонецФункции
//
//Функция ПолучитьСписокЗначенийПараметровПоОрганизации(Параметр, НаДату = Неопределено, Организация=Неопределено, Объект = Неопределено, Валюта = Неопределено) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	//+ Пилюгин В.Е. 15.04.2016
//	СписокПараметров = Новый СписокЗначений;
//	Если не ЗначениеЗаполнено(Параметр) Тогда
//		Возврат СписокПараметров;
//	КонецЕсли;
//	Если не ЗначениеЗаполнено(НаДату) Тогда
//		НаДату = ТекущаяДата(); 
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_ПараметрыСрезПоследних.Значение
//	|ИЗ
//	|	РегистрСведений.OW_Параметры.СрезПоследних(
//	|			&НаДату,
//	|			Параметр = &Параметр
//	|				И ВЫБОР
//	|					КОГДА &ЕстьВалюта
//	|						ТОГДА Валюта = &Валюта
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ
//	|				И ВЫБОР
//	|					КОГДА &ЕстьОбъект
//	|						ТОГДА Объект = &Объект
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ
//	|				И ВЫБОР
//	|					КОГДА &ЕстьОрг
//	|						ТОГДА Организация = &Организация
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ) КАК OW_ПараметрыСрезПоследних";
//	
//	Запрос.УстановитьПараметр("Параметр", Параметр);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("ЕстьОбъект", ЗначениеЗаполнено(Объект));
//	Запрос.УстановитьПараметр("Объект", Объект);
//	Запрос.УстановитьПараметр("ЕстьВалюта", ЗначениеЗаполнено(Валюта));
//	Запрос.УстановитьПараметр("Валюта", Валюта);
//	Запрос.УстановитьПараметр("ЕстьОрг", ЗначениеЗаполнено(Организация));
//	Запрос.УстановитьПараметр("Организация", Организация);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		СписокПараметров.Добавить(Выборка.Значение);	
//	КонецЦикла; 
//	
//	Возврат СписокПараметров
//	//- Пилюгин В.Е. 15.04.2016		
//КонецФункции
//
//Функция ПолучитьТаблицуЗначенийПараметров(Параметр, НаДату = Неопределено, Объект = Неопределено, Валюта = Неопределено) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	//+ Пилюгин В.Е. 15.04.2016
//	ТаблицаПараметров = Новый ТаблицаЗначений;
//	ТаблицаПараметров.Колонки.Добавить("Дата");
//	ТаблицаПараметров.Колонки.Добавить("Значение");
//	Если не ЗначениеЗаполнено(Параметр) Тогда
//		Возврат ТаблицаПараметров;
//	КонецЕсли;
//	Если не ЗначениеЗаполнено(НаДату) Тогда
//		НаДату = ТекущаяДата(); 
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_ПараметрыСрезПоследних.Значение,
//	|	OW_ПараметрыСрезПоследних.Период КАК Дата
//	|ИЗ
//	|	РегистрСведений.OW_Параметры.СрезПоследних(
//	|			&НаДату,
//	|			Параметр = &Параметр
//	|				И ВЫБОР
//	|					КОГДА &ЕстьВалюта
//	|						ТОГДА Валюта = &Валюта
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ
//	|				И ВЫБОР
//	|					КОГДА &ЕстьОбъект
//	|						ТОГДА Объект = &Объект
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ) КАК OW_ПараметрыСрезПоследних";
//	
//	Запрос.УстановитьПараметр("Параметр", Параметр);
//	Запрос.УстановитьПараметр("НаДату", НаДату);
//	Запрос.УстановитьПараметр("ЕстьОбъект", ЗначениеЗаполнено(Объект));
//	Запрос.УстановитьПараметр("Объект", Объект);
//	Запрос.УстановитьПараметр("ЕстьВалюта", ЗначениеЗаполнено(Валюта));
//	Запрос.УстановитьПараметр("Валюта", Валюта);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		нСтрока = ТаблицаПараметров.Добавить();
//		ЗаполнитьЗначенияСвойств(нСтрока, Выборка);
//	КонецЦикла; 
//	
//	Возврат ТаблицаПараметров;
//	//- Пилюгин В.Е. 15.04.2016		
//КонецФункции
//
//Функция ПолучитьТаблицуПараметровОбъекта(Объект, НаДату = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 15.04.2016
//	Если НЕ ЗначениеЗаполнено(Объект) Тогда
//		Возврат Новый ТаблицаЗначений;
//	КонецЕсли; 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_ПараметрыСрезПоследних.Период КАК Период,
//	|	OW_ПараметрыСрезПоследних.Параметр,
//	|	OW_ПараметрыСрезПоследних.Валюта,
//	|	OW_ПараметрыСрезПоследних.Значение
//	|ИЗ
//	|	РегистрСведений.OW_Параметры.СрезПоследних(&НаДату, Объект = &Объект) КАК OW_ПараметрыСрезПоследних";
//	Запрос.УстановитьПараметр("Объект", Объект);
//	Запрос.УстановитьПараметр("НаДату", ?(ЗначениеЗаполнено(НаДату),НаДату,ТекущаяДата()));
//	РезультатЗапроса = Запрос.Выполнить();
//	ТЗ = РезультатЗапроса.Выгрузить();
//	Возврат ТЗ;
//	//- Пилюгин В.Е. 15.04.2016	
//КонецФункции
//
//Функция ПолучитьТаблицуПараметровОбъектЗначение(Параметр, НаДату = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 15.04.2016
//	Если НЕ ЗначениеЗаполнено(Параметр) Тогда
//		Возврат Новый ТаблицаЗначений;
//	КонецЕсли; 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_ПараметрыСрезПоследних.Период,
//	|	OW_ПараметрыСрезПоследних.Параметр,
//	|	OW_ПараметрыСрезПоследних.Объект,
//	|	OW_ПараметрыСрезПоследних.Валюта,
//	|	OW_ПараметрыСрезПоследних.Значение
//	|ИЗ
//	|	РегистрСведений.OW_Параметры.СрезПоследних(&НаДату, Параметр = &Параметр) КАК OW_ПараметрыСрезПоследних";
//	Запрос.УстановитьПараметр("Параметр", Параметр);
//	Запрос.УстановитьПараметр("НаДату", ?(ЗначениеЗаполнено(НаДату),НаДату,ТекущаяДата()));
//	РезультатЗапроса = Запрос.Выполнить();
//	ТЗ = РезультатЗапроса.Выгрузить();
//	Возврат ТЗ;
//	//- Пилюгин В.Е. 15.04.2016	
//КонецФункции
//
//Функция ПолучитьСписокОбъектовПараметра(Параметр, НаДату = Неопределено, Значение = "") Экспорт
//	//+ Пилюгин В.Е. 21.05.2016
//	СписокОбъектов = Новый СписокЗначений;
//	Если НЕ ЗначениеЗаполнено(Параметр) Тогда
//		Возврат СписокОбъектов;
//	КонецЕсли; 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_ПараметрыСрезПоследних.Объект КАК ОбъектПараметров,
//	|	OW_ПараметрыСрезПоследних.Значение
//	|ИЗ
//	|	РегистрСведений.OW_Параметры.СрезПоследних(
//	|			&НаДату,
//	|			Параметр = &Параметр
//	|				И ВЫБОР
//	|					КОГДА &ОтобратьПоЗначению
//	|						ТОГДА &ПараметрЗначение = Значение
//	|					ИНАЧЕ ИСТИНА
//	|				КОНЕЦ) КАК OW_ПараметрыСрезПоследних";
//	Запрос.УстановитьПараметр("Параметр", Параметр);
//	Запрос.УстановитьПараметр("ОтобратьПоЗначению", ЗначениеЗаполнено(Значение));
//	Запрос.УстановитьПараметр("ПараметрЗначение", Значение);
//	Запрос.УстановитьПараметр("НаДату", ?(ЗначениеЗаполнено(НаДату),НаДату,ТекущаяДата()));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		СписокОбъектов.Добавить(Выборка.ОбъектПараметров);		
//	КонецЦикла; 
//	Возврат СписокОбъектов;
//	//- Пилюгин В.Е. 21.05.2016	
//КонецФункции
//
////------------------------------------------------------ Механизм универсальных параметров ------------------------------------------------------
//
//
////Функция возвращает признак того, что это рабочая база (продакшн)
//Функция ЭтоРабочаяБаза() Экспорт
//	//+ Пилюгин В.Е. 18.04.2016
//	Возврат OW_ОбщегоНазначенияПовтИсп.ЭтоРабочаяБаза();
//	//- Пилюгин В.Е. 18.04.2016
//КонецФункции
//
//Функция ЭтоРабочаяБазаДляНотификаций() Экспорт
//	Возврат OW_ОбщегоНазначенияПовтИсп.ЭтоРабочаяБазаДляНотификаций();
//КонецФункции
//
//
////Функция возвращает признак наличия полных прав в системе
//Функция РольПолныеПрава() Экспорт
//	//+ Пилюгин В.Е. 20.04.2016
//	Возврат РольДоступна("ПолныеПрава");
//	//- Пилюгин В.Е. 20.04.2016
//КонецФункции
//
//Функция РольПолныеПраваДляВзаиморасчетов() Экспорт
//	Возврат РольДоступна("ПолныеПраваДляВзаиморасчетов");
//КонецФункции
//
//Функция	ЕстьОграничениеНаTeamLead() Экспорт 
//	
//	Возврат РольДоступна("TeamLead_Чтение") 
//			И НЕ РольДоступна("GRM_Чтение") 
//			И НЕ РольДоступна("GRM_ЧтениеОграниченное") 
//			И НЕ РольДоступна("GRM")
//			И НЕ РольДоступна("ДоступКИнформацииПоВсемКомандам");
//	
//КонецФункции
//
////Функция ПроверкаНаСуперадминистратор() Экспорт
////	Возврат РольДоступна("Суперадминистратор");
////КонецФункции
//
////Функция возвращает признак того, что состоит полностью из латиницы и/или цифр
//Функция ЭтаСтрокаСостоитИзЛатиницы(СтрокаДляПроверки) Экспорт
//	//+ Пилюгин В.Е. 06.05.2016
//	СтрокаДляПроверки = нРег(СтрокаДляПроверки);
//	СтрокаДляПроверки = СокрЛП(СтрокаДляПроверки);
//	СтрокаДляПроверки = СтрЗаменить(СтрокаДляПроверки," ","");
//	СтрокаДляПроверки = СтрЗаменить(СтрокаДляПроверки,Символы.Таб,"");    
//	СтрокаДляПроверки = СтрЗаменить(СтрокаДляПроверки,Символы.НПП,"");    
//	СтрокаДляПроверки = СтрЗаменить(СтрокаДляПроверки,".","");
//	
//	СтрокаДопустимыхСимволов = "0123456789qwertyuiopasdfghjklzxcvbnm";
//	ТолькоЛатиница = Истина;
//	
//	НомерСимвола = 0;
//	КоличествоСимволов = СтрДлина(СтрокаДляПроверки);
//	
//	Пока НомерСимвола < КоличествоСимволов Цикл
//		ТекущийСимвол = Сред(СтрокаДляПроверки,НомерСимвола,1);
//		Если СтрЧислоВхождений(СтрокаДопустимыхСимволов, ТекущийСимвол) = 0 Тогда
//			ТолькоЛатиница = Ложь;
//			Прервать;
//		КонецЕсли;
//		НомерСимвола = НомерСимвола+1;
//	КонецЦикла;
//	
//	Возврат ТолькоЛатиница
//	//- Пилюгин В.Е. 06.05.2016    
//КонецФункции
//
////функция записывает ошибку/событие в регистр OW_Ошибки
//Процедура ЗаписатьОшибку(Объект = Неопределено, РазделУчета, ТипОшибки, ТекстОшибки, UID = "") Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	НЗР = РегистрыСведений.OW_Ошибки.СоздатьМенеджерЗаписи();
//	НЗР.Объект = Объект;
//	НЗР.РазделУчета = РазделУчета;
//	НЗР.ТипОшибки = ТипОшибки;
//	НЗР.Ошибка  = ТекстОшибки;
//	НЗР.Период = ТекущаяДата();
//	НЗР.Пользователь = ПараметрыСеанса.ТекущийПользователь.Ссылка;
//	//+++ Брук Б 01.06.2021 - новый реквизит для возможности регистрации более чем одной записи в секунду с одинаковыми измерениями
//	НЗР.UID = UID;
//	//--- Брук Б 01.06.2021 
//	НЗР.Записать(Истина);
//КонецПроцедуры
//
////функция возвращает признак того, мыло принадлежит ли домену компании   
//Функция ЭтоКорпоративныйEmail(Мыло) Экспорт
//	//++OW Копачев А.С. 03.08.2023 ONEC-8686
//	//Возврат ?(СтрЧислоВхождений(Мыло,Константы.OW_ИмяДоменаКомпании.Получить()) > 0, Истина, Ложь)
//	
//	ЭтоКорпоративныйEmail = Ложь;
//	
//	КорпоративныеДомены = КорпоративныеДоменыКомпаний();
//	Для Каждого ТекДомен Из КорпоративныеДомены Цикл
//		ЭтоКорпоративныйEmail = ?(СтрЧислоВхождений(НРег(Мыло),НРег(ТекДомен)) > 0, Истина, Ложь);
//		
//		Если ЭтоКорпоративныйEmail = Истина Тогда 
//			Прервать;
//		КонецЕсли;	
//	КонецЦикла;	
//		
//	Возврат ЭтоКорпоративныйEmail;
//	//--OW Копачев А.С. 03.08.2023 ONEC-8686
//КонецФункции   
//
//Функция КорпоративныеДоменыКомпаний() Экспорт 
//	//++OW Копачев А.С. 03.08.2023 ONEC-8686
//	КорпоративныеДомены = Новый Массив;	 
//	
//	ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам) = Истина; 
//	Если ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам = Истина Тогда 
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//			"ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	Организации.УчетнаяЗаписьОтправкиЭлПочты.Домен КАК Домен
//			|ИЗ
//			|	Справочник.Организации КАК Организации
//			|ГДЕ
//			|	Организации.ПометкаУдаления = ЛОЖЬ
//			|	И Организации.УчетнаяЗаписьОтправкиЭлПочты.Домен <> """"
//			|	И Организации.ВидИнстансJIRA = &ВидИнстансJIRA";
//		
//		Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Выборка = РезультатЗапроса.Выбрать();	
//		Пока Выборка.Следующий() Цикл 
//			Если НЕ ЗначениеЗаполнено(Выборка.Домен) Тогда 
//				Продолжить;	
//			КонецЕсли;
//			
//			КорпоративныеДомены.Добавить(Выборка.Домен);
//		КонецЦикла; 
//		
//	Иначе
//		КорпоративныеДомены.Добавить(Константы.OW_ИмяДоменаКомпании.Получить());			
//	КонецЕсли;	
//			
//	Возврат КорпоративныеДомены; 
//	//--OW Копачев А.С. 03.08.2023 ONEC-8686
//КонецФункции	
//
////функция возвращает e-mail юзера (м.б. физ.лицо или пользователь). Мыло физ.лица приоритетнее, если не нашли, то ищем у пользователя
//Функция ПолучитьМылоЮзера(Юзер) Экспорт
//	//+ Пилюгин В.Е. 08.06.2016
//	УстановитьПривилегированныйРежим(истина);
//	Мыло = "";
//	Если НЕ ЗначениеЗаполнено(Юзер) Тогда
//		Возврат Мыло
//	КонецЕсли; 
//	Если ТипЗнч(Юзер) = Тип("СправочникСсылка.Пользователи") Тогда
//		Пользователь = Юзер;
//		
//		//+++ Брук Б 19.07.2021 - ускорение
//		//ФизЛицо = Юзер.ФизическоеЛицо;
//		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Юзер, "ФизическоеЛицо");
//		//--- Брук Б 19.07.2021
//		
//	ИначеЕсли ТипЗнч(Юзер) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
//		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо",Юзер);
//		ФизЛицо = Юзер;
//	Иначе
//		Возврат Мыло;
//	КонецЕсли;
//	
//	//сначала пробуем получить мыло физ.лица
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ФизическиеЛицаКонтактнаяИнформация.Представление
//	|ИЗ
//	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//	|ГДЕ
//	|	ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица)
//	|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Ссылка";
//	Запрос.УстановитьПараметр("Ссылка", ФизЛицо);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Если ЗначениеЗаполнено(СокрЛП(Выборка.Представление)) Тогда
//			Мыло = СокрЛП(Выборка.Представление);
//		КонецЕсли; 
//	КонецЕсли; 
//	
//	Если ЗначениеЗаполнено(Мыло) Тогда
//		Возврат Мыло
//	КонецЕсли; 	
//	
//	//если мыло физ.лица не нашли, тогда пробуем взять его из пользователя
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ПользователиКонтактнаяИнформация.Представление
//	|ИЗ
//	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
//	|ГДЕ
//	|	ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
//	|	И ПользователиКонтактнаяИнформация.Ссылка = &Ссылка";
//	Запрос.УстановитьПараметр("Ссылка", Пользователь);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Если ЗначениеЗаполнено(СокрЛП(Выборка.Представление)) Тогда
//			Мыло = СокрЛП(Выборка.Представление);
//		КонецЕсли; 
//	КонецЕсли; 	
//	
//	Возврат Мыло
//	//- Пилюгин В.Е. 08.06.2016
//КонецФункции
//
////функция возвращает пользователя по мылу
//Функция ПолучитьЮзераПоМылу(Мыло) Экспорт
//	//+ Пилюгин В.Е. 15.05.2017
//	Пользователь = Справочники.Пользователи.ПустаяСсылка();
//	Если НЕ ЗначениеЗаполнено(Мыло) Тогда
//		Возврат Пользователь;
//	КонецЕсли; 
//	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
//	//сначала пробуем получить физ.лицо, а из него пользователя
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
//	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.Наименование
//	|ИЗ
//	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//	|ГДЕ
//	|	ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица)
//	|	И ФизическиеЛицаКонтактнаяИнформация.Представление = &Представление";
//	Запрос.УстановитьПараметр("Представление", Мыло);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо",Выборка.Ссылка);
//		Если ЗначениеЗаполнено(Пользователь) Тогда
//			Возврат Пользователь;
//		КонецЕсли;
//		ФизЛицо = Выборка.Ссылка;
//	КонецЦикла; 
//	
//	//если физ.лицо не нашли, пробуем получить пользователя
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ПользователиКонтактнаяИнформация.Ссылка
//	|ИЗ
//	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
//	|ГДЕ
//	|	ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
//	|	И ПользователиКонтактнаяИнформация.Представление = &Представление
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ПользователиДополнительныеАдресаEMails.Ссылка
//	|ИЗ
//	|	Справочник.Пользователи.ДополнительныеАдресаEMails КАК ПользователиДополнительныеАдресаEMails
//	|ГДЕ
//	|	ПользователиДополнительныеАдресаEMails.Email = &Представление
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ПользователиДополнительныеАдресаEMails.Ссылка";
//	Запрос.УстановитьПараметр("Представление", Мыло);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка 
//	КонецЕсли; 	
//	
//	//создаем пользователя
//	Если ЗначениеЗаполнено(ФизЛицо) Тогда
//		Пользователь = СоздатьПользователяДляФизЛица(ФизЛицо, Мыло);
//	КонецЕсли; 
//	
//	Возврат Пользователь;
//	//- Пилюгин В.Е. 15.05.2017
//КонецФункции
//
////функция возвращает пользователя по логину
//Функция ПолучитьЮзераПоЛогину(Логин) Экспорт
//	//+ Пилюгин В.Е. 18.10.2017
//	ПользовательСсылка = Справочники.Пользователи.ПустаяСсылка();
//	
//	Если НЕ ПустаяСтрока(Логин) Тогда
//		//++OW Копачев А.С. 07.08.2023 ONEC-8686
//		//Мыло = Логин + ow.ВернутьПочтуСДоменом("");  
//        Мыло = OW.ВернутьПочтуСДоменом(Логин);
//		//--OW Копачев А.С. 07.08.2023 ONEC-8686      
//		ПользовательСсылка = OW.ПолучитьЮзераПоМылу(Мыло);
//	КонецЕсли;
//	
//	Возврат ПользовательСсылка;
//	//- Пилюгин В.Е. 18.10.2017
//КонецФункции
//
////безопасная функция, которая возвращает пользователя по ссылке на офицера
//Функция ПолучитьЮзераПоОфицеру(Офицер) Экспорт
//	//+ Пилюгин В.Е. 12.09.2018
//	Юзер = Справочники.Пользователи.ПустаяСсылка();
//	Если ЗначениеЗаполнено(Офицер) Тогда
//		Если ТипЗнч(Офицер) = Тип("СправочникСсылка.OW_Officers") Тогда
//			Если ЗначениеЗаполнено(Офицер.Email) Тогда
//				Юзер = ПолучитьЮзераПоМылу(Офицер.Email);	
//			КонецЕсли; 
//		КонецЕсли; 
//	КонецЕсли; 
//	Возврат Юзер;
//	//- Пилюгин В.Е. 12.09.2018		
//КонецФункции
//
////функция возвращает всех сотрудников по Пользователю
//Функция ПолучитьСотрудниковПоПользователю(Пользователь, ДанныеОтбора = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 03.08.2017
//	Сотрудники = Новый Массив;
//		
//	Если НЕ ЗначениеЗаполнено(Пользователь) ИЛИ ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
//		Возврат Сотрудники;
//	КонецЕсли; 
//	
//	//++OW Копачев А.С. 29.05.2019  
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
//	//"ВЫБРАТЬ
//	//|	Пользователи.ФизическоеЛицо
//	//|ПОМЕСТИТЬ ВТ
//	//|ИЗ
//	//|	Справочник.Пользователи КАК Пользователи
//	//|ГДЕ
//	//|	Пользователи.Ссылка = &Пользователь
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	Сотрудники.Ссылка КАК Сотрудник
//	//|ИЗ
//	//|	ВТ КАК ВТ
//	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
//	//|		ПО ВТ.ФизическоеЛицо = Сотрудники.Физлицо
//	//|ГДЕ
//	//|	НЕ Сотрудники.ПометкаУдаления 
//	//|//ОтборПоОрганизациям#
//	//|//ОтборПоРаботающимСотрудникам#
//	//|//ОтборПоРаботающимСотрудникамНаДату#
//	//|";
//	//
//	//
//	//Если ДанныеОтбора <> Неопределено Тогда
//	//	// Организация
//	//	Если ДанныеОтбора.Свойство("Организации") Тогда 
//	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоОрганизациям#","	И Сотрудники.OW_Организация В (&Организации)");		
//	//		Запрос.УстановитьПараметр("Организации", ДанныеОтбора.Организации);
//	//	КонецЕсли;	
//	//	// Сотрудник работает 
//	//	Если ДанныеОтбора.Свойство("СотрудникРаботает") Тогда
//	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоРаботающимСотрудникам#","	И " + ?(ДанныеОтбора.СотрудникРаботает = Истина, "", "НЕ (") + "Сотрудники.OW_ДатаУвольнения = ДАТАВРЕМЯ(1,1,1) И Сотрудники.OW_ДатаПриема <> ДАТАВРЕМЯ(1,1,1)") + ?(ДанныеОтбора.СотрудникРаботает = Истина, "", ")");
//	//	КонецЕсли;
//	//	// Сотрудник работает на определенную дату
//	//	Если ДанныеОтбора.Свойство("СотрудникРаботаетНаДату") Тогда
//	//		НаДату = ДанныеОтбора.СотрудникРаботаетНаДату;		
//	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоРаботающимСотрудникамНаДату#","	И Сотрудники.OW_ДатаУвольнения < &НаДату И Сотрудники.OW_ДатаПриема >= &НаДату");			
//	//		Запрос.УстановитьПараметр("НаДату", НаДату);
//	//	КонецЕсли
//	//КонецЕсли;
//	//
//	//
//	//Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	//
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Пока Выборка.Следующий() Цикл
//	//	Сотрудник = Выборка.Сотрудник;
//	//	Сотрудники.Добавить(Сотрудник);
//	//КонецЦикла; 
//	
//	Физлицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ФизическоеЛицо");
//	Сотрудники = Справочники.Сотрудники.ПолучитьСотрудниковПоФизЛицу(Физлицо, ДанныеОтбора);
//	//--OW Копачев А.С. 29.05.2019 
//
//	Возврат Сотрудники;		
//	//- Пилюгин В.Е. 03.08.2017	
//КонецФункции
//
////функция возвращает Сотрудника по Пользователю
//Функция ПолучитьСотрудникаПоПользователю(Пользователь, ДанныеОтбора = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 03.08.2017
//	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
//	
//	Если НЕ ЗначениеЗаполнено(Пользователь) ИЛИ ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
//		Возврат Сотрудник;
//	КонецЕсли; 
//	
//	СотрудникиПользователя = ПолучитьСотрудниковПоПользователю(Пользователь, ДанныеОтбора); 
//	Если СотрудникиПользователя.Количество() > 0 Тогда 
//		Сотрудник = СотрудникиПользователя[0];	
//	КонецЕсли;	
//	
//	Возврат Сотрудник;		
//	//- Пилюгин В.Е. 03.08.2017	
//КонецФункции
//
////функция возвращает пользователя по переданному коду Maringo
//Функция ПолучитьЮзераИСотрудникаПоКодуМаринго(КодМаринго, Мыло = "") Экспорт
//	//+ Пилюгин В.Е. 29.05.2017
//	Пользователь = Справочники.Пользователи.ПустаяСсылка();
//	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
//	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Сотрудники.Физлицо,
//	|	Сотрудники.Ссылка КАК Сотрудник
//	|ПОМЕСТИТЬ ВТ
//	|ИЗ
//	|	Справочник.Сотрудники КАК Сотрудники
//	|ГДЕ
//	|	Сотрудники.CodeSap = &КодМаринго
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	Пользователи.Ссылка,
//	|	Пользователи.ФизическоеЛицо
//	|ПОМЕСТИТЬ ВТ_Пользователи
//	|ИЗ
//	|	Справочник.Пользователи КАК Пользователи
//	|ГДЕ
//	|	НЕ Пользователи.ПометкаУдаления
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ.Физлицо,
//	|	ВТ_Пользователи.Ссылка КАК Пользователь,
//	|	ВТ.Сотрудник
//	|ИЗ
//	|	ВТ КАК ВТ
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
//	|		ПО ВТ.Физлицо = ВТ_Пользователи.ФизическоеЛицо";
//	Запрос.УстановитьПараметр("КодМаринго", КодМаринго);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		ФизЛицо = Выборка.Физлицо;
//		Сотрудник = Выборка.Сотрудник;
//		Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
//			Пользователь = Выборка.Пользователь; 
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ФизЛицо) И ПустаяСтрока(Мыло) Тогда
//		Мыло = OW.ПолучитьМылоЮзера(ФизЛицо);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ФизЛицо) И НЕ ПустаяСтрока(Мыло) И НЕ ЗначениеЗаполнено(Пользователь) Тогда
//		ПроверитьЗаписатьМылоВФизлицо(ФизЛицо, Мыло);
//	КонецЕсли; 
//	
//	Если НЕ ЗначениеЗаполнено(Пользователь) И НЕ ПустаяСтрока(Мыло) Тогда
//		Пользователь = ПолучитьЮзераПоМылу(Мыло);	
//		Если ЗначениеЗаполнено(Пользователь) И ЗначениеЗаполнено(ФизЛицо) И НЕ ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
//			ПользовательОбъект = Пользователь.ПолучитьОбъект();
//			ПользовательОбъект.ФизическоеЛицо = Выборка.ФизЛицо;
//			ПользовательОбъект.Записать();
//		КонецЕсли; 
//		
//		Если НЕ ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(Пользователь) Тогда
//			Сотрудник = OW.ПолучитьСотрудникаПоПользователю(Пользователь);
//		КонецЕсли; 
//	КонецЕсли; 
//	
//	СтруктураВозврата = Новый Структура("Пользователь, Сотрудник", Пользователь, Сотрудник);
//	
//	Возврат СтруктураВозврата;
//	//- Пилюгин В.Е. 29.05.2017
//КонецФункции
//
//Процедура ПроверитьЗаписатьМылоВФизлицо(ФизЛицо, Мыло)
//	//+ Пилюгин В.Е. 05.06.2017
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
//	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.Наименование,
//	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Мыло
//	|ИЗ
//	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//	|ГДЕ
//	|	ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица)
//	|	И ФизическиеЛицаКонтактнаяИнформация.Представление = &Мыло";
//	Запрос.УстановитьПараметр("Мыло", Мыло);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Количество() = 0 Тогда
//		Для каждого ст Из ФизЛицо.КонтактнаяИнформация Цикл
//			Если ст.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица Тогда
//				Возврат;
//			КонецЕсли; 
//		КонецЦикла; 
//		ФизЛицоОбъект = ФизЛицо.ПолучитьОбъект();
//		нСтрока = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
//		нСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
//		нСтрока.Представление = Мыло;
//		ФизЛицоОбъект.Записать();
//	КонецЕсли; 
//	//- Пилюгин В.Е. 05.06.2017
//КонецПроцедуры
//
//Функция СоздатьПользователяДляФизЛица(ФизЛицо, Мыло = "") Экспорт
//	//+ Пилюгин В.Е. 05.06.2017
//	//создаем пользователя
//	УстановитьПривилегированныйРежим(истина);
//	нПользователь = Справочники.Пользователи.СоздатьЭлемент();
//	нПользователь.ФизическоеЛицо = ФизЛицо;
//	
//	//++OW Копачев А.С. 31.01.2022 ONEC-7364 
//	//нПользователь.Наименование = ФизЛицо.Наименование;  
//	нПользователь.Наименование = Справочники.Пользователи.СфромироватьНаименованиеПользователя(нПользователь.ФизическоеЛицо);
//	//--OW Копачев А.С. 31.01.2022 ONEC-7364
//
//	нСтрокаКИ = нПользователь.КонтактнаяИнформация.Добавить();
//	нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
//	нСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
//	нСтрокаКИ.Представление = Мыло;
//	нСтрокаКИ.АдресЭП = Мыло;
//	нПользователь.Записать();
//	
//	ТекстОшибки = "Создан пользователь " + нПользователь.Наименование + " для физ.лица " + ФизЛицо.Наименование + " мыло: " + Мыло;
//	OW.ЗаписатьОшибку(нПользователь.Ссылка, Справочники.OW_РазделыУчета.СозданиеОбъекта, Справочники.OW_ТипыОшибок.Информация, ТекстОшибки);
//	
//	Возврат нПользователь.Ссылка;
//	//- Пилюгин В.Е. 05.06.2017
//КонецФункции
//
//Функция ДанныеИзАдресаЭлектроннойПочты(АдресЭлектроннойПочты)
// 	//++OW Копачев А.С. 01.08.2023 ONEC-8686
//	ДанныеИзАдреса = Новый Структура("Логин, Домен", "", "");
//	МассивСтрок = СтрРазделить(АдресЭлектроннойПочты, "@", Ложь);
//
//	Если МассивСтрок.Количество() > 0 Тогда
//		ДанныеИзАдреса.Логин = МассивСтрок[0];
//	КонецЕсли;
//	Если МассивСтрок.Количество() > 1 Тогда
//		ДанныеИзАдреса.Домен = МассивСтрок[1];
//	КонецЕсли;
//
//	Возврат ДанныеИзАдреса; 
// 	//--OW Копачев А.С. 01.08.2023 ONEC-8686
//КонецФункции
//
////функция возвращает логин из переданного мыла
//Функция ПолучитьЛогинИзМыла(Мыло) Экспорт
//	
//	ДанныеИзАдреса = ДанныеИзАдресаЭлектроннойПочты(Мыло);	
//	Возврат ДанныеИзАдреса.Логин; 
//	
//КонецФункции 
//
////функция возвращает домен из переданного мыла
//Функция ПолучитьДоменИзМыла(Мыло) Экспорт
//	//++OW Копачев А.С. 01.08.2023 ONEC-8686
//	ДанныеИзАдреса = ДанныеИзАдресаЭлектроннойПочты(Мыло);	
//	Возврат ДанныеИзАдреса.Домен; 
//	//--OW Копачев А.С. 01.08.2023 ONEC-8686	
//КонецФункции
//
//Процедура OW_ОтправлятьНотификацииПриИзмененииDueDateПроектаИзCRM() Экспорт
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("УдалитьOW_ОтправлятьНотификацииПриИзмененииDueDateПроектаИзCRM");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	//++OW Копачев А.С. 02.11.2020 ONEC-6046
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ОтключитьИспользованиеCRM) = Истина; 
//	Если ОтключитьИспользованиеCRM Тогда 
//		Если ЗначениеЗаполнено(Задание) Тогда
//			OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//		КонецЕсли;
//		Возврат
//	КонецЕсли;	
//	//--OW Копачев А.С. 02.11.2020 ONEC-6046
//	
//	Запрос=Новый Запрос;
//	//Запрос.Текст="ВЫБРАТЬ
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.Период,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.Проект,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.Клиент КАК Партнер,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.КодПроекта,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.DueDateПроектаCRM,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.НотификацияОтправлена,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.ПредыдущаяDueDateПроектаCRM,
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.Проект.СотрудникИзCRM КАК СотрудникИзCRM
//	//             |ИЗ
//	//             |	РегистрСведений.OW_ИзменениеDueDateПроектаCRMДляРассылки КАК OW_ИзменениеDueDateПроектаCRMДляРассылки
//	//             |ГДЕ
//	//             |	OW_ИзменениеDueDateПроектаCRMДляРассылки.НотификацияОтправлена = ЛОЖЬ";
//	
//	Запрос.Текст="ВЫБРАТЬ
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Период,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Клиент КАК Партнер,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.КодПроекта КАК КодПроекта,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.НотификацияОтправлена,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект.СотрудникИзCRM КАК СотрудникИзCRM,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ДатаСтатуса КАК ДатаСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ИмяСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Детали,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.СотрудникCRM,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.ТипСтатуса,
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.Проект.НаименованиеИзCRM КАК НаименованиеИзCRM
//	|ИЗ
//	|	РегистрСведений.OW_ИзменениеИсторииПроектаCRMДляРассылки КАК OW_ИзменениеИсторииПроектаCRMДляРассылки
//	|ГДЕ
//	|	OW_ИзменениеИсторииПроектаCRMДляРассылки.НотификацияОтправлена = ЛОЖЬ
//	|	 И OW_ИзменениеИсторииПроектаCRMДляРассылки.ТипСтатуса ПОДОБНО ""%Due Date%""
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Партнер,
//	|	КодПроекта,
//	|	ДатаСтатуса";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	ДатаПроверки=ТекущаяДата();
//	Пока Выборка.Следующий() Цикл
//		НаименованиеУведомления="";
//		ТекстСообщения="";
//		
//		//НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ", project : """+СОКРЛП(Выборка.КодПроекта)+""". Due Date -> """+СОКРЛП(Выборка.DueDateПроектаCRM)+"""";
//		//ТекстСообщения="Due Date has been changed."+Символы.ПС+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"Client: "+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"Project: "+СОКРЛП(Выборка.Проект.Наименование)+";"+Символы.ПС+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"Project code: "+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"New Due Date: "+Формат(Выборка.DueDateПроектаCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"Previous Due Date: "+Формат(Выборка.ПредыдущаяDueDateПроектаCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		//ТекстСообщения=ТекстСообщения+"User from CRM: "+СОКРЛП(Выборка.СотрудникИзCRM)+";"+Символы.ПС+Символы.ПС;
//		
//		НаименованиеУведомления=СокрЛП(Выборка.Партнер.НаименованиеARM) + ": New Due Date for <"+СОКРЛП(Выборка.КодПроекта)+">. "+СОКРЛП(Выборка.НаименованиеИзCRM)+". ";
//		ТекстСообщения="Due Date has been changed."+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Client: "+СОКРЛП(Выборка.Партнер.НаименованиеARM)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Project name: "+СОКРЛП(Выборка.Проект.Наименование)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Project code: "+СОКРЛП(Выборка.КодПроекта)+";"+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Changes: "+СОКРЛП(Выборка.ИмяСтатуса)+";"+Символы.ПС+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Date: "+СОКРЛП(Выборка.ДатаСтатуса)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"Details: "+СОКРЛП(Выборка.Детали)+";"+Символы.ПС;
//		ТекстСообщения=ТекстСообщения+"User from CRM: "+Формат(Выборка.СотрудникCRM,"ДЛФ=Д")+";"+Символы.ПС;
//		
//		//отправляем BRM
//		Если Выборка.Партнер.BRM<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.BRM, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииDueDateПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRM(Выборка.Партнер.BRM, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		//для каждого менеджера отправим нотификацию об изменении статуса
//		Если Выборка.Партнер.ОсновнойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ОсновнойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииDueDateПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRM(Выборка.Партнер.ОсновнойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;	
//		КонецЕсли;	
//		Если Выборка.Партнер.ВторойМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ВторойМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииDueDateПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRM(Выборка.Партнер.ВторойМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;	
//		Если Выборка.Партнер.ТретийМенеджер<>Справочники.Пользователи.ПустаяСсылка() Тогда
//			Если OW_Нотификации.ОтправкаРассылкиВключена(Выборка.Партнер.ТретийМенеджер, ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_ПриИзмененииDueDateПроектаИзCRM) Тогда
//				ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRM(Выборка.Партнер.ТретийМенеджер, ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//			КонецЕсли;
//		КонецЕсли;
//		
//		//временно отправляю уведомление себе
//		//ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, Выборка.Проект);
//		
//		//ОбновитьДатуОтправкиНотификацииОбИзмененииИсторииПроектаИзCRM(Выборка.Проект, Выборка.ТипСтатуса, ДатаПроверки);
//		//ОбновитьДатуОтправкиНотификацииОбИзмененииDueDateПроектаИзCRM(Выборка.Проект, ДатаПроверки);	
//	КонецЦикла;	
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRM(КомуОтправляем, ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//	
//	ПочтовыйАдресПолучателя = БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(КомуОтправляем);
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM'"), 
//		//УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(КомуОтправляем)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	ЭтоРабочаяБаза = OW.ЭтоРабочаяБаза();
//	Если ЭтоРабочаяБаза=Ложь Тогда
//		//в тестовой базе шлем письма только на отдел 1С
//		Получатели="";
//		СлужебныйEmail = Константы.OW_СлужебныйEmail.Получить();
//		СлужебныйEmail = ?(ПустаяСтрока(СлужебныйEmail), ow.ВернутьПочтуСДоменом("1c"),СлужебныйEmail);
//		Получатели = СлужебныйEmail;
//	КонецЕсли; 
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM'"), 
//	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	   НСтр("ru = 'Ошибка при отправке уведомления об изменении Due Date проекта из CRM: %1'"), 
//	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM'"), 
//	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
//	//КонецЕсли;		
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//
//КонецПроцедуры
//
//Процедура ОтправитьУведомлениеОбИзмененииDueDateПроектаИзCRMАдминистратор(ТекстСообщения, НаименованиеУведомления, ПроектСсылка) Экспорт
//	
//	Получатели="";
//	
//	ПочтовыйАдресПолучателя = ow.ВернутьПочтуСДоменом("akurbatova");
//	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//		//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM'; en = '1C notification. Notice of CRM project Due Date updating'"), 
//		//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//		//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//		//НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у получателя %1.'"), Строка(ПочтовыйАдресПолучателя)));
//	Иначе
//		Если Получатели="" Тогда
//			Получатели = ПочтовыйАдресПолучателя;
//		Иначе	
//			Получатели = Получатели +";"+ ПочтовыйАдресПолучателя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ТемаПисьма =НаименованиеУведомления;
//	ТекстПисьма = ТекстСообщения;
//	
//	//++OW Копачев А.С. 07.09.2022 ONEC-7882
//	//ПараметрыПисьма = Новый Структура;
//	//ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
//	//ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//	//ПараметрыПисьма.Вставить("Кому", Получатели);
//	//ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст);
//	//
//	//Попытка 
//	//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
//	//	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//	//	
//	//Исключение
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM';  en = '1C notification. Notice of CRM project Due Date updating'"), 
//	//	//	УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	   НСтр("ru = 'Ошибка при отправке уведомления об изменении Due Date проекта из CRM: %1'"), 
//	//	//	   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
//	//	Возврат;
//	//КонецПопытки;	
//	//
//	//Если Не ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	//	
//	//	//ЗаписьЖурналаРегистрации(НСтр("ru = 'Нотификации из 1С. Уведомление об изменении Due Date проекта из CRM';  en = '1C notification. Notice of CRM project Due Date updating'"), 
//	//	//УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.ЗадачиПроектов, ПроектСсылка,
//	//	//СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//	//	//	НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
//	//КонецЕсли;		
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели,";"));
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,,,Неопределено);	
//	//--OW Копачев А.С. 07.09.2022 ONEC-7882
//	
//КонецПроцедуры
//
//Процедура OW_ПроверкаАкуальностиOpportunities() Экспорт
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию("OW_ПроверкаАкуальностиOpportunities");
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	OW_АктуальностьOpportunities.Документ,
//	|	OW_АктуальностьOpportunities.Вероятность,
//	|	OW_АктуальностьOpportunities.ДатаПроверки,
//	|	OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаОдинДень,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, МЕСЯЦ, 1), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаОдинМесяц,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1), МЕСЯЦ, 1)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, МЕСЯЦ, 2), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаДваМесяца,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1), МЕСЯЦ, 2)
//	|					И &ТекДата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, МЕСЯЦ, 3), ДЕНЬ)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоНаТриМесяца,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА &ТекДата > ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения, ДЕНЬ, 1), МЕСЯЦ, 3)
//	|				ТОГДА ИСТИНА
//	|			ИНАЧЕ ЛОЖЬ
//	|		КОНЕЦ) КАК ПросроченоПолностью,
//	|	OW_АктуальностьOpportunities.Статус,
//	|	OW_АктуальностьOpportunities.ПросроченоНаОдинМесяц КАК ФлагПросроченоНаОдинМесяц,
//	|	OW_АктуальностьOpportunities.ПросроченоНаДваМесяца КАК ФлагПросроченоНаДваМесяца,
//	|	OW_АктуальностьOpportunities.ПросроченоНаТриМесяца КАК ФлагПросроченоНаТриМесяца,
//	|	OW_АктуальностьOpportunities.ПросроченоПолностью КАК ФлагПросроченоПолностью,
//	|	OW_АктуальностьOpportunities.Документ.ВероятностьПервоначальная КАК ВероятностьПервоначальная,
//	|	OW_АктуальностьOpportunities.Документ.Статус КАК Статус,
//	|	OW_АктуальностьOpportunities.Документ.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
//	|ИЗ
//	|	РегистрСведений.OW_АктуальностьOpportunities КАК OW_АктуальностьOpportunities
//	|ГДЕ
//	|	OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения < &ТекДата
//	|	И (OW_АктуальностьOpportunities.Документ.Статус В (&СтатусДействует, &СтатусСтареющее))	
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	|И (&ИспользоватьОтборПоВидуИнстансаJIRA = ЛОЖЬ
//	|		ИЛИ (OW_АктуальностьOpportunities.Документ.Партнер.ВидИнстансJIRA = &ВидИнстансJIRA
//	|			ИЛИ OW_АктуальностьOpportunities.Документ.Партнер.ПросмотрКлиентаБезУчетаВидаИнстансаJIRA = ИСТИНА))
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	OW_АктуальностьOpportunities.Документ,
//	|	OW_АктуальностьOpportunities.ДатаПроверки,
//	|	OW_АктуальностьOpportunities.Вероятность,
//	|	OW_АктуальностьOpportunities.Статус,
//	|	OW_АктуальностьOpportunities.ПросроченоПолностью,
//	|	OW_АктуальностьOpportunities.ПросроченоНаДваМесяца,
//	|	OW_АктуальностьOpportunities.ПросроченоНаТриМесяца,
//	|	OW_АктуальностьOpportunities.ПросроченоНаОдинМесяц,
//	|	OW_АктуальностьOpportunities.Документ.ВероятностьПервоначальная,
//	|	OW_АктуальностьOpportunities.Документ.ДатаНачалаСтарения,
//	|	OW_АктуальностьOpportunities.Документ.Статус,
//	|	OW_АктуальностьOpportunities.Документ.ДатаИзмененияСтатуса";
//	
//	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
//	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Действует);
//	Запрос.УстановитьПараметр("СтатусСтареющее", Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Стареющее);
//	//++OW Копачев А.С. 20.06.2022 ONEC-7662 
//	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//	Запрос.УстановитьПараметр("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA());
//	//--OW Копачев А.С. 20.06.2022 ONEC-7662
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		мСрокДействия = Выборка.Документ.ДатаНачалаСтарения;
//		мДатаПроверки = ТекущаяДата();
//		
//		Если Выборка.ПросроченоПолностью И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия)  Тогда
//			Если Выборка.ФлагПросроченоПолностью=Ложь Тогда
//				мВероятность  =0;
//				ЗаписатьИзмененияВДокументеOpportunity(Выборка.Документ,0,мДатаПроверки, Ложь, Ложь, Ложь, Истина);
//			КонецЕсли;
//		ИначеЕсли Выборка.ПросроченоНаТриМесяца И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на три месяца  
//			Если Выборка.ФлагПросроченоНаТриМесяца=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*1/4;
//				ЗаписатьИзмененияВДокументеOpportunity(Выборка.Документ,мВероятность,мДатаПроверки, Ложь, Ложь, Истина, Ложь);
//			КонецЕсли;
//		ИначеЕсли  Выборка.ПросроченоНаДваМесяца И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на два месяц
//			Если Выборка.ФлагПросроченоНаДваМесяца=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*2/4;
//				ЗаписатьИзмененияВДокументеOpportunity(Выборка.Документ,мВероятность,мДатаПроверки, Ложь, Истина, Ложь, Ложь);
//			КонецЕсли;
//		ИначеЕсли  Выборка.ПросроченоНаОдинМесяц И (НЕ ЗначениеЗаполнено(мДатаПроверки) ИЛИ мДатаПроверки<>мСрокДействия) Тогда//Просрочено на один месяц
//			Если Выборка.ФлагПросроченоНаОдинМесяц=Ложь Тогда
//				мВероятность  = Выборка.ВероятностьПервоначальная*3/4;
//				ЗаписатьИзмененияВДокументеOpportunity(Выборка.Документ,мВероятность,мДатаПроверки, Истина, Ложь, Ложь, Ложь);			
//			КонецЕсли;					
//		КонецЕсли; 		
//		
//	КонецЦикла;
//	
//	//ow Скочилова АТ 06/03/2017 onec-2121
//	Если ЗначениеЗаполнено(Задание) Тогда
//		OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли; 
//	//ow конец Скочилова АТ 06/03/2017 onec-2121
//КонецПроцедуры
//
//Процедура ЗаписатьИзмененияВДокументеOpportunity(Документ,Вероятность,ДатаПроверки, ПросроченоНаОдинМесяц,ПросроченоНаДваМесяца,ПросроченоНаТриМесяца, ПросроченоПолностью)
//	
//	Попытка
//		
//		мДокОбъект = Документ.ПолучитьОбъект();
//		мДокОбъект.ВероятностьПодписания = Вероятность;
//		
//		Если ПросроченоПолностью=Истина Тогда
//			мДокОбъект.Статус = Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Истекло;
//			мДокОбъект.ВероятностьПодписания  = 0;
//		Иначе
//			мДокОбъект.Статус = Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Стареющее;
//		КонецЕсли;
//		
//		
//		мДокОбъект.ДатаИзмененияСтатуса  = ДатаПроверки;
//		мДокОбъект.ПричинаИзмененияСтатуса=мДокОбъект.ПричинаИзмененияСтатуса+Символы.ПС+НСтр("ru = 'Результат работы механизма старения от '; en = 'Result of depreciation mechanism from '")+Формат(ДатаПроверки, "ДЛФ=Д");
//		
//		мДокОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
//		мДокумент = мДокОбъект.Ссылка;
//		
//		//Обновим данные в РС "OW_АктуальностьOpportunity"
//		ОбновитьАктуальностьДанныхOpportunity(мДокумент,ДатаПроверки, ПросроченоНаОдинМесяц, ПросроченоНаДваМесяца, ПросроченоНаТриМесяца, ПросроченоПолностью);
//		
//		//записать изменение статуса Opportunity
//		Регистр = РегистрыСведений.ИзменениеСтатусаOpportunities.СоздатьНаборЗаписей();
//		Движение=Регистр.Добавить();
//		Движение.Период=мДокумент.ДатаИзмененияСтатуса;
//		Движение.Партнер =мДокумент.Партнер;
//		Движение.Opportunity=мДокумент;
//		Движение.Статус=мДокумент.Статус;
//		Движение.ПричинаИзмененияСтатуса="Результат работы механизма старения от "+Формат(ДатаПроверки, "ДЛФ=Д");
//		Движение.Вероятность=мДокумент.ВероятностьПодписания;
//		Регистр.Записать(Ложь);
//		
//		
//	Исключение
//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ЗаписьВероятности", 
//		УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭтапМаркетинговогоПроекта, ,
//		НСтр("ru = 'Не удалось изменить Вероятность в документе: ' ; en = 'Failed to update Probability in Opportunity: '") + Документ); 
//	КонецПопытки;
//	
//КонецПроцедуры
//
//Процедура ОбновитьАктуальностьДанныхOpportunity(Документ,ДатаПроверки, ПросроченоНаОдинМесяц, ПросроченоНаДваМесяца, ПросроченоНаТриМесяца, ПросроченоПолностью)
//	
//	НаборЗаписей = РегистрыСведений.OW_АктуальностьOpportunities.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Документ.Установить(Документ);
//	
//	Запись = НаборЗаписей.Добавить();
//	
//	Запись.Документ      = Документ;
//	Запись.ДатаПроверки  = ДатаПроверки;
//	
//	Запись.Вероятность   = Документ.ВероятностьПодписания;
//	Запись.Статус = Документ.Статус;
//	Запись.ПричинаИзмененияСтатуса=НСтр("ru = 'Результат работы механизма старения от '; en = 'Result of depreciation mechanism from '")+Формат(ДатаПроверки, "ДЛФ=Д");  
//	
//	Запись.ПросроченоПолностью=ПросроченоПолностью;
//	Запись.ПросроченоНаОдинМесяц=ПросроченоНаОдинМесяц; 
//	Запись.ПросроченоНаДваМесяца=ПросроченоНаДваМесяца; 
//	Запись.ПросроченоНаТриМесяца=ПросроченоНаТриМесяца;
//	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры
//
////функция возвращает уникальный ID для синхронизации проектов с CRM
//Функция ВыдатьID_Sync() Экспорт
//	//+ 2018/06/06 Курбатова А.А. обнуление переменных
//	Код1=0;
//	Код2=0;
//	Код3=0;
//	//- 2018/06/06 Курбатова А.А. обнуление переменных
//	//+ Пилюгин В.Е. 23.03.2018
//	//ждем 10 сек когда отпустят lock
//	ДатаПрерывания = ТекущаяДата() + 10; 
//	Пока Истина Цикл
//		Если НЕ Константы.ID_sync_WriteLock.Получить() Тогда
//			Константы.ID_sync_WriteLock.Установить(Истина);	
//			Прервать;
//		ИначеЕсли ТекущаяДата() > ДатаПрерывания Тогда
//			Константы.ID_sync_WriteLock.Установить(Истина);	
//			Прервать;
//		КонецЕсли; 
//	КонецЦикла; 
//	//- Пилюгин В.Е. 23.03.2018	
//	
//	//+ Пилюгин В.Е. 21.06.2016
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗадачиМаркетинговыхПроектов.ID_Sync_CRM КАК ID_Sync_CRM
//	|ИЗ
//	|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ID_Sync_CRM УБЫВ";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Код1 = Выборка.ID_Sync_CRM;	
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ЗадачиПроектов.ID_Sync_CRM КАК ID_Sync_CRM
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ID_Sync_CRM УБЫВ";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Код2 = Выборка.ID_Sync_CRM;	
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ПроектыВерхнегоУровня.ID_Sync КАК ID_Sync
//	|ИЗ
//	|	Справочник.ПроектыВерхнегоУровня КАК ПроектыВерхнегоУровня
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ID_Sync УБЫВ";
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Код3 = Выборка.ID_Sync;	
//	КонецЕсли; 
//	
//	Код = ?(Код2 > Код1 ,Код2, Код1);
//	Код = ?(Код > Код3 ,Код, Код3);
//	
//	Возврат Код + 1;
//	//- Пилюгин В.Е. 21.06.2016
//	
//КонецФункции
//
////функция проверяет, был ли уже выдан такой ID_Sync для другого объекта
//Функция ЭтоУникальныйID_Sync(ID_Sync, Ссылка) Экспорт
//	
//	//+ Пилюгин В.Е. 22.06.2016
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиМаркетинговыхПроектов.ID_Sync_CRM КАК ID_Sync_CRM
//	|ИЗ
//	|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
//	|ГДЕ
//	|	ЗадачиМаркетинговыхПроектов.Ссылка <> &Ссылка
//	|	И ЗадачиМаркетинговыхПроектов.ID_Sync_CRM = &ID_Sync_CRM";
//	
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("ID_Sync_CRM", ID_Sync);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Ложь	
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиПроектов.ID_Sync_CRM КАК ID_Sync_CRM
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|ГДЕ
//	|	ЗадачиПроектов.Ссылка <> &Ссылка
//	|	И ЗадачиПроектов.ID_Sync_CRM = &ID_Sync_CRM";
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	Запрос.УстановитьПараметр("ID_Sync_CRM", ID_Sync);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Ложь;	
//	КонецЕсли; 
//	
//	Возврат Истина;
//	//- Пилюгин В.Е. 22.06.2016
//	
//КонецФункции
//
////функция находит проект внедрения или оценочный проект по переданному коду ID_Sync
//Функция НайтиПроектПоID_Sync(ID_Sync) Экспорт
//	//+ Пилюгин В.Е. 30.10.2017
//	Если НЕ ЗначениеЗаполнено(ID_Sync) Тогда
//		Возврат Неопределено;
//	КонецЕсли; 
//	//сначала ищем проект внедрения
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиПроектов.Ссылка
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|ГДЕ
//	|	ЗадачиПроектов.ID_Sync_CRM = &ID_Sync
//	|	И НЕ ЗадачиПроектов.ПометкаУдаления";
//	Запрос.УстановитьПараметр("ID_Sync", ID_Sync);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;	   
//	КонецЕсли; 
//	
//	//затем ищем оценочный проект
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиМаркетинговыхПроектов.Ссылка
//	|ИЗ
//	|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
//	|ГДЕ
//	|	ЗадачиМаркетинговыхПроектов.ID_Sync_CRM = &ID_Sync
//	|	И НЕ ЗадачиМаркетинговыхПроектов.ПометкаУдаления";
//	Запрос.УстановитьПараметр("ID_Sync", ID_Sync);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;	   
//	КонецЕсли; 
//	
//	//ну а если не нашли ни того, ни другого -- возвращаем Неопределено	
//	Возврат Неопределено;	
//	//- Пилюгин В.Е. 30.10.2017		
//КонецФункции
//
////функция возвращает уникальный ID для синхронизации
//Функция ВыдатьID_SynСсылке(Ссылка) Экспорт
//	//++OW Копачев А.С. 15.03.2019 ONEC-4403 	
//	УстановитьПривилегированныйРежим(Истина);
//		
//	ОбъектМетаданных = Ссылка.Метаданные();
//	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
//
//	ВидНумерации = ПолноеИмя;
//	
//	// для документов JIRA используется своя нумерация, для остальных - нет
//	ВидыДокументов = Новый Массив;
//	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда 
//		ТекВидДокумента = ОбъектМетаданных.Имя;
//				
//		СоответствиеВидовДокументовСТипомЗадачJIRA = JIRA.ВидыДокументовПоТипуЗадачиJIRA();		
//		Для Каждого ТекЭлемент Из СоответствиеВидовДокументовСТипомЗадачJIRA Цикл
//			ВидДокумента = ТекЭлемент.Ключ;			
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(ВидыДокументов, ВидДокумента, Истина);
//		КонецЦикла;	
//		
//		Если ВидыДокументов.Найти(ТекВидДокумента) <> Неопределено Тогда 
//			ВидНумерации = ПредопределенноеЗначение("Справочник.ВидыДополнительнойНумерацииОбъектов.ДокументыJIRA");	
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	ВидНумерации = РегистрыСведений.ЗначенияДляДополнительнойНумерацииОбъектов.ОпределитьВидНумерации(ВидНумерации);
//	
//	// накладываем блокировку от изменения на нумератор, чтобы никто не смог внести дубль номера
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗначенияДляДополнительнойНумерацииОбъектов");
//	ЭлементБлокировки.УстановитьЗначение("ВидНумерации", ВидНумерации);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//
//	ПоследнийНомерОбъекта = РегистрыСведений.ЗначенияДляДополнительнойНумерацииОбъектов.ПолучитьПоследнийНомерОбъекта(ВидНумерации);
//
//	НовыйКодID = ПоследнийНомерОбъекта + 1;	
//	
//	РегистрыСведений.ЗначенияДляДополнительнойНумерацииОбъектов.ЗаписатьПоследнийНомерОбъекта(ВидНумерации, НовыйКодID);
//	
//	УстановитьПривилегированныйРежим(Ложь);
//
//	Возврат НовыйКодID;
//
//	//Запрос = Новый Запрос;
//	//ТекстЗапроса = "";
//	//Если СквознаяНумерация = Ложь Тогда 
//	//    		
//	//	ТекстЗапроса = 
//	//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	//	|	Таблица.ID_Sync КАК ID_Sync
//	//	|ИЗ
//	//	|" + ПолноеИмя + " КАК Таблица
//	//	|
//	//	|УПОРЯДОЧИТЬ ПО
//	//	|	ID_Sync УБЫВ";
//	//	
//	//Иначе
//	//	
//	//	МассивВремменныхТаблиц = Новый Массив;
//	//	СчВт = 0;
//	//	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
//	//		СчВт = СчВт + 1;
//	//		ИмяВТ = "ВТ_" + СчВт;
//	//		
//	//		ТекстЗапросаПоДокументу = 
//	//		"ВЫБРАТЬ ПЕРВЫЕ 1
//	//		|	Документ.ID_Sync КАК ID_Sync
//	//		|Поместить " + ИмяВТ + "
//	//		|ИЗ
//	//		|	Документ." + ТекВидДокумента + " КАК Документ
//	//		|
//	//		|УПОРЯДОЧИТЬ ПО
//	//		|	ID_Sync УБЫВ
//	//		|";
//	//		
//	//		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстЗапроса, ТекстЗапросаПоДокументу, Символы.ПС + ";" + Символы.ПС);
//	//		
//	//		МассивВремменныхТаблиц.Добавить(ИмяВТ);
//	//	КонецЦикла;	
//	//	
//	//	ТекстЗапросаВТ = "";
//	//	Для Каждого ИмяВТ Из МассивВремменныхТаблиц Цикл
//	//		ТекстЗапросаПоВТ =  "ВЫБРАТЬ
//	//							|	ТаблицаВТ.ID_Sync ИЗ " + ИмяВТ + " КАК ТаблицаВТ";
//	//		
//	//		ТекстЗапросаВТ = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстЗапросаВТ, ТекстЗапросаПоВТ, Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС);
//	//	КонецЦикла;	
//	//	
//	//	
//	//	ТекстЗапроса =  ТекстЗапроса + "
//	//					|;
//	//					|//////////////////////////////////////
//	//					|
//	//					|ВЫБРАТЬ 
//	//					|	МАКСИМУМ(Таблица.ID_Sync) КАК ID_Sync 
//	//					| ИЗ 
//	//					|(" + ТекстЗапросаВТ + ") КАК Таблица
//	//					|"; 
//	//	
//	//КонецЕсли;	
//	//
//	//Запрос.Текст = ТекстЗапроса;
//	//
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Если НЕ РезультатЗапроса.Пустой() Тогда 
//	//	Выборка = РезультатЗапроса.Выбрать();
//	//	Выборка.Следующий();
//	//	КодID = Макс(КодID, Выборка.ID_Sync);	
//	//КонецЕсли; 
//	//
//	//УстановитьПривилегированныйРежим(Ложь);
//
//	//Возврат КодID + 1;
//	//--OW Копачев А.С. 15.03.2019 ONEC-4403	
//КонецФункции
//
//Процедура ПроверитьУникальностьID_SyncСсылки(Ссылка, Отказ = Ложь) Экспорт
//	
//	//++OW Копачев А.С. 15.03.2019 ONEC-4403 	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ID_Sync = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ID_Sync");
//	
//	ОбъектМетаданных = Ссылка.Метаданные();
//	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
//
//	// для документов JIRA используется свозная нумерация, для остальных - нет
//	СквознаяНумерация = Ложь;
//		
//	ВидыДокументов = Новый Массив;
//	Если ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда 
//		ТекВидДокумента = ОбъектМетаданных.Имя;
//				
//		СоответствиеВидовДокументовСТипомЗадачJIRA = JIRA.ВидыДокументовПоТипуЗадачиJIRA();		
//		Для Каждого ТекЭлемент Из СоответствиеВидовДокументовСТипомЗадачJIRA Цикл
//			ВидДокумента = ТекЭлемент.Ключ;			
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(ВидыДокументов, ВидДокумента, Истина);
//		КонецЦикла;	
//		
//		Если ВидыДокументов.Найти(ТекВидДокумента) <> Неопределено Тогда 
//			СквознаяНумерация = Истина;	
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	Запрос = Новый Запрос;
//	ТекстЗапроса = "";
//	Если СквознаяНумерация = Ложь Тогда 
//	    		
//		ТекстЗапроса = 
//		"ВЫБРАТЬ 
//		|	Таблица.Ссылка КАК Ссылка
//		|ИЗ
//		|" + ПолноеИмя + " КАК Таблица
//		|ГДЕ 
//		|	ID_Sync = &ID_Sync
//		|";
//		
//	Иначе
//		
//		Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
//					
//			ТекстЗапросаПоДокументу = 
//			"ВЫБРАТЬ
//			|	Документ.Ссылка КАК Ссылка
//			|ИЗ
//			|	Документ." + ТекВидДокумента + " КАК Документ
//			|ГДЕ 
//			|	ID_Sync = &ID_Sync
//			|";
//			
//			ТекстЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстЗапроса, ТекстЗапросаПоДокументу, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
//			
//		КонецЦикла;	
//			
//	КонецЕсли;	
//	
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("ID_Sync", ID_Sync);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ТекстОшибки = "";
//	Если НЕ РезультатЗапроса.Пустой() Тогда 
//		Выборка = РезультатЗапроса.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			// кроме самой себя
//			Если Выборка.Ссылка = Ссылка Тогда 
//				Продолжить;
//			КонецЕсли;	
//			
//			ТекстОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибки, Строка(Выборка.Ссылка), ";" + Символы.ПС);	
//		КонецЦикла;
//	КонецЕсли; 
//	
//	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//					  "По ID_Sync <" + ID_Sync + "> найдено более одного объекта:
//					  | " + Строка(Ссылка) + ";
//					  | " + ТекстОшибки, 
//					  "More than one object found by ID_Sync <" + ID_Sync + ">:
//					  | " + Строка(Ссылка) + ";
//					  | " + ТекстОшибки);
//		
//		OW_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);		
//		OW.ЗаписатьОшибку(Ссылка, Справочники.OW_РазделыУчета.ID_ДляСинхронизации, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
//		
//		Отказ = Истина;		
//	КонецЕсли;	
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	//--OW Копачев А.С. 15.03.2019 ONEC-4403
//	
//КонецПроцедуры	
//	 
//Функция НайтиСоздатьВладельцаБизнесПроект(Партнер, НаименованиеНаАнглийском = "") Экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Проекты.Ссылка
//	|ИЗ
//	|	Справочник.Проекты КАК Проекты
//	|ГДЕ
//	|	НЕ Проекты.ПометкаУдаления
//	|	И Проекты.Владелец = &Владелец
//	|	И Проекты.ПроектыБезДоговоров
//	|	И Проекты.Наименование ПОДОБНО ""%Projects without contracts%""";
//	Запрос.УстановитьПараметр("Владелец", Партнер);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;
//	КонецЕсли; 
//	
//	//если не нашли, то создаем
//	Если НЕ ЗначениеЗаполнено(НаименованиеНаАнглийском) Тогда
//		НаименованиеНаАнглийском = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Партнер, "НаименованиеНаАнглийском");
//	КонецЕсли; 
//	нЭлемент = Справочники.Проекты.СоздатьЭлемент();
//	нЭлемент.Владелец = Партнер;
//	нЭлемент.НаименованиеНаАнглийском = НаименованиеНаАнглийском;
//	нЭлемент.Наименование = "Projects without contracts - " + НаименованиеНаАнглийском;
//	нЭлемент.СтатусБизнесПроекта = Перечисления.СтатусыБизнесПроектов.Принято;
//	нЭлемент.ДатаИзмененияСтатуса = ТекущаяДата();
//	нЭлемент.ДатаИзмененияСтатусаПервоначальная = ТекущаяДата();
//	нЭлемент.ДатаРегистрации = ТекущаяДата();
//	нЭлемент.ПроектыБезДоговоров = Истина;
//	Попытка
//		нЭлемент.Записать();
//		СсылкаНаВладельца = нЭлемент.Ссылка;
//	Исключение
//		СсылкаНаВладельца = Неопределено;
//	КонецПопытки; 	
//	Возврат СсылкаНаВладельца;
//КонецФункции
//
//Функция ПолучитьПроверкуЗакрытияБазы() Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ТекВремя = ТекущаяДата();
//	
//	Если ЗначениеЗаполнено(Константы.OW_ВремяБлокировкиБазы.Получить()) Тогда
//		Если ТекВремя>= (НачалоДня(ТекВремя)+Константы.OW_ВремяБлокировкиБазы.Получить()*60*60) и  ТекВремя< (НачалоДня(ТекВремя)+Константы.OW_ВремяБлокировкиБазы.Получить()*60*60+Константы.OW_ПериодБлокировкиБазы.Получить()) Тогда
//			Возврат Истина;
//		Иначе
//			Возврат Ложь;
//		КонецЕсли;
//	Иначе
//		Возврат Ложь; 
//	КонецЕсли;
//	УстановитьПривилегированныйРежим(Ложь);
//КонецФункции
//
//Функция ПолучитьВремяЗавершения() Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	ТекВремя = ТекущаяДата();
//
//	Если ЗначениеЗаполнено(Константы.OW_ВремяБлокировкиБазы.Получить()) и ПроверитьЧтоВыводимПредупреждение()  Тогда
//		Если (ТекВремя+10*60)>= (НачалоДня(ТекВремя)+Константы.OW_ВремяБлокировкиБазы.Получить()*60*60) и  (ТекВремя)< (НачалоДня(ТекВремя)+Константы.OW_ВремяБлокировкиБазы.Получить()*60*60) Тогда
//			ТекЧило = ТекВремя+10*60-(НачалоДня(ТекВремя)+Константы.OW_ВремяБлокировкиБазы.Получить()*60*60);
//			ТекЧило = ТекЧило;
//			ТекЧило = 10-Цел(ТекЧило/60);
//			Возврат "Your session will expire in " +ТекЧило+ " minutes.";
//		Иначе
//			Возврат "";
//		КонецЕсли;
//	Иначе
//		Возврат ""; 
//	КонецЕсли;
//	УстановитьПривилегированныйРежим(Ложь);
//КонецФункции
//
//Функция ПолучитьКартинкуДляДанных() Экспорт
//	БиблиотекаКартинок.OW_Massenger.Записать(""+КаталогВременныхФайлов()+"\"+"1C_Massenger.png");
//	Двоичное=Новый ДвоичныеДанные(""+КаталогВременныхФайлов()+"\"+"1C_Massenger.png");
//	Адрес=ПоместитьВоВременноеХранилище(Двоичное);
//	Возврат Адрес
//КонецФункции
//
//Процедура ОтрправитьСообщениеНаСервере() Экспорт
//	СписокП = Новый Массив;
//	СписокП.Добавить(ПараметрыСеанса.ТекущийПользователь);
//	
//	ТекстПисьма = "<html>
//	|<head>
//	|<title>Заголовки в тексте</title>
//	|</head>
//	|<body> <font size=""2"" face=""Century Gothic""> 
//	|Good afternoon,<br>
//	|<br>
//	|Daily maintenance is in progress, you can continue work at "+?(OW.ПолучитьОсновнойВидИнстансаJIRA()=ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS"),"11 00 PM SPb time","8.00 PM by GMT time") +"</p><br>
//	|<br>
//	|<br>
//	|We apologize for the inconvenience and thank you for your patience.
//	|<br>
//	|</body>
//	|</html>";
//	
//	СтруктураПисьма = Новый Структура;
//	СтруктураПисьма.Вставить("Тема","1C");
//	СтруктураПисьма.Вставить("ТекстПисьма",ТекстПисьма);
//	СтруктураПисьма.Вставить("Вложения",Неопределено);
//	СтруктураПисьма.Вставить("Отправитель",ow.ВернутьПочтуСДоменом("1C_notification"));
//	
//	//++OW Копачев А.С. 08.09.2022 ONEC-7882
//	//СписокАдресатов = Новый Массив;
//	СписокАдресатов = Новый СписокЗначений;
//	//--OW Копачев А.С. 08.09.2022 ONEC-7882
//	
//	//++OW Копачев А.С. 20.04.2023 ONEC-6185
//	//Для Каждого СтрД из СписокП Цикл
//	//	СписокАдресатов.Добавить(HR_НаСервере.НаСервереПолучитьEmail(СтрД));
//	//КонецЦикла; 
//	СписокАдресатов = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(СписокП); 
//	//--OW Копачев А.С. 20.04.2023 ONEC-6185
//	//********    
//	СтруктураПисьма.Вставить("Получатели",СписокАдресатов);
//		
//	//++OW Копачев А.С. 06.09.2022 ONEC-7882	
//	//РезультатПроверки = HR_НаСервере.ОтсылкаПисьма(СтруктураПисьма);
//	
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(СтруктураПисьма.Тема, СтруктураПисьма.ТекстПисьма, СписокАдресатов,,,,, Неопределено,,,Неопределено,,,,Истина);	
//	//--OW Копачев А.С. 06.09.2022 ONEC-7882
//
//	
//	//Если РезультатПроверки = ложь Тогда 
//	//	Сообщение = Новый СообщениеПользователю;
//	//	Сообщение.Текст = "The letter was not sent!";
//	//	Сообщение.Сообщить();
//	//Иначе
//	//	Сообщить("Letter sent");
//	//	Объект.ОтправленоНаСогласование = Истина;
//	//	ЭтотОбъект.Модифицированность = Истина;
//	//КонецЕсли;
//	
//КонецПроцедуры
//
////функция удаляет дубли из списка значений
//Функция СвернутьСписокЗначений(Список) Экспорт
//	//+ Пилюгин В.Е. 09.08.2016
//	Сп = Новый СписокЗначений;
//	ТЗ = Новый ТаблицаЗначений;
//	ТЗ.Колонки.Добавить("Знч");
//    Для каждого эл Из Список Цикл
//        Если EmailОтсутсвуетУСотрудниковИлиСотрудникРаботает(СокрЛП(эл.Значение)) тогда
//    		нСтрока = ТЗ.Добавить();
//    		нСтрока.Знч = эл.Значение;
//        КонецЕсли;
//	КонецЦикла; 
//	ТЗ.Свернуть("Знч");
//	МассивЗначений = ТЗ.ВыгрузитьКолонку("Знч");
//	Сп.ЗагрузитьЗначения(МассивЗначений);
//	Возврат Сп;
//	//- Пилюгин В.Е. 09.08.2016
//КонецФункции
//
////функция удаляет пустые значения из списка значений
//Функция УдалитьПустыеЗначенияСпискаЗначений(Список) Экспорт
//	//+ Пилюгин В.Е. 13.09.2017
//	НовыйСписок = Новый СписокЗначений;
//	Для каждого эл Из Список Цикл
//		Если ЗначениеЗаполнено(эл.Значение) Тогда
//			НовыйСписок.Добавить(эл.Значение);
//		КонецЕсли; 
//	КонецЦикла; 
//	Возврат НовыйСписок;
//	//- Пилюгин В.Е. 13.09.2017
//КонецФункции
//
//
//
////функция удаляет системные, служебные, непечатаемые символы из строки и возвращает ее
//Функция УдалитьСистемныеСимволыИзСтроки(Стр, КодыСистемныхСимволов = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 31.10.2017
//	Если КодыСистемныхСимволов = Неопределено Тогда
//		КодыСистемныхСимволов = ПолучитьМассивКодовСистемныхСимволов();
//	КонецЕсли; 
//	
//	
//	Для каждого с Из КодыСистемныхСимволов Цикл
//		Номер = СтрНайти(Стр, Символ(с));
//		Если Номер <> 0 Тогда
//			//Сообщить("Номер некорректного символа: " + Номер);
//			Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Номер некорректного символа: " + Номер,"Incorrect symbol number: " + Номер));
//		КонецЕсли; 
//		Стр = СтрЗаменить(Стр, Символ(с), "");	
//	КонецЦикла; 
//	
//	Стр = СтрЗаменить(Стр,Символы.ВК," ");
//	Стр = СтрЗаменить(Стр,Символы.ВТаб," ");
//	Стр = СтрЗаменить(Стр,Символы.НПП," ");
//	Стр = СтрЗаменить(Стр,Символы.ПС," ");
//	Стр = СтрЗаменить(Стр,Символы.ПФ," ");
//	Стр = СтрЗаменить(Стр,Символы.Таб," ");
//	
//	Возврат Стр;	   
//	
//	//- Пилюгин В.Е. 31.10.2017	
//КонецФункции
//
////возвращает массив кодов Unicode (в десятичной системе) системных символов
//Функция ПолучитьМассивКодовСистемныхСимволов() Экспорт
//	//+ Пилюгин В.Е. 31.10.2017
//	м = Новый Массив;
//	Для н = 0 По 8 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	м.Добавить(11);
//	м.Добавить(12);
//	Для н = 14 По 31 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	Для н = 127 По 132 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	Для н = 134 По 159 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	Для н = 55296 По 57343 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	Для н = 64976 По 65007 Цикл
//		м.Добавить(н);
//	КонецЦикла;
//	м.Добавить(65534);
//	м.Добавить(65535);
//	Возврат м;
//	//- Пилюгин В.Е. 31.10.2017		
//КонецФункции
//
//
//
//
////функция удаляет дубли из массива
//Функция СвернутьМассив(Массив) Экспорт
//	//+ Пилюгин В.Е. 09.08.2016
//	Мс = Новый Массив;
//	ТЗ = Новый ТаблицаЗначений;
//	ТЗ.Колонки.Добавить("Знч");
//	
//	Для каждого эл Из Массив Цикл
//		нСтрока = ТЗ.Добавить();
//		нСтрока.Знч = эл;
//	КонецЦикла; 
//	ТЗ.Свернуть("Знч");
//	Мс = ТЗ.ВыгрузитьКолонку("Знч");
//	
//	Возврат Мс;
//	//- Пилюгин В.Е. 09.08.2016
//КонецФункции
//
//
//Функция ПолучитьРазмерДанных(Знач Данные) Экспорт
//	
//	Если ТипЗнч(Данные) = Тип("ХранилищеЗначения") Тогда
//		ДанныеХранилища = Данные.Получить();
//		Если ДанныеХранилища = Неопределено Тогда
//			Возврат 0;
//		КонецЕсли;
//		Если ТипЗнч(ДанныеХранилища) = Тип("Картинка") Тогда
//			ДанныеХранилища = ДанныеХранилища.ПолучитьДвоичныеДанные();
//		ИначеЕсли ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
//			Возврат СтрДлина(ДанныеХранилища);
//		КонецЕсли;
//		ДанныеBase64 = Base64Строка(ДанныеХранилища);
//	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
//		ДанныеBase64 = Base64Строка(Данные);
//	ИначеЕсли ТипЗнч(Данные) = Тип("Картинка") Тогда
//		ДанныеBase64 = Base64Строка(Данные.ПолучитьДвоичныеДанные());
//	Иначе
//		Возврат СтрДлина(XMLСтрока(Данные));
//	КонецЕсли;
//	
//	//Base64 - специальный формат хранения данных в текстовом формате
//	РазмерДанных = СтрДлина(ДанныеBase64) - ?(Прав(ДанныеBase64, 1) = "=", 1, 0) - ?(Прав(ДанныеBase64, 2) = "==", 1, 0);
//	РазмерДанных = Цел(РазмерДанных / 4 * 3); // в байтах
//	
//	Возврат РазмерДанных;
//	
//КонецФункции
//
//
//Процедура ЗаполнениеВовлеченностиВHR() Экспорт
//	НачалоПериода= НачалоГода(ТекущаяДата());
//	КонецПериода2 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
//	
//	Тпер = НачалоПериода;
//	Пока Тпер<= КонецПериода2 Цикл
//		КонецПериода =  КонецМесяца(Тпер);
//		ПрошлыйПериодКонец = КонецМесяца(Тпер);
//		
//		СписокОрг = Новый СписокЗначений;
//		ТВО = Справочники.Организации.Выбрать();
//		Пока ТВО.Следующий() Цикл
//			Если НЕ Тво.ПометкаУдаления и ЗначениеЗаполнено(ТВО.OW_NameForEn) и Не (ТВО.Наименование = "ООО ""ОВ Интеграция""" или ТВО.Наименование = "ООО ""ОпенВэй Решения""" или ТВО.Наименование = "ООО ""Лектон""") Тогда   //Скочилова АТ добавлена проверка на 3 организации ONEC-2552
//				СписокОрг.Добавить(ТВО.Ссылка);
//			КонецЕсли;
//		КонецЦикла; 
//		ListOfCompanies = СписокОрг;	
//		
//		ЗапросСтавка = новый Запрос;
//		ЗапросСтавка.Текст = "ВЫБРАТЬ
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка,
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Сотрудник,
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление
//		|ИЗ
//		|	РегистрСведений.HR_СтавкаСотрудникаНаДату.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК HR_СтавкаСотрудникаНаДатуСрезПоследних";
//		
//		
//		ЗапросДанныеНапрвления = Новый Запрос;
//		ЗапросДанныеНапрвления.Текст = "ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник КАК Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период КАК Период,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение КАК HQ,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить КАК Check,
//		|	0 КАК RD,
//		|	0 КАК Support,
//		|	0 КАК Admin,
//		|	0 КАК Delivery,
//		|	0 КАК Sales
//		|ПОМЕСТИТЬ ВТ_Данные
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.HQ) 
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение,
//		|	0,
//		|	0,
//		|	0,
//		|	0
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.RD) 
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение,
//		|	0,
//		|	0,
//		|	0
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.Support)
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить,
//		|	0,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение,
//		|	0,
//		|	0
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.Admin) 
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить,
//		|	0,
//		|	0,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение,
//		|	0
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.Implementation)		
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Сотрудник,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Период,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Проверить,
//		|	0,
//		|	0,
//		|	0,
//		|	0,
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Значение
//		|ИЗ
//		|	РегистрСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению КАК HR_ВовлеченноcтьСотрудникаПоНаправлению
//		|ГДЕ
//		|	HR_ВовлеченноcтьСотрудникаПоНаправлению.Направление = Значение(Справочник.OW_НаправлениеДеятельности.Sales) 
//		|	И HR_ВовлеченноcтьСотрудникаПоНаправлению.Период МЕЖДУ &Начало И &Конец
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Данные.Сотрудник,
//		|	ВТ_Данные.Период КАК Период,
//		|	МИНИМУМ(ВТ_Данные.HQ) КАК HQ,
//		|	МАКСИМУМ(ВТ_Данные.Check) КАК Check,
//		|	МАКСИМУМ(ВТ_Данные.RD) КАК RD,
//		|	МАКСИМУМ(ВТ_Данные.Support) КАК Support,
//		|	МАКСИМУМ(ВТ_Данные.Admin) КАК Admin,
//		|	МАКСИМУМ(ВТ_Данные.Delivery) КАК Delivery,
//		|	МАКСИМУМ(ВТ_Данные.Sales) КАК Sales
//		|ПОМЕСТИТЬ ВТ_Итог
//		|ИЗ
//		|	ВТ_Данные КАК ВТ_Данные
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_Данные.Сотрудник,
//		|	ВТ_Данные.Период
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Итог.Сотрудник,
//		|	СРЕДНЕЕ(ВТ_Итог.HQ) КАК HQ,
//		|	МАКСИМУМ(ВТ_Итог.Check) КАК Check,
//		|	СРЕДНЕЕ(ВТ_Итог.RD) КАК RD,
//		|	СРЕДНЕЕ(ВТ_Итог.Support) КАК Support,
//		|	СРЕДНЕЕ(ВТ_Итог.Admin) КАК Admin,
//		|	СРЕДНЕЕ(ВТ_Итог.Delivery) КАК Delivery,
//		|	СРЕДНЕЕ(ВТ_Итог.Sales) КАК Sales
//		|ИЗ
//		|	ВТ_Итог КАК ВТ_Итог
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_Итог.Сотрудник";
//		
//		
//		ТаблицаHC = Новый ТаблицаЗначений;
//		ТаблицаHC.Колонки.Добавить("Name"); 	
//		ТаблицаHC.Колонки.Добавить("Job");
//		ТаблицаHC.Колонки.Добавить("Company");
//		ТаблицаHC.Колонки.Добавить("Full");	
//		ТаблицаHC.Колонки.Добавить("Status");
//		ТаблицаHC.Колонки.Добавить("Office");
//		ТаблицаHC.Колонки.Добавить("StartDate");
//		ТаблицаHC.Колонки.Добавить("EnDate");
//		ТаблицаHC.Колонки.Добавить("FTE1");	
//		ТаблицаHC.Колонки.Добавить("FTEW");
//		ТаблицаHC.Колонки.Добавить("FTE2");	
//		ТаблицаHC.Колонки.Добавить("Departmental");	
//		ТаблицаHC.Колонки.Добавить("Region");
//		ТаблицаHC.Колонки.Добавить("Comment");	
//		ТаблицаHC.Колонки.Добавить("RD1");	
//		ТаблицаHC.Колонки.Добавить("Implementation1");	
//		ТаблицаHC.Колонки.Добавить("Client1");
//		ТаблицаHC.Колонки.Добавить("Sales1");	
//		ТаблицаHC.Колонки.Добавить("Admin1");	
//		ТаблицаHC.Колонки.Добавить("HQ1");	
//		ТаблицаHC.Колонки.Добавить("check1");	
//		ТаблицаHC.Колонки.Добавить("RD2");	
//		ТаблицаHC.Колонки.Добавить("Implementation2");	
//		ТаблицаHC.Колонки.Добавить("Client2");	
//		ТаблицаHC.Колонки.Добавить("Sales2");	
//		ТаблицаHC.Колонки.Добавить("Admin2");	
//		ТаблицаHC.Колонки.Добавить("HQ2");	
//		ТаблицаHC.Колонки.Добавить("check2");
//		
//		//*********************
//		Состояние = Новый СписокЗначений;
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
//		Состояние.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
//		
//		
//		СостРаботает = Новый СписокЗначений;
//		СостРаботает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
//		СостРаботает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Командировка);
//		СостРаботает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск);
//		СостРаботает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
//		СостРаботает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
//		
//		
//		
//		
//		НЕ_Работает = Новый СписокЗначений;
//		НЕ_Работает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);
//		НЕ_Работает.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);
//		
//		//*********************
//		ЗапросД = Новый Запрос;
//		ЗапросД.УстановитьПараметр("Состояние1",Справочники.OW_ВидыСостояний.НайтиПоКоду("000000005"));
//		ЗапросД.УстановитьПараметр("СостояниеРаботает",СостРаботает);
//		ЗапросД.УстановитьПараметр("Состояние",Состояние);
//		ЗапросД.УстановитьПараметр("НЕ_Работает",НЕ_Работает);
//		ЗапросД.УстановитьПараметр("НачалоПериода1",НачалоГода(Тпер));
//		ЗапросД.УстановитьПараметр("ЗаСвойСчет",Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
//		ЗапросД.УстановитьПараметр("Иностранец",Справочники.OW_ВидыСостояний.НайтиПоКоду("000000001"));
//		
//		
//		
//		НЕ_Работает1 = Новый СписокЗначений;
//		НЕ_Работает1.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);
//		НЕ_Работает1.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);
//		НЕ_Работает1.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
//		//НЕ_Работает1.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Болезнь);
//		
//		ЗапросДВ = новый Запрос;
//		ЗапросДВ.Текст =  "ВЫБРАТЬ
//		|	МАКСИМУМ(OW_РаботаСотрудников.Период) КАК Start,
//		|	МИНИМУМ(OW_РаботаСотрудников.Период) КАК End,
//		|	OW_РаботаСотрудников.Сотрудник,
//		|	СУММА(1) КАК КолВо,
//		|	OW_РаботаСотрудников.ВидВремени
//		|ИЗ
//		|	РегистрСведений.OW_РаботаСотрудников КАК OW_РаботаСотрудников
//		|ГДЕ
//		|	OW_РаботаСотрудников.Период МЕЖДУ &началоПериода И &КонецПериода
//		|	И OW_РаботаСотрудников.ВидВремени В(&ВидВремени)
//		|	И OW_РаботаСотрудников.Сотрудник = &Сотрудник
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	OW_РаботаСотрудников.Сотрудник,
//		|	OW_РаботаСотрудников.ВидВремени";
//		ЗапросДВ.УстановитьПараметр("ВидВремени",НЕ_Работает1);	
//		ЗапросДВ.УстановитьПараметр("началоПериода",Тпер);	
//		ЗапросДВ.УстановитьПараметр("КонецПериода",КонецПериода);	
//		ЗапросД.Текст = "ВЫБРАТЬ
//		|	OW_СотояниеРаботниковОрганизации.Сотрудник,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 1) КАК КолВо
//		|ПОМЕСТИТЬ ВТ_ЗаСвойСчет
//		|ИЗ
//		|	РегистрСведений.OW_СотояниеРаботниковОрганизации КАК OW_СотояниеРаботниковОрганизации
//		|ГДЕ
//		|	OW_СотояниеРаботниковОрганизации.Период <= &НачалоПериода
//		|	И (OW_СотояниеРаботниковОрганизации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
//		|			ИЛИ OW_СотояниеРаботниковОрганизации.ДатаОкончания <= &началопериода)
//		|	И OW_СотояниеРаботниковОрганизации.Состояние = &Иностранец
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	OW_СотояниеРаботниковОрганизации.Сотрудник
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Сотрудники.Ссылка,
//		|	МАКСИМУМ(OW_КадроваяИсторияСрезПоследних.Период) КАК Период
//		|ПОМЕСТИТЬ ВТ_Данные1
//		|ИЗ
//		|	Справочник.Сотрудники КАК Сотрудники
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.OW_КадроваяИстория.СрезПоследних(&КонецПериода, ) КАК OW_КадроваяИсторияСрезПоследних
//		|		ПО (OW_КадроваяИсторияСрезПоследних.Сотрудник = Сотрудники.Ссылка)
//		|ГДЕ
//		|	(Сотрудники.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
//		|			ИЛИ Сотрудники.OW_ДатаУвольнения >= &НачалоПериода1)
//		|	И Сотрудники.OW_Организация В(&Организация)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	Сотрудники.Ссылка
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Сотрудники.OW_Организация КАК Organization,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление, &ПустоеНапр) = &ПустоеНапр
//		|			ТОГДА Сотрудники.OW_Подразделение.НаправлениеДеятельности
//		|		ИНАЧЕ HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление
//		|	КОНЕЦ КАК Departmental,
//		|	ВЫБОР
//		|		КОГДА Сотрудники.OW_Должность.НаименованиеНаАнгл = """"
//		|			ТОГДА Сотрудники.OW_Должность.Наименование
//		|		ИНАЧЕ Сотрудники.OW_Должность.НаименованиеНаАнгл
//		|	КОНЕЦ КАК JobTitle,
//		|	Сотрудники.OW_ДатаПриема КАК StartDate,
//		|	Сотрудники.OW_ДатаУвольнения КАК EndDate,
//		|	""employee"" КАК Status,
//		|	ВЫБОР
//		|		КОГДА Сотрудники.Физлицо.НаименованиеНаАнгл = """"
//		|			ТОГДА Сотрудники.Физлицо.Наименование
//		|		ИНАЧЕ Сотрудники.Физлицо.НаименованиеНаАнгл
//		|	КОНЕЦ КАК NameEN,
//		|	Сотрудники.OW_Организация.Регион КАК Region,
//		|	МАКСИМУМ(РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ) + 1) КАК КолВоМесяцев,
//		|	Сотрудники.OW_Подразделение.Регион КАК Office,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка, 0) = 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ЗаСвойСчет.КолВо = 1
//		|						ТОГДА 0
//		|					ИНАЧЕ ВЫБОР
//		|							КОГДА ВЫБОР
//		|									КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|										ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|									ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|								КОНЕЦ = 0
//		|								ТОГДА Сотрудники.OW_ГрафикРаботы.Коэффициент
//		|							ИНАЧЕ ВЫБОР
//		|									КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|										ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|									ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|								КОНЕЦ
//		|						КОНЕЦ
//		|				КОНЕЦ
//		|		ИНАЧЕ HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка
//		|	КОНЕЦ КАК ЗанимаемыхСтавоК,
//		|	ВЫБОР
//		|		КОГДА ВТ_ЗаСвойСчет.КолВо = 1
//		|			ТОГДА 0
//		|		ИНАЧЕ ВЫБОР
//		|				КОГДА ВЫБОР
//		|						КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|							ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|						ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|					КОНЕЦ * 1 = 0
//		|					ТОГДА Сотрудники.OW_ГрафикРаботы.Коэффициент
//		|				ИНАЧЕ ВЫБОР
//		|						КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|							ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|						ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|					КОНЕЦ * 1
//		|			КОНЕЦ
//		|	КОНЕЦ КАК FullTime,
//		|	МАКСИМУМ(Сотрудники.Ссылка) КАК Ссылка,
//		|	Сотрудники.OW_ГрафикРаботы.Коэффициент,
//		|	OW_КадроваяИсторияСрезПоследних.Период,
//		|	МАКСИМУМ(ВТ_Данные1.Ссылка) КАК Ссылка1
//		|ПОМЕСТИТЬ ВТ_Данные
//		|ИЗ
//		|	Справочник.Сотрудники КАК Сотрудники
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.OW_КадроваяИстория.СрезПоследних(&КонецПериода, ) КАК OW_КадроваяИсторияСрезПоследних
//		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Данные1 КАК ВТ_Данные1
//		|			ПО OW_КадроваяИсторияСрезПоследних.Период = ВТ_Данные1.Период
//		|				И OW_КадроваяИсторияСрезПоследних.Сотрудник = ВТ_Данные1.Ссылка
//		|				И OW_КадроваяИсторияСрезПоследних.Организация = ВТ_Данные1.Ссылка.OW_Организация
//		|		ПО (OW_КадроваяИсторияСрезПоследних.Сотрудник = Сотрудники.Ссылка)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаСвойСчет КАК ВТ_ЗаСвойСчет
//		|		ПО (ВТ_ЗаСвойСчет.Сотрудник = Сотрудники.Ссылка)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.HR_СтавкаСотрудникаНаДату.СрезПоследних(&КонецПериода, ) КАК HR_СтавкаСотрудникаНаДатуСрезПоследних
//		|		ПО (HR_СтавкаСотрудникаНаДатуСрезПоследних.Сотрудник = Сотрудники.Ссылка)
//		|ГДЕ
//		|	(Сотрудники.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
//		|			ИЛИ Сотрудники.OW_ДатаУвольнения >= &НачалоПериода1)
//		|	И Сотрудники.OW_Организация В(&Организация)
//		|	И ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Период, """") <> """"
//		|	И ЕСТЬNULL(ВТ_Данные1.Период, """") <> """"
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	Сотрудники.OW_Организация,
//		|	ВЫБОР
//		|		КОГДА Сотрудники.OW_Должность.НаименованиеНаАнгл = """"
//		|			ТОГДА Сотрудники.OW_Должность.Наименование
//		|		ИНАЧЕ Сотрудники.OW_Должность.НаименованиеНаАнгл
//		|	КОНЕЦ,
//		|	Сотрудники.OW_ДатаПриема,
//		|	Сотрудники.OW_ДатаУвольнения,
//		|	ВЫБОР
//		|		КОГДА Сотрудники.Физлицо.НаименованиеНаАнгл = """"
//		|			ТОГДА Сотрудники.Физлицо.Наименование
//		|		ИНАЧЕ Сотрудники.Физлицо.НаименованиеНаАнгл
//		|	КОНЕЦ,
//		|	Сотрудники.OW_Организация.Регион,
//		|	Сотрудники.OW_Подразделение.Регион,
//		|	Сотрудники.OW_ГрафикРаботы.Коэффициент,
//		|	ВЫБОР
//		|		КОГДА ВТ_ЗаСвойСчет.КолВо = 1
//		|			ТОГДА 0
//		|		ИНАЧЕ ВЫБОР
//		|				КОГДА ВЫБОР
//		|						КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|							ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|						ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|					КОНЕЦ * 1 = 0
//		|					ТОГДА Сотрудники.OW_ГрафикРаботы.Коэффициент
//		|				ИНАЧЕ ВЫБОР
//		|						КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|							ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|						ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|					КОНЕЦ * 1
//		|			КОНЕЦ
//		|	КОНЕЦ,
//		|	OW_КадроваяИсторияСрезПоследних.Период,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка, 0) = 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ЗаСвойСчет.КолВо = 1
//		|						ТОГДА 0
//		|					ИНАЧЕ ВЫБОР
//		|							КОГДА ВЫБОР
//		|									КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|										ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|									ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|								КОНЕЦ = 0
//		|								ТОГДА Сотрудники.OW_ГрафикРаботы.Коэффициент
//		|							ИНАЧЕ ВЫБОР
//		|									КОГДА ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок) = 0
//		|										ТОГДА Сотрудники.ЗанимаемыхСтавок
//		|									ИНАЧЕ ЕСТЬNULL(OW_КадроваяИсторияСрезПоследних.Ставка, Сотрудники.ЗанимаемыхСтавок)
//		|								КОНЕЦ
//		|						КОНЕЦ
//		|				КОНЕЦ
//		|		ИНАЧЕ HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка
//		|	КОНЕЦ,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление, &ПустоеНапр) = &ПустоеНапр
//		|			ТОГДА Сотрудники.OW_Подразделение.НаправлениеДеятельности
//		|		ИНАЧЕ HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление
//		|	КОНЕЦ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	OW_РаботаСотрудников.Период,
//		|	OW_РаботаСотрудников.ВидВремени,
//		|	OW_РаботаСотрудников.Сотрудник
//		|ПОМЕСТИТЬ ВТ_НужныеСостояния
//		|ИЗ
//		|	РегистрСведений.OW_РаботаСотрудников КАК OW_РаботаСотрудников
//		|ГДЕ
//		|	OW_РаботаСотрудников.Период МЕЖДУ &НачалоПериода И &КонецПериода
//		|	И OW_РаботаСотрудников.ВидВремени В(&Состояние)
//		|	И OW_РаботаСотрудников.Основание = НЕОПРЕДЕЛЕНО
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	МИНИМУМ(ВЫБОР
//		|			КОГДА ВТ_НужныеСостояния.Период < &Началопериода
//		|				ТОГДА &Началопериода
//		|			ИНАЧЕ ВТ_НужныеСостояния.Период
//		|		КОНЕЦ) КАК Период,
//		|	МАКСИМУМ(ВТ_НужныеСостояния.ВидВремени) КАК ВидВремени,
//		|	ВТ_НужныеСостояния.Сотрудник
//		|ПОМЕСТИТЬ ВТ_Рабоатет
//		|ИЗ
//		|	ВТ_НужныеСостояния КАК ВТ_НужныеСостояния
//		|ГДЕ
//		|	ВТ_НужныеСостояния.ВидВремени В(&СостояниеРаботает)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_НужныеСостояния.Сотрудник
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	МАКСИМУМ(ВЫБОР
//		|			КОГДА ВТ_НужныеСостояния.Период > &Конецпериода
//		|				ТОГДА &Конецпериода
//		|			ИНАЧЕ ВТ_НужныеСостояния.Период
//		|		КОНЕЦ) КАК Период,
//		|	МАКСИМУМ(ВТ_НужныеСостояния.ВидВремени) КАК ВидВремени,
//		|	ВТ_НужныеСостояния.Сотрудник
//		|ПОМЕСТИТЬ ВТ_НЕ_Рабоатет
//		|ИЗ
//		|	ВТ_НужныеСостояния КАК ВТ_НужныеСостояния
//		|ГДЕ
//		|	ВТ_НужныеСостояния.ВидВремени В(&НЕ_Работает)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_НужныеСостояния.Сотрудник
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Рабоатет.Сотрудник,
//		|	МАКСИМУМ(ВЫБОР
//		|			КОГДА ВТ_Рабоатет.Период < &Началопериода
//		|				ТОГДА &Началопериода
//		|			ИНАЧЕ ВТ_Рабоатет.Период
//		|		КОНЕЦ) КАК ДатаРаботы,
//		|	МАКСИМУМ(ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНеРаботы
//		|ПОМЕСТИТЬ ВТ_РаботаНеРабота
//		|ИЗ
//		|	ВТ_Рабоатет КАК ВТ_Рабоатет
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_Рабоатет.Сотрудник
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	ВТ_НЕ_Рабоатет.Сотрудник,
//		|	ВЫБОР
//		|		КОГДА ВТ_НЕ_Рабоатет.Период > &Конецпериода
//		|			ТОГДА &Конецпериода
//		|		ИНАЧЕ ВТ_НЕ_Рабоатет.Период
//		|	КОНЕЦ,
//		|	ДАТАВРЕМЯ(1, 1, 1)
//		|ИЗ
//		|	ВТ_НЕ_Рабоатет КАК ВТ_НЕ_Рабоатет
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Данные.Organization,
//		|	ВТ_Данные.Departmental,
//		|	МАКСИМУМ(ВТ_Данные.JobTitle) КАК JobTitle,
//		|	МИНИМУМ(ВТ_Данные.StartDate) КАК StartDate,
//		|	МИНИМУМ(ВТ_Данные.EndDate) КАК EndDate,
//		|	ВТ_Данные.Status,
//		|	ВТ_Данные.NameEN,
//		|	ВТ_Данные.Region,
//		|	ВТ_Данные.КолВоМесяцев,
//		|	ВТ_Данные.Office,
//		|	СРЕДНЕЕ(ВЫБОР
//		|			КОГДА ЕСТЬNULL(OW_СотояниеРаботниковОрганизацииСрезПоследних.Состояние, """") <> """"
//		|				ТОГДА 1
//		|			ИНАЧЕ ВТ_Данные.ЗанимаемыхСтавоК
//		|		КОНЕЦ) КАК ЗанимаемыхСтавок,
//		|	СРЕДНЕЕ(ВЫБОР
//		|			КОГДА ЕСТЬNULL(OW_СотояниеРаботниковОрганизацииСрезПоследних.Состояние, """") <> """"
//		|				ТОГДА 1
//		|			ИНАЧЕ ВТ_Данные.FullTime
//		|		КОНЕЦ * ВЫБОР
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА 1
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(&началопериода, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, &КонецПериода, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			ИНАЧЕ 1
//		|		КОНЕЦ) КАК FullTime,
//		|	СРЕДНЕЕ(ВЫБОР
//		|			КОГДА ЕСТЬNULL(OW_СотояниеРаботниковОрганизацииСрезПоследних.Состояние, """") <> """"
//		|				ТОГДА 1
//		|			ИНАЧЕ ВТ_Данные.FullTime
//		|		КОНЕЦ * ВЫБОР
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА 1
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(&началопериода, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, &КонецПериода, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) <> &НачалоПериода
//		|				ТОГДА (РАЗНОСТЬДАТ(&началопериода, ВТ_РаботаНеРабота.ДатаНеРаботы, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаРаботы, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_РаботаНеРабота.ДатаРаботы, &КонецПериода, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) = &НачалоПериода
//		|				ТОГДА 0
//		|			ИНАЧЕ 1
//		|		КОНЕЦ) КАК FullTime_2,
//		|	ВТ_РаботаНеРабота.ДатаРаботы,
//		|	ВТ_РаботаНеРабота.ДатаНеРаботы,
//		|	МАКСИМУМ(ВЫБОР
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаНеРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА 1
//		|			КОГДА ВТ_Данные.StartDate <= &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаНеРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(&началопериода, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаНеРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, ВТ_Данные.EndDate, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			КОГДА ВТ_Данные.StartDate > &НачалоПериода
//		|					И ВТ_Данные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|					И ВТ_РаботаНеРабота.ДатаНеРаботы = ДАТАВРЕМЯ(1, 1, 1)
//		|				ТОГДА (РАЗНОСТЬДАТ(ВТ_Данные.StartDate, &КонецПериода, ДЕНЬ) + 1) / ВТ_Данные.КолВоМесяцев
//		|			ИНАЧЕ 1
//		|		КОНЕЦ) КАК Коэффициент,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
//		|				И ЕСТЬNULL(ВТ_РаботаНеРабота.ДатаНеРаботы, ДАТАВРЕМЯ(1, 1, 1)) <> &НачалоПериода
//		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ВТ_РаботаНеРабота.ДатаНеРаботы)
//		|		ИНАЧЕ """"
//		|	КОНЕЦ КАК Comment,
//		|	МАКСИМУМ(ВТ_Данные.Ссылка) КАК Ссылка
//		|ПОМЕСТИТЬ ВТ_ПолныеДагнные
//		|ИЗ
//		|	ВТ_Данные КАК ВТ_Данные
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.OW_СотояниеРаботниковОрганизации.СрезПоследних(&КонецПериода, Состояние = &Состояние1) КАК OW_СотояниеРаботниковОрганизацииСрезПоследних
//		|		ПО ВТ_Данные.Ссылка = OW_СотояниеРаботниковОрганизацииСрезПоследних.Сотрудник
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаботаНеРабота КАК ВТ_РаботаНеРабота
//		|		ПО ВТ_Данные.Ссылка = ВТ_РаботаНеРабота.Сотрудник
//		|ГДЕ
//		|	ВТ_Данные.StartDate <> ДАТАВРЕМЯ(1, 1, 1)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_Данные.Organization,
//		|	ВТ_Данные.Departmental,
//		|	ВТ_Данные.Status,
//		|	ВТ_Данные.NameEN,
//		|	ВТ_Данные.Region,
//		|	ВТ_Данные.КолВоМесяцев,
//		|	ВТ_Данные.Office,
//		|	ВТ_РаботаНеРабота.ДатаРаботы,
//		|	ВТ_РаботаНеРабота.ДатаНеРаботы
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_ПолныеДагнные.NameEN,
//		|	ВТ_ПолныеДагнные.Status,
//		|	ВТ_ПолныеДагнные.Region,
//		|	ВТ_ПолныеДагнные.Office,
//		|	ВТ_ПолныеДагнные.Departmental,
//		|	ВТ_ПолныеДагнные.StartDate,
//		|	ВТ_ПолныеДагнные.EndDate,
//		|	ВТ_ПолныеДагнные.ЗанимаемыхСтавок * 1 КАК FullTimeAll,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.FullTime_2 < 0
//		|						ТОГДА 0
//		|					КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|						ТОГДА 1
//		|					ИНАЧЕ ВТ_ПолныеДагнные.FullTime_2
//		|				КОНЕЦ
//		|		ИНАЧЕ ВЫБОР
//		|				КОГДА ВТ_ПолныеДагнные.FullTime < 0
//		|					ТОГДА 0
//		|				КОГДА ВТ_ПолныеДагнные.FullTime > 1
//		|					ТОГДА 1
//		|				ИНАЧЕ ВТ_ПолныеДагнные.FullTime
//		|			КОНЕЦ
//		|	КОНЕЦ КАК FullTime,
//		|	ВТ_ПолныеДагнные.ДатаРаботы,
//		|	ВТ_ПолныеДагнные.ДатаНеРаботы,
//		|	ВТ_ПолныеДагнные.КолВоМесяцев,
//		|	ВТ_ПолныеДагнные.JobTitle,
//		|	ВТ_ПолныеДагнные.Коэффициент,
//		|	ВТ_ПолныеДагнные.Comment,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.RD)
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_RD,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.Implementation) 
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_Delivery,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.Support)
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_Support,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.Sales) 
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_Sales,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.Admin)
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_Admin,
//		|	ВТ_ПолныеДагнные.Ссылка,
//		|	ВЫБОР
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 0
//		|			ТОГДА ВЫБОР
//		|					КОГДА ВТ_ПолныеДагнные.Departmental = ЗНАЧЕНИЕ(Справочник.OW_НаправлениеДеятельности.HQ) 
//		|						ТОГДА ВТ_ПолныеДагнные.FullTime_2
//		|					ИНАЧЕ 0
//		|				КОНЕЦ
//		|		КОГДА ВТ_ПолныеДагнные.FullTime_2 > 1
//		|			ТОГДА 1
//		|		ИНАЧЕ 0
//		|	КОНЕЦ КАК Time_HQ
//		|ПОМЕСТИТЬ ВТ_П_ИТОГ
//		|ИЗ
//		|	ВТ_ПолныеДагнные КАК ВТ_ПолныеДагнные
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_П_ИТОГ.NameEN КАК NameEN,
//		|	ВТ_П_ИТОГ.Status,
//		|	ВТ_П_ИТОГ.Region,
//		|	ВТ_П_ИТОГ.Office,
//		|	ВТ_П_ИТОГ.Departmental,
//		|	ВТ_П_ИТОГ.StartDate,
//		|	ВТ_П_ИТОГ.EndDate,
//		|	МИНИМУМ(ВТ_П_ИТОГ.FullTime) КАК FullTime,
//		|	МАКСИМУМ(ВТ_П_ИТОГ.ДатаРаботы) КАК ДатаРаботы,
//		|	МАКСИМУМ(ВТ_П_ИТОГ.ДатаНеРаботы) КАК ДатаНеРаботы,
//		|	ВТ_П_ИТОГ.КолВоМесяцев,
//		|	ВТ_П_ИТОГ.JobTitle,
//		|	ВТ_П_ИТОГ.Коэффициент,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_RD) КАК Time_RD,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_Delivery) КАК Time_Delivery,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_Support) КАК Time_Support,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_Sales) КАК Time_Sales,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_Admin) КАК Time_Admin,
//		|	"""" КАК Comment,
//		|	ВТ_П_ИТОГ.Ссылка,
//		|	МИНИМУМ(ВЫБОР
//		|			КОГДА ВТ_П_ИТОГ.FullTimeAll = 0
//		|				ТОГДА ВЫБОР
//		|						КОГДА ВТ_П_ИТОГ.EndDate = ДАТАВРЕМЯ(1, 1, 1)
//		|							ТОГДА ВТ_П_ИТОГ.Ссылка.ЗанимаемыхСтавок
//		|						ИНАЧЕ ВТ_П_ИТОГ.FullTimeAll
//		|					КОНЕЦ
//		|			ИНАЧЕ ВЫБОР
//		|					КОГДА ВТ_П_ИТОГ.Ссылка.ЗанимаемыхСтавок <> 0
//		|						ТОГДА ВТ_П_ИТОГ.Ссылка.ЗанимаемыхСтавок
//		|					ИНАЧЕ ВТ_П_ИТОГ.FullTimeAll
//		|				КОНЕЦ
//		|		КОНЕЦ) КАК FullTimeAll,
//		|	ВТ_П_ИТОГ.Ссылка.OW_Организация.OW_NameForEn КАК Company,
//		|	МИНИМУМ(ВТ_П_ИТОГ.Time_HQ) КАК Time_HQ
//		|ИЗ
//		|	ВТ_П_ИТОГ КАК ВТ_П_ИТОГ
//		|ГДЕ
//		|	ВЫБОР
//		|			КОГДА &ПоОтбору
//		|				ТОГДА ВТ_П_ИТОГ.Departmental В (&Departmental)
//		|			ИНАЧЕ ИСТИНА
//		|		КОНЕЦ
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_П_ИТОГ.EndDate,
//		|	ВТ_П_ИТОГ.JobTitle,
//		|	ВТ_П_ИТОГ.NameEN,
//		|	ВТ_П_ИТОГ.Office,
//		|	ВТ_П_ИТОГ.Region,
//		|	ВТ_П_ИТОГ.StartDate,
//		|	ВТ_П_ИТОГ.Status,
//		|	ВТ_П_ИТОГ.КолВоМесяцев,
//		|	ВТ_П_ИТОГ.Коэффициент,
//		|	ВТ_П_ИТОГ.Departmental,
//		|	ВТ_П_ИТОГ.Ссылка,
//		|	ВТ_П_ИТОГ.Ссылка.OW_Организация.OW_NameForEn
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	NameEN"; 
//		
//		ЗапросД.УстановитьПараметр("НачалоПериода",Тпер);
//		ЗапросД.УстановитьПараметр("ПустоеНапр",Справочники.OW_НаправлениеДеятельности.ПустаяСсылка());         
//		ЗапросД.УстановитьПараметр("Организация",ListOfCompanies);
//		ЗапросД.УстановитьПараметр("КонецПериода",КонецПериода);
//		
//		ЗапросДанныеНапрвления.УстановитьПараметр("Начало",Тпер);
//		ЗапросДанныеНапрвления.УстановитьПараметр("Конец",КонецДня(КонецПериода));
//		ТаблицаСНаправлениями = ЗапросДанныеНапрвления.Выполнить().Выгрузить();
//		
//		Departmental = Новый СписокЗначений;
//		ЗапросД.УстановитьПараметр("ПоОтбору",ложь);
//		
//		
//		ЗапросД.УстановитьПараметр("Departmental",Departmental);
//		
//		//****Запрос коэф
//		ЗапросКоэф = Новый Запрос;
//		ЗапросКоэф.Текст ="ВЫБРАТЬ
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Сотрудник,
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Направление,
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Коэф КАК Коэф,
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Ставка
//		|ИЗ
//		|	РегистрСведений.HR_СтавкаСотрудникаНаДату.СрезПоследних(&Период, ) КАК HR_СтавкаСотрудникаНаДатуСрезПоследних
//		|ГДЕ
//		|	HR_СтавкаСотрудникаНаДатуСрезПоследних.Сотрудник.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)";
//		ЗапросКоэф.УстановитьПараметр("Период",КонецПериода);
//		ТабКоэфПоСотр = ЗапросКоэф.выполнить().Выгрузить();
//		
//		
//		
//		ТекВыборкаД = ЗапросД.Выполнить().Выбрать();
//		Пока ТекВыборкаД.Следующий() Цикл
//			НС = ТаблицаHC.Добавить();
//			НС.Name				=ТекВыборкаД.Ссылка; 	
//			НС.Job				=ТекВыборкаД.JobTitle;
//			//	Попытка
//			НС.Full				=ТекВыборкаД.FullTimeAll*100;
//			//	Исключение
//			//		НС.Full				=0;
//			//	КонецПопытки;
//			НС.Status			=ТекВыборкаД.Status;
//			НС.Company			=ТекВыборкаД.Ссылка.OW_Организация.OW_NameForEn;
//			НС.StartDate		=ТекВыборкаД.StartDate;
//			НС.EnDate			=ТекВыборкаД.EndDate;
//			//Попытка
//			НС.FTE1				=?((Цел(ТекВыборкаД.FullTime*100))=1,0,ТекВыборкаД.FullTime*100);	
//			//	Исключение
//			//	НС.FTE1				=0;
//			//	КонецПопытки;
//			
//			НС.FTE2				=0;	
//			НС.Departmental		=ТекВыборкаД.Departmental;	
//			НС.Region			=ТекВыборкаД.Region;
//			НС.Comment			=ТекВыборкаД.Comment;	
//			НС.RD1				=?((Цел(ТекВыборкаД.Time_RD*100))=1,0,ТекВыборкаД.Time_RD*100);	
//			НС.Implementation1	=?((Цел(ТекВыборкаД.Time_Delivery*100))=1,0,ТекВыборкаД.Time_Delivery*100);	
//			НС.Client1			=?((Цел(ТекВыборкаД.Time_Support*100))=1,0,ТекВыборкаД.Time_Support*100);
//			НС.Sales1			=?((Цел(ТекВыборкаД.Time_Sales*100))=1,0,ТекВыборкаД.Time_Sales*100);	
//			НС.Admin1			=?((Цел(ТекВыборкаД.Time_Admin*100))=1,0,ТекВыборкаД.Time_Admin*100);	
//			НС.HQ1				=?((Цел(ТекВыборкаД.Time_HQ*100))=1,0,ТекВыборкаД.Time_HQ*100);;	
//			НС.check1			=Ложь;	
//			НС.Office			=ТекВыборкаД.Office;
//			ЗапросСтавка.УстановитьПараметр("Сотрудник",ТекВыборкаД.Ссылка);
//			ЗапросСтавка.УстановитьПараметр("Период",ПрошлыйПериодКонец);
//			ТВСтавка = ЗапросСтавка.Выполнить().Выгрузить();
//			Если ТВСтавка.Количество()>0 Тогда
//				НС.Full = ТВСтавка.Получить(0).Ставка*100;
//				НС.Departmental = ?(ЗначениеЗаполнено(ТВСтавка.Получить(0).Направление),ТВСтавка.Получить(0).Направление,НС.Departmental);
//			иначе
//				НС.Full = НС.Full;
//			КонецЕсли;   
//			
//			Отбор = Новый Структура();
//			Отбор.Вставить("Сотрудник",ТекВыборкаД.Ссылка);
//			
//			Строки = ТаблицаСНаправлениями.НайтиСтроки(Отбор);
//			Если Строки.Количество() > 0 Тогда
//				НС.RD1				=Строки[0].RD*100*ТекВыборкаД.FullTime;	
//				НС.Implementation1	=Строки[0].Delivery*100*ТекВыборкаД.FullTime;	
//				НС.Client1			=Строки[0].Support*100*ТекВыборкаД.FullTime;
//				НС.Sales1			=Строки[0].Sales*100*ТекВыборкаД.FullTime;	
//				НС.Admin1			=Строки[0].Admin*100*ТекВыборкаД.FullTime;	
//				НС.HQ1				=Строки[0].HQ*100*ТекВыборкаД.FullTime;	
//				НС.check1			=Истина;
//				
//			КонецЕсли; 
//			
//			Строка2=ТабКоэфПоСотр.НайтиСтроки(Отбор);
//			Если Строка2.Количество()>0 Тогда
//				Направление = Строка2.Получить(0).Направление;
//				Если (НС.RD1+НС.Implementation1+НС.Client1+НС.Admin1+НС.HQ1)=0 Тогда
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Admin") Тогда
//						НС.Admin1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.RD") Тогда
//						НС.RD1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Implementation") Тогда
//						НС.Implementation1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Sales") Тогда
//						НС.Sales1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.HQ") Тогда
//						НС.HQ1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Support") Тогда
//						НС.Client1			=  Строка2.Получить(0).Ставка*100;
//					КонецЕсли; 
//					
//				Иначе
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Admin") Тогда
//						НС.Admin1		=  НС.Admin1*Строка2.Получить(0).Коэф;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.RD") Тогда
//						НС.RD1			=  НС.RD1*Строка2.Получить(0).Коэф;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Implementation") Тогда
//						НС.Implementation1	=  НС.Implementation1*Строка2.Получить(0).Коэф;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Sales") Тогда
//						НС.Sales1		= НС.Sales1* Строка2.Получить(0).Коэф;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.HQ") Тогда
//						НС.HQ1			= НС.HQ1* Строка2.Получить(0).Коэф;
//					КонецЕсли;
//					Если Направление = ПредопределенноеЗначение("Справочник.OW_НаправлениеДеятельности.Support") Тогда
//						НС.Client1		=  НС.Client1*Строка2.Получить(0).Коэф;
//					КонецЕсли; 
//					
//				КонецЕсли;
//			КонецЕсли;
//			
//			
//		КонецЦикла;
//		
//		
//		ТаблицаHC.Сортировать("Company ВОЗР, Name ВОЗР");
//		ТаблицаHC1= ТаблицаHC.Скопировать();
//		ТаблицаHC1.Очистить();
//		Для Каждого СтрД из ТаблицаHC цикл
//			Если НЕ СтрД.check1 Тогда
//				НС = ТаблицаHC1.Добавить();
//				ЗаполнитьЗначенияСвойств(НС,СтрД);			
//			КонецЕсли;
//		КонецЦикла;
//		
//		Для Каждого СтрД1 из ТаблицаHC1 цикл
//			Если (СтрД1.RD1 +  СтрД1.Implementation1 + СтрД1.Client1+ СтрД1.Sales1+СтрД1.Admin1+СтрД1.HQ1)<>0 Тогда
//				Если СтрД1.Name.OW_ДатаУвольнения<> ДАТА("00010101") тогда
//					Если НачалоМесяца(Тпер)>НачалоМесяца(СтрД1.Name.OW_ДатаУвольнения) тогда
//						Продолжить;
//					КонецЕсли;
//				КонецЕсли;
//				ЗНК=1;
//				Если (СтрД1.RD1 +  СтрД1.Implementation1 + СтрД1.Client1+ СтрД1.Sales1+СтрД1.Admin1+СтрД1.HQ1)<=3.3 Тогда
//					ЗНК=0;
//				КонецЕсли;
//				
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.Admin;
//				НЗ.Значение  =ЗНК*СтрД1.Admin1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);
//				//***************
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.Implementation;
//				НЗ.Значение  =ЗНК*СтрД1.Implementation1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);
//				
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.Sales;
//				НЗ.Значение  =ЗНК*СтрД1.Sales1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);
//				
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.Support;
//				НЗ.Значение  =ЗНК*СтрД1.Client1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);  
//				
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.RD;
//				НЗ.Значение  =ЗНК*СтрД1.RD1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);
//				
//				НЗ = РегистрыСведений.HR_ВовлеченноcтьСотрудникаПоНаправлению.СоздатьМенеджерЗаписи();
//				НЗ.Период = Тпер;
//				НЗ.Сотрудник = СтрД1.Name;
//				НЗ.Направление = Справочники.OW_НаправлениеДеятельности.HQ;
//				НЗ.Значение  =ЗНК*СтрД1.HQ1/100; 
//				НЗ.Проверить  =Ложь;
//				НЗ.АвтоматическаяКорректировка=Истина;
//				НЗ.Записать(Истина);
//				//*************** 
//			КонецЕсли;
//		КонецЦикла;
//		Тпер = ДобавитьМесяц(Тпер,1);
//	КонецЦикла;
//	Если КонецДня(ТекущаяДата())=КонецМесяца(ТекущаяДата()) тогда     	
//		ЗапросД = Новый Запрос;
//		ЗапросД.Текст =  "ВЫБРАТЬ
//		|	ПользователиКонтактнаяИнформация.Ссылка,
//		|	ПользователиКонтактнаяИнформация.Представление КАК Email
//		|ИЗ
//		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
//		|ГДЕ
//		|	ПользователиКонтактнаяИнформация.Ссылка.OW_РассылкаОтчетаПоFTE
//		|	И ПользователиКонтактнаяИнформация.вид.Наименование = ""Email""";
//		ТВП = ЗапросД.Выполнить().Выбрать();
//		Пока ТВП.Следующий() Цикл
//			Тема = "HR FTE "+формат(ТекущаяДата(),"ДФ='MMMM yyyy'");
//			ТекстПисьма="";
//			СписокПолучателейСтрока = ТВП.Email;
//			Вложения = Новый Соответствие;
//			//формируем структуру письма 	
//			ПараметрыПисьма = Новый Структура;
//			ПараметрыПисьма.Вставить("Тема", Тема);
//			ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
//			ПараметрыПисьма.Вставить("Кому", СписокПолучателейСтрока);
//			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
//			
//			ТОФ = Обработки.HR_FTE_ПоСотрудникам.Создать();
//			ТекТаб = ТВП.Ссылка.OW_ДоступныеНаправления.выгрузить();
//			СписокНапр = ТекТаб.выгрузитьКолонку("Направление");
//			ТекСписокЗ = Новый СписокЗначений;
//			ТекСписокЗ.ЗагрузитьЗначения(СписокНапр);
//			
//			ТекТаб = ТОФ.СоздатьТабДокумент(ТекСписокЗ,"",НачалоМесяца(ТекущаяДата()),"",ТВП.Ссылка);
//			ИмяФайла = "HR FTE "+формат(ТекущаяДата(),"ДФ='MMMM yyyy'")+".XLSX";
//			ПолныйПутьКФайлу = КаталогВременныхФайлов()+ ИмяФайла;
//			ТекТаб.Записать(ПолныйПутьКФайлу,ТипФайлаТабличногоДокумента.XLSX);
//			
//			//++OW Копачев А.С. 07.09.2022 ONEC-7882
//			//Вложения.Вставить("HR FTE "+формат(ТекущаяДата(),"ДФ='MMMM yyyy'")+".XLSX",Новый ДвоичныеДанные(""+КаталогВременныхФайлов()+"HR FTE "+формат(ТекущаяДата(),"ДФ='MMMM yyyy'")+".XLSX"));
//			//ПараметрыПисьма.Вставить("Вложения", Вложения);
//			//
//			////отправляем письмо
//			//Попытка 
//			//	РаботаСПочтовымиСообщениями.ОтправитьСообщение(РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
//			//Исключение
//			//	КомментарийСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ошибка при отправке уведомления об " +Тема+": %1",ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			//КонецПопытки; 
//			
//			Вложения = Новый СписокЗначений;
//			Вложения.Добавить(Новый ДвоичныеДанные(ПолныйПутьКФайлу),ИмяФайла);
//
//			СписокАдресовКому = Новый СписокЗначений;	
//			СписокАдресовКому.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолучателейСтрока,";"));
//			OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресовКому,,,,, Неопределено,Вложения,,Неопределено);	
//			//--OW Копачев А.С. 07.09.2022 ONEC-7882
//			
//			УдалитьФайлы(""+КаталогВременныхФайлов()+"HR FTE "+формат(ТекущаяДата(),"ДФ='MMMM yyyy'")+".XLSX");
//			
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры
//
//
//Функция ПоказатьСотрудниковДляМаринго() Экспорт
//	Возврат ПараметрыСеанса.ТекущийПользователь.СотрудникиДляMaringo;
//КонецФункции
//
//
//Функция ВыбранКорректныйПользователь(Значение) Экспорт
//	//+ Пилюгин В.Е. 08.12.2016
//	Возврат Значение <> OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательНеУказан);
//	//- Пилюгин В.Е. 08.12.2016
//КонецФункции
//
//
////функция возвращает Массив клиентов, которые доступны пользователю
//Функция ПолучитьКлиентовДоступныхПользователю(Пользователь, БезТестовыхКлиентов = Истина, БезПомеченныхНаУдалениеКлиентов = Истина) Экспорт
//	//+ Пилюгин В.Е. 13.01.2017
//	
//	МассивКлиентов = Новый Массив;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ПраваДоступаПользователейККлиентам.Клиент.Ссылка КАК Клиент
//	|ИЗ
//	|	Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентам
//	|ГДЕ
//	|	ПраваДоступаПользователейККлиентам.Ссылка.Владелец = &Пользователь
//	|	//#БезТестовыхКлиентов#
//	|	//#БезПомеченныхНаУдалениеКлиентов#";
//	
//	Запрос.УстановитьПараметр("Пользователь",Пользователь);
//	
//	Если БезТестовыхКлиентов = Истина Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#БезТестовыхКлиентов#", "И НЕ ПраваДоступаПользователейККлиентам.Клиент.ТестовыйКлиент"); 			
//	КонецЕсли;
//	
//	Если БезПомеченныхНаУдалениеКлиентов = Истина Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#БезПомеченныхНаУдалениеКлиентов#", "И НЕ ПраваДоступаПользователейККлиентам.Клиент.ПометкаУдаления"); 			
//	КонецЕсли;
//	
//	Выборка = Запрос.Выполнить();
//	Если НЕ Выборка.Пустой() Тогда
//		МассивКлиентов = Выборка.Выгрузить().ВыгрузитьКолонку("Клиент"); 
//	КонецЕсли;
//	
//	Возврат МассивКлиентов
//	
//	//+ Пилюгин В.Е. 13.01.2017
//КонецФункции
//
//
////-------------------------------- Статистика использования объектов метаданных --------------------------------
//Процедура ЗаписатьСобытиеВСтатистику(Тип, ОбъектМетаданных, ДопНазвание = "", Событие, Пользователь = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 24.01.2017
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, ПараметрыСеанса.ТекущийПользователь);
//	
//	Если ОбъектМетаданных = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Тип) ИЛИ НЕ ЗначениеЗаполнено(Событие) Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	нЗапись = РегистрыСведений.OW_СтатистикаИспользованияОбъектов.СоздатьМенеджерЗаписи();
//	нЗапись.Период = ТекущаяДата();
//	нЗапись.ТипОбъекта = Тип;
//	//Если Тип = Перечисления.OW_ТипыОбъектовМетаданных.ОбщаяФорма Тогда
//	нЗапись.Название = ОбъектМетаданных.Имя;
//	нЗапись.Синоним = ОбъектМетаданных.Синоним;
//	//КонецЕсли; 
//	нЗапись.ДопНазвание = ДопНазвание;
//	нЗапись.Событие = Событие;
//	нЗапись.Пользователь = Пользователь;
//	нЗапись.Записать(Истина);
//	//- Пилюгин В.Е. 24.01.2017
//КонецПроцедуры
////-------------------------------- Статистика использования объектов метаданных --------------------------------
//
////-------------------------------- Работа с признаком OWI-шности клиента //--------------------------------
//Функция ЭтоКлиентOWI(Клиент) Экспорт
//	//+ Пилюгин В.Е. 08.02.2017     
//	Если Клиент.БизнесРегион = Справочники.БизнесРегионы.Asia ИЛИ Клиент.БизнесРегион = Справочники.БизнесРегионы.Europe ИЛИ Клиент.БизнесРегион = Справочники.БизнесРегионы.MiddleEast Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли; 
//	//- Пилюгин В.Е. 08.02.2017
//КонецФункции
//
//Функция ПолучитьСписокБизнесРегионов_OWI() Экспорт
//	//+ Пилюгин В.Е. 08.02.2017
//	Список = Новый СписокЗначений;
//	Список.Добавить(Справочники.БизнесРегионы.Asia);
//	Список.Добавить(Справочники.БизнесРегионы.Europe);
//	Список.Добавить(Справочники.БизнесРегионы.MiddleEast);
//	Возврат Список;	
//	//- Пилюгин В.Е. 08.02.2017
//КонецФункции
//
//Функция ПолучитьСписокБизнесРегионов_RUSCIS(ТолькоКлиентские = Ложь) Экспорт 
//	//+ Пилюгин В.Е. 08.02.2017
//	Список = Новый СписокЗначений;
//	Список.Добавить(Справочники.БизнесРегионы.CIS);
//	Список.Добавить(Справочники.БизнесРегионы.RUS);
//	Список.Добавить(Справочники.БизнесРегионы.RUS_CIS);
//	Если ТолькоКлиентские = Ложь Тогда 
//		Список.Добавить(Справочники.БизнесРегионы.Internal);
//		Список.Добавить(Справочники.БизнесРегионы.Lost);
//		Список.Добавить(Справочники.БизнесРегионы.OpenWay);
//	КонецЕсли;
//	
//	Возврат Список;	
//	//- Пилюгин В.Е. 08.02.2017
//КонецФункции
//
////-------------------------------- Работа с признаком OWI-шности клиента //--------------------------------
//
//
//Процедура OW_КорректировкаСтарогоПостинга() Экспорт
//	//ЗапросПостинг = Новый Запрос;
//	//ЗапросПостинг.Текст =  "ВЫБРАТЬ
//	//                       |	МАКСИМУМ(НАЧАЛОПЕРИОДА(OW_ОтработанноеВремяПоПроектамРазработки.ДатаПроверки, ДЕНЬ)) КАК Период,
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.Проект
//	//                       |ПОМЕСТИТЬ ВТ_проекты
//	//                       |ИЗ
//	//                       |	РегистрСведений.OW_ОтработанноеВремяПоПроектамРазработки КАК OW_ОтработанноеВремяПоПроектамРазработки
//	//                       |
//	//                       |СГРУППИРОВАТЬ ПО
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.Проект
//	//                       |;
//	//                       |
//	//                       |////////////////////////////////////////////////////////////////////////////////
//	//                       |ВЫБРАТЬ
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.Проект,
//	//                       |	НАЧАЛОПЕРИОДА(OW_ОтработанноеВремяПоПроектамРазработки.ДатаПроверки, ДЕНЬ) КАК ПериодП,
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.User,
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.Период,
//	//                       |	OW_ОтработанноеВремяПоПроектамРазработки.ДатаОбновления
//	//                       |ИЗ
//	//                       |	РегистрСведений.OW_ОтработанноеВремяПоПроектамРазработки КАК OW_ОтработанноеВремяПоПроектамРазработки
//	//                       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_проекты КАК ВТ_проекты
//	//                       |		ПО OW_ОтработанноеВремяПоПроектамРазработки.Проект = ВТ_проекты.Проект
//	//                       |			И (НАЧАЛОПЕРИОДА(OW_ОтработанноеВремяПоПроектамРазработки.ДатаПроверки, ДЕНЬ) = ВТ_проекты.Период)
//	//                       |ГДЕ
//	//                       |	НЕ OW_ОтработанноеВремяПоПроектамРазработки.Старый
//	//                       |	И ВТ_проекты.Период ЕСТЬ NULL ";
//	//ТВ = ЗапросПостинг.Выполнить().Выбрать(); 
//	//Пока ТВ.Следующий() Цикл
//	//	НЗ = РегистрыСведений.OW_ОтработанноеВремяПоПроектамРазработки.СоздатьНаборЗаписей();
//	//	НЗ.Отбор.Период.Использование=Истина;
//	//	НЗ.Отбор.Период.Значение=ТВ.Период;
//	//	//****
//	//	НЗ.Отбор.User.Использование=Истина;
//	//	НЗ.Отбор.User.Значение=ТВ.User;
//	//	//****
//	//	НЗ.Отбор.ДатаОбновления.Использование=Истина;
//	//	НЗ.Отбор.ДатаОбновления.Значение=ТВ.ДатаОбновления;
//	//	//****
//	//	НЗ.Отбор.Проект.Использование=Истина;
//	//	НЗ.Отбор.Проект.Значение=ТВ.Проект;
//	//	//****
//	//	НЗ.Прочитать();
//	//	Для Каждого СтрП из НЗ Цикл
//	//		СтрП.Старый=Истина;
//	//	КонецЦикла;
//	//	НЗ.Записать(истина);
//	//КонецЦикла;
//КонецПроцедуры
//
//Функция ПолучитьДатуКвартала(НомерКвартала, ДатаГода) Экспорт
//	//+ Пилюгин В.Е. 10.05.2017
//	Год = Год(ДатаГода);
//	Если НомерКвартала = 1 Тогда
//		Возврат Дата(Год, 1, 1); 
//	ИначеЕсли НомерКвартала = 2 Тогда
//		Возврат Дата(Год, 4, 1); 
//	ИначеЕсли НомерКвартала = 3 Тогда
//		Возврат Дата(Год, 7, 1); 
//	ИначеЕсли НомерКвартала = 4 Тогда
//		Возврат Дата(Год, 10, 1); 
//	КонецЕсли; 
//	//- Пилюгин В.Е. 10.05.2017
//КонецФункции
//
//Функция ПолучитьКонфигурациюЛицензийДляКлиентаДляВыгрузкиCRM(КлиентДляВыгрузкиCRM) Экспорт
//	//+ Пилюгин В.Е. 10.04.2017
//	Если НЕ ЗначениеЗаполнено(КлиентДляВыгрузкиCRM) Тогда
//		Возврат Неопределено;
//	КонецЕсли; 
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КонфигурацииЛицензий.Ссылка
//	|ИЗ
//	|	Справочник.КонфигурацииЛицензий КАК КонфигурацииЛицензий
//	|ГДЕ
//	//++OW Копачев А.С. 15.03.2023 ONEC-6185
//	//|	КонфигурацииЛицензий.КлиентДляВыгрузкиВCRM = &КлиентДляВыгрузкиВCRM";
//	|	КонфигурацииЛицензий.УдалитьКлиентДляВыгрузкиВCRM = &КлиентДляВыгрузкиВCRM";
//	//++OW Копачев А.С. 15.03.2023 ONEC-6185
//	Запрос.УстановитьПараметр("КлиентДляВыгрузкиВCRM", КлиентДляВыгрузкиCRM);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли; 	
//	//- Пилюгин В.Е. 10.04.2017
//КонецФункции
//
//Функция ПолучитьКлиентаДляВыгрузкиCRM(Код)  Экспорт
//	//+ Пилюгин В.Е. 12.05.2017
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КлиентДляВыгрузкиВCRM.Ссылка
//	|ИЗ
//	//++OW Копачев А.С. 15.03.2023 ONEC-6185	
//	//|	Справочник.КлиентДляВыгрузкиВCRM КАК КлиентДляВыгрузкиВCRM
//	|	Справочник.УдалитьКлиентДляВыгрузкиВCRM КАК КлиентДляВыгрузкиВCRM
//	//--OW Копачев А.С. 15.03.2023 ONEC-6185
//	|ГДЕ
//	|	КлиентДляВыгрузкиВCRM.Код = &Код
//	|	И НЕ КлиентДляВыгрузкиВCRM.ПометкаУдаления";
//	Запрос.УстановитьПараметр("Код", Строка(Код));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли; 
//	//- Пилюгин В.Е. 12.05.2017		
//КонецФункции
//
//Функция ПолучитьКонтрагентаПоКодамМаринго(КодОрганизации, КодКонтрагента) Экспорт
//	//+ Пилюгин В.Е. 26.05.2017
//	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
//	|		ПО Контрагенты.ОрганизацияДляСинхронизацииСMaringo = Организации.Ссылка
//	|ГДЕ
//	|	Контрагенты.CodeSAP = &КодКонтрагента
//	|	И Организации.CodeSap = &КодОрганизации";
//	Запрос.УстановитьПараметр("КодОрганизации", КодОрганизации);
//	Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Контрагент = Выборка.Ссылка;
//		
//	Иначе
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	КонтрагентыКодыSAP.Ссылка
//		|ИЗ
//		|	Справочник.Контрагенты.КодыSAP КАК КонтрагентыКодыSAP
//		|ГДЕ
//		|	КонтрагентыКодыSAP.CodeSAP = &КодКонтрагента
//		|	И КонтрагентыКодыSAP.Организация.CodeSap = &КодОрганизации";
//		Запрос.УстановитьПараметр("КодОрганизации", КодОрганизации);
//		Запрос.УстановитьПараметр("КодКонтрагента", КодКонтрагента);
//		РезультатЗапроса = Запрос.Выполнить();
//		Выборка = РезультатЗапроса.Выбрать();
//		Если Выборка.Следующий() Тогда
//			Контрагент = Выборка.Ссылка;
//		КонецЕсли;
//		
//	КонецЕсли; 
//	
//	Возврат Контрагент;
//	//- Пилюгин В.Е. 26.05.2017
//КонецФункции
//
//Функция ПолучитьВнутреннегоКлиентаПоИдентификаторуМаринго(Идентификатор) Экспорт
//	//+ Пилюгин В.Е. 24.07.2017
//	Клиент = Справочники.Партнеры.ПустаяСсылка();
//	СписокКлиентов = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.СоответствиеВнутреннихКлиентовМаринго, ТекущаяДата(), Идентификатор);
//	Если СписокКлиентов.Количество() > 0 Тогда
//		Клиент = СписокКлиентов[0].Значение;
//	КонецЕсли; 
//	Возврат Клиент;
//	//- Пилюгин В.Е. 24.07.2017
//КонецФункции
//
//Функция ПолучитьМассивОфицеровПоПользователю(Пользователь) Экспорт
//	//+ Пилюгин В.Е. 29.05.2017
//	МассивОфицеров = Новый Массив;
//	Если НЕ ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
//		Возврат МассивОфицеров;
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	OW_Officers.Ссылка КАК Офицер
//	|ИЗ
//	|	Справочник.OW_Officers КАК OW_Officers
//	|ГДЕ
//	|	OW_Officers.Пользователь = &Пользователь
//	|	И НЕ OW_Officers.ПометкаУдаления";
//	
//	//"ВЫБРАТЬ
//	//|	Пользователи.ФизическоеЛицо,
//	//|	Пользователи.Ссылка КАК Пользователь
//	//|ПОМЕСТИТЬ ВТ_ФизЛицо
//	//|ИЗ
//	//|	Справочник.Пользователи КАК Пользователи
//	//|ГДЕ
//	//|	Пользователи.Ссылка = &Ссылка
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	КонтактныеЛицаИзCRM.Ссылка
//	//|ПОМЕСТИТЬ ВТ
//	//|ИЗ
//	//|	ВТ_ФизЛицо КАК ВТ_ФизЛицо
//	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаИзCRM КАК КонтактныеЛицаИзCRM
//	//|		ПО ВТ_ФизЛицо.ФизическоеЛицо.СсылкаНаКонтактноеЛицоИзCRM = КонтактныеЛицаИзCRM.Ссылка
//	//|;
//	//|
//	//|////////////////////////////////////////////////////////////////////////////////
//	//|ВЫБРАТЬ
//	//|	OW_Officers.Ссылка КАК Офицер
//	//|ИЗ
//	//|	Справочник.OW_Officers КАК OW_Officers
//	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
//	//|		ПО OW_Officers.ПользовательCRM = ВТ.Ссылка";
//	
//	Запрос.УстановитьПараметр("Пользователь", Пользователь);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		МассивОфицеров.Добавить(Выборка.Офицер);		
//	КонецЦикла; 
//	Возврат МассивОфицеров;
//	//- Пилюгин В.Е. 29.05.2017
//КонецФункции
//
//Функция ПолучитьКомандуВнедренияПоПользователю(Пользователь) Экспорт
//	//+ Пилюгин В.Е. 29.05.2017
//	КомандаВнедрения = Справочники.OW_Team.ПустаяСсылка();
//	
//	МассивОфицеров = ПолучитьМассивОфицеровПоПользователю(Пользователь);
//	Если МассивОфицеров.Количество() = 0 Тогда
//		Возврат КомандаВнедрения;
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	OW_TeamOfficers.Ссылка
//	|ИЗ
//	|	Справочник.OW_Team.Officers КАК OW_TeamOfficers
//	|ГДЕ
//	|	OW_TeamOfficers.Officer В(&МассивОфицеров)
//	|	И OW_TeamOfficers.Ссылка.Внедрение";
//	Запрос.УстановитьПараметр("МассивОфицеров", МассивОфицеров);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		КомандаВнедрения = Выборка.Ссылка;
//		Если НЕ Выборка.Ссылка.ПометкаУдаления Тогда
//			Прервать;
//		КонецЕсли; 
//	КонецЦикла; 
//	
//	Возврат КомандаВнедрения;
//	//- Пилюгин В.Е. 29.05.2017
//КонецФункции
//
//Функция ПолучитьПартнераПоКастомеруJIRA(КастомерJIRA) Экспорт 	
//	//+ Пилюгин В.Е. 20.06.2017
//	Если ПустаяСтрока(КастомерJIRA) Тогда
//		Возврат Справочники.Партнеры.ПустаяСсылка();
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Партнеры.Ссылка
//	|ИЗ
//	|	Справочник.Партнеры КАК Партнеры
//	|ГДЕ
//	|	НЕ Партнеры.ПометкаУдаления
//	|	И Партнеры.НаименованиеНаАнглийском = &НаименованиеНаАнглийском";
//	Запрос.УстановитьПараметр("НаименованиеНаАнглийском", Лев(КастомерJIRA,1000));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;	
//	КонецЕсли; 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Партнеры.Ссылка
//	|ИЗ
//	|	Справочник.Партнеры КАК Партнеры
//	|ГДЕ
//	|	НЕ Партнеры.ПометкаУдаления
//	|	И (Партнеры.НаименованиеARM = &НаименованиеARM
//	//++OW Копачев А.С. 14.03.2023 ONEC-6185
//	|		ИЛИ Партнеры.НаименованиеДляJIRA = &НаименованиеARM)
//	//--OW Копачев А.С. 14.03.2023 ONEC-6185	
//	|";
//	Запрос.УстановитьПараметр("НаименованиеARM", Лев(КастомерJIRA,1000));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;	
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 14.03.2023 ONEC-6185
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
//	//"ВЫБРАТЬ
//	//|	КлиентДляВыгрузкиВCRM.Владелец.Ссылка
//	//|ИЗ
//	//|	Справочник.КлиентДляВыгрузкиВCRM КАК КлиентДляВыгрузкиВCRM
//	//|ГДЕ
//	//|	КлиентДляВыгрузкиВCRM.Наименование = &Наименование
//	//|	И НЕ КлиентДляВыгрузкиВCRM.ПометкаУдаления";
//	//Запрос.УстановитьПараметр("Наименование", Лев(КастомерJIRA,1000));
//	//РезультатЗапроса = Запрос.Выполнить();
//	//Выборка = РезультатЗапроса.Выбрать();
//	//Если Выборка.Следующий() Тогда
//	//	Возврат Выборка.ВладелецСсылка;	
//	//КонецЕсли;	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КонфигурацииЛицензий.Владелец КАК Ссылка
//	|ИЗ
//	|	Справочник.КонфигурацииЛицензий КАК КонфигурацииЛицензий
//	|ГДЕ
//	|	КонфигурацииЛицензий.Наименование = &Наименование
//	|	И НЕ КонфигурацииЛицензий.ПометкаУдаления";
//	Запрос.УстановитьПараметр("Наименование", Лев(КастомерJIRA,1000));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Ссылка;	
//	КонецЕсли;
//	//--OW Копачев А.С. 14.03.2023 ONEC-6185
//		
//	//+++Проверка по справочнику клиентов JIRA 	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	OW_КлиентыJIRA.Партнер
//	|ИЗ
//	|	Справочник.OW_КлиентыJIRA КАК OW_КлиентыJIRA
//	|ГДЕ
//	|	OW_КлиентыJIRA.Наименование = &Наименование";
//	Запрос.УстановитьПараметр("Наименование", Лев(КастомерJIRA,1000));
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Партнер;	
//	КонецЕсли; 
//	
//	Если СтрНайти(КастомерJIRA, ",") <> 0 Тогда
//		МассивКастомеров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КастомерJIRA, ",");
//		Для каждого эл Из МассивКастомеров Цикл
//			Кастомер = СокрЛП(эл);
//			Если нРег(Кастомер) = "openway" Тогда
//				Продолжить;
//			Иначе
//				Партнер = ПолучитьПартнераПоКастомеруJIRA(Кастомер);
//				Если ЗначениеЗаполнено(Партнер) Тогда
//					Возврат Партнер;
//				КонецЕсли; 
//			КонецЕсли; 
//		КонецЦикла; 
//	КонецЕсли; 
//	
//	Возврат Справочники.Партнеры.ПустаяСсылка();
//	//- Пилюгин В.Е. 20.06.2017
//КонецФункции
//
//Функция ПроверкаНаВыводДнейРождений() Экспорт
//	Возврат ПараметрыСеанса.ТекущийПользователь.ВыводитьДниРождения;
//КонецФункции
//
//Функция ПолучитьПодраздениеИОрганизациюУПользователя(Email) Экспорт
//	ЗапросС = Новый Запрос;
//	ЗапросС.УстановитьПараметр("Email",Email);
//	ЗапросС.УстановитьПараметр("ПОEmail",?(ЗначениеЗаполнено(Email),Истина,Ложь));
//	ЗапросС.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
//                     |  Сотрудники.Ссылка,
//                     |  Сотрудники.Физлицо,
//                     |  ФизическиеЛицаКонтактнаяИнформация.Представление,
//                     |  Сотрудники.OW_Подразделение КАК Подразделение,
//                     |  Сотрудники.OW_Организация КАК Организаия
//                     |ПОМЕСТИТЬ ВТ_Данные
//                     |ИЗ
//                     |  Справочник.Сотрудники КАК Сотрудники
//                     |      ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//                     |      ПО Сотрудники.Физлицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
//                     |          И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Email"")
//                     |          И (ФизическиеЛицаКонтактнаяИнформация.Представление <> """")
//                     |ГДЕ
//                     |  НЕ Сотрудники.Ссылка ЕСТЬ NULL
//                     |  И Сотрудники.OW_Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//                     |  И НЕ ФизическиеЛицаКонтактнаяИнформация.Представление ЕСТЬ NULL
//                     |  И НЕ Сотрудники.НеИспользуетсяДляОтчетовПоПостингу
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_Данные.Представление,
//                     |  КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Данные.Организаия) КАК КолВо
//                     |ПОМЕСТИТЬ ВТ_1
//                     |ИЗ
//                     |  ВТ_Данные КАК ВТ_Данные
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_Данные.Представление
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_1.Представление,
//                     |  ВТ_1.КолВо
//                     |ПОМЕСТИТЬ ВТ_2
//                     |ИЗ
//                     |  ВТ_1 КАК ВТ_1
//                     |ГДЕ
//                     |  ВТ_1.КолВо > 1
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_Данные.Ссылка,
//                     |  ВТ_Данные.Физлицо,
//                     |  ВТ_Данные.Представление,
//                     |  ВТ_Данные.Подразделение,
//                     |  ВТ_Данные.Организаия
//                     |ПОМЕСТИТЬ ВТ_Данные2
//                     |ИЗ
//                     |  ВТ_Данные КАК ВТ_Данные
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_2 КАК ВТ_2
//                     |      ПО ВТ_Данные.Представление = ВТ_2.Представление
//                     |ГДЕ
//                     |  ВЫБОР
//                     |          КОГДА ВТ_2.КолВо > 1
//                     |              ТОГДА ВТ_Данные.Ссылка.OW_ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
//                     |          ИНАЧЕ ИСТИНА
//                     |      КОНЕЦ
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Данные2.Организаия) КАК Организаия,
//                     |  ВТ_Данные2.Представление
//                     |ПОМЕСТИТЬ ВТ_3
//                     |ИЗ
//                     |  ВТ_Данные2 КАК ВТ_Данные2
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_Данные2.Представление
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_3.Организаия,
//                     |  ВТ_3.Представление
//                     |ПОМЕСТИТЬ ВТ_4
//                     |ИЗ
//                     |  ВТ_3 КАК ВТ_3
//                     |ГДЕ
//                     |  ВТ_3.Организаия > 1
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ЗНАЧЕНИЕ(Справочник.Организации.ОпенвэйСервис) КАК Организации,
//                     |  1 КАК Порядок
//                     |ПОМЕСТИТЬ ВТ_Приоритет
//                     |
//                     |ОБЪЕДИНИТЬ ВСЕ
//                     |
//                     |ВЫБРАТЬ
//                     |  ЗНАЧЕНИЕ(Справочник.Организации.OpenwayEurope),
//                     |  0
//                     |
//                     |ОБЪЕДИНИТЬ ВСЕ
//                     |
//                     |ВЫБРАТЬ
//                     |  ЗНАЧЕНИЕ(Справочник.Организации.OpenwayAsia),
//                     |  2
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_Данные2.Ссылка,
//                     |  ВТ_Данные2.Физлицо,
//                     |  ВТ_Данные2.Представление,
//                     |  ВТ_Данные2.Подразделение,
//                     |  ВТ_Данные2.Организаия,
//                     |  МИНИМУМ(ВЫБОР
//                     |          КОГДА ВТ_Приоритет.Порядок ЕСТЬ NULL
//                     |              ТОГДА 9
//                     |          ИНАЧЕ ВТ_Приоритет.Порядок
//                     |      КОНЕЦ) КАК Порядок
//                     |ПОМЕСТИТЬ ВТ_ПредДанные
//                     |ИЗ
//                     |  ВТ_Данные2 КАК ВТ_Данные2
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
//                     |      ПО ВТ_Данные2.Организаия = ВТ_Приоритет.Организации
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_Данные2.Физлицо,
//                     |  ВТ_Данные2.Ссылка,
//                     |  ВТ_Данные2.Представление,
//                     |  ВТ_Данные2.Подразделение,
//                     |  ВТ_Данные2.Организаия
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_ПредДанные.Представление,
//                     |  МИНИМУМ(ВТ_ПредДанные.Порядок) КАК Порядок
//                     |ПОМЕСТИТЬ ВТ_5
//                     |ИЗ
//                     |  ВТ_ПредДанные КАК ВТ_ПредДанные
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_ПредДанные.Представление
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_ПредДанные.Ссылка КАК Сотрудник,
//                     |  ВТ_ПредДанные.Физлицо,
//                     |  ВТ_ПредДанные.Представление КАК Email,
//                     |  ВТ_ПредДанные.Подразделение,
//                     |  ВТ_ПредДанные.Организаия,
//                     |  ВТ_ПредДанные.Порядок,
//                     |  ВТ_5.Порядок КАК Порядок1
//                     |ПОМЕСТИТЬ ВТ_ИТОГ
//                     |ИЗ
//                     |  ВТ_ПредДанные КАК ВТ_ПредДанные
//                     |      ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_5 КАК ВТ_5
//                     |      ПО ВТ_ПредДанные.Представление = ВТ_5.Представление
//                     |          И ВТ_ПредДанные.Порядок = ВТ_5.Порядок
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_ИТОГ.Сотрудник,
//                     |  ВТ_ИТОГ.Физлицо,
//                     |  ВТ_ИТОГ.Email,
//                     |  ВТ_ИТОГ.Подразделение,
//                     |  ВТ_ИТОГ.Организаия,
//                     |  ВТ_ИТОГ.Порядок,
//                     |  ВТ_ИТОГ.Порядок1,
//                     |  ВТ_ИТОГ.Сотрудник.OW_ДатаПриема КАК СотрудникOW_ДатаПриема
//                     |ИЗ
//                     |  ВТ_ИТОГ КАК ВТ_ИТОГ
//                     |ГДЕ
//                     |  ВЫБОР
//                     |          КОГДА &ПОEmail
//                     |              ТОГДА ВТ_ИТОГ.Email = &Email
//                     |          ИНАЧЕ ИСТИНА
//                     |      КОНЕЦ
//                     |
//                     |УПОРЯДОЧИТЬ ПО
//                     |  СотрудникOW_ДатаПриема УБЫВ" ;
//	
//	ТабСостояние = ЗапросС.Выполнить().Выгрузить();
//	Возврат ТабСостояние;		
//	
//КонецФункции
//
//Процедура OW_ОчисткаЛишнейИстории() Экспорт
//    Если не OW_ФоновыеЗадания.ПроверкаЧтоМожноЗапуститьРегЗадание() Тогда
//        Возврат;
//    КонецЕсли;
//    Задание = ow.ВренутьСсылкуНаПроверкуРегЗадания("OW_ОчисткаЛишнейИстории");
//    
//    Если ЗначениеЗаполнено(Задание) Тогда
//        OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Старт);
//    КонецЕсли; 
//     
//	ОчиститьВерсииОбъектов();
//	
//	// чистка данных старее 3 месяцев
//	ДоДаты = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -6);
//	
//	//++OW Копачев А.С. 29.11.2021 ONEC-5121 
//	ОчиститьЗаписиРегистраСведенийДоДаты("ЖурналОбменаДаннымиСВнешнимиСистемами", ДоДаты);
//	ОчиститьЗаписиРегистраСведенийДоДаты("ЖурналАвтоматическогоФормированияОтчетов", ДоДаты);
//	ОчиститьЗаписиРегистраСведенийДоДаты("OW_Ошибки", ДоДаты);
//	//--OW Копачев А.С. 29.11.2021 ONEC-5121 
//	
//    Если ЗначениеЗаполнено(Задание) Тогда
//	     OW_ФоновыеЗадания.ЗаписьВЛогКонтроляРегламентныхЗаданий(Задание,Перечисления.OW_СтатусыВыполненияРегламентныхЗаданий.Финиш);
//	КонецЕсли;
//КонецПроцедуры
//
//Процедура ОчиститьВерсииОбъектов() Экспорт
//   
//     
//	ЗапросИ = Новый Запрос;
//	ЗапросИ.Текст =  "ВЫБРАТЬ
//	|	ВерсииОбъектов.Объект,
//	|	ВерсииОбъектов.НомерВерсии,
//	|	ВерсииОбъектов.АвторВерсии,
//	|	ВерсииОбъектов.ДатаВерсии
//	|ПОМЕСТИТЬ ВТ_Д
//	|ИЗ
//	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
//	|ГДЕ
//	|	ВерсииОбъектов.ДатаВерсии МЕЖДУ &Начало И &Конец
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_Д.Объект,
//	|	ВТ_Д.АвторВерсии,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС) КАК Поле1
//	|ПОМЕСТИТЬ ВТ_Час
//	|ИЗ
//	|	ВТ_Д КАК ВТ_Д
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_Д.Объект,
//	|	ВТ_Д.АвторВерсии,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_Д.Объект,
//	|	МАКСИМУМ(ВТ_Д.НомерВерсии) КАК НомерВерсии,
//	|	ВТ_Д.АвторВерсии,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС) КАК Поле1,
//	|	ВТ_Час.Поле1 КАК Поле11
//	|ПОМЕСТИТЬ ВТ_ИтогЗаДень
//	|ИЗ
//	|	ВТ_Час КАК ВТ_Час
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Д КАК ВТ_Д
//	|		ПО ВТ_Час.Объект = ВТ_Д.Объект
//	|			И ВТ_Час.АвторВерсии = ВТ_Д.АвторВерсии
//	|			И (ВТ_Час.Поле1 = КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_Д.Объект,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС),
//	|	ВТ_Д.АвторВерсии,
//	|	ВТ_Час.Поле1
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ВТ_Д.Объект,
//	|	МИНИМУМ(ВТ_Д.НомерВерсии),
//	|	ВТ_Д.АвторВерсии,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС),
//	|	ВТ_Час.Поле1
//	|ИЗ
//	|	ВТ_Час КАК ВТ_Час
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Д КАК ВТ_Д
//	|		ПО ВТ_Час.Объект = ВТ_Д.Объект
//	|			И ВТ_Час.АвторВерсии = ВТ_Д.АвторВерсии
//	|			И (ВТ_Час.Поле1 = КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_Д.Объект,
//	|	КОНЕЦПЕРИОДА(ВТ_Д.ДатаВерсии, ЧАС),
//	|	ВТ_Д.АвторВерсии,
//	|	ВТ_Час.Поле1
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_ИтогЗаДень.Объект,
//	|	ВТ_ИтогЗаДень.НомерВерсии,
//	|	ВТ_ИтогЗаДень.АвторВерсии,
//	|	ВТ_ИтогЗаДень.Поле1,
//	|	ВТ_ИтогЗаДень.Поле11
//	|ПОМЕСТИТЬ ВТ_ИтогЗаДень1
//	|ИЗ
//	|	ВТ_ИтогЗаДень КАК ВТ_ИтогЗаДень
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_ИтогЗаДень.Объект,
//	|	ВТ_ИтогЗаДень.НомерВерсии,
//	|	ВТ_ИтогЗаДень.АвторВерсии,
//	|	ВТ_ИтогЗаДень.Поле1,
//	|	ВТ_ИтогЗаДень.Поле11
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_Д.Объект,
//	|	ВТ_Д.НомерВерсии,
//	|	ВТ_Д.АвторВерсии,
//	|	ВТ_Д.ДатаВерсии,
//	|	ВТ_ИтогЗаДень1.Поле1
//	|ИЗ
//	|	ВТ_Д КАК ВТ_Д
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИтогЗаДень1 КАК ВТ_ИтогЗаДень1
//	|		ПО ВТ_Д.Объект = ВТ_ИтогЗаДень1.Объект
//	|			И ВТ_Д.НомерВерсии = ВТ_ИтогЗаДень1.НомерВерсии
//	|			И ВТ_Д.АвторВерсии = ВТ_ИтогЗаДень1.АвторВерсии
//	|ГДЕ
//	|	ВТ_ИтогЗаДень1.Поле1 ЕСТЬ NULL " ;
//	ЗапросИ.УстановитьПараметр("Начало",НачалоГода(ТекущаяДата()));
//	ЗапросИ.УстановитьПараметр("Конец",КонецДня(ТекущаяДата()));
//	ТВ = ЗапросИ.Выполнить().Выбрать();
//	Пока ТВ.Следующий() Цикл
//		НЗ = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
//		НЗ.Отбор.Объект.Значение =ТВ.Объект; 
//		НЗ.Отбор.Объект.Использование =Истина;
//		НЗ.Отбор.НомерВерсии.Значение =ТВ.НомерВерсии; 
//		НЗ.Отбор.НомерВерсии.Использование =Истина;
//		//++OW Копачев А.С. 29.11.2021 ONEC-5121 
//		//НЗ.Прочитать();
//		//НЗ.Очистить();
//		//--OW Копачев А.С. 29.11.2021 ONEC-5121
//		НЗ.Записать(истина);
//    КонецЦикла;
//    
//КонецПроцедуры
//
////++OW Копачев А.С. 29.11.2021 ONEC-5121 
//Процедура ОчиститьЗаписиРегистраСведенийДоДаты(ИмяРегистра, ДоДаты, Порция = 10000) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =  
//	"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + " 
//	|	*
//	|ИЗ
//	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
//	|ГДЕ
//	|	РегистрСведений.Период < &ДоДаты
//	|;
//	|";
//	
//	Запрос.УстановитьПараметр("ДоДаты",ДоДаты);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда 
//		
//		ОбъектМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		сч = 0;
//		счОбщ = 0;
//		Всего = Выборка.Количество();
//
//		НачатьТранзакцию();
//
//		Пока Выборка.Следующий() Цикл
//			
//			счОбщ = счОбщ + 1;
//
//			Если сч = 10000 Тогда
//				ЗафиксироватьТранзакцию();
//				НачатьТранзакцию();
//				сч = 0;
//				
//			КонецЕсли;
//			
//			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
//		
//			Набор.Отбор.Период.Установить(Выборка.Период);
//			Для Каждого ТекИзмерение Из ОбъектМетаданных.Измерения Цикл
//				Набор.Отбор[ТекИзмерение.Имя].Установить(Выборка[ТекИзмерение.Имя]);
//			КонецЦикла; 
//			
//			Попытка
//				Набор.ОбменДанными.Загрузка = Истина;
//				Набор.Записать();
//			Исключение
//				
//				ТекстОшибки = "Набор регистра " + ИмяРегистра + " не записан. Подробности: " + ОписаниеОшибки();
//				OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Ошибка,
//										ТекстОшибки);
//					
//				Сообщить(ТекстОшибки);
//			КонецПопытки;
//
//		КонецЦикла;	
//		
//		Если ТранзакцияАктивна() Тогда 
//			ЗафиксироватьТранзакцию();
//		КонецЕсли;
//		
//		// следующая порция
//		ОчиститьЗаписиРегистраСведенийДоДаты(ИмяРегистра, ДоДаты, Порция);
//
//	КонецЕсли;	
//	    
//КонецПроцедуры
//
//Процедура ОчиститьЗаписиРегистраСведений(ИмяРегистра, Отбор = Неопределено, Порция = 10000) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =  
//	"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "
//	|	*
//	|ИЗ
//	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений
//	|
//	|//#ТекстОтбораРегистра#
//	|;
//	|";
//	
//	Если ТипЗнч(Отбор) = Тип("Структура") Тогда 		
//		
//		Если Отбор.Количество() > 0 Тогда 
//			МассивТекстовОтборов = Новый Массив;
//			Для Каждого ТекЭлемент Из Отбор Цикл
//				ИмяПараметра = ТекЭлемент.Ключ; 
//				МассивТекстовОтборов.Добавить("	РегистрСведений." + ИмяПараметра + " = &"+ ИмяПараметра);
//				Запрос.УстановитьПараметр(ИмяПараметра, ТекЭлемент.Значение);
//			КонецЦикла;
//			
//			ТекстОтбораРегистра = "ГДЕ
//									|" + СтрСоединить(МассивТекстовОтборов, " И ");
//			
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ТекстОтбораРегистра#", ТекстОтбораРегистра); 
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда 
//		
//		ОбъектМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
//		
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		сч = 0;
//		счОбщ = 0;
//		Всего = Выборка.Количество();
//
//		НачатьТранзакцию();
//
//		Пока Выборка.Следующий() Цикл
//			
//			счОбщ = счОбщ + 1;
//
//			Если сч = 10000 Тогда
//				ЗафиксироватьТранзакцию();
//				НачатьТранзакцию();
//				сч = 0;
//				
//			КонецЕсли;
//			
//			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
//		
//			Для Каждого ТекСтандартРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
//				Набор.Отбор[ТекСтандартРеквизит.Имя].Установить(Выборка[ТекСтандартРеквизит.Имя]);
//			КонецЦикла;
//			
//			Для Каждого ТекИзмерение Из ОбъектМетаданных.Измерения Цикл
//				Набор.Отбор[ТекИзмерение.Имя].Установить(Выборка[ТекИзмерение.Имя]);
//			КонецЦикла; 
//			
//			Попытка
//				Набор.ОбменДанными.Загрузка = Истина;
//				Набор.Записать();
//			Исключение
//				
//				ТекстОшибки = "Набор регистра " + ИмяРегистра + " не записан. Подробности: " + ОписаниеОшибки();
//				OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.РегламентныеЗадания, Справочники.OW_ТипыОшибок.Ошибка,
//										ТекстОшибки);
//					
//				Сообщить(ТекстОшибки);
//			КонецПопытки;
//
//		КонецЦикла;	
//		
//		Если ТранзакцияАктивна() Тогда 
//			ЗафиксироватьТранзакцию();
//		КонецЕсли;
//		
//		// следующая порция
//		ОчиститьЗаписиРегистраСведений(ИмяРегистра, Отбор, Порция);
//		
//	КонецЕсли;	
//	    
//КонецПроцедуры
////--OW Копачев А.С. 29.11.2021 ONEC-5121
//
//Процедура OW_ФоновоеЗаданиеПоПравам() Экспорт
//	OW_ПраваНаСервере.ПроверкаРолей();
//КонецПроцедуры
//
//Процедура УстановитьЗаголовокБазыПоРегистру() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ТекБаза =  НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");
//	ЗаголовокБазы = ЗаголовокБазыПоИмениИнформационнойБазы(ТекБаза);
//	Если ЗаголовокБазы <> Неопределено Тогда 
//		Если Константы.ЗаголовокСистемы.Получить()<>ЗаголовокБазы Тогда
//			Константы.ЗаголовокСистемы.Установить(ЗаголовокБазы);
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры
//
//Функция ЗаголовокБазыПоИмениИнформационнойБазы(ИмяИнформационнойБазы) Экспорт
//	
//	УстановитьПривилегированныйРежим(истина);
//	ЗапросПоиск = Новый Запрос;
//	ЗапросПоиск.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	|	OW_ЗагаловкиБазыДляКопий.Заголовок
//	|ИЗ
//	|	РегистрСведений.ЗаголовкиБазыДляКопий КАК OW_ЗагаловкиБазыДляКопий
//	|ГДЕ
//	|	OW_ЗагаловкиБазыДляКопий.ИмяБазыНаСервере = &ИмяБазыНаСервере" ;
//	ЗапросПоиск.УстановитьПараметр("ИмяБазыНаСервере",ИмяИнформационнойБазы);
//	Результат = ЗапросПоиск.Выполнить();
//	
//	Если Результат.Пустой() Тогда 
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Выборка = Результат.Выбрать();
//	Выборка.Следующий();
//	
//	Возврат Выборка.Заголовок;
//
//КонецФункции
//
//Функция ПроверитьЧтоЗадаемВопросПроКопию() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ТекБаза =  НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");
//	ЗапросПоиск = Новый Запрос;
//	ЗапросПоиск.Текст ="ВЫБРАТЬ
//                       |    OW_ЗагаловкиБазыДляКопий.Заголовок,
//                       |    OW_ЗагаловкиБазыДляКопий.НеЗадаватьВопросПроКопию
//                       |ИЗ
//                       |    РегистрСведений.ЗаголовкиБазыДляКопий КАК OW_ЗагаловкиБазыДляКопий
//                       |ГДЕ
//                       |    OW_ЗагаловкиБазыДляКопий.ИмяБазыНаСервере = &ИмяБазыНаСервере" ;
//	ЗапросПоиск.УстановитьПараметр("ИмяБазыНаСервере",ТекБаза);
//	Тв = ЗапросПоиск.Выполнить().Выбрать();
//	Пока Тв.Следующий() Цикл
//		Возврат не Тв.НеЗадаватьВопросПроКопию;
//    КонецЦикла;
//	Возврат истина;
//КонецФункции
//
//Функция ПроверитьЧтоВыводимПредупреждение() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ТекБаза =  НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");
//	ЗапросПоиск = Новый Запрос;
//	ЗапросПоиск.Текст ="ВЫБРАТЬ
//                       |    OW_ЗагаловкиБазыДляКопий.Заголовок,
//                       |    OW_ЗагаловкиБазыДляКопий.НеВыводитьПредупреждениеОЗавершении
//                       |ИЗ
//                       |    РегистрСведений.ЗаголовкиБазыДляКопий КАК OW_ЗагаловкиБазыДляКопий
//                       |ГДЕ
//                       |    OW_ЗагаловкиБазыДляКопий.ИмяБазыНаСервере = &ИмяБазыНаСервере"; 
//	ЗапросПоиск.УстановитьПараметр("ИмяБазыНаСервере",ТекБаза);
//	Тв = ЗапросПоиск.Выполнить().Выбрать();
//	Пока Тв.Следующий() Цикл
//		Возврат не Тв.НеВыводитьПредупреждениеОЗавершении;
//    КонецЦикла;
//	Возврат истина;
//КонецФункции
//
//Функция ПроверитьЯзыкПользователяИПоменять() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	Пров = Ложь;
//	//***У пользователя обязательно должен быть указан язык
//	Попытка
//		Если ТекущийЯзыкСистемы()<>ПользователиИнформационнойБазы.ТекущийПользователь().Язык.КодЯзыка Тогда
//			ТП = ПользователиИнформационнойБазы.ТекущийПользователь();
//			Если ТекущийЯзыкСистемы()=  "ru" Тогда
//				ТП.Язык= Метаданные.Языки.Русский;
//			Иначе
//				ТП.Язык= Метаданные.Языки.Английский;
//			КонецЕсли;
//			ТП.Записать();
//			Пров =Истина;
//		КонецЕсли;
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;
//	Возврат Пров;
//КонецФункции
//
//Процедура УдалитьФайлыИзМассива(МассивФайлов) Экспорт
//	//+ Пилюгин В.Е. 21.03.2018
//	Для каждого ф Из МассивФайлов Цикл
//		Попытка
//			УдалитьФайлы(ф);	
//		Исключение
//			Ошибка = ОписаниеОшибки()
//		КонецПопытки;
//	КонецЦикла; 
//	//- Пилюгин В.Е. 21.03.2018
//КонецПроцедуры
//
//Функция ТекущийЯзыкПользователяРусский() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    Возврат ПользователиИнформационнойБазы.ТекущийПользователь().Язык.КодЯзыка="ru";
//КонецФункции
////-------------------------------- Работа с шифрованием PGP-ключом файлов --------------------------------
//Процедура ЗашифроватьФайлPGP(ИмяФайла, ИмяКлюча) Экспорт
//	//+ Пилюгин В.Е. 29.08.2017
//	ИмяФайла = СокрЛП(ИмяФайла);
//	ИмяКлюча = СокрЛП(ИмяКлюча);
//	
//	Команда = "gpg --encrypt --trust-model always --recipient " + Символ(34) + ИмяКлюча + Символ(34) + " --output " + Символ(34)+ ИмяФайла + ".pgp" + Символ(34)+ " --yes " + ИмяФайла;	
//	ЗапуститьПриложение(Команда,,Истина,);
//	
//	//- Пилюгин В.Е. 29.08.2017
//КонецПроцедуры
//
////-------------------------------- Работа с шифрованием PGP-ключом файлов --------------------------------
//
//
////++++++++++++++++++++++++++++++++++++++++++++++ РАБОТА С JSON  ++++++++++++++++++++++++++++++++++++++++++++++
//
////ЧТЕНИЕ JSON////////////////////////////////////////////////////////
//Функция ПрочитатьJSONИзСтрокиПереопределяемый(Значение, ПрочитатьВСоответствие = Истина) Экспорт
//	//++OW Копачев А.С. 13.03.2019 ONEC-4362
//	Результат = Неопределено;
//	
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Значение);	
//	
//	Попытка
//		// сначала чтение штатными средствами
//		Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);	
//	Исключение	
//		// сервисное сообщение для анализа ошибок
//		Сообщить("Метод <ПрочитатьJSON(ЧтениеJSON)> вернул ошибку. Подробности: " + ОписаниеОшибки());
//		
//		Попытка
//			//чтение построчно 			
//			Если ПрочитатьВСоответствие = Истина Тогда 
//				// здесь метод всегда в соответсвие складывает данные
//				// доработать для структуры
//				СформироватьДерево(ЧтениеJSON, Результат);
//			КонецЕсли;	
//		Исключение
//		КонецПопытки;	
//	КонецПопытки;
//	
//	ЧтениеJSON.Закрыть();
//
//	Возврат Результат;
//	//--OW Копачев А.С. 13.03.2019 ONEC-4362
//КонецФункции	
//	
//Функция ПрочитатьJSONИзСтроки(Значение) Экспорт 
//	//+ Пилюгин В.Е. 17.10.2017
//	Попытка
//		ЧтениеJSON = Новый ЧтениеJSON;
//		ЧтениеJSON.Закрыть();
//	Исключение
//		Возврат Неопределено;
//	КонецПопытки;
//	
//	Попытка
//		Результат = jsonПрочитать(Значение);
//	Исключение
//		Результат = Неопределено;
//	КонецПопытки;
//	
//	Возврат Результат;
//	//- Пилюгин В.Е. 17.10.2017    
//КонецФункции 
//
//Функция jsonПрочитать(Значение)
//	//+ Пилюгин В.Е. 17.10.2017
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ЧтениеJSON.УстановитьСтроку(Значение);
//	
//	Результат = Неопределено;
//	СформироватьДерево(ЧтениеJSON, Результат);
//	
//	ЧтениеJSON.Закрыть();
//	
//	Возврат Результат;
//	//- Пилюгин В.Е. 17.10.2017
//КонецФункции
//
//Процедура СформироватьДерево(ЧтениеJSON, Дерево)
//	//+ Пилюгин В.Е. 17.10.2017
//	ИмяСвойства = Неопределено;
//	
//	Пока ЧтениеJSON.Прочитать() Цикл
//		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
//		
//		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта        
//			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда   
//			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
//			
//			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//				Дерево.Добавить(НовыйОбъект);
//			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
//				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
//			КонецЕсли;
//			
//			СформироватьДерево(ЧтениеJSON, НовыйОбъект);
//			
//			Если Дерево = Неопределено Тогда
//				Дерево = НовыйОбъект;
//			КонецЕсли;
//		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
//			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
//		ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
//			ИЛИ TипJSON = ТипЗначенияJSON.Строка 
//			ИЛИ TипJSON = ТипЗначенияJSON.Булево 
//			ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
//			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
//			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
//				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
//			КонецЕсли;
//		Иначе
//			Возврат;
//		КонецЕсли;
//	КонецЦикла;
//	//- Пилюгин В.Е. 17.10.2017    
//КонецПроцедуры
//
//Процедура СформироватьДерево_ДоПервойОшибки(ЧтениеJSON, Дерево, ЕстьДанные) Экспорт
//	
//	ИмяСвойства = Неопределено;
//	
//	Пока ЕстьДанные Цикл
//			 
//		Попытка
//			ЧтениеJSON.Прочитать();
//		Исключение
//			ЕстьДанные = Ложь;    
//		КонецПопытки;
//		
//		Если НЕ ЕстьДанные Тогда
//			Возврат;
//		КонецЕсли; 
//
//        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
//        
//        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта        
//        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда   
//            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
//            
//            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//                Дерево.Добавить(НовыйОбъект);
//            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
//                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
//            КонецЕсли;
//            
//            СформироватьДерево_ДоПервойОшибки(ЧтениеJSON, НовыйОбъект, ЕстьДанные);
//            
//            Если Дерево = Неопределено Тогда
//                Дерево = НовыйОбъект;
//            КонецЕсли;
//        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
//            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
//        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
//        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
//        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
//        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
//            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
//            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
//                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
//            КонецЕсли;
//        Иначе
//            Возврат;
//		КонецЕсли;
//		
//    КонецЦикла;
//   
//КонецПроцедуры
//
////ЗАПИСЬ JSON////////////////////////////////////////////////////////
//
//Функция ЗаписатьДанныеВJSON(Данные, ПараметрыЗаписиJSON = Неопределено, НастройкиСериализацииJSON = Неопределено) Экспорт
//	//++OW Копачев А.С. 14.03.2019  
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
//	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);	
//	СтрокаJSON = ЗаписьJSON.Закрыть();	
//	Возврат СтрокаJSON;
//	//--OW Копачев А.С. 14.03.2019 	
//КонецФункции
//
////---------------------------------------------- JSON парсер ----------------------------------------------
//
////++++++++++++++++++++++++++++++++++++++++++++++ РОЛИ ++++++++++++++++++++++++++++++++++++++++++++++
//
////Проверка на права
////+++ПолныеПрава
////+++Секретарь
////+++ПолныеПраваДляВзаиморасчетов
//Функция ПроверкаНаПлныеПраваДляДелопроизводства() Экспорт
//	Возврат (НЕ РольДоступна("ПолныеПрава") и не РольДоступна("Секретарь")  и не РольДоступна("ПолныеПраваДляВзаиморасчетов"));
//КонецФункции
//
////Проверка на права
////+++ПолныеПрава
////+++Взаиморасчеты
////+++ПолныеПраваДляВзаиморасчетов
//Функция ПроверкаНаПолныеПраваДляВзаиморасчетов() Экспорт
//	Возврат (Не РольДоступна("ПолныеПрава") И Не РольДоступна("Взаиморасчеты") и не РольДоступна("ПолныеПраваДляВзаиморасчетов") ) ;
//КонецФункции
//
////Проверка на права
////+++ПраваНаЧтение
////+++ARM
////+++ARM_Просмотр
////+++ARM_Asia
////+++ARM_Asia_Чтение
////+++ARM_Просмотр_ограниченный
////+++BRM
////+++BRM_Чтение
////+++GRM_Чтение
////+++GRM
////+++FIN_AcccessOWI_Чтение
////+++PreSaleOWI_Чтение
//Функция ПроверкаПравARMиДругие() Экспорт
//	Возврат (РольДоступна("ARM") ИЛИ РольДоступна("ARM_Asia") ИЛИ РольДоступна("ARM_Asia_Чтение") ИЛИ РольДоступна("ARM_Просмотр_ограниченный") ИЛИ РольДоступна("BRM") ИЛИ РольДоступна("BRM_Чтение") 
//	ИЛИ РольДоступна("GRM_Чтение") ИЛИ РольДоступна("GRM_ЧтениеОграниченное") ИЛИ РольДоступна("PM_ЧтениеБезОтчетов") или РольДоступна("ПраваНаЧтение")
//	ИЛИ РольДоступна("GRM") ИЛИ РольДоступна("FIN_AcccessOWI_Чтение") ИЛИ РольДоступна("PreSaleOWI_Чтение") ИЛИ РольДоступна("ПросмотрКлиентовОграчиченныйСписок"));
//КонецФункции
//
//
////Проверка на права
////+++ПраваНаЧтение
////+++ARM
////+++ARM_Просмотр
////+++ARM_Asia
////+++ARM_Asia_Чтение
////+++ARM_Просмотр_ограниченный
////+++ARM_ВыборочноеРедактирование
////+++ARM_ПросмотрДляПродуктовойГруппы
////+++OW_РаботаСПроектамиЭтапамиЗадачами
////+++OW_РаботаСПроектамиЭтапамиЗадачамиРазработки
////+++BRM
////+++BRM_Чтение
////+++GRM_Чтение
////+++GRM
////+++FIN_AcccessOWI_Чтение
////+++PreSaleOWI_Чтение
//Функция ПроверкаПравARMиДругие_ДляПроектов() Экспорт
//	Возврат ( РольДоступна("ПраваНаЧтение") ИЛИ РольДоступна("ARM") ИЛИ  РольДоступна("ARM_Просмотр") ИЛИ РольДоступна("ARM_Asia") ИЛИ РольДоступна("ARM_Asia_Чтение")
//	ИЛИ РольДоступна("ARM_Просмотр_ограниченный") ИЛИ РольДоступна("ARM_ВыборочноеРедактирование")
//	ИЛИ РольДоступна("ARM_ПросмотрДляПродуктовойГруппы") ИЛИ РольДоступна("OW_РаботаСПроектамиЭтапамиЗадачами") 
//	ИЛИ РольДоступна("OW_РаботаСПроектамиЭтапамиЗадачамиРазработки")
//	ИЛИ РольДоступна("BRM") ИЛИ РольДоступна("BRM_Чтение") 
//	ИЛИ РольДоступна("GRM_Чтение") ИЛИ РольДоступна("GRM_ЧтениеОграниченное") ИЛИ РольДоступна("PM_ЧтениеБезОтчетов") или РольДоступна("ПраваНаЧтение")
//	ИЛИ РольДоступна("GRM") ИЛИ РольДоступна("FIN_AcccessOWI_Чтение") ИЛИ РольДоступна("PreSaleOWI_Чтение")ИЛИ РольДоступна("ПросмотрКлиентовОграчиченныйСписок"));
//КонецФункции
//
////Проверка на права
////+++ПраваНаЧтение
////+++ARM
////+++ARM_Просмотр
////+++ARM_Asia
////+++ARM_Asia_Чтение
////+++ARM_Просмотр_ограниченный
////+++ARM_ВыборочноеРедактирование
////+++ARM_ПросмотрДляПродуктовойГруппы
////+++OW_РаботаСПроектамиЭтапамиЗадачами
////+++OW_РаботаСПроектамиЭтапамиЗадачамиРазработки
////+++BRM
////+++BRM_Чтение
////+++GRM_Чтение
////+++GRM
////+++FIN_AcccessOWI_Чтение
////+++ PreSaleOWI_Чтение
//Функция ПроверкаПравARM_BRMиДругие_ДляПроектов() Экспорт
//	Возврат (РольДоступна("ПраваНаЧтение") ИЛИ РольДоступна("ARM") ИЛИ  РольДоступна("ARM_Просмотр") ИЛИ РольДоступна("ARM_Asia") ИЛИ РольДоступна("ARM_Asia_Чтение") 
//	ИЛИ РольДоступна("ARM_Просмотр_ограниченный") ИЛИ РольДоступна("ARM_ВыборочноеРедактирование")
//	ИЛИ РольДоступна("ARM_ПросмотрДляПродуктовойГруппы") ИЛИ РольДоступна("OW_РаботаСПроектамиЭтапамиЗадачами") 
//	ИЛИ РольДоступна("OW_РаботаСПроектамиЭтапамиЗадачамиРазработки") ИЛИ РольДоступна("BRM") ИЛИ РольДоступна("BRM_Чтение") 
//	ИЛИ РольДоступна("PM_ЧтениеБезОтчетов") ИЛИ РольДоступна("GRM_Чтение") ИЛИ РольДоступна("GRM_ЧтениеОграниченное")
//	ИЛИ РольДоступна("GRM") ИЛИ РольДоступна("FIN_AcccessOWI_Чтение") ИЛИ РольДоступна("PreSaleOWI_Чтение")ИЛИ РольДоступна("ПросмотрКлиентовОграчиченныйСписок")); 	
//КонецФункции
//
//Процедура УстановитьОтборПартнераНаФорме(Список,Параметр1,Элементы,Список1="Список")  Экспорт
//	#Если НЕ ВнешнееСоединение Тогда
//		//++OW Копачев А.С. 23.03.2022 ONEC-7463
//		//Запрос=Новый Запрос;
//		//Запрос.Текст="ВЫБРАТЬ
//		//|	ПраваДоступаПользователейККлиентам.Клиент.Ссылка КАК Клиент
//		//|ИЗ
//		//|	Справочник.ПраваДоступаПользователейККлиентам.СписокКлиентов КАК ПраваДоступаПользователейККлиентам
//		//|ГДЕ
//		//|	ПраваДоступаПользователейККлиентам.Ссылка.Владелец = &Пользователь";
//		//
//		//Запрос.УстановитьПараметр("Пользователь",Пользователи.АвторизованныйПользователь());
//		//	
//		//Выборка=Запрос.Выполнить();
//		//Если Не Выборка.Пустой() Тогда
//		//	СтруктураОтбора=Выборка.Выгрузить().ВыгрузитьКолонку("Клиент");
//		//	Элементы[Список1].Отображение = ОтображениеТаблицы.Список;
//		//	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, Параметр1, СтруктураОтбора,
//		//	Истина, ВидСравненияКомпоновкиДанных.ВСписке);
//		//КонецЕсли;
//		
//		МассивКлиентов = ПолучитьКлиентовДоступныхПользователю(Пользователи.АвторизованныйПользователь(), Ложь, Ложь);
//		Элементы[Список1].Отображение = ОтображениеТаблицы.Список;
//		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, Параметр1, МассивКлиентов, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
//		//--OW Копачев А.С. 23.03.2022 ONEC-7463
//	#КонецЕсли
//КонецПроцедуры
//
//
////Проверка на права НЕ
////+++ПраваНаЧтение
////+++ARM
////+++ARM_Просмотр
////+++ARM_Asia
////+++ARM_Asia_Чтение
//Функция НеРольARM() Экспорт
//	Возврат (Не РольДоступна("ARM") И НЕ РольДоступна("ARM_Asia") И НЕ РольДоступна("ARM_Asia_Чтение"));
//КонецФункции
//
////Проверка на права НЕ
////+++ПолныеПрава
////+++ПраваНаЧтениеДляОтделаВнедрения
////+++Взаиморасчеты
////+++ПраваEnglish
////+++ПолныеПраваТолькоРоссийскиеКомпании
////+++ПолныеПраваДляВзаиморасчетов
//Функция НеВсеПолныеПрава() Экспорт
//	Возврат (Не РольДоступна("ПолныеПрава") 
//	//++OW Копачев А.С. 23.03.2022 ONEC-7463
//	//И Не РольДоступна("ПраваНаЧтениеДляОтделаВнедрения") 
//	//--OW Копачев А.С. 23.03.2022 ONEC-7463
//	И Не  РольДоступна("Взаиморасчеты") 
//	И Не РольДоступна("ПраваEnglish") 
//	И Не (РольДоступна("ПолныеПраваТолькоРоссийскиеКомпании") и не РольДоступна("ПросмотрКлиентовОграчиченныйСписок"))
//	И Не РольДоступна("ПолныеПраваДляВзаиморасчетов") 
//	и OW_ПраваНаСервере.НЕ_ПроверкаНаОграничениеРолиПоОргнаизации())
//КонецФункции
//
//
////Проверка на права НЕ
////+++ПолныеПрава
////+++Взаиморасчеты
////+++ARM_ВыборочноеРедактирование
////+++ПросмотрИнфыПоВсемБанкам
////+++ПолныеПраваДляВзаиморасчетов
//Функция НеПолныеПраваИПросмотрИнформации() Экспорт
//	Возврат (НЕ РольДоступна("ПолныеПрава") И Не РольДоступна("Взаиморасчеты") И Не РольДоступна("ARM_ВыборочноеРедактирование") И Не РольДоступна("ПросмотрИнфыПоВсемБанкам") И Не РольДоступна("ПолныеПраваДляВзаиморасчетов"));
//КонецФункции
//
//Функция ПроверкаНАARM_ВсеБанки_И_ВсеКураторы() Экспорт
//	Возврат (РольДоступна("ARM") И Не РольДоступна("ПросмотрИнфыПоВсемБанкам") И РольДоступна("Кураторы"))
//КонецФункции
//
//Функция ПроверкаНАARM_не_ВсеБанки_И_НеВсеКураторы() Экспорт
//	Возврат (РольДоступна("ARM") И Не РольДоступна("ПросмотрИнфыПоВсемБанкам") И Не РольДоступна("Кураторы"))
//КонецФункции
//
//
//Функция СписокДоступныхКлиентовОграничен() Экспорт
//	//+ Пилюгин В.Е. 06.12.2017
//	УстановитьПривилегированныйРежим(Истина);
//	Ограничен = Ложь;
//	Если Не РольДоступна("ПолныеПрава")  И Не РольДоступна("Взаиморасчеты") И Не РольДоступна("ПолныеПраваДляВзаиморасчетов") Тогда
//		Если  РольДоступна("ПраваНаЧтение") ИЛИ РольДоступна("ARM") ИЛИ РольДоступна("ARM_Просмотр_ограниченный")
//			ИЛИ РольДоступна("ARM_Asia") ИЛИ РольДоступна("ARM_Asia_Чтение") ИЛИ РольДоступна("BRM")
//			ИЛИ РольДоступна("BRM_Чтение") ИЛИ РольДоступна("GRM_Чтение") ИЛИ РольДоступна("GRM_ЧтениеОграниченное") ИЛИ РольДоступна("PM_ЧтениеБезОтчетов") 
//			ИЛИ РольДоступна("GRM") ИЛИ РольДоступна("FIN_AcccessOWI_Чтение")  ИЛИ РольДоступна("PreSaleOWI_Чтение")  ИЛИ РольДоступна("ПросмотрКлиентовОграчиченныйСписок") Тогда
//			Ограничен = Истина;			
//		КонецЕсли;	
//	КонецЕсли;	
//	Возврат Ограничен;
//	//- Пилюгин В.Е. 06.12.2017	
//КонецФункции
//
//
////---------------------------------------------- РОЛИ ----------------------------------------------
//
//Функция ПроверкаПараметраНаКартинку() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	Возврат ПараметрыСеанса.ПредупреждениеВыведено;
//КонецФункции
//
//Процедура УстановитьПроверкаПараметраНаКартинку(Параметр) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	Если не Параметр Тогда
//		ПараметрыСеанса.ПредупреждениеВыведено=ложь;
//	Иначе
//		ПараметрыСеанса.ПредупреждениеВыведено=Истина;
//	КонецЕсли;
//КонецПроцедуры
//
//Функция ПроверкаПользователяНаВыходИзБазы() Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ТекСписок = ow.ПолучитьСписокЗначенийПараметров(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.НайтиПоНаименованию("Пользователи исключение для завершения 1С",истина), ТекущаяДата(), ПараметрыСеанса.ТекущийПользователь);
//	Если ТекСписок.Количество()=0 Тогда
//		Возврат Ложь;
//	Иначе 
//		Возврат истина;
//	КонецЕсли;
//КонецФункции
//
//Функция ПолучитьТаблицуВложенийДляСпискаФайловПоСоглашению(СписокФайлов) Экспорт
//	ЗапросФайлы = Новый Запрос;
//	ЗапросФайлы.Текст = "ВЫБРАТЬ
//	                    |	СоглашенияСКлиентамиПрисоединенныеФайлы.Ссылка КАК Файл,
//	                    |	СоглашенияСКлиентамиПрисоединенныеФайлы.Наименование КАК Имя,
//	                    |	ПрисоединенныеФайлы.ХранимыйФайл,
//	                    |	СоглашенияСКлиентамиПрисоединенныеФайлы.Расширение
//	                    |ИЗ
//	                    |	Справочник.СоглашенияСКлиентамиПрисоединенныеФайлы КАК СоглашенияСКлиентамиПрисоединенныеФайлы
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	                    |		ПО СоглашенияСКлиентамиПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
//	                    |ГДЕ
//	                    |	СоглашенияСКлиентамиПрисоединенныеФайлы.Ссылка В(&СписокФайлов)
//	                    |	И НЕ ПрисоединенныеФайлы.ВыгруженВLFH
//	                    |
//	                    |ОБЪЕДИНИТЬ ВСЕ
//	                    |
//	                    |ВЫБРАТЬ
//	                    |	КоммерческоеПредложениеКлиентуПрисоединенныеФайлы.Ссылка,
//	                    |	КоммерческоеПредложениеКлиентуПрисоединенныеФайлы.Наименование,
//	                    |	ПрисоединенныеФайлы.ХранимыйФайл,
//	                    |	КоммерческоеПредложениеКлиентуПрисоединенныеФайлы.Расширение
//	                    |ИЗ
//	                    |	Справочник.КоммерческоеПредложениеКлиентуПрисоединенныеФайлы КАК КоммерческоеПредложениеКлиентуПрисоединенныеФайлы
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	                    |		ПО КоммерческоеПредложениеКлиентуПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
//	                    |ГДЕ
//	                    |	КоммерческоеПредложениеКлиентуПрисоединенныеФайлы.Ссылка В(&СписокФайлов)
//	                    |	И НЕ ПрисоединенныеФайлы.ВыгруженВLFH
//	                    |
//	                    |ОБЪЕДИНИТЬ ВСЕ
//	                    |
//	                    |ВЫБРАТЬ
//	                    |	ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы.Ссылка,
//	                    |	ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы.Наименование,
//	                    |	ПрисоединенныеФайлы.ХранимыйФайл,
//	                    |	ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы.Расширение
//	                    |ИЗ
//	                    |	Справочник.ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы КАК ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
//	                    |		ПО ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
//	                    |ГДЕ
//	                    |	ЗадачиМаркетинговыхПроектовПрисоединенныеФайлы.Ссылка В(&СписокФайлов)
//	                    |	И НЕ ПрисоединенныеФайлы.ВыгруженВLFH";
//	ЗапросФайлы.УстановитьПараметр("СписокФайлов",СписокФайлов);
//	Возврат ЗапросФайлы.Выполнить().Выгрузить();  		
//КонецФункции
//
//Функция ПроверкаНаАзиюПартнера(Партнер) Экспорт
//	
//	Если Партнер.БизнесРегион = Справочники.БизнесРегионы.Asia Тогда
//		//Сообщить("This client is from Asia. It does not unload into Maringo");
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//КонецФункции
//
//
////++++++++++++++++++++++++++++++++++++++++++++++ СУММАРНЫЙ ПОСТИНГ ПО ФАЗАМ ++++++++++++++++++++++++++++++++++++++++++++++
//
//Процедура ОбновитьФактическиеБюджетыПоТаблицеПостингаПоФазам(тз, УчитыватьДубли = Истина)
//	//+ Пилюгин В.Е. 24.07.2018
//	Для каждого ст Из тз Цикл
//		//+ OW Курбатова А.А. https://ows-jira.spb.openwaygroup.com/browse/ONEC-5025. Для корректного расчета постинга по фазе
//		//Если УчитыватьДубли Тогда
//		//	Постинг = ст.Total * 8;
//		//Иначе
//		//	Постинг = OW_РаботаСПостингом.ВыделитьПостингИзСтруктурыВЗависимостиОтБизнесРегионаКлиента(ст.Фаза.Партнер, ст) * 8;	
//		//КонецЕсли; 
//		Постинг = ст.Total * 8;
//		//- OW Курбатова А.А. https://ows-jira.spb.openwaygroup.com/browse/ONEC-5025. Для корректного расчета постинга по фазе
//
//		Если ст.Фаза.БюджетФактический <> Постинг Тогда  //сравниваем в часах
//			ФазаОбъект = ст.Фаза.ПолучитьОбъект();
//			ФазаОбъект.БюджетФактический = Постинг;
//			ФазаОбъект.Записать();
//		КонецЕсли; 
//	КонецЦикла; 	
//	//- Пилюгин В.Е. 24.07.2018
//КонецПроцедуры
//
//Функция ПолучитьМассивФазЗаПериод(ДатаНачала, ДатаОкончания)
//	//+ Пилюгин В.Е. 24.07.2018
//	Возврат OW_РаботаСПостингом.ПолучитьМассивФазЗаПериодПоПостингу(ДатаНачала, ДатаОкончания);
//	//- Пилюгин В.Е. 24.07.2018		
//КонецФункции
//
//Процедура ОбновитьФактичекиеБюджетыПоФазамЗаПериод(ДатаНачала, ДатаОкончания) Экспорт
//	//+ Пилюгин В.Е. 24.07.2018
//	//Сообщить("Старт " + ТекущаяДата());
//	Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Старт " + ТекущаяДата(),"Start " + ТекущаяДата()));
//	МассивФаз = ПолучитьМассивФазЗаПериод(ДатаНачала, ДатаОкончания);	 
//	//Сообщить("Получены фазы (" + МассивФаз.Количество() + ") - " + ТекущаяДата());
//	Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Получены фазы (" + МассивФаз.Количество() + ") - " + ТекущаяДата(),"Phases received (" + МассивФаз.Количество() + ") - " + ТекущаяДата()));
//	
//	//++OW Копачев А.С. 30.10.2019 ONEC-5064 
//	//+ OW Курбатова А.А. https://ows-jira.spb.openwaygroup.com/browse/ONEC-5025. Для корректного расчета постинга по фазе
//	//тзПостингПоФазам = OW_РаботаСПостингом.ПолучитьТаблицуПостингаПоСпискуФаз(МассивФаз, Ложь);
//	//тзПостингПоФазам = OW_РаботаСПостингом.ПолучитьТаблицуПостингаПоСпискуКлиентскихФаз(МассивФаз);
//	//- OW Курбатова А.А. https://ows-jira.spb.openwaygroup.com/browse/ONEC-5025. Для корректного расчета постинга по фазе	
//	тзПостингПоФазам = OW_РаботаСПостингом.ПолучитьТаблицуПостингаПоСпискуФаз(МассивФаз, Ложь);
//	//--OW Копачев А.С. 30.10.2019 ONEC-5064
//		
//	//Сообщить("Получен постинг - " + ТекущаяДата());
//	Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Получен постинг - " + ТекущаяДата(),"Posting received - " + ТекущаяДата()));
//	ОбновитьФактическиеБюджетыПоТаблицеПостингаПоФазам(тзПостингПоФазам, Ложь);
//	//Сообщить("Записан постинг в фазы " + ТекущаяДата());	
//	Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Записан постинг в фазы " + ТекущаяДата(),"Posting recorded in phases " + ТекущаяДата()));
//	//- Пилюгин В.Е. 24.07.2018
//КонецПроцедуры
//
//
////---------------------------------------------- СУММАРНЫЙ ПОСТИНГ ПО ФАЗАМ ----------------------------------------------
//
////++++++++++++++++++++++++++++++++++++++++++++++ СУММАРНЫЙ ПОСТИНГ ПО ОЦЕНОЧНЫМ ПРОЕКТАМ ++++++++++++++++++++++++++++++++++++++++++++++
//
//Процедура ОбновитьФактичекиеБюджетыПоОценочнымПроектамЗаПериод(ДатаНачала, ДатаОкончания) Экспорт
//	
//	//++OW Копачев А.С. 25.10.2019 ONEC-4855 
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Старт " + ТекущаяДата(),"Start " + ТекущаяДата()));
//	МассивОценочныхПроектов = ПолучитьМассивОценочныхПроектовЗаПериод(ДатаНачала, ДатаОкончания);	 
//	
//	Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Получены оценочные проекты (" + МассивОценочныхПроектов.Количество() + ") - " + ТекущаяДата(),"Estimation projects received (" + МассивОценочныхПроектов.Количество() + ") - " + ТекущаяДата()));
//	
//	тзПостингПоОценочнымПроектам = OW_РаботаСПостингом.ПолучитьТаблицуПостингаПоСпискуОценочныхПроектов(МассивОценочныхПроектов);
//	
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Получен постинг - " + ТекущаяДата(),"Posting received - " + ТекущаяДата()));
//	ОбновитьФактическиеБюджетыПоТаблицеПостингаПоОценочнымПроектам(тзПостингПоОценочнымПроектам);
//	
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Записан постинг в оценочный проект " + ТекущаяДата(),"Posting recorded in estimation project " + ТекущаяДата()));
//	//--OW Копачев А.С. 25.10.2019 ONEC-4855
//КонецПроцедуры
//
//Функция ПолучитьМассивОценочныхПроектовЗаПериод(ДатаНачала, ДатаОкончания)
//	//++OW Копачев А.С. 25.10.2019 ONEC-4855 
//	Возврат OW_РаботаСПостингом.ПолучитьМассивОценочныхПроектовЗаПериодПоПостингу(ДатаНачала, ДатаОкончания);
//	//--OW Копачев А.С. 25.10.2019 ONEC-4855	
//КонецФункции
//
//Процедура ОбновитьФактическиеБюджетыПоТаблицеПостингаПоОценочнымПроектам(тз)
//	//++OW Копачев А.С. 25.10.2019 ONEC-4855 
//	Для каждого ст Из тз Цикл
//		
//		ОценочныйПроект = ст.ОценочныйПроект;
//		ДанныеОценочногоПроекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОценочныйПроект, "ЗадачаJIRA_BA,КодПроектаCRM,БюджетФактический");
//		
//		Постинг = 0;
//		Источник = "";	
//		
//		//++OW Копачев А.С. 28.11.2019 ONEC-5120 
//		//////++УДАЛИТЬ. Временная проверка установки постинга в оценки
//		//Если ЗначениеЗаполнено(ДанныеОценочногоПроекта.ЗадачаJIRA_BA) И ЗначениеЗаполнено(ДанныеОценочногоПроекта.КодПроектаCRM) Тогда 
//		//	
//		//	Если ст.JIRASPB = ст.CRM Тогда 
//		//		Источник = "JIRA-SPB";
//		//		Постинг = ст.JIRASPB * 8; // считаем по JIRA-SPB	
//		//	Иначе
//		//		Продолжить;// пока пропускаем
//		//	КонецЕсли;	
//		//////--УДАЛИТЬ	
//		//ИначеЕсли ЗначениеЗаполнено(ДанныеОценочногоПроекта.ЗадачаJIRA_BA) Тогда 
//		//	Источник = "JIRA-SPB";
//		//	Постинг = ст.JIRASPB * 8; // считаем по JIRA-SPB
//		//Иначе
//		//	Источник = "CRM";
//		//	Постинг = ст.CRM * 8;     // считаем по CRM
//		//КонецЕсли;	
//		
//		Если ЗначениеЗаполнено(ДанныеОценочногоПроекта.ЗадачаJIRA_BA) И ЗначениеЗаполнено(ДанныеОценочногоПроекта.КодПроектаCRM) Тогда 
//			// по умолчанию по CRM
//			Если ст.CRM > ст.JIRASPB Тогда 
//				Источник = "CRM";
//				Постинг = ст.CRM * 8;     // считаем по CRM	
//			Иначе 
//				Источник = "JIRA-SPB";
//				Постинг = ст.JIRASPB * 8; // считаем по JIRA-SPB
//			КонецЕсли;	
//			
//		ИначеЕсли ЗначениеЗаполнено(ДанныеОценочногоПроекта.ЗадачаJIRA_BA) Тогда 
//			Источник = "JIRA-SPB";
//			Постинг = ст.JIRASPB * 8; // считаем по JIRA-SPB
//		Иначе
//			Источник = "CRM";
//			Постинг = ст.CRM * 8;     // считаем по CRM
//		КонецЕсли;	
//		//--OW Копачев А.С. 28.11.2019 ONEC-5120
//
//		Постинг = Окр(Постинг,2);
//		Если ДанныеОценочногоПроекта.БюджетФактический <> Постинг И Постинг > 0 Тогда  //сравниваем в часах
//			ОценочныйПроектОбъект = ОценочныйПроект.ПолучитьОбъект();
//			ОценочныйПроектОбъект.БюджетФактический = Постинг;
//			
//			//запишем строчку в историю проекта
//			ОценочныйПроектОбъект.ИсторияИзмененияПроекта=ОценочныйПроектОбъект.ИсторияИзмененияПроекта+ТекущаяДата()+": "+ Источник +" -> ""Actual budget"" was updated. Old value: "+ДанныеОценочногоПроекта.БюджетФактический+". New value: "+Постинг+Символы.ПС;
//			ОценочныйПроектОбъект.Записать();
//		КонецЕсли;
//	КонецЦикла; 	
//	//--OW Копачев А.С. 25.10.2019 ONEC-4855
//КонецПроцедуры
//
////---------------------------------------------- СУММАРНЫЙ ПОСТИНГ ПО ОЦЕНОЧНЫМ ПРОЕКТАМ ----------------------------------------------
//
//Процедура СкрытьПоказатьНастройкиОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
//	// Вставить содержимое обработчика.
//КонецПроцедуры
//
//Функция ВернутьСписокПользователей() Экспорт
//	СписокП = Новый ТаблицаЗначений;
//	СписокП.Колонки.Добавить("Имя");
//	СписокП.Колонки.Добавить("ПользовательОС");
//	Для Каждого СтрП из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
//		Нс = СписокП.Добавить();
//		Нс.Имя = СтрП.Имя;
//		Нс.ПользовательОС= СтрП.ПользовательОС; 		
//	КонецЦикла;
//	Возврат  СписокП;
//КонецФункции
//
//Функция ПолучитьCodeMaringo(Проект) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст =  "ВЫБРАТЬ
//	|	OW_ВыгружаемыеОбъектыВMaringo.Объект,
//	|	OW_ВыгружаемыеОбъектыВMaringo.CodeSAP
//	|ИЗ
//	|	РегистрСведений.OW_ВыгружаемыеОбъектыВMaringo КАК OW_ВыгружаемыеОбъектыВMaringo
//	|ГДЕ
//	|	OW_ВыгружаемыеОбъектыВMaringo.Объект = &Объект";
//	ЗапросД.УстановитьПараметр("Объект",Проект);
//	ТВ = ЗапросД.Выполнить().выбрать();
//	Пока ТВ.Следующий() Цикл
//		Возврат ТВ.CodeSAP;
//	КонецЦикла;
//	Возврат "";
//КонецФункции
//
//
//Функция МеханизмБюджетныхЗаписейВключен(НаДату = Неопределено) Экспорт 
//	//+ Пилюгин В.Е. 31.01.2018 
//	УстановитьПривилегированныйРежим(истина);
//	Если НЕ ЗначениеЗаполнено(НаДату) Тогда
//		НаДату = ТекущаяДата();
//	КонецЕсли; 
//	ЗначениеКонстанты = Константы.ДатаСтартаРаботыМеханизмаБюджетныхЗаписей.Получить();
//	Включен = Ложь;
//	Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
//		Если НаДату >= ЗначениеКонстанты Тогда
//			Включен = Истина;	
//		КонецЕсли; 	
//	КонецЕсли; 
//	Возврат Включен;
//	//- Пилюгин В.Е. 31.01.2018	
//КонецФункции
//
//Функция ПроверкаНаАзиаткогоКлиента(Клиент) Экспорт
//	//Клиент = Справочники.Партнеры.ПолучитьСсылку();
//	Если Клиент.БизнесРегион=Справочники.БизнесРегионы.Asia и не Клиент.Обмен_с_Maringo_SAP Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат Истина;
//	КонецЕсли;
//КонецФункции
//
//Функция РольДоступнаа(Роль) Экспорт
//	//+ Пилюгин В.Е. 26.02.2018
//	Возврат РольДоступна(Роль);
//	//- Пилюгин В.Е. 26.02.2018	
//КонецФункции	
//
//Функция ВыполнитьCURL(СтрокаКоманды) Экспорт
//	//+ Пилюгин В.Е. 11.04.2018
//	УстановитьПривилегированныйРежим(Истина);
//	КодВозврата = Неопределено;
//	//ПолныйПуть = "C:\Users\USR1CV8\curl\curl.exe";
//	ПолныйПуть = Константы.ПутьCURL.Получить();
//	Если ЗначениеЗаполнено(ПолныйПуть) Тогда
//		//проверим наличие curl.exe
//		Файл = Новый Файл(ПолныйПуть);
//		Если Файл.Существует() Тогда
//			СтрокаКоманды = ПолныйПуть + СтрокаКоманды;
//			ЗапуститьПриложение(СтрокаКоманды, Файл.Путь, Истина, КодВозврата); 
//		КонецЕсли; 
//	КонецЕсли; 
//	Возврат КодВозврата;
//	//- Пилюгин В.Е. 11.04.2018
//КонецФункции
//
//Функция ПолучитьРегионПоСотруднику(Сотрудник) Экспорт
//	//+ Пилюгин В.Е. 16.05.2018
//	РегионОтчетности = ПредопределенноеЗначение("Справочник.РегионыОтчетности.ПустаяСсылка");
//	
//	Если ЗначениеЗаполнено(Сотрудник) Тогда
//		ОрганизацияСотрудника = Сотрудник.OW_Организация;
//
//		//***OW Start [БПВ]29.05.2018
//		//Анисимов Иван и Ко, по просьбе Вануриной
//		Если  ОрганизацияСотрудника=Справочники.Организации.OpenwayNordics Тогда
//			РегионОтчетности = ПредопределенноеЗначение("Справочник.РегионыОтчетности.RussiaCIS");
//			//***OW End [БПВ]29.05.2018 
//		Иначе
//			РегионОтчетности = ОрганизацияСотрудника.РегионОтчетности;
//		КонецЕсли; 
//	КонецЕсли; 
//	Возврат РегионОтчетности;
//	//- Пилюгин В.Е. 16.05.2018		
//КонецФункции
//
//Функция СвернутьТаблицуЗначенийСКонкатенацией(тз, КолонкиГруппировка, КолонкиАгрегация = "", КолонкиКонкатенация="", Разделитель=",") Экспорт
//	//+ Пилюгин В.Е. 23.05.2018
//	МассивКолонкиГруппировка = СтрРазделить(КолонкиГруппировка, ", ", Ложь);
//	МассивКолонкиКонкатенация = СтрРазделить(КолонкиКонкатенация, ", ", Ложь);
//	Если ПустаяСтрока(КолонкиКонкатенация) Тогда
//		Если ПустаяСтрока(КолонкиАгрегация) Тогда
//			тз.Свернуть(КолонкиГруппировка);
//		Иначе
//			тз.Свернуть(КолонкиГруппировка, КолонкиАгрегация);
//		КонецЕсли; 
//		Возврат тз;
//	Иначе
//		КолонкиКопирования = КолонкиГруппировка + ", " + КолонкиАгрегация;
//		тз_Свернутая = тз.Скопировать(, КолонкиКопирования);
//		тз_Свернутая.Свернуть(КолонкиГруппировка, КолонкиАгрегация);
//		Для каждого ИмяКолонки Из МассивКолонкиКонкатенация Цикл
//			тз_Свернутая.Колонки.Добавить(ИмяКолонки);	
//		КонецЦикла; 
//		Для каждого ст Из тз_Свернутая Цикл
//			ПараметрыОтбора = Новый Структура(КолонкиГруппировка);
//			Для каждого ИмяКолонки Из МассивКолонкиГруппировка Цикл
//				ПараметрыОтбора[ИмяКолонки] = ст[ИмяКолонки];
//			КонецЦикла; 
//			НайденныеСтроки = тз.НайтиСтроки(ПараметрыОтбора);
//			Для каждого нст Из НайденныеСтроки Цикл
//				Для каждого ИмяКолонки Из МассивКолонкиКонкатенация Цикл
//					ст[ИмяКолонки] = Строка(ст[ИмяКолонки]) + ?(ЗначениеЗаполнено(Строка(ст[ИмяКолонки])), Разделитель, "") + Строка(нст[ИмяКолонки]);		
//				КонецЦикла; 	
//			КонецЦикла; 
//		КонецЦикла;
//		Возврат тз_Свернутая;
//	КонецЕсли; 
//	//- Пилюгин В.Е. 23.05.2018		
//КонецФункции
//
//Функция ПроверитьПользователяНаРоль(Пользователь,Роль) Экспорт
//	Попытка
//		//+ 2018/06/19 Курбатова А.А. https://ows-jira/browse/ONEC-3352, не определялся пользователь ИБ по имени
//		//ТекПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Наименование);
//		ТекПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
//		//- 2018/06/19 Курбатова А.А. https://ows-jira/browse/ONEC-3352, не определялся пользователь ИБ по имени
//		Если ТекПользователь<>Неопределено Тогда
//			Если ТекПользователь.Роли.Содержит(Метаданные.Роли[Роль]) Тогда
//				Возврат истина;
//			КонецЕсли; 			
//		КонецЕсли; 
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;
//	Возврат Ложь;
//	
//КонецФункции
//
//
//Процедура ПодпискаНаСобытиеПриПроведенииБюджетнойЗаписи() Экспорт
//КонецПроцедуры
//
//
//Функция ЛокализованнаяСтрока(Русский, Английский) Экспорт
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(Русский, Английский);	
//КонецФункции
//
//
//Процедура ПриЗаписиСоглашенияСКлиентамиПриЗаписи(Источник, Отказ) Экспорт
//	//Перенесено в модуль соглашения OW Скочилова Ат 20.11.2018
//	//Скочилова АТ 15.11.2018 #ONEC-3995 проверим историю
//	//Запрос = Новый Запрос;
//	//Запрос.УстановитьПараметр("Объект",Источник.Ссылка);
//	//Запрос.Текст = 
//	// "ВЫБРАТЬ
//	// |	ВерсииОбъектов.НомерВерсии КАК КоличествоЗаписей
//	// |ИЗ
//	// |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
//	// |ГДЕ
//	// |	ВерсииОбъектов.Объект = &Объект
//	// |
//	// |СГРУППИРОВАТЬ ПО
//	// |	ВерсииОбъектов.НомерВерсии";
//	//Если Запрос.Выполнить().Выбрать().Количество() = 1 Тогда
//	//	
//	//	//+ Пилюгин В.Е. 16.07.2018
//	//	Если Источник.Партнер.БизнесРегион = Справочники.БизнесРегионы.RUS ИЛИ Источник.Партнер.БизнесРегион = Справочники.БизнесРегионы.CIS Тогда
//	//		Если (Источник.Организация.Регион = "Asia" ИЛИ Источник.Организация.Регион = "Europe") И
//	//			Источник.Организация <> Справочники.Организации.OpenwaySystemsLtd И
//	//			Источник.Организация <> Справочники.Организации.OpenwayTechnologiesLtd И
//	//			НЕ Источник.Партнер.ТестовыйКлиент Тогда
//	//			СписокПолучателей = Новый СписокЗначений;
//	//			СписокПолучателей.Добавить("evanurina@openwaygroup.com");
//	//			СписокПолучателей.Добавить("slavrukhina@openwaygroup.com");
//	//			СписокПолучателей.Добавить("vpilugin@openwaygroup.com");
//	//			СписокПолучателей.Добавить("akurbatova@openwaygroup.com");
//	//			OW_Нотификации.ОтправитьПисьмо(
//	//			СписокПолучателей,
//	//			"Записан контракт для клиента региона RUS&CIS с компанией Азии, МЕ или Европы",
//	//			"Записан контракт " + Источник.Ссылка + " для клиента " + Источник.Партнер + " и организации " + Источник.Организация ,
//	//			Источник.Ссылка);
//	//		КонецЕсли; 
//	//	КонецЕсли; 
//	//	//- Пилюгин В.Е. 16.07.2018
//	//КонецЕсли;
//	//Скочилова АТ 15.11.2018
//КонецПроцедуры
//
//
//Функция ПреобразоватьСтрокуВЧисло(стр) Экспорт
//	//+ Пилюгин В.Е. 19.07.2018
//	чсл = Неопределено; 
//	стр = СтрЗаменить(стр, " ", "");
//	стр = СтрЗаменить(стр, Символы.НПП, "");
//	стр = СтрЗаменить(стр, ".", ",");
//	Попытка
//		чсл = Число(стр);
//	Исключение
//	КонецПопытки; 
//	Возврат чсл;
//	//- Пилюгин В.Е. 19.07.2018
//КонецФункции
//
//
//Функция ПреобразоватьЧислоВСтроку(чсл) Экспорт
//	//+ Пилюгин В.Е. 07.09.2018
//	Возврат СтрЗаменить(Строка(чсл), Символы.НПП, "");
//	//- Пилюгин В.Е. 07.09.2018		
//КонецФункции
//
//
//Функция СоединитьДваМассива(м1, м2) Экспорт
//	//+ Пилюгин В.Е. 27.07.2018
//	м = Новый Массив;
//	Для каждого эл Из м1 Цикл
//		м.Добавить(эл);
//	КонецЦикла; 
//	Для каждого эл Из м2 Цикл
//		м.Добавить(эл);
//	КонецЦикла; 
//	Возврат м;
//	//- Пилюгин В.Е. 27.07.2018	
//КонецФункции
//
//Функция ПроверитьНаКипр(Организация) Экспорт
//	Если Организация = Справочники.Организации.OpenwaySystemsLtd или Организация = Справочники.Организации.OpenwayTechnologiesLtd Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//КонецФункции
//
//Функция ПроверкаОрганизацииНаEuropeMiddleEastAsia(Организация)  Экспорт
//	Если Организация.РегионОтчетности = Справочники.БизнесРегионы.Europe или Организация.РегионОтчетности = Справочники.БизнесРегионы.MiddleEast или Организация.РегионОтчетности = Справочники.БизнесРегионы.Asia Тогда
//		Возврат Истина;
//	Иначе 
//		Возврат Ложь;
//	КонецЕсли;
//КонецФункции
//
//Функция ПолучитьСтавкуНДС(ПеречислениеСтавка)  Экспорт
//	Если  ПеречислениеСтавка = Перечисления.СтавкиНДС.БезНДС или ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС0 Тогда
//		Возврат 0;
//    ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС5  Тогда
//		Возврат 5;
//	ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС10 или ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС10_110  Тогда
//		Возврат 10;
//    ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС11 или ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС11_111  Тогда
//		Возврат 11;
//	ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС18 или ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС18_118  Тогда
//		Возврат 18;
//	ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС20 или ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС20_120  Тогда
//		Возврат 20;
//	ИначеЕсли  ПеречислениеСтавка = Перечисления.СтавкиНДС.НДС21 Тогда
//		Возврат 21;
//	Иначе Возврат 0;
//	КонецЕсли;
//КонецФункции
//
//Функция ПолучитьСтавкуНДСИзПроцента(Ставка)  Экспорт
//	Если  Ставка =0  Тогда
//		Возврат Перечисления.СтавкиНДС.БезНДС;
//	ИначеЕсли  Ставка=10  Тогда
//		Возврат Перечисления.СтавкиНДС.НДС10;
//    ИначеЕсли  Ставка=11  Тогда
//		Возврат Перечисления.СтавкиНДС.НДС11;
//	ИначеЕсли  Ставка=18  Тогда
//		Возврат Перечисления.СтавкиНДС.НДС18;
//	ИначеЕсли  Ставка=5  Тогда
//		Возврат Перечисления.СтавкиНДС.НДС5;
//	ИначеЕсли  Ставка=20  Тогда
//		Возврат Перечисления.СтавкиНДС.НДС20;
//	ИначеЕсли  Ставка=21 Тогда
//		Возврат Перечисления.СтавкиНДС.НДС21;
//	Иначе Возврат Перечисления.СтавкиНДС.БезНДС;
//	КонецЕсли;
//КонецФункции
// 
//Функция ПолучитьСтавкуПН(ПеречислениеСтавка)  Экспорт	
//	Если ПеречислениеСтавка=Перечисления.СтавкиПН.ПН20 Тогда
//		Возврат 20;
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН20_НР Тогда
//		Возврат 25;
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН15 Тогда
//		Возврат 15;
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН10 Тогда
//		Возврат 10;	
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН5 Тогда
//		Возврат 5;
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН2 Тогда
//		Возврат 2;
//	ИначеЕсли ПеречислениеСтавка=Перечисления.СтавкиПН.ПН14 Тогда
//		Возврат 14;
//	Иначе 
//		Возврат 0;
//	КонецЕсли;	
//КонецФункции
//
//Функция ПолучитьСтавкуПНИзПроцента(Ставка)  Экспорт	
//	Если Ставка=20 Тогда 
//		Возврат Перечисления.СтавкиПН.ПН20;
//	ИначеЕсли Ставка=15  Тогда
//		Возврат Перечисления.СтавкиПН.ПН15;
//    ИначеЕсли Ставка=25  Тогда
//		Возврат Перечисления.СтавкиПН.ПН20_НР;
//	ИначеЕсли Ставка=10 Тогда 
//		Возврат Перечисления.СтавкиПН.ПН10;	
//	ИначеЕсли Ставка=5 Тогда 
//		Возврат Перечисления.СтавкиПН.ПН5;
//	ИначеЕсли Ставка=2 Тогда
//		Возврат Перечисления.СтавкиПН.ПН2;
//	ИначеЕсли Ставка=14 Тогда
//		Возврат Перечисления.СтавкиПН.ПН14;
//	Иначе 
//		Возврат Перечисления.СтавкиПН.БезПН;
//	КонецЕсли;	
//КонецФункции
//
//Функция ПолучитьОрганизацииПоПараметру(НазваниеПараметра) Экспорт
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	                |	OW_ПараметрыСрезПоследних.Организация
//	                |ИЗ
//	                |	РегистрСведений.OW_Параметры.СрезПоследних КАК OW_ПараметрыСрезПоследних
//	                |ГДЕ
//	                |	OW_ПараметрыСрезПоследних.Параметр.Наименование = &Наименование
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	OW_ПараметрыСрезПоследних.Организация";
//	ЗапросД.УстановитьПараметр("Наименование",СокрЛП(НазваниеПараметра));
//	Возврат ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
//КонецФункции
//
//Функция ПолучитьЗначениеОрганизацииПоПараметру(НазваниеПараметра,Организация) Экспорт
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//                    |   OW_ПараметрыСрезПоследних.Значение
//                    |ИЗ
//                    |   РегистрСведений.OW_Параметры.СрезПоследних КАК OW_ПараметрыСрезПоследних
//                    |ГДЕ
//                    |   OW_ПараметрыСрезПоследних.Параметр.Наименование = &Наименование
//                    |   И OW_ПараметрыСрезПоследних.Организация = &Организация";
//    ЗапросД.УстановитьПараметр("Организация",Организация); 
//	ЗапросД.УстановитьПараметр("Наименование",СокрЛП(НазваниеПараметра));
//	ТВ = ЗапросД.Выполнить().Выбрать();
//    пока ТВ.Следующий() Цикл
//        Возврат ТВ.Значение;
//    КонецЦикла;
//    Возврат Неопределено;
//КонецФункции
//
//Функция ПолучитьЗначениеПоПараметруПоПользователю(НазваниеПараметра) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//                    |   OW_ПараметрыСрезПоследних.Значение
//                    |ИЗ
//                    |   РегистрСведений.OW_Параметры.СрезПоследних КАК OW_ПараметрыСрезПоследних
//                    |ГДЕ
//                    |   OW_ПараметрыСрезПоследних.Параметр.Наименование = &Наименование
//                    |   И OW_ПараметрыСрезПоследних.Объект = &Объект";
//    ЗапросД.УстановитьПараметр("Объект",ПараметрыСеанса.ТекущийПользователь); 
//	ЗапросД.УстановитьПараметр("Наименование",СокрЛП(НазваниеПараметра));
//	ТВ = ЗапросД.Выполнить().Выбрать();
//    пока ТВ.Следующий() Цикл
//        Возврат ТВ.Значение;
//    КонецЦикла;
//    Возврат Неопределено;
//КонецФункции
//
//Функция ПолучитьПользователейПоПараметру(НазваниеПараметра) Экспорт
//	ЗапросД = Новый Запрос;
//	ЗапросД.Текст = "ВЫБРАТЬ
//	                |	OW_ПараметрыСрезПоследних.Объект как Пользователь
//	                |ИЗ
//	                |	РегистрСведений.OW_Параметры.СрезПоследних КАК OW_ПараметрыСрезПоследних
//	                |ГДЕ
//	                |	OW_ПараметрыСрезПоследних.Параметр.Наименование = &Наименование
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	OW_ПараметрыСрезПоследних.Объект";
//	ЗапросД.УстановитьПараметр("Наименование",СокрЛП(НазваниеПараметра));
//	Возврат ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
//КонецФункции
//
//
//Процедура РазослатьПроверкуСчетовДляКипра() Экспорт
//	НазваниеПараметра = "Рассылка пользоватеям о счетах прошлого периода";
//	
//	СписокКомпаний = ow.ПолучитьОрганизацииПоПараметру(НазваниеПараметра);  	
//	МассивПользователей = ow.ПолучитьПользователейПоПараметру(НазваниеПараметра);
//	
//	ЗапросПолучитьД = Новый Запрос;
//	ЗапросПолучитьД.Текст ="ВЫБРАТЬ
//                           |    СчетНаОплатуКлиенту.Ссылка,
//                           |    СчетНаОплатуКлиенту.МоментВремени,
//                           |    СчетНаОплатуКлиенту.ДатаВыставленияСчета
//                           |ПОМЕСТИТЬ ВТ_Данные
//                           |ИЗ
//                           |    Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
//                           |ГДЕ
//                           |    СчетНаОплатуКлиенту.ДатаВыставленияСчета >= ДАТАВРЕМЯ(2018, 1, 1)
//                           |    И СчетНаОплатуКлиенту.Организация В(&Организация)
//                           |    И НЕ СчетНаОплатуКлиенту.ПометкаУдаления
//                           |;
//                           |
//                           |////////////////////////////////////////////////////////////////////////////////
//                           |ВЫБРАТЬ
//                           |    ВТ_Данные.Ссылка,
//                           |    МИНИМУМ(ВТ_Данные.Ссылка.ДатаРегистрации) КАК ДатаВерсии,
//                           |    ВТ_Данные.ДатаВыставленияСчета
//                           |ПОМЕСТИТЬ ВТ_Доп
//                           |ИЗ
//                           |    ВТ_Данные КАК ВТ_Данные
//                           |
//                           |СГРУППИРОВАТЬ ПО
//                           |    ВТ_Данные.Ссылка,
//                           |    ВТ_Данные.ДатаВыставленияСчета
//                           |;
//                           |
//                           |////////////////////////////////////////////////////////////////////////////////
//                           |ВЫБРАТЬ
//                           |    ВТ_Доп.Ссылка,
//                           |    ВТ_Доп.ДатаВерсии,
//                           |    ВТ_Доп.ДатаВыставленияСчета
//                           |ИЗ
//                           |    ВТ_Доп КАК ВТ_Доп
//                           |ГДЕ
//                           |    НАЧАЛОПЕРИОДА(ВТ_Доп.ДатаВерсии, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
//                           |    И НАЧАЛОПЕРИОДА(ВТ_Доп.ДатаВерсии, МЕСЯЦ) > ВТ_Доп.ДатаВыставленияСчета";
//	ЗапросПолучитьД.УстановитьПараметр("Организация",СписокКомпаний);
//	ЗапросПолучитьД.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
//	ТабДанныеСчета = ЗапросПолучитьД.Выполнить().Выгрузить();
//	Если ТабДанныеСчета.Количество()>0 Тогда
//		ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
//		ТекстПисьма = "";
//		Тема="Invoices are created in 1C for a past period (creation date "+ТекДата+")";
//		Для Каждого СтрСчет из  ТабДанныеСчета Цикл
//			ТекстПисьма = ТекстПисьма+Символы.ПС+" №"+СтрСчет.Ссылка.номер+" from "+Формат(СтрСчет.Ссылка.дата,"ДФ=dd.MM.yyyy");
//		КонецЦикла;
//		СписокАдресов = Новый СписокЗначений;
//		Для Каждого СтрП из МассивПользователей Цикл 
//			Если OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(СтрП) Тогда 	//OW Копачев А.С. 20.04.2023 ONEC-7812
//				СписокАдресов.Добавить(OW.ПолучитьМылоЮзера(СтрП)); 
//			КонецЕсли;	         													//OW Копачев А.С. 20.04.2023 ONEC-7812
//		КонецЦикла;
//		СписокАдресов.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
//		ТекстПисьма = Тема+ ТекстПисьма;
//				
//		//++OW Копачев А.С. 05.09.2022 ONEC-7882 
//		//OW_Нотификации.ОтправитьПисьмо(СписокАдресов,Тема,ТекстПисьма);
//		OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресов,,,,, Неопределено,,,Неопределено);	
//		//--OW Копачев А.С. 05.09.2022 ONEC-7882
//		
//	КонецЕсли;   	
//КонецПроцедуры
//
//Функция ДобавитьДень(ИсходнаяДата, ЧислоДней) Экспорт
//	////+ Пилюгин В.Е. 15.10.2018
//	//Возврат (ИсходнаяДата + СуткиВСекундах() * ЧислоДней);
//	////- Пилюгин В.Е. 15.10.2018
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ИсходнаяДата, ЧислоДней);
//КонецФункции
//
//Функция СуткиВСекундах() Экспорт
//	////+ Пилюгин В.Е. 15.05.2017
//	//Возврат 60 * 60 * 24;
//	////- Пилюгин В.Е. 15.05.2017
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.СуткиВСекундах();
//КонецФункции
//
//Функция ВернуктьДатуСозданияОбъекта(Объект) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ЗапросДата = НОвый Запрос;
//	ЗапросДата.Текст = "ВЫБРАТЬ
//	                   |	ВерсииОбъектов.Объект,
//	                   |	МИНИМУМ(ВерсииОбъектов.ДатаВерсии) КАК ДатаВерсии
//	                   |ИЗ
//	                   |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
//	                   |ГДЕ
//	                   |	ВерсииОбъектов.Объект = &Объект
//	                   |
//	                   |СГРУППИРОВАТЬ ПО
//	                   |	ВерсииОбъектов.Объект";
//	ЗапросДата.УстановитьПараметр("Объект",Объект);	
//	ТекДанные = ЗапросДата.Выполнить().Выбрать();
//	Пока ТекДанные.Следующий() Цикл
//		Возврат   ТекДанные.ДатаВерсии;
//	КонецЦикла;
//	Возврат ТекущаяДата();
//КонецФункции
//
//Функция ПроверитьНДС_НаДату(Объект) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	Если ТипЗнч(Объект) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
//		ТекДата = Объект.ДатаРегистрации;
//	Иначе
//		ТекДата = ВернуктьДатуСозданияОбъекта(Объект);	
//	КонецЕсли;
//	Если Не ЗначениеЗаполнено(ТекДата) Тогда
//		ТекДата = ТекущаяДата();
//	КонецЕсли;
//	ДатаНачалаИспользованияСтавкиНДС20 = Константы.ДатаНачалаИспользованияСтавкиНДС20.Получить();
//	Если ЗначениеЗаполнено(ДатаНачалаИспользованияСтавкиНДС20) Тогда
//		Если ДатаНачалаИспользованияСтавкиНДС20<=ТекДата  Тогда
//			Возврат Перечисления.СтавкиНДС.НДС20;
//		Иначе
//			Возврат Перечисления.СтавкиНДС.НДС18;
//		КонецЕсли;
//	Иначе
//		Возврат Перечисления.СтавкиНДС.НДС18;
//	КонецЕсли;
//КонецФункции
//
//Функция ПроверитьНДС_20_НаДату(Объект) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ТекДата = ВернуктьДатуСозданияОбъекта(Объект);	
//	ДатаНачалаИспользованияСтавкиНДС20 = Константы.ДатаНачалаИспользованияСтавкиНДС20.Получить();
//	Если ЗначениеЗаполнено(ДатаНачалаИспользованияСтавкиНДС20) Тогда
//		Если ДатаНачалаИспользованияСтавкиНДС20<=ТекДата  Тогда
//			Возврат истина;
//		Иначе
//			Возврат Ложь;
//		КонецЕсли;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//КонецФункции
//
//Процедура АвтоматическоеЗакрытиеФазИПроектов() Экспорт
//	//+ Пилюгин В.Е. 15.10.2018
//	КрайняяДата = OW.ДобавитьДень(КонецДня(ТекущаяДата()), -14);
//	//фазы
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиПроектов.Ссылка,
//	|	ЗадачиПроектов.ПлановаяДатаОкончания,
//	|	ЗадачиПроектов.ID_Sync_CRM КАК Ид
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|ГДЕ
//	|	НЕ ЗадачиПроектов.ПометкаУдаления
//	|	И ЗадачиПроектов.ПлановаяДатаОкончания < &КрайняяДата
//	|	И ЗадачиПроектов.ТипФазы = ЗНАЧЕНИЕ(Справочник.ТипыФаз.ImplementationInternalActivities)
//	|	И ЗадачиПроектов.СтатусЭтапа = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтапов.Active)";
//	Запрос.УстановитьПараметр("КрайняяДата", КрайняяДата);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Попытка
//			Фаза = Выборка.Ссылка.ПолучитьОбъект();
//			Фаза.СтатусЭтапа = Перечисления.СтатусыЭтапов.Completed;
//			Фаза.Записать();
//			ТекстСообщения = "Фаза " + Выборка.Ссылка +"(id "+ Выборка.Ид + ") закрыта. Истекла плановая дата окончания: " + Выборка.ПлановаяДатаОкончания;
//			OW.ЗаписатьОшибку(Выборка.Ссылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
//		Исключение
//			ТекстСообщения = "Фаза " + Выборка.Ссылка +"(id "+ Выборка.Ид + ") НЕ закрыта по причине " + ОписаниеОшибки();
//			OW.ЗаписатьОшибку(Выборка.Ссылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);
//		КонецПопытки;
//	КонецЦикла; 
//	
//	//проекты
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ПроектыВерхнегоУровня.Ссылка,
//	|	ПроектыВерхнегоУровня.ПланируемаяДатаОкончания,
//	|	ПроектыВерхнегоУровня.ID_Sync КАК Ид
//	|ИЗ
//	|	Справочник.ПроектыВерхнегоУровня КАК ПроектыВерхнегоУровня
//	|ГДЕ
//	|	НЕ ПроектыВерхнегоУровня.ПометкаУдаления
//	|	И ПроектыВерхнегоУровня.ПланируемаяДатаОкончания < &КрайняяДата
//	|	И ПроектыВерхнегоУровня.КлассПроекта = ЗНАЧЕНИЕ(Справочник.КлассыПроектов.InternalNonBillable)
//	|	И ПроектыВерхнегоУровня.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроектовВерхнегоУровня.Активный)";
//	Запрос.УстановитьПараметр("КрайняяДата", КрайняяДата);
//	РезультатЗапроса = Запрос.Выполнить();
//	Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		Попытка
//			Проект = Выборка.Ссылка.ПолучитьОбъект();
//			Проект.Статус = Перечисления.СтатусыПроектовВерхнегоУровня.Завершен;
//			Проект.Записать();
//			ТекстСообщения = "Проект " + Выборка.Ссылка +"(id "+ Выборка.Ид + ") закрыт. Истекла плановая дата окончания: " + Выборка.ПланируемаяДатаОкончания;
//			OW.ЗаписатьОшибку(Выборка.Ссылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
//		Исключение
//			ТекстСообщения = "Проект " + Выборка.Ссылка +"(id "+ Выборка.Ид + ") НЕ закрыт по причине " + ОписаниеОшибки();
//			OW.ЗаписатьОшибку(Выборка.Ссылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);
//		КонецПопытки;	
//	КонецЦикла; 
//		
//	//- Пилюгин В.Е. 15.10.2018
//КонецПроцедуры
//
//Функция РассчитатьИнтервалВДняхМеждуДатами(Дата1, Дата2) Экспорт
//	//+ Пилюгин В.Е. 07.11.2018
//	Если ТипЗнч(Дата1) <> Тип("Дата") ИЛИ ТипЗнч(Дата2) <> Тип("Дата") Тогда
//		Возврат -1;
//	КонецЕсли; 
//	Если Дата1 > Дата2 Тогда
//		Возврат (НачалоДня(Дата1) - НачалоДня(Дата2)) /60 / 60 / 24;
//	Иначе
//		Возврат (НачалоДня(Дата2) - НачалоДня(Дата1)) /60 / 60 / 24;
//	КонецЕсли; 
//	//- Пилюгин В.Е. 07.11.2018
//КонецФункции
//
//
//Функция ПолучитьНачалоПредыдущегоМесяца(ОтДаты) Экспорт
//	//+ Пилюгин В.Е. 07.11.2018
//	Возврат НачалоМесяца(НачалоМесяца(ОтДаты) - 1);	
//	//- Пилюгин В.Е. 07.11.2018		
//КонецФункции
//
//Функция ПолучитьКонецПредыдущегоМесяца(ОтДаты) Экспорт
//	//+ Пилюгин В.Е. 07.11.2018
//	Возврат КонецМесяца(НачалоМесяца(ОтДаты) - 1);	
//	//- Пилюгин В.Е. 07.11.2018		
//КонецФункции
//
//
////++++++++++++++++++++++++++++++++++++++++++++ Данные для рассылки о критических изменениях jira due dates ++++++++++++++++++++++++++++++++++++++++++++
//
//Функция ПолучитьДанныеДляРассылкиИзмененийJiraDueDates(ДатаНачала, ДатаОкончания, ОтборПоПроектамВерхнегоУровня = Неопределено) Экспорт
//	//+ Пилюгин В.Е. 07.11.2018
//	ТЗ = Новый ТаблицаЗначений;
//	ТЗ.Колонки.Добавить("Фаза");
//	ТЗ.Колонки.Добавить("НомерЗадачи");	
//	ТЗ.Колонки.Добавить("КонфигурацияЛицензий");
//	ТЗ.Колонки.Добавить("Ответственный");
//	ТЗ.Колонки.Добавить("ИсходнаяDueDate");
//	ТЗ.Колонки.Добавить("Инфо");
//	ТЗ.Колонки.Добавить("ПроектВерхнегоУровня");  //OW Копачев А.С. 25.02.2019 ONEC-4171 
//	
//	РезультатЗапроса = ПолучитьДанныеЗапросаПоИзменениямJiraDueDate(ДатаНачала, ДатаОкончания, ОтборПоПроектамВерхнегоУровня);
//	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока Выборка.Следующий() Цикл
//		КоличествоИзменений = Выборка.Колво;
//		Выборка2 = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Если КоличествоИзменений > 3 Тогда
//			нСтрока = ТЗ.Добавить();
//			нСтрока.Фаза = Выборка.Фаза;
//			нСтрока.НомерЗадачи = Выборка.НомерЗадачи;
//			нСтрока.КонфигурацияЛицензий = Выборка.КонфигурацияЛицензий;
//			нСтрока.Ответственный = Выборка.Ответственный;
//			нСтрока.ПроектВерхнегоУровня = Выборка.ПроектВерхнегоУровня;   //OW Копачев А.С. 25.02.2019 ONEC-4171
//			
//			DueDateВначалеПериода = Дата(1, 1, 1);
//			Инфо = "Due dates (with changing date): " + Символы.ПС;
//			Пока Выборка2.Следующий() Цикл
//				Если НЕ ЗначениеЗаполнено(DueDateВначалеПериода) Тогда
//					DueDateВначалеПериода = Выборка2.DueDateНаНачалоПериода;
//				Иначе
//					Инфор = Инфо + ", "
//				КонецЕсли; 
//				Инфо = Инфо + Формат(Выборка2.DueDate, "ДФ=dd.MM.yyyy") + "(" + Формат(Выборка2.Период, "ДФ=dd.MM.yyyy") + ")";
//			КонецЦикла;
//			нСтрока.ИсходнаяDueDate = DueDateВначалеПериода;
//			нСтрока.Инфо = Инфо;
//			
//		Иначе
//			DueDateВначалеПериода = Дата(1, 1, 1);
//			DueDateВконцеПериода = Дата(1, 1, 1);
//			Пока Выборка2.Следующий() Цикл
//				Если НЕ ЗначениеЗаполнено(DueDateВначалеПериода) Тогда
//					DueDateВначалеПериода = Выборка2.DueDateНаНачалоПериода;
//				КонецЕсли; 
//				DueDateВконцеПериода = Выборка2.DueDate;			
//			КонецЦикла;
//			КоличествоДнейИзменения = РассчитатьИнтервалВДняхМеждуДатами(DueDateВначалеПериода, DueDateВконцеПериода);
//			Если КоличествоДнейИзменения > 180  Тогда
//				нСтрока = ТЗ.Добавить();
//				нСтрока.Фаза = Выборка.Фаза;
//				нСтрока.НомерЗадачи = Выборка.НомерЗадачи;
//				нСтрока.КонфигурацияЛицензий = Выборка.КонфигурацияЛицензий;
//				нСтрока.Ответственный = Выборка.Ответственный;
//				нСтрока.ПроектВерхнегоУровня = Выборка.ПроектВерхнегоУровня;   //OW Копачев А.С. 25.02.2019 ONEC-4171
//				
//				нСтрока.ИсходнаяDueDate = DueDateВначалеПериода;
//				нСтрока.Инфо = "Due date was changed to " + Строка(КоличествоДнейИзменения)+ " days since original Due date:" + Символы.ПС +
//							Формат(DueDateВначалеПериода, "ДФ=dd.MM.yyyy") + " -> " + Формат(DueDateВконцеПериода, "ДФ=dd.MM.yyyy"); 
//			КонецЕсли; 
//		КонецЕсли;
//	КонецЦикла; 
//	
//	Возврат ТЗ;
//	//- Пилюгин В.Е. 07.11.2018	
//КонецФункции
//
//Функция ПолучитьДанныеЗапросаПоИзменениямJiraDueDate(ДатаНачала, ДатаОкончания, ОтборПоПроектамВерхнегоУровня = Неопределено)
//	//+ Пилюгин В.Е. 07.11.2018
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗадачиПроектов.Ссылка КАК Фаза,
//	//++OW Копачев А.С. 25.02.2019 ONEC-4171
//	|	ЗадачиПроектов.ПроектВерхнегоУровня КАК ПроектВерхнегоУровня,
//	//--OW Копачев А.С. 25.02.2019 ONEC-4171
//	|	ЗадачаJIRA.Ссылка КАК ЗадачаJira
//	|ПОМЕСТИТЬ ВТ
//	|ИЗ
//	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачаJIRA КАК ЗадачаJIRA
//	|		ПО ЗадачиПроектов.КодИнтеграции_JIRA = ЗадачаJIRA.КодИнтеграции_JIRA
//	//++OW Копачев А.С. 25.02.2019 ONEC-4171
//	|ГДЕ 
//	|	ВЫБОР 
//	| 		КОГДА &ЕстьОтборПоПроектамВерхнегоУровня = ИСТИНА
//	|       	ТОГДА ЗадачиПроектов.ПроектВерхнегоУровня В (&ОтборПоПроектамВерхнегоУровня)
//	|       ИНАЧЕ ИСТИНА
//	|   КОНЕЦ
//	//--OW Копачев А.С. 25.02.2019 ONEC-4171
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ.Фаза КАК Фаза,
//	|	ВТ.ЗадачаJira,
//	|	МИНИМУМ(ИсторияИзмененийЗадачJIRA.Период) КАК Период,
//	|	ИсторияИзмененийЗадачJIRA.DueDate,
//	|	ИсторияИзмененийЗадачJIRAСрезПоследних.DueDate КАК DueDateНаНачалоПериода
//	|ПОМЕСТИТЬ ВТ2
//	|ИЗ
//	|	РегистрСведений.ИсторияИзмененийЗадачJIRA.СрезПоследних(&ДатаНачала, DueDate <> ДАТАВРЕМЯ(1, 1, 1)) КАК ИсторияИзмененийЗадачJIRAСрезПоследних
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийЗадачJIRA КАК ИсторияИзмененийЗадачJIRA
//	|			ПО ВТ.ЗадачаJira = ИсторияИзмененийЗадачJIRA.Задача
//	|		ПО ИсторияИзмененийЗадачJIRAСрезПоследних.Задача = ВТ.ЗадачаJira
//	|ГДЕ
//	|	ИсторияИзмененийЗадачJIRA.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
//	|	И ИсторияИзмененийЗадачJIRA.DueDate <> ИсторияИзмененийЗадачJIRAСрезПоследних.DueDate
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ИсторияИзмененийЗадачJIRA.DueDate,
//	|	ВТ.Фаза,
//	|	ВТ.ЗадачаJira,
//	|	ИсторияИзмененийЗадачJIRAСрезПоследних.DueDate
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ2.Фаза,
//	|	СУММА(1) КАК Колво
//	|ПОМЕСТИТЬ ВТ2_Свернутая
//	|ИЗ
//	|	ВТ2 КАК ВТ2
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ2.Фаза
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ2.Фаза КАК Фаза,
//	|	ВТ2.ЗадачаJira,
//	|	ВТ2.Период,
//	|	ВТ2.DueDate,
//	|	ВТ2_Свернутая.Колво КАК Колво,
//	|	ВТ2.DueDateНаНачалоПериода
//	|ПОМЕСТИТЬ ВТ_Финальная
//	|ИЗ
//	|	ВТ2 КАК ВТ2
//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ2_Свернутая КАК ВТ2_Свернутая
//	|		ПО ВТ2.Фаза = ВТ2_Свернутая.Фаза
//	|ГДЕ
//	|	ВТ2_Свернутая.Колво > 0
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_Финальная.Фаза КАК Фаза,
//	|	ВТ_Финальная.ЗадачаJira КАК ЗадачаJira,
//	|	ВТ_Финальная.Период КАК Период,
//	|	ВТ_Финальная.DueDateНаНачалоПериода,
//	|	ВТ_Финальная.DueDate,
//	|	1 КАК Колво,
//	|	ВТ_Финальная.Фаза.КодПроектаJIRA КАК НомерЗадачи,
//	|	ВТ_Финальная.Фаза.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
//	//++OW Копачев А.С. 25.02.2019 ONEC-4171
//	|	ВТ_Финальная.Фаза.ПроектВерхнегоУровня КАК ПроектВерхнегоУровня,
//	//--OW Копачев А.С. 25.02.2019 ONEC-4171     
//	//++OW Копачев А.С. 05.11.2020 ONEC-6046
//	//|	ВТ_Финальная.Фаза.Officer КАК Ответственный
//	|	ВТ_Финальная.Фаза.Офицер КАК Ответственный
//	//--OW Копачев А.С. 05.11.2020 ONEC-6046
//	|ИЗ
//	|	ВТ_Финальная КАК ВТ_Финальная
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Фаза,
//	|	Период
//	|ИТОГИ
//	|	СУММА(Колво)
//	|ПО
//	|	Фаза";
//	
//	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
//	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
//	//++OW Копачев А.С. 25.02.2019 ONEC-4171
//	Запрос.УстановитьПараметр("ЕстьОтборПоПроектамВерхнегоУровня", ОтборПоПроектамВерхнегоУровня <> Неопределено);
//	Запрос.УстановитьПараметр("ОтборПоПроектамВерхнегоУровня", ОтборПоПроектамВерхнегоУровня);	
//	//--OW Копачев А.С. 25.02.2019 ONEC-4171
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Возврат РезультатЗапроса;	
//	//- Пилюгин В.Е. 07.11.2018
//КонецФункции
//
////-------------------------------------------- Данные для рассылки о критических изменениях jira due dates //------------------------------------------
//
//Функция ЭтоПалиндром(Текст) Экспорт  //например, "Топот", "А роза упала на лапу Азора"	
//	Если СтрДлина(Текст) < 2 Тогда //если в строке 0 или 1 символ, то это палиндром
//		Возврат Истина;
//	КонецЕсли; 
//	Текст = НРег(Текст); //не забыть перевести в нижний регистр
//	Текст = СтрЗаменить(Текст, " ", ""); //не забыть удалить пробелы
//	ДлинаТекста = СтрДлина(Текст); //вычислим длину один раз
//	//достаточно пройти циклом до середины строки, не нужно проходить ее всю
//	//    если Количество символов в строке нечетное, то средний символ в проверке не участвует
//	//    (равенство самого на себя проверять бессмысленно)
//	Для н = 1 По Цел(ДлинаТекста/2) Цикл 
//		//не забыть, что нумерация символов в строке начинается с 1
//		//на каждой итерации выбираем по символу с начала и с конца строки, двигаясь к середине
//		Если Сред(Текст, н, 1) <> Сред(Текст, ДлинаТекста-н+1, 1) Тогда
//			//как только найдено несоответствие символов, сразу прерываем цикл
//			Возврат Ложь;
//		КонецЕсли; 				
//	КонецЦикла;   
//	//возвращаем Истина, так как символы левой части текста равны символам правой части
//	Возврат Истина;
//КонецФункции
//
//Функция ПроверитьНеобходимостьУстановкиПортфеляПроектов(Фаза) Экспорт
//	//+ Пилюгин В.Е. 23.11.2018
//	СтруктураВозврата = Новый Структура("Успех, Сообщение, Портфель", Истина, "", Неопределено);
//	Если НЕ ЗначениеЗаполнено(Фаза.ПортфельПроектов) 
//		//++OW Копачев А.С. 20.02.2019 ONEC-4280
//		И (НЕ Фаза.ВыгруженВJIRA И НЕ Фаза.ВыгруженВCRM И НЕ Фаза.OW_ВыгруженВMaringo) Тогда
//		//--OW Копачев А.С. 20.02.2019 ONEC-4280
//		
//		Если ЗначениеЗаполнено(Фаза.Область) Тогда
//			Если Фаза.Область.Сокращение = "MBW" ИЛИ
//				Фаза.Область.Сокращение = "WBN" ИЛИ
//				Фаза.Область.Сокращение = "MBN" ИЛИ
//				Фаза.Область.Сокращение = "MBG" ИЛИ
//				Фаза.Область.Сокращение = "KSK" Тогда
//					СтруктураВозврата.Сообщение = "Область бизнеса с кодом " + Фаза.Область.Сокращение + ", при этом не заполнен Портфель проектов!" + Символы.ПС +
//												"Добавить фазу в портфель Rus&CIS eChannels?";
//					СтруктураВозврата.Успех = Ложь;
//					СтруктураВозврата.Портфель = Справочники.OW_ПортфельПроектов.НайтиПоНаименованию("RUS&CIS eChannels");
//			КонецЕсли; 
//		КонецЕсли; 
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	//- Пилюгин В.Е. 23.11.2018
//КонецФункции
//
//Процедура УстановитьПортфельПроектов(Фаза, Портфель) Экспорт
//	ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(ПредопределенноеЗначение("Справочник.ЗначенияКонстант.ОтключитьИспользованиеCRM")) = Истина; 
//	Если ОтключитьИспользованиеCRM = Истина Тогда
//		Возврат
//	КонецЕсли;
//	
//	//+ Пилюгин В.Е. 23.11.2018
//	ФазаОбъект = Фаза.ПолучитьОбъект();
//	ФазаОбъект.ПортфельПроектов = Портфель;
//	ФазаОбъект.Записать();
//	//- Пилюгин В.Е. 23.11.2018
//КонецПроцедуры
//
//Функция ПроверитьПользователейSAP() Экспорт
//	ТекТекст = "";
//	ЗапросТ = Новый Запрос;
//	ЗапросТ.Текст = "ВЫБРАТЬ
//	                |	OW_ПользователиSAP.Пользователь1С,
//	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ OW_ПользователиSAP.CodeSAP) КАК CodeSAP
//	                |ПОМЕСТИТЬ ВТ_1
//	                |ИЗ
//	                |	Справочник.OW_ПользователиSAP КАК OW_ПользователиSAP
//	                |ГДЕ
//	                |	OW_ПользователиSAP.Пользователь1С <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
//	                |	И OW_ПользователиSAP.CodeSAP <> """"
//	                |	И НЕ OW_ПользователиSAP.НеИспользовать
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	OW_ПользователиSAP.Пользователь1С
//	                |;
//	                |
//	                |////////////////////////////////////////////////////////////////////////////////
//	                |ВЫБРАТЬ
//	                |	ВТ_1.Пользователь1С,
//	                |	ВТ_1.CodeSAP
//	                |ИЗ
//	                |	ВТ_1 КАК ВТ_1
//	                |ГДЕ
//	                |	ВТ_1.CodeSAP > 1";
//	ТекДанныеВыборка = ЗапросТ.Выполнить().Выбрать();
//	н=1;
//	Пока ТекДанныеВыборка.Следующий() Цикл
//		ТекТекст = ТекТекст+?(Н<>1,символы.ПС,"")+СокрЛП(ТекДанныеВыборка.Пользователь1С)+";";
//		Н=Н+1;
//	КонецЦикла;
//	Возврат  ТекТекст;
//КонецФункции
//
//Функция ПолучитьКоличествоДнейМеждуДатами(Дата1, Дата2) Экспорт
//	//+ Пилюгин В.Е. 11.12.2018
//	КоличествоДней = Неопределено;
//	Если ТипЗнч(Дата1) = Тип("Дата") И ТипЗнч(Дата2) = Тип("Дата") Тогда
//		КоличествоДней = (НачалоДня(Дата1)-НачалоДня(Дата2))/86400;
//		КоличествоДней = ?(КоличествоДней < 0, -КоличествоДней, КоличествоДней);
//	КонецЕсли; 
//	Возврат КоличествоДней;
//	//- Пилюгин В.Е. 11.12.2018
//КонецФункции
//
//Функция ПоМодулю(ИсходноеЧисло) Экспорт
//	//+ Пилюгин В.Е. 26.02.2019
//	Возврат ?(ИсходноеЧисло < 0, ИсходноеЧисло*(-1), ИсходноеЧисло);
//	//- Пилюгин В.Е. 26.02.2019		
//КонецФункции
//
//Функция ПолучитьЧасовойПояс() Экспорт
//	Возврат ЧасовойПояс()
//КонецФункции
//
//Функция ПолучитьЧасовойПоясСеанса() Экспорт
//	Возврат ЧасовойПоясСеанса()
//КонецФункции
//
//Функция ПолучитьТекущаяДатаСеанса() Экспорт
//	Возврат ТекущаяДатаСеанса()
//КонецФункции
//
//Функция ПроверитьОрганизациюНаРУС_Или_Кипр(Организация) Экспорт
//	Если	не Организация.ИностраннаяОрганизация или Организация = Справочники.Организации.OpenwayTechnologiesLtd или   Организация = Справочники.Организации.OpenwaySystemsLtd Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//КонецФункции
//
//Функция ПолучитьДанныеПоПользователюП(Юзер) Экспорт
//	УстановитьПривилегированныйРежим(истина);
//	ХНЗ = РегистрыСведений.ХранилищеДанныхПользователей.СоздатьНаборЗаписей();
//	ХНЗ.Отбор.пользователь.Установить(Юзер,Истина);
//	ХНЗ.Прочитать();
//	Если ХНЗ.Количество()=0 Тогда
//		Возврат "";
//	Иначе
//		Возврат OW_ОбщегоНазначенияКлиентСервер.СтрокаИзBase64(ХНЗ.Получить(0).Данные.Получить());
//	КонецЕсли;	
//КонецФункции
//
//Функция СписокЗначенийВСтрокуСразделителем(Список,Разделитель) Экспорт
//	Н=1;
//	СтрокаД = "";
//	Для Каждого СтрС из Список цикл
//		СтрокаД=СтрокаД+?(н>1,Разделитель,"")+СтрС.Значение;
//		н = н+1;
//	КонецЦикла;
//	Возврат СтрокаД;
//КонецФункции
//
//Процедура ЗаполнитьНастройкиНДСОрганизации() Экспорт
//	
//	//***Загрузим показатели налогов
//	СписокОрг = Новый СписокЗначений;
//	СписокОрг.Добавить(Справочники.Организации.OWL);
//	СписокОрг.Добавить(Справочники.Организации.ОпенвэйИнтеграция);
//	СписокОрг.Добавить(Справочники.Организации.ОпенвэйСервис);
//	СписокОрг.Добавить(Справочники.Организации.ОпенвэйСервисУкраина);
//	СписокОрг.Добавить(Справочники.Организации.ОпенвэйРешения);
//	СписокОрг.Добавить(Справочники.Организации.OpenwayKazakhstan);
//
//
//	ЗапросН = Новый запрос;
//	ЗапросН.УстановитьПараметр("Организация",СписокОрг);
//	ЗапросН.Текст = "ВЫБРАТЬ
//	                |	ЗаказКлиентаТовары.Ссылка.Организация,
//	                |	ЗаказКлиентаТовары.СтавкаНДС,
//	                |	ЗаказКлиентаТовары.Ссылка.НалогообложениеНДС
//	                |ИЗ
//	                |	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
//	                |ГДЕ
//	                |	ЗаказКлиентаТовары.Ссылка.Организация В(&Организация)
//	                |	И ЗаказКлиентаТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2019, 1, 1)
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	ЗаказКлиентаТовары.Ссылка.Организация,
//	                |	ЗаказКлиентаТовары.СтавкаНДС,
//	                |	ЗаказКлиентаТовары.Ссылка.НалогообложениеНДС
//	                |
//	                |ОБЪЕДИНИТЬ ВСЕ
//	                |
//	                |ВЫБРАТЬ
//	                |	НастройкиНалоговКлиентаВSAP.Организация,
//	                |	НастройкиНалоговКлиентаВSAP.СтавкаНДС,
//	                |	НастройкиНалоговКлиентаВSAP.НалогообложениеНДС
//	                |ИЗ
//	                |	РегистрСведений.НастройкиНалоговКлиентаВSAP КАК НастройкиНалоговКлиентаВSAP
//	                |
//	                |СГРУППИРОВАТЬ ПО
//	                |	НастройкиНалоговКлиентаВSAP.СтавкаНДС,
//	                |	НастройкиНалоговКлиентаВSAP.Организация,
//	                |	НастройкиНалоговКлиентаВSAP.НалогообложениеНДС";
//	ТекДанные = ЗапросН.Выполнить().Выбрать();
//	пока ТекДанные.Следующий() Цикл
//		ПроцентСтавки = ow.ПолучитьСтавкуНДС(ТекДанные.СтавкаНДС);
//		НЗР = РегистрыСведений.НастройкиНДСОрганизации.СоздатьМенеджерЗаписи();
//		НЗР.Период = дата("20190101");
//		НЗР.СтавкаНДС = ТекДанные.СтавкаНДС;
//		НЗР.Организация = ТекДанные.Организация;
//		НЗР.НалогообложениеНДС = ТекДанные.НалогообложениеНДС;
//		НЗР.ПроцентVAT = ПроцентСтавки;  
//		НЗР.Записать(истина);
//	КонецЦикла;
//	
//	////////////////////
//КонецПроцедуры
//
//Функция ПолучитьДанныеНалоговПоОрг(Организация,период,НужныйПараметр,СтавкаНДС=Неопределено,НалогообложениеНДС=Неопределено) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Организация",Организация);
//    ЗапросД.УстановитьПараметр("период",период);
//    ЗапросД.УстановитьПараметр("НалогообложениеНДС",НалогообложениеНДС);
//    ЗапросД.УстановитьПараметр("СтавкаНДС",СтавкаНДС);
//    ЗапросД.Текст = "ВЫБРАТЬ
//                    |   НастройкиНДСОрганизацииСрезПоследних.СтавкаНДС,
//                    |   НастройкиНДСОрганизацииСрезПоследних.НалогообложениеНДС,
//                    |   НастройкиНДСОрганизацииСрезПоследних.ПроцентVAT
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНДСОрганизации.СрезПоследних(&Период, Организация = &Организация) КАК НастройкиНДСОрганизацииСрезПоследних
//                    |ГДЕ
//                    |   ВЫБОР
//                    |           КОГДА &НалогообложениеНДС <> НЕОПРЕДЕЛЕНО
//                    |               ТОГДА НастройкиНДСОрганизацииСрезПоследних.НалогообложениеНДС = &НалогообложениеНДС
//                    |           ИНАЧЕ ИСТИНА
//                    |       КОНЕЦ
//                    |   И ВЫБОР
//                    |           КОГДА &СтавкаНДС <> НЕОПРЕДЕЛЕНО
//                    |               ТОГДА НастройкиНДСОрганизацииСрезПоследних.СтавкаНДС = &СтавкаНДС
//                    |           ИНАЧЕ ИСТИНА
//                    |       КОНЕЦ
//                    |   И НЕ НастройкиНДСОрганизацииСрезПоследних.НеИспользовать";
//    ТабВрем = ЗапросД.Выполнить().Выгрузить();
//    ТабВрем.Свернуть(НужныйПараметр);
//    СписокДанные = ТабВрем.ВыгрузитьКолонку(НужныйПараметр);
//    Возврат СписокДанные;       
//КонецФункции
//
//Функция ПолучитьДанныеНалоговПоКлиентуПН(Организация,период,НужныйПараметр,СтавкаПН=Неопределено,НалогообложениеПН=Неопределено,Контрагент) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Организация",Организация);
//    ЗапросД.УстановитьПараметр("период",период);
//    ЗапросД.УстановитьПараметр("Контрагент",Контрагент);
//    ЗапросД.УстановитьПараметр("НалогообложениеПН",НалогообложениеПН); 
//
//    ЗапросД.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.НалогообложениеПН,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.СтавкаПН,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.ПроцентWTH
//                    |ПОМЕСТИТЬ ВТ_ДанныеОснова
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНалоговКлиентаВSAP.СрезПоследних(&Период, ) КАК НастройкиНалоговКлиентаВSAPСрезПоследних
//                    |ГДЕ
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.Организация = &Организация
//                    |   И НастройкиНалоговКлиентаВSAPСрезПоследних.НалогообложениеПН = &НалогообложениеПН
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.СтавкаПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПроцентWTH
//                    |ПОМЕСТИТЬ ВТ_ДанныеДоп
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНалоговКлиентаИсключения.СрезПоследних(&Период, Контрагент = &Контрагент) КАК НастройкиНалоговКлиентаИсключенияСрезПоследних
//                    |ГДЕ
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.Организация = &Организация
//                    |   И НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеПН = &НалогообложениеПН
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   ВТ_ДанныеОснова.НалогообложениеПН,
//                    |   ВТ_ДанныеОснова.СтавкаПН,
//                    |   МАКСИМУМ(ВТ_ДанныеОснова.ПроцентWTH) КАК ПроцентWTH
//                    |ПОМЕСТИТЬ ВТ_ИТог
//                    |ИЗ
//                    |   ВТ_ДанныеОснова КАК ВТ_ДанныеОснова
//                    |
//                    |СГРУППИРОВАТЬ ПО
//                    |   ВТ_ДанныеОснова.НалогообложениеПН,
//                    |   ВТ_ДанныеОснова.СтавкаПН
//                    |
//                    |ОБЪЕДИНИТЬ ВСЕ
//                    |
//                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   ВТ_ДанныеДоп.НалогообложениеПН,
//                    |   ВТ_ДанныеДоп.СтавкаПН,
//                    |   МАКСИМУМ(ВТ_ДанныеДоп.ПроцентWTH)
//                    |ИЗ
//                    |   ВТ_ДанныеДоп КАК ВТ_ДанныеДоп
//                    |
//                    |СГРУППИРОВАТЬ ПО
//                    |   ВТ_ДанныеДоп.НалогообложениеПН,
//                    |   ВТ_ДанныеДоп.СтавкаПН
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ
//                    |   ВТ_ИТог.НалогообложениеПН,
//                    |   ВТ_ИТог.СтавкаПН,
//                    |   ВТ_ИТог.ПроцентWTH
//                    |ИЗ
//                    |   ВТ_ИТог КАК ВТ_ИТог
//                    |
//                    |СГРУППИРОВАТЬ ПО
//                    |   ВТ_ИТог.НалогообложениеПН,
//                    |   ВТ_ИТог.СтавкаПН,
//                    |   ВТ_ИТог.ПроцентWTH";
//    ТабВрем = ЗапросД.Выполнить().Выгрузить();
//    ТабВрем.Свернуть(НужныйПараметр);
//    СписокДанные = ТабВрем.ВыгрузитьКолонку(НужныйПараметр);
//    Возврат СписокДанные;       
//КонецФункции
//
//Функция ПолучитьДанныеНалоговПоКонтрагенту(Контрагент,организация,Валюта,ТипДоговора=Неопределено,период=Неопределено) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    НовыйСтрук = Новый Структура;   
//	если ЗначениеЗаполнено(организация) тогда
//		Если организация.РегионОтчетности= Справочники.БизнесРегионы.RUS или  организация.РегионОтчетности= Справочники.БизнесРегионы.CIS Тогда
//			Возврат  НовыйСтрук;
//		КонецЕсли;
//	КонецЕсли;
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Контрагент",Контрагент);
//    Если Период<>Неопределено Тогда
//        ЗапросД.УстановитьПараметр("Период",Период);    
//    Иначе
//        ЗапросД.УстановитьПараметр("Период",ТекущаяДата());   
//    КонецЕсли;
//    ЗапросД.УстановитьПараметр("ТипДоговора",ТипДоговора);
//    Если ПроверитьНаКипр(организация) Тогда
//        ЗапросД.УстановитьПараметр("Валюта",Валюта);    
//    Иначе
//        ЗапросД.УстановитьПараметр("Валюта",Неопределено);   
//    КонецЕсли;
//    
//    ЗапросД.Текст = "ВЫБРАТЬ
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.НалогообложениеНДС,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.ПроцентVAT,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.НалогообложениеПН,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.СтавкаНДС КАК СтавкаНДС,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.СтавкаПН,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.ПроцентWTH,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.Валюта,
//                    |   НастройкиНалоговКлиентаВSAPСрезПоследних.Контрагент,
//                    |   1 КАК ТП,
//                    |   ЛОЖЬ КАК НДССверху,
//                    |   ЛОЖЬ КАК ПНСверху,
//                    |   ЛОЖЬ КАК РасчетПНПроцентОтNet,
//                    |   ЛОЖЬ КАК НДССверхуВMaringo,
//                    |   ЛОЖЬ КАК РасчетНДСNETиWHT,
//                    |   ЛОЖЬ КАК ПНСверхуВMaringo
//                    |ПОМЕСТИТЬ ВТ_ДанныеОснова
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНалоговКлиентаВSAP.СрезПоследних(&Период, ) КАК НастройкиНалоговКлиентаВSAPСрезПоследних
//                    |ГДЕ
//                    |   ВЫБОР
//                    |           КОГДА &Валюта = НЕОПРЕДЕЛЕНО
//                    |               ТОГДА ИСТИНА
//                    |           ИНАЧЕ НастройкиНалоговКлиентаВSAPСрезПоследних.Валюта = &Валюта
//                    |       КОНЕЦ
//                    |   И НастройкиНалоговКлиентаВSAPСрезПоследних.Контрагент = &Контрагент
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПроцентVAT,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.СтавкаНДС КАК СтавкаНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.СтавкаПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПроцентWTH,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.Контрагент,
//                    |   0 КАК ТП,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НДССверху,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПНСверху,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.РасчетПНПроцентОтNet,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НДССверхуВMaringo,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.РасчетНДСNETиWHT,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПНСверхуВMaringo
//                    |ПОМЕСТИТЬ ВТ_ДанныеДоп
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНалоговКлиентаИсключения.СрезПоследних(&Период, Контрагент = &Контрагент) КАК НастройкиНалоговКлиентаИсключенияСрезПоследних
//                    |ГДЕ
//                    |   ВЫБОР
//                    |           КОГДА &ТипДоговора <> НЕОПРЕДЕЛЕНО
//                    |               ТОГДА ВЫБОР
//                    |                       КОГДА НастройкиНалоговКлиентаИсключенияСрезПоследних.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)
//                    |                           ТОГДА ИСТИНА
//                    |                       ИНАЧЕ ВЫБОР
//                    |                               КОГДА НастройкиНалоговКлиентаИсключенияСрезПоследних.ТипДоговора = &ТипДоговора
//                    |                                   ТОГДА ИСТИНА
//                    |                               ИНАЧЕ ЛОЖЬ
//                    |                           КОНЕЦ
//                    |                   КОНЕЦ
//                    |           ИНАЧЕ ЛОЖЬ
//                    |       КОНЕЦ
//                    |   И НЕ НастройкиНалоговКлиентаИсключенияСрезПоследних.НеИспользовать
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.НалогообложениеНДС, ВТ_ДанныеОснова.НалогообложениеНДС) КАК налогообложениеНДС,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.ПроцентVAT, ВТ_ДанныеОснова.ПроцентVAT) КАК процентVAT,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.НалогообложениеПН, ВТ_ДанныеОснова.НалогообложениеПН) КАК налогообложениеПН,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.СтавкаНДС, ВТ_ДанныеОснова.СтавкаНДС) КАК ставкаНДС,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.СтавкаПН, ВТ_ДанныеОснова.СтавкаПН) КАК ставкаПН,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.ПроцентWTH, ВТ_ДанныеОснова.ПроцентWTH) КАК процентWTH,
//                    |   ВТ_ДанныеОснова.Валюта,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.ТП, ВТ_ДанныеОснова.ТП) КАК ТП,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.НДССверху, ВТ_ДанныеОснова.НДССверху) КАК НДССверху,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.ПНСверху, ВТ_ДанныеОснова.ПНСверху) КАК ПНСверху,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.НДССверхуВMaringo, ВТ_ДанныеОснова.НДССверхуВMaringo) КАК НДССверхуВMaringo,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.РасчетНДСNETиWHT, ВТ_ДанныеОснова.РасчетНДСNETиWHT) КАК РасчетНДСNETиWHT,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.РасчетПНПроцентОтNet, ВТ_ДанныеОснова.РасчетПНПроцентОтNet) КАК РасчетПНПроцентОтNet,
//                    |   ЕСТЬNULL(ВТ_ДанныеДоп.ПНСверхуВMaringo, ВТ_ДанныеОснова.ПНСверхуВMaringo) КАК ПНСверхуВMaringo
//                    |ИЗ
//                    |   ВТ_ДанныеОснова КАК ВТ_ДанныеОснова
//                    |       ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоп КАК ВТ_ДанныеДоп
//                    |       ПО ВТ_ДанныеОснова.Контрагент = ВТ_ДанныеДоп.Контрагент
//                    |
//                    |УПОРЯДОЧИТЬ ПО
//                    |   ТП";
//    ТабВрем = ЗапросД.Выполнить().Выгрузить();
//    
//    Для Каждого СтрВ из ТабВрем Цикл
//        НовыйСтрук.Вставить("НалогообложениеНДС",СтрВ.НалогообложениеНДС);  
//        НовыйСтрук.Вставить("ПроцентVAT",СтрВ.ПроцентVAT);
//        НовыйСтрук.Вставить("НалогообложениеПН",СтрВ.НалогообложениеПН);
//        НовыйСтрук.Вставить("СтавкаНДС",СтрВ.СтавкаНДС);
//        НовыйСтрук.Вставить("СтавкаПН",СтрВ.СтавкаПН);
//        НовыйСтрук.Вставить("ПроцентWTH",СтрВ.ПроцентWTH);
//        НовыйСтрук.Вставить("Валюта",СтрВ.Валюта);
//        НовыйСтрук.Вставить("НДССверху",СтрВ.НДССверху);
//        НовыйСтрук.Вставить("ПНСверху",СтрВ.ПНСверху);
//        НовыйСтрук.Вставить("РасчетПНПроцентОтNet",СтрВ.РасчетПНПроцентОтNet);
//        НовыйСтрук.Вставить("РасчетНДСNETиWHT",СтрВ.РасчетНДСNETиWHT);
//        НовыйСтрук.Вставить("НДССверхуВMaringo",СтрВ.НДССверхуВMaringo);
//        НовыйСтрук.Вставить("ПНСверхуВMaringo",СтрВ.ПНСверхуВMaringo);
//
//    КонецЦикла;
//    Возврат  НовыйСтрук;    
//КонецФункции
//
//Функция ПолучитьДанныеНалоговПоКонтрагентуПлатитСам(Контрагент,организация,Валюта,ТипДоговора=Неопределено,период=Неопределено) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    НовыйСтрук = Новый Структура;
//	если ЗначениеЗаполнено(организация) тогда
//		Если организация.РегионОтчетности= Справочники.БизнесРегионы.RUS или  организация.РегионОтчетности= Справочники.БизнесРегионы.CIS Тогда
//			Возврат  НовыйСтрук;
//		КонецЕсли;
//	КонецЕсли;
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Контрагент",Контрагент);
//    Если Период<>Неопределено Тогда
//        ЗапросД.УстановитьПараметр("Период",Период);    
//    Иначе
//        ЗапросД.УстановитьПараметр("Период",ТекущаяДата());   
//    КонецЕсли;
//    ЗапросД.УстановитьПараметр("ТипДоговора",ТипДоговора);
//    Если ПроверитьНаКипр(организация) Тогда
//        ЗапросД.УстановитьПараметр("Валюта",Валюта);    
//    Иначе
//        ЗапросД.УстановитьПараметр("Валюта",Неопределено);   
//    КонецЕсли;
//    
//    ЗапросД.Текст = "ВЫБРАТЬ
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПроцентVAT,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НалогообложениеПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.СтавкаНДС КАК СтавкаНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.СтавкаПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПроцентWTH,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.Контрагент,
//                    |   0 КАК ТП,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.НДССверху,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПНСверху,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.РасчетПНПроцентОтNet,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.РасчетНДСNETиWHT,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПлатитСамНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ПлатитСамПН,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ОкруглятьВНизНДС,
//                    |   НастройкиНалоговКлиентаИсключенияСрезПоследних.ОкруглятьВНизПН
//                    |ПОМЕСТИТЬ ВТ_ДанныеДоп
//                    |ИЗ
//                    |   РегистрСведений.НастройкиНалоговКлиентаИсключения.СрезПоследних(&Период, Контрагент = &Контрагент) КАК НастройкиНалоговКлиентаИсключенияСрезПоследних
//                    |ГДЕ
//                    |   ВЫБОР
//                    |           КОГДА &ТипДоговора <> НЕОПРЕДЕЛЕНО
//                    |               ТОГДА ВЫБОР
//                    |                       КОГДА НастройкиНалоговКлиентаИсключенияСрезПоследних.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)
//                    |                           ТОГДА ИСТИНА
//                    |                       ИНАЧЕ ВЫБОР
//                    |                               КОГДА НастройкиНалоговКлиентаИсключенияСрезПоследних.ТипДоговора = &ТипДоговора
//                    |                                   ТОГДА ИСТИНА
//                    |                               ИНАЧЕ ЛОЖЬ
//                    |                           КОНЕЦ
//                    |                   КОНЕЦ
//                    |           ИНАЧЕ ЛОЖЬ
//                    |       КОНЕЦ
//                    |   И НЕ НастройкиНалоговКлиентаИсключенияСрезПоследних.НеИспользовать
//                    |;
//                    |
//                    |////////////////////////////////////////////////////////////////////////////////
//                    |ВЫБРАТЬ РАЗЛИЧНЫЕ
//                    |   ВТ_ДанныеДоп.ПлатитСамНДС,
//                    |   ВТ_ДанныеДоп.ПлатитСамПН,
//                    |   ВТ_ДанныеДоп.ОкруглятьВНизНДС,
//                    |   ВТ_ДанныеДоп.ОкруглятьВНизПН
//                    |ИЗ
//                    |   ВТ_ДанныеДоп КАК ВТ_ДанныеДоп";
//    ТабВрем = ЗапросД.Выполнить().Выгрузить();
//    
//    Для Каждого СтрВ из ТабВрем Цикл
//        НовыйСтрук.Вставить("ПлатитСамНДС",СтрВ.ПлатитСамНДС);  
//        НовыйСтрук.Вставить("ПлатитСамПН",СтрВ.ПлатитСамПН); 
//        НовыйСтрук.Вставить("ОкруглятьВНизНДС",СтрВ.ОкруглятьВНизНДС); 
//        НовыйСтрук.Вставить("ОкруглятьВНизПН",СтрВ.ОкруглятьВНизПН);
//    КонецЦикла;
//    Возврат  НовыйСтрук;    
//КонецФункции
//
//Функция ОрганизацияДляВыводаСтавкиПН(Орг) Экспорт
//    Если Орг<>Справочники.Организации.OpenwaySystemsLtd и Орг<>Справочники.Организации.OpenwayNordics   и Орг<>Справочники.Организации.OpenwayKazakhstan
//         и Орг<>Справочники.Организации.OpenwayTechnologiesLtd  и Орг<>Справочники.Организации.OWL и  Орг<>Справочники.Организации.ОпенвэйСервисУкраина
//         и Орг<>Справочники.Организации.ОпенвэйСервис  и Орг<>Справочники.Организации.ОпенвэйРешения  и Орг<>Справочники.Организации.ОпенвэйИнтеграция Тогда
//         возврат истина;
//     Иначе
//         Возврат Ложь;
//     КонецЕсли;
// КонецФункции
//
//Функция ПолучитьНастройкуПоТипуФормыСчета(Организация,Контрагент,период) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.Текст ="ВЫБРАТЬ
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Период,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Организация,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Контрагент,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Тип,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ВВалютеСчета,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Использовать,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ТипБезНалоговНДСПН,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ТипБезНалоговНДС,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ТипБезНалоговПН,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ВсегоВсе,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ФорматЧисла,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.ДопФорматЧисла,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.НзваниеМакета,
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.НеТолькоИтог
//                   |ИЗ
//                   |    РегистрСведений.ТипыПечатныхФормСчетовДляКонтрагента.СрезПоследних(
//                   |            &Период,
//                   |            Контрагент = &Контрагент
//                   |                И Организация = &Организация) КАК ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних
//                   |ГДЕ
//                   |    ТипыПечатныхФормСчетовДляКонтрагентаСрезПоследних.Использовать";
//   ЗапросД.УстановитьПараметр("Период",Период); 
//   ЗапросД.УстановитьПараметр("Организация",Организация); 
//   ЗапросД.УстановитьПараметр("Контрагент",Контрагент);
//   ТабДанные = ЗапросД.Выполнить().Выгрузить();
//   Возврат ТабДанные;
//КонецФункции
//
//Функция ПолучитьНастройкуWHT_ЭтоНеWHT(Организация,Контрагент,Клиент,период) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.Текст ="ВЫБРАТЬ
//                   |    НастройкиНалоговКлиентаИсключенияСрезПоследних.ЭтоНеWHT
//                   |ИЗ
//                   |    РегистрСведений.НастройкиНалоговКлиентаИсключения.СрезПоследних(&Период, ) КАК НастройкиНалоговКлиентаИсключенияСрезПоследних
//                   |ГДЕ
//                   |    НастройкиНалоговКлиентаИсключенияСрезПоследних.Организация = &Организация
//                   |    И НастройкиНалоговКлиентаИсключенияСрезПоследних.Клиент = &Клиент
//                   |    И НастройкиНалоговКлиентаИсключенияСрезПоследних.Контрагент = &Контрагент";
//   ЗапросД.УстановитьПараметр("Период",Период); 
//   ЗапросД.УстановитьПараметр("Организация",Организация); 
//   ЗапросД.УстановитьПараметр("Контрагент",Контрагент);
//   ЗапросД.УстановитьПараметр("Клиент",Клиент);   
//   ТВ= ЗапросД.Выполнить().Выбрать();
//   пока ТВ.Следующий() Цикл
//       Возврат ТВ.ЭтоНеWHT;
//   КонецЦикла;
//   Возврат Ложь;
//КонецФункции
//
//Функция ПолучитьОрганизациюДляВычетаПН(Организация) Экспорт
//    Если Организация=Справочники.Организации.OpenwayTeknologiIndonesia Тогда
//        возврат истина;
//    Иначе
//        Возврат Ложь;
//    КонецЕсли;
//КонецФункции
//
//Функция ПолучитьЧтоПарольПроверяем() Экспорт
//    Возврат не ПараметрыСеанса.ТекущийПользователь.НеПроверятьПароль;
//КонецФункции
//
//Процедура Пауза(Секунд) Экспорт
//    
//    ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
//    ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
//    
//    Если ФоновоеЗадание = Неопределено Тогда
//        Параметры = Новый Массив;
//        Параметры.Добавить(Секунд);
//        ФоновоеЗадание = ФоновыеЗадания.Выполнить("OW.Пауза", Параметры);
//    КонецЕсли;
//        
//    Попытка
//        ФоновоеЗадание.ОжидатьЗавершения(Секунд);
//    Исключение
//        Возврат;
//    КонецПопытки;
//    
//КонецПроцедуры           	
//
//Процедура УстановитьОграниченияВОтборПоПартнерамВСКД_ИмяРеквезита(ИмяРеквезита,ТекЮзер,ПровРоль,КомпоновщикНастроек) Экспорт
//	Если ПровРоль Тогда
//		ОтборКомпоновщика = КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
//		ЭлементыОтбора = ОтборКомпоновщика.Элементы;
//		Пров = Ложь;
//		Для Каждого СтрО из ЭлементыОтбора Цикл
//			Если ТипЗнч(СтрО)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
//				Если СокрЛП(СтрО.ЛевоеЗначение)= ИмяРеквезита и СтрО.ВидСравнения=ВидСравненияКомпоновкиДанных.ВСписке  Тогда
//					СтрО.Использование = истина;
//					СтрО.ПравоеЗначение = OW.ПолучитьСписокКлиентовОграничений(ТекЮзер);
//					Пров = Истина;
//					прервать;
//				КонецЕсли;
//			КонецЕсли;	
//		КонецЦикла;
//		Если НЕ Пров Тогда
//			НС = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//			НС.ЛевоеЗначение= Новый ПолеКомпоновкиДанных(ИмяРеквезита);
//			НС.ВидСравнения =ВидСравненияКомпоновкиДанных.ВСписке;
//			НС.Использование = истина;
//			НС.ПравоеЗначение = OW.ПолучитьСписокКлиентовОграничений(ТекЮзер); 
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры
//
//Процедура ЗаписиатьЖурналВыволенияJIRAЗапроса(МетодЗапроса,Инстанс,ИсходящийЗапрос,ТекстСообщения,ТекстСообщенияОтвет,РезультатВыполненияОбмена)  Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    НЗР = РегистрыСведений.ЖурналОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
//    НЗР.Период=ТекущаяДата();
//    НЗР.ИсходящийЗапрос=ИсходящийЗапрос;
//    НЗР.ДатаОтправки =  НЗР.Период;
//    НЗР.МетодЗапроса =  МетодЗапроса;
//    НЗР.ИдентификаторЗапроса = СокрЛП(Новый УникальныйИдентификатор());
//    НЗР.Инстанс = Инстанс;
//    НЗР.ДатаОкончания=НЗР.Период;
//    НЗР.РезультатВыполненияОбмена = РезультатВыполненияОбмена;
//    НЗР.ТекстСообщения = ТекстСообщения;
//    НЗР.ТекстСообщенияОтвет = ТекстСообщенияОтвет;
//    НЗР.Записать(истина);
//
//КонецПроцедуры
//
//Функция EmailОтсутсвуетУСотрудниковИлиСотрудникРаботает(Emal)  Экспорт
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Представление",Emal);
//    ЗапросД.Текст =  "ВЫБРАТЬ
//                     |  Сотрудники.Ссылка,
//                     |  ФизическиеЛицаКонтактнаяИнформация.Представление,
//                     |  Сотрудники.OW_ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
//                     |      И Сотрудники.OW_ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1) КАК Состояние
//                     |ПОМЕСТИТЬ ВТ_1
//                     |ИЗ
//                     |  Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
//                     |      ПО ФизическиеЛицаКонтактнаяИнформация.Ссылка = Сотрудники.Физлицо
//                     |ГДЕ
//                     |  ФизическиеЛицаКонтактнаяИнформация.Представление = &Представление
//                     |  И НЕ Сотрудники.ПометкаУдаления
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_1.Представление,
//                     |  МИНИМУМ(ВТ_1.Состояние) КАК Состояние
//                     |ПОМЕСТИТЬ ВТ_2
//                     |ИЗ
//                     |  ВТ_1 КАК ВТ_1
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_1.Представление
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_2.Представление,
//                     |  ВТ_2.Состояние
//                     |ИЗ
//                     |  ВТ_2 КАК ВТ_2
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//                     |          ПользователиКонтактнаяИнформация.Представление КАК Представление
//                     |      ИЗ
//                     |          РегистрСведений.МожноРассылатьПисьмоЕслиСотрудникУволен КАК МожноРассылатьПисьмоЕслиСотрудникУволен
//                     |              ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
//                     |              ПО МожноРассылатьПисьмоЕслиСотрудникУволен.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
//                     |      ГДЕ
//                     |          ПользователиКонтактнаяИнформация.Представление = &Представление
//                     |          И МожноРассылатьПисьмоЕслиСотрудникУволен.Использовать
//                     |      
//                     |      СГРУППИРОВАТЬ ПО
//                     |          ПользователиКонтактнаяИнформация.Представление) КАК ВложенныйЗапрос
//                     |      ПО ВТ_2.Представление = ВложенныйЗапрос.Представление
//                     |ГДЕ
//                     |  ВТ_2.Состояние
//                     |  И ВложенныйЗапрос.Представление ЕСТЬ NULL" ;
//    Возврат  ЗапросД.Выполнить().Пустой();
//КонецФункции
//
//
//Функция ПолучитьДоступныеОрганизации() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//	СписокОрг = Новый СписокЗначений;
//	
//	ЗапросД = новый Запрос;
//	ЗапросД.Текст ="ВЫБРАТЬ
//	               |	ДоступныеОрганизацииУПользователя.Организация
//	               |ИЗ
//	               |	РегистрСведений.ДоступныеОрганизацииУПользователя КАК ДоступныеОрганизацииУПользователя
//	               |ГДЕ
//	               |	ДоступныеОрганизацииУПользователя.Пользователь = &Пользователь
//	               |	И ДоступныеОрганизацииУПользователя.Использовать";
//	
//	ЗапросД.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
//	
//
//	СписокОрг.ЗагрузитьЗначения(ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
//	Возврат  СписокОрг;
//КонецФункции
//
//Функция ПолучитьСтруктуру(знач Объект) Экспорт
//    СписокТабЧастей = Новый СписокЗначений;
//    СписокРек = Новый СписокЗначений;
//
//    Структура = Новый Структура(); /// реквизиты     
//    Для каждого Реквизит из Объект.Метаданные().Реквизиты Цикл
//        СписокРек.Добавить(Реквизит.Имя);
// 	КонецЦикла; /// таблицы     
//    Для каждого ТабличнаяЧасть из Объект.Метаданные().ТабличныеЧасти Цикл
//        СписокТабЧастей.Добавить(ТабличнаяЧасть.Имя);
//	    СписокРек.Добавить(ТабличнаяЧасть.Имя );
//    КонецЦикла;
//    
//    Если Метаданные.Справочники.Содержит(Объект.Метаданные()) Тогда
//        СписокРек.Добавить("Код" );
//        СписокРек.Добавить("Наименование" );
//    ИначеЕсли Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
//        СписокРек.Добавить("Дата" );
//        СписокРек.Добавить("Номер" );
//    КонецЕсли;
//    СписокРек1 = "";
//    Н=1;
//    Для Каждого СтрС из СписокРек Цикл
//        Если Н=1 Тогда
//             СписокРек1 = СтрС.Значение;
//         Иначе
//             СписокРек1 = СписокРек1+","+СтрС.Значение;
//        КонецЕсли;
//        Н=Н+1;
//    КонецЦикла;
//    СписокРекСоЗнач = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект,СписокРек1);
//    Для Каждого СтрС из СписокРек Цикл
//        ЗначРек = СписокРекСоЗнач[СтрС.Значение];
//        Если СписокТабЧастей.НайтиПоЗначению(СтрС.Значение)= Неопределено Тогда
//            попытка
//                Структура.Вставить(СтрС.Значение,ЗначРек);
//            Исключение
//            КонецПопытки;
//        Иначе
//            Структура.Вставить(СтрС.Значение,ЗначРек.выгрузить());
//        КонецЕсли;
//    КонецЦикла;
// 
//    //ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект,Реквизит.Имя)
//    //ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект,ТабличнаяЧасть.Имя).Выгрузить()
//	Возврат Структура;
//
//КонецФункции
//
//Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
//    
//    МетаданныеОбъекта = Объект.Метаданные();
//    Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
//        Возврат Ложь;
//    Иначе
//        Возврат Истина;
//    КонецЕсли; 
//    
//КонецФункции  
//
//Функция ПолучитьДоступныеНаправленияДляПользователя() Экспорт
//     УстановитьПривилегированныйРежим(истина);
//	переченьНапр = ПараметрыСеанса.ТекущийПользователь.OW_ДоступныеНаправления.Выгрузить(,"Направление").ВыгрузитьКолонку("Направление");
//	Возврат  переченьНапр;
//КонецФункции
//
//Функция НачалоГодаДляСКД(Период) Экспорт
//    Возврат НачалоГода(Период);
//КонецФункции
//
//Функция КонецГодаДляСКД(Период) Экспорт
//    Возврат КонецГода(Период);
//КонецФункции
//
//
//Функция КонецКварталаДляСКД(Период) Экспорт
//    Возврат КонецКвартала(Период);
//КонецФункции
//
//Функция КонецДняДляСКД(Период) Экспорт
//    Возврат КонецДня(Период);
//КонецФункции
//
//Функция ПолучитьТаблицуДоступныхГрупп() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ПолучилиТаблицуПараметров = OW.ПолучитьТаблицуПараметровОбъекта(ПараметрыСеанса.ТекущийПользователь,ТекущаяДата());
//    СписокПараметров = Новый СписокЗначений;
//    СписокПараметров.ЗагрузитьЗначения(ПолучилиТаблицуПараметров.выгрузитьКолонку("Параметр"));
//    ЗарпосГруппы = Новый Запрос;
//    ЗарпосГруппы.УстановитьПараметр("Настройка",СписокПараметров);
//    ЗарпосГруппы.Текст =   "ВЫБРАТЬ
//    |    ТипыГруппРассылокДопПараметры.Ссылка
//    |ИЗ
//    |    Справочник.ТипыГруппРассылок.ДопПараметры КАК ТипыГруппРассылокДопПараметры
//    |ГДЕ
//    |    ТипыГруппРассылокДопПараметры.Настройка В(&Настройка)";
//    ТекТаб = ЗарпосГруппы.Выполнить().Выгрузить();
//    Возврат ТекТаб;
//КонецФункции 
//
//Функция ПолучитьСписокДоступныхГрупп()  Экспорт
//    ТабГруппы = ПолучитьТаблицуДоступныхГрупп();
//    СписокГрупп= Новый СписокЗначений;
//    СписокГрупп.ЗагрузитьЗначения(ТабГруппы.выгрузитьКолонку("Ссылка"));
//    Возврат  СписокГрупп;  
//КонецФункции
//
//Функция ПолучитьСписокРассылок(группы) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗарпосГруппы = Новый Запрос;
//    ЗарпосГруппы.УстановитьПараметр("группы",группы);
//    ЗарпосГруппы.Текст =   "ВЫБРАТЬ
//                           |    ТипыГруппРассылокДопПараметры.ТипРассылки
//                           |ИЗ
//                           |    Справочник.ТипыГруппРассылок.ДопПараметры КАК ТипыГруппРассылокДопПараметры
//                           |ГДЕ
//                           |    ТипыГруппРассылокДопПараметры.Ссылка В(&группы)";
//    ТекТаб = ЗарпосГруппы.Выполнить().Выгрузить();
//    Возврат ТекТаб.ВыгрузитьКолонку("ТипРассылки");
//КонецФункции
//
//Функция ВренутьСтруктуру1С() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    Стр1С = новый Структура;
//    Если Константы.СерверАгента1С.Получить()="" Тогда
//        Стр1С.Вставить("СерверАгента1С","fin-db");
//    Иначе
//        Стр1С.Вставить("СерверАгента1С",Константы.СерверАгента1С.Получить());
//    КонецЕсли;
//    Если Константы.Сервер1С.Получить()="" Тогда
//        Стр1С.Вставить("Сервер1С","fin-db");
//    Иначе
//        Стр1С.Вставить("Сервер1С",Константы.СерверАгента1С.Получить());
//    КонецЕсли;
//    Если Константы.Сервер1СMSSQL.Получить()="" Тогда
//        Стр1С.Вставить("Сервер1СMSSQL","fin-db."+ow.ВернутьДомен()+",14333");
//    Иначе
//        Стр1С.Вставить("Сервер1СMSSQL",Константы.Сервер1СMSSQL.Получить());
//    КонецЕсли;
//    Возврат Стр1С;
//КонецФункции
//
//Функция ВренутьСсылкуНаПроверкуРегЗадания(Название) Экспорт
//     Задание = Справочники.OW_РегламентныеЗаданияДляКонтроля.НайтиПоНаименованию(Название);
//     если Задание.Пустая() Тогда
//         НЭ = Справочники.OW_РегламентныеЗаданияДляКонтроля.СоздатьЭлемент();
//         НЭ.Наименование =  Название;
//         НЭ.ПолноеНаименование = Название;
//         НЭ.ПроверятьПриСтарте1С=Истина;
//         НЭ.Записать();
//         Задание = НЭ.Ссылка;
//     КонецЕсли;
//     Возврат Задание;
// КонецФункции
//
//Функция ПолучитьФазыПодПроектом(Проект, ДополнительныеОтборы = Неопределено) Экспорт
//	//++OW Копачев А.С. 13.05.2021 ONEC-6749  
//	Возврат Справочники.ПроектыВерхнегоУровня.ПолучитьФазыПодПроектом(Проект, ДополнительныеОтборы);
//	//--OW Копачев А.С. 13.05.2021 ONEC-6749
//КонецФункции
//
//Функция ПолучитьДанныеФазНаДату(Знач ДанныеНаДату = Неопределено) Экспорт
//	
//	ДанныеНаДату = ?(ДанныеНаДату = Неопределено, ТекущаяДатаСеанса(), ДанныеНаДату);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 	
//	
//		"ВЫБРАТЬ
//		//++OW Копачев А.С. 26.11.2021 ONEC-6774 
//		//|	ПрогнозыБюджетаФазСрезПоследних.Фаза,
//		//|	МАКСИМУМ(ПрогнозыБюджетаФазСрезПоследних.Период) КАК Период
//		//|ПОМЕСТИТЬ ВТ_ПрогнозыБюджетов_Макс
//		//|ИЗ
//		//|	РегистрСведений.ПрогнозыБюджетаФаз.СрезПоследних(&ДанныеНаДату, ) КАК ПрогнозыБюджетаФазСрезПоследних
//		//|
//		//|СГРУППИРОВАТЬ ПО
//		//|	ПрогнозыБюджетаФазСрезПоследних.Фаза
//		//|
//		//|;
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	ПрогнозыБюджетаФаз.Период,
//		//|	ПрогнозыБюджетаФаз.Фаза,
//		//|	ПрогнозыБюджетаФаз.ПодтвержденныйПрогнозБюджета,
//		//|	ПрогнозыБюджетаФаз.КтоУтвердил
//		//|ПОМЕСТИТЬ ВТ_ПрогнозыБюджетов
//		//|ИЗ
//		//|	ВТ_ПрогнозыБюджетов_Макс КАК ВТ_ПрогнозыБюджетов_Макс
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрогнозыБюджетаФаз КАК ПрогнозыБюджетаФаз
//		//|		ПО ВТ_ПрогнозыБюджетов_Макс.Фаза = ПрогнозыБюджетаФаз.Фаза
//		//|			И ВТ_ПрогнозыБюджетов_Макс.Период = ПрогнозыБюджетаФаз.Период
//		//|;		
//		|	ПрогнозыБюджетаФаз.Период,
//		|	ПрогнозыБюджетаФаз.Фаза,
//		|	ПрогнозыБюджетаФаз.ПодтвержденныйПрогнозБюджета,
//		|	ПрогнозыБюджетаФаз.КтоУтвердил
//		|ПОМЕСТИТЬ ВТ_ПрогнозыБюджетов_Макс
//		|ИЗ
//		|	РегистрСведений.ПрогнозыБюджетаФаз.СрезПоследних(&ДанныеНаДату, ) КАК ПрогнозыБюджетаФаз
//		|
//		|;
//		//--OW Копачев А.С. 26.11.2021 ONEC-6774
//		|////////////////////////////////////////////////////////////////////////////////
//	    |
//		|ВЫБРАТЬ
//		|	ЗадачиПроектов.Ссылка КАК ДанныеФазыНаДату_Фаза,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаНаименование.ЗначениеСтрока, ЗадачиПроектов.Наименование) КАК ДанныеФазыНаДату_Наименование,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаБюджетПлановый.ЗначениеЧисло, ЗадачиПроектов.БюджетПлановый) КАК ДанныеФазыНаДату_БюджетПлановый,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаРисковыйБюджет.ЗначениеЧисло, ЗадачиПроектов.РисковыйБюджет) КАК ДанныеФазыНаДату_РисковыйБюджет,
//		
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаВнутреннийБюджет.ЗначениеЧисло, ЗадачиПроектов.ВнутреннийБюджет) КАК ДанныеФазыНаДату_ВнутреннийБюджет,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаОбщийБюджетПоПроекту.ЗначениеЧисло, ЗадачиПроектов.ОбщийБюджетПоПроекту) КАК ДанныеФазыНаДату_ОбщийБюджетПоПроекту,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаБюджетФактический.ЗначениеЧисло, ЗадачиПроектов.БюджетФактический) КАК ДанныеФазыНаДату_БюджетФактический,
//		
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаНачала.ЗначениеДата, ЗадачиПроектов.ПлановаяДатаНачала) КАК ДанныеФазыНаДату_ПлановаяДатаНачала,
//		//|	ЕСТЬNULL(ИсторияИзмененийЗадачJIRAСрезПоследних.StartDate, ЗадачиПроектов.ПлановаяДатаНачала) КАК ДанныеФазыНаДату_ПлановаяДатаНачала,
//
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаОкончания.ЗначениеДата, ЗадачиПроектов.ПлановаяДатаОкончания) КАК ДанныеФазыНаДату_ПлановаяДатаОкончания,
//		//|	ЕСТЬNULL(ИсторияИзмененийЗадачJIRAСрезПоследних.DueDate, ЗадачиПроектов.ПлановаяДатаОкончания) КАК ДанныеФазыНаДату_ПлановаяДатаОкончания,
//		
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаКонфигурацияЛицензий.Значение, ЗадачиПроектов.КонфигурацияЛицензий) КАК ДанныеФазыНаДату_КонфигурацияЛицензий,
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаКоманда.Значение, ЗадачиПроектов.Команда) КАК ДанныеФазыНаДату_Команда,
//		
//		|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаОфицер.Значение, ЗадачиПроектов.Офицер) КАК ДанныеФазыНаДату_Офицер,
//		//|	ЕСТЬNULL(ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee, ЗадачиПроектов.Офицер) КАК ДанныеФазыНаДату_Офицер,
//		
//		//|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаПодтвержденныйПрогнозБюджета.ЗначениеЧисло, ЗадачиПроектов.ПодтвержденныйПрогнозБюджета) КАК ДанныеФазыНаДату_ПодтвержденныйПрогнозБюджета,
//		//|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаДатаУтвержденияПрогнозаБюджета.ЗначениеДата, ЗадачиПроектов.ДатаУтвержденияПрогнозаБюджета) КАК ДанныеФазыНаДату_ДатаУтвержденияПрогнозаБюджета,	
//		//|	ЕСТЬNULL(ИсторияИзмененияРеквизитовОбъектовФазаКтоУтвердилПрогнозБюджета.Значение, ЗадачиПроектов.КтоУтвердилПрогнозБюджета) КАК ДанныеФазыНаДату_КтоУтвердилПрогнозБюджета,	
//		|   ЕСТЬNULL(ПрогнозыБюджетаФазСрезПоследних.ПодтвержденныйПрогнозБюджета, ЗадачиПроектов.ПодтвержденныйПрогнозБюджета)  КАК ДанныеФазыНаДату_ПодтвержденныйПрогнозБюджета,
//		|   ЕСТЬNULL(ПрогнозыБюджетаФазСрезПоследних.КтоУтвердил, ЗадачиПроектов.КтоУтвердилПрогнозБюджета)  КАК ДанныеФазыНаДату_КтоУтвердилПрогнозБюджета,
//		|   ЕСТЬNULL(ПрогнозыБюджетаФазСрезПоследних.Период, ЗадачиПроектов.ДатаУтвержденияПрогнозаБюджета)  КАК ДанныеФазыНаДату_ДатаУтвержденияПрогнозаБюджета,
//				
//		|	ЕСТЬNULL(ИсторияИзмененийЗадачJIRAСрезПоследних.Status, Значение(Справочник.OW_СтатусыЗадачJIRA.ПустаяСсылка)) КАК ДанныеФазыНаДату_StatusJIRA,
//		|	&ДанныеНаДату КАК НачалоПериода
//		|ИЗ
//		|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_Наименование)) КАК ИсторияИзмененияРеквизитовОбъектовФазаНаименование
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаНаименование.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_БюджетПлановый)) КАК ИсторияИзмененияРеквизитовОбъектовФазаБюджетПлановый
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаБюджетПлановый.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_РисковыйБюджет)) КАК ИсторияИзмененияРеквизитовОбъектовФазаРисковыйБюджет
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаРисковыйБюджет.Объект)
//		
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ВнутреннийБюджет)) КАК ИсторияИзмененияРеквизитовОбъектовФазаВнутреннийБюджет
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаВнутреннийБюджет.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ОбщийБюджетПоПроекту)) КАК ИсторияИзмененияРеквизитовОбъектовФазаОбщийБюджетПоПроекту
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаОбщийБюджетПоПроекту.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_БюджетФактический)) КАК ИсторияИзмененияРеквизитовОбъектовФазаБюджетФактический
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаБюджетФактический.Объект)
//
//		
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ПлановаяДатаНачала)) КАК ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаНачала
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаНачала.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ПлановаяДатаОкончания)) КАК ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаОкончания
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаПлановаяДатаОкончания.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_КонфигурацияЛицензий)) КАК ИсторияИзмененияРеквизитовОбъектовФазаКонфигурацияЛицензий
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаКонфигурацияЛицензий.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_Команда)) КАК ИсторияИзмененияРеквизитовОбъектовФазаКоманда
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаКоманда.Объект)
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_Офицер)) КАК ИсторияИзмененияРеквизитовОбъектовФазаОфицер
//		|		ПО (ЗадачиПроектов.Ссылка = ИсторияИзмененияРеквизитовОбъектовФазаОфицер.Объект)
//		
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ПодтвержденныйПрогнозБюджета)) КАК ИсторияИзмененияРеквизитовОбъектовФазаПодтвержденныйПрогнозБюджета
//		//|		ПО (ЗадачиПроектов.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененияРеквизитовОбъектовФазаПодтвержденныйПрогнозБюджета.Объект)
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_ДатаУтвержденияПрогнозаБюджета)) КАК ИсторияИзмененияРеквизитовОбъектовФазаДатаУтвержденияПрогнозаБюджета
//		//|		ПО (ЗадачиПроектов.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененияРеквизитовОбъектовФазаДатаУтвержденияПрогнозаБюджета.Объект)
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияРеквизитовОбъектов.СрезПоследних(&ДанныеНаДату, Реквизит = Значение(Справочник.ОбъектыМетаданных.ЗадачиПроектов_КтоУтвердилПрогнозаБюджета)) КАК ИсторияИзмененияРеквизитовОбъектовФазаКтоУтвердилПрогнозаБюджета
//		//|		ПО (ЗадачиПроектов.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененияРеквизитовОбъектовФазаДатаУтвержденияПрогнозаБюджета.Объект)
//
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрогнозыБюджетов КАК ПрогнозыБюджетаФазСрезПоследних
//		|		ПО (ЗадачиПроектов.Ссылка = ПрогнозыБюджетаФазСрезПоследних.Фаза)
//				
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачаJIRA КАК ЗадачаJIRA
//		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийЗадачJIRA.СрезПоследних(&ДанныеНаДату, ) КАК ИсторияИзмененийЗадачJIRAСрезПоследних
//		|			ПО ЗадачаJIRA.Ссылка = ИсторияИзмененийЗадачJIRAСрезПоследних.Задача
//		|		ПО ЗадачиПроектов.КодИнтеграции_JIRA = ЗадачаJIRA.КодИнтеграции_JIRA
//		|			И (ЗадачаJIRA.ПометкаУдаления = ЛОЖЬ)";
//	
//	Запрос.УстановитьПараметр("ДанныеНаДату", ДанныеНаДату);
//	
//	//ШаблонПутьРеквизита = "Справочник.ЗадачиПроектов.Реквизит.";
//	//
//	//ФазаРеквизит = ПредопределенноеЗначение("Справочник.ОбъектыМетаданных.ЗадачиПроектов_Наименование")//Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "Наименование"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитНаименование", ФазаРеквизит);
//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "БюджетПлановый"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитБюджетПлановый", ФазаРеквизит);
//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "РисковыйБюджет"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитРисковыйБюджет", ФазаРеквизит);
//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "ПлановаяДатаНачала"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитПлановаяДатаНачала", ФазаРеквизит);
//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "ПлановаяДатаОкончания"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитПлановаяДатаОкончания", ФазаРеквизит);
//	//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "КонфигурацияЛицензий"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитКонфигурацияЛицензий", ФазаРеквизит);
//	//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "Команда"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитКоманда", ФазаРеквизит);
//	//
//	//ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "Офицер"); 
//	//Запрос.УстановитьПараметр("ФазаРеквизитОфицер", ФазаРеквизит);
//
//	////ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "ПодтвержденныйПрогнозБюджета"); 
//	////Запрос.УстановитьПараметр("ФазаРеквизитПодтвержденныйПрогнозБюджета", ФазаРеквизит);
//
//	////ФазаРеквизит = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ШаблонПутьРеквизита + "ДатаУтвержденияПрогнозаБюджета");
//	////Запрос.УстановитьПараметр("ФазаРеквизитДатаУтвержденияПрогнозаБюджета", ФазаРеквизит);
//
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Возврат РезультатЗапроса;
//	
//КонецФункции	
//
//Функция ПолучитьСписокДатЗаПериодДляЭтаповОплат(Начало,Конец,Организация) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Организация",Организация);
//    ЗапросД.УстановитьПараметр("Начало",Начало);
//    ЗапросД.УстановитьПараметр("Конец",Конец);
//    ЗапросД.Текст =  "ВЫБРАТЬ
//                     |  КалендарныеГрафики.Календарь,
//                     |  МАКСИМУМ(КалендарныеГрафики.ДатаГрафика) КАК Период,
//                     |  НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ) КАК Месяц
//                     |ПОМЕСТИТЬ ВТ_1
//                     |ИЗ
//                     |  РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//                     |ГДЕ
//                     |  КалендарныеГрафики.ДеньВключенВГрафик
//                     |  И КалендарныеГрафики.ДатаГрафика МЕЖДУ &Начало И &Конец
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  КалендарныеГрафики.Календарь,
//                     |  НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  МАКСИМУМ(ГрафикиРаботы.Календарь) КАК Календарь
//                     |ПОМЕСТИТЬ ВТ_2
//                     |ИЗ
//                     |  Справочник.ГрафикиРаботы КАК ГрафикиРаботы
//                     |ГДЕ
//                     |  ГрафикиРаботы.ОрганизацияПоУмолчанию = &Организация
//                     |  И НЕ ГрафикиРаботы.ПометкаУдаления
//                     |  И ГрафикиРаботы.Коэффициент = 1
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_1.Месяц,
//                     |  ВТ_1.Период КАК Период,
//                     |  РАЗНОСТЬДАТ(&начало, &Конец, МЕСЯЦ) КАК КолВоМесяцев
//                     |ИЗ
//                     |  ВТ_2 КАК ВТ_2
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_1 КАК ВТ_1
//                     |      ПО ВТ_2.Календарь = ВТ_1.Календарь
//                     |
//                     |УПОРЯДОЧИТЬ ПО
//                     |  Период" ;
//    ТабДанные = ЗапросД.Выполнить().Выгрузить();
//    Возврат ТабДанные;
//КонецФункции
//
//Функция ПроверитьПериодДляЭтаповОплат(Конец,Организация) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросД = Новый Запрос;
//    ЗапросД.УстановитьПараметр("Организация",Организация);
//    ЗапросД.УстановитьПараметр("Конец",Конец);
//    ЗапросД.Текст =  "ВЫБРАТЬ
//                     |  КалендарныеГрафики.Календарь,
//                     |  МАКСИМУМ(КалендарныеГрафики.ДатаГрафика) КАК Период,
//                     |  НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ) КАК Месяц
//                     |ПОМЕСТИТЬ ВТ_1
//                     |ИЗ
//                     |  РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
//                     |ГДЕ
//                     |  НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Конец, МЕСЯЦ)
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  КалендарныеГрафики.Календарь,
//                     |  НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  МАКСИМУМ(ГрафикиРаботы.Календарь) КАК Календарь
//                     |ПОМЕСТИТЬ ВТ_2
//                     |ИЗ
//                     |  Справочник.ГрафикиРаботы КАК ГрафикиРаботы
//                     |ГДЕ
//                     |  ГрафикиРаботы.ОрганизацияПоУмолчанию = &Организация
//                     |  И НЕ ГрафикиРаботы.ПометкаУдаления
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_1.Месяц
//                     |ПОМЕСТИТЬ ВТ_3
//                     |ИЗ
//                     |  ВТ_2 КАК ВТ_2
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_1 КАК ВТ_1
//                     |      ПО ВТ_2.Календарь = ВТ_1.Календарь
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_3.Месяц
//                     |ИЗ
//                     |  ВТ_3 КАК ВТ_3
//                     |ГДЕ
//                     |  НЕ ВТ_3.Месяц ЕСТЬ NULL" ;
//    Возврат ЗапросД.Выполнить().Пустой();
//КонецФункции
//
////+++ Брук Б 22.09.2021 https://ows-jira.spb.openwaygroup.com/browse/ONEC-6945
//Функция ОткрыватьФормуПроверкаДанныхDeliveryDedicatedSupportПриЗапуске() Экспорт
//	Возврат РольДоступна("ОткрыватьФормуПроверкаДанныхDeliveryDedicatedSupportПриЗапуске");	
//КонецФункции
////--- Брук Б 22.09.2021 https://ows-jira.spb.openwaygroup.com/browse/ONEC-6945
//	
//Функция ПроставитьДатуСКД(Период) Экспорт
//    Если   ЗначениеЗаполнено(Период) Тогда
//        Возврат Период;
//    Иначе
//        Возврат ТекущаяДата();
//    КонецЕсли;
//КонецФункции
//
//Процедура ОчиститьДанныеПоОтчетуСКД(Пользователь,Название) Экспорт
//    НЗР = РегистрыСведений.ДанныеДляРасчетаОтчетаВСКД.СоздатьНаборЗаписей();
//    НЗР.Отбор.Пользователь.Установить(Пользователь,истина);
//    НЗР.Отбор.НазваниеОтчета.Установить(Название,истина);
//    НЗР.Записать(истина);
//КонецПроцедуры
//
//Функция ПолучитьОсновнойВидИнстансаJIRA() Экспорт
//	
//	УстановитьПривилегированныйРежим(истина);
//	
//	ОсновнойВидИнстансаJIRA = Константы.ОсновнойВидИнстансаJIRA.Получить();
//	Если НЕ ЗначениеЗаполнено(ОсновнойВидИнстансаJIRA) Тогда 
//		ОсновнойВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA");	
//	КонецЕсли;	
//	
//    Возврат ОсновнойВидИнстансаJIRA;
//    
//КонецФункции
//
//Функция ЭтоСегментБазыINC() Экспорт
//		
//	УстановитьПривилегированныйРежим(истина);
//	
//	Возврат ПолучитьОсновнойВидИнстансаJIRA() = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS");	
//    
//КонецФункции
//
//Функция ЭтоСегментБазыCOM() Экспорт
//		
//	УстановитьПривилегированныйРежим(истина);
//	
//	Возврат ПолучитьОсновнойВидИнстансаJIRA() = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA");	
//    
//КонецФункции
//
//
//Процедура ЗаписатьЧтоОбъектОбработан(Объект,НазванияВида) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    НазВида = ПланыВидовХарактеристик.OW_ДополнительныеПараметры.НайтиПоНаименованию(НазванияВида,истина);
//    Если НазВида.Пустая() Тогда
//        ОБ_Н = ПланыВидовХарактеристик.OW_ДополнительныеПараметры.СоздатьЭлемент();
//        ОБ_Н.Наименование = НазванияВида;
//        ОБ_Н.ТипЗначения = Тип("Булево");
//        ОБ_Н.Записать();
//        НазВида = ОБ_Н.Ссылка;
//    КонецЕсли;
//    
//    НЗР = РегистрыСведений.ОбработанныеОбъекты.СоздатьМенеджерЗаписи();
//    НЗР.Объект = Объект;
//    НЗР.Вид = НазВида;
//    НЗР.Обработан=Истина;
//    НЗР.Записать(истина);   
//КонецПроцедуры
//
//Функция ПолучитьЧтоОбъектОбработан(Объект,НазванияВида) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросС = новый Запрос;
//    ЗапросС.УстановитьПараметр("Объект",Объект);
//    ЗапросС.УстановитьПараметр("Наименование",НазванияВида);
//
//    ЗапросС.Текст = "ВЫБРАТЬ
//                    |   ОбработанныеОбъекты.Объект
//                    |ИЗ
//                    |   РегистрСведений.ОбработанныеОбъекты КАК ОбработанныеОбъекты
//                    |ГДЕ
//                    |   ОбработанныеОбъекты.Объект = &Объект
//                    |   И ОбработанныеОбъекты.Вид.Наименование = &Наименование
//                    |   И ОбработанныеОбъекты.Обработан" ;
//    Возврат не ЗапросС.Выполнить().Пустой();
//КонецФункции
//
//Функция ПолучитьОсновнуюОрганизацию() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    Если ow.ДоступнаТолькоОднаОрганизация().ПоказыватьТолькоОднуОрганизацию Тогда
//        Возврат   ow.ДоступнаТолькоОднаОрганизация().Организация;
//    Иначе
//        Возврат ПараметрыСеанса.ТекущийПользователь.ОсновнаяОрганизация;
//    КонецЕсли;
//КонецФункции
//
//Функция ВернутьПочтуСДоменом(Логин) Экспорт
//	
//	УстановитьПривилегированныйРежим(истина);	
//	
//	//++OW Копачев А.С. 04.08.2023 ONEC-8686 
//	//Возврат  Логин+"@"+ ВернутьДомен();
//	
//	Если ПустаяСтрока(Логин) 
//		ИЛИ ВРег(Логин) = "1C" 
//		ИЛИ ВРег(Логин) = ВРег("1C_notification") Тогда 
//		// для совместимости
//		Возврат ВернутьПочтуСДоменомПоУмолчанию(Логин);
//	КонецЕсли;	
//				
//	ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам) = Истина;
//	Если ИспользоватьРазделениеОтправкиПочтыПоРазнымДоменам = Истина Тогда 	
//		ПочтаСДоменом = ВернутьАдресЭлектроннойПочтыПоЛогину(Логин); 
//		Если ПустаяСтрока(ПочтаСДоменом) Тогда 
//			ПочтаСДоменом = ВернутьПочтуСДоменомПоУмолчанию(Логин);	
//		КонецЕсли;	
//	Иначе	
//		ПочтаСДоменом = ВернутьПочтуСДоменомПоУмолчанию(Логин);
//	КонецЕсли;	
//	//--OW Копачев А.С. 04.08.2023 ONEC-8686
//	
//	Возврат	ПочтаСДоменом;
//КонецФункции 
//
//Функция ВернутьПочтуСДоменомПоУмолчанию(Логин)
//	//++OW Копачев А.С. 07.08.2023 ONEC-8686
//	ПочтаСДоменом = Логин+"@"+ ВернутьДомен();
//	Возврат	ПочтаСДоменом;
//	//--OW Копачев А.С. 07.08.2023 ONEC-8686
//КонецФункции
//
//Функция ВернутьАдресЭлектроннойПочтыПоЛогину(Логин) Экспорт
//	//++OW Копачев А.С. 04.08.2023 ONEC-8686
//	УстановитьПривилегированныйРежим(истина);	
//
//	АдресЭлектроннойПочты = "";
//	
//	// проверяем наличие пользователя в разных доменах компаний
//	ДоменыКомпаний = КорпоративныеДоменыКомпаний();
//	Для Каждого ТекДомен Из ДоменыКомпаний Цикл
//		ПочтаСДоменом = Логин+"@"+ ТекДомен;
//		
//		ПользовательПоМылу = ПолучитьЮзераПоМылу(ПочтаСДоменом);
//		Если ЗначениеЗаполнено(ПользовательПоМылу) Тогда
//			// нашли по домену
//			АдресЭлектроннойПочты = ПочтаСДоменом;
//			
//			Прервать;
//		КонецЕсли;			
//	КонецЦикла;	
//	
//	Возврат АдресЭлектроннойПочты;
//	//--OW Копачев А.С. 04.08.2023 ONEC-8686
//КонецФункции
//
//Функция ВернутьДанныеДомена() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//	//++OW Копачев А.С. 04.08.2023 ONEC-8686
//	//ОсновнойДоменПочты = Константы.ОсновнойДоменПочты.Получить();
//	//Если ОсновнойДоменПочты="" Тогда
//	//    Возврат  "openwaygroup.com";   
//	//Иначе
//	//    Возврат  ОсновнойДоменПочты;
//	//КонецЕсли;
//	Возврат ВернутьДомен();
//	//--OW Копачев А.С. 04.08.2023 ONEC-8686	
//КонецФункции
//
//Функция ВернутьДомен() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ОсновнойДоменПочты = Константы.ОсновнойДоменПочты.Получить();
//    Если ОсновнойДоменПочты="" Тогда
//        Возврат  "openwaygroup.com";   
//    Иначе
//        Возврат  ОсновнойДоменПочты;
//    КонецЕсли;
//КонецФункции
//
//
//Функция ПолучитьПодраздениеИОрганизациюУПользователяПоСвязи(Email) Экспорт
//	ЗапросС = Новый Запрос;
//	ЗапросС.УстановитьПараметр("Email",Email);
//	ЗапросС.УстановитьПараметр("ПОEmail",?(ЗначениеЗаполнено(Email),Истина,Ложь));
//	ЗапросС.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
//                     |  Сотрудники.Ссылка,
//                     |  Сотрудники.Физлицо,
//                     |  ФизическиеЛицаКонтактнаяИнформация.Представление,
//                     |  Сотрудники.OW_Подразделение КАК Подразделение,
//                     |  Сотрудники.OW_Организация КАК Организаия
//                     |ПОМЕСТИТЬ ВТ_Данные
//                     |ИЗ
//                     |  Справочник.Сотрудники КАК Сотрудники
//                     |      ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//                     |      ПО Сотрудники.Физлицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
//                     |          И (ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование = ""Email"")
//                     |          И (ФизическиеЛицаКонтактнаяИнформация.Представление <> """")
//                     |ГДЕ
//                     |  НЕ Сотрудники.Ссылка ЕСТЬ NULL
//                     |  И Сотрудники.OW_Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
//                     |  И НЕ ФизическиеЛицаКонтактнаяИнформация.Представление ЕСТЬ NULL
//                     |  И НЕ Сотрудники.НеИспользуетсяДляОтчетовПоПостингу
//                     |  И ФизическиеЛицаКонтактнаяИнформация.Представление = &Email
//                     |  И ВЫБОР
//                     |          КОГДА &ПОEmail
//                     |              ТОГДА ИСТИНА
//                     |          ИНАЧЕ ЛОЖЬ
//                     |      КОНЕЦ
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.ОсновнойДокумент,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаПриема,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.Организация,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.Сотрудник,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.Пользователь,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаОкончания,
//                     |  СвязьСотрудникаСКомпаниямиСрезПоследних.Процент
//                     |ПОМЕСТИТЬ ВТ_СотрудникиПолныеДанные
//                     |ИЗ
//                     |  РегистрСведений.СвязьСотрудникаСКомпаниями.СрезПоследних КАК СвязьСотрудникаСКомпаниямиСрезПоследних
//                     |ГДЕ
//                     |  НЕ СвязьСотрудникаСКомпаниямиСрезПоследних.НеИспользовать
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_СотрудникиПолныеДанные.Пользователь,
//                     |  МАКСИМУМ(ВТ_СотрудникиПолныеДанные.ОсновнойДокумент.Дата) КАК ОсновнойДокументДата
//                     |ПОМЕСТИТЬ ВТ_ДатаМакДокумента
//                     |ИЗ
//                     |  ВТ_СотрудникиПолныеДанные КАК ВТ_СотрудникиПолныеДанные
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ВТ_СотрудникиПолныеДанные.Пользователь
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_ДатаМакДокумента.Пользователь,
//                     |  ВТ_СотрудникиПолныеДанные.ДатаПриема,
//                     |  ВТ_СотрудникиПолныеДанные.Организация,
//                     |  ВТ_СотрудникиПолныеДанные.Сотрудник,
//                     |  ВТ_СотрудникиПолныеДанные.ДатаОкончания,
//                     |  ВТ_СотрудникиПолныеДанные.Процент
//                     |ПОМЕСТИТЬ ВТ_Сотрудники
//                     |ИЗ
//                     |  ВТ_ДатаМакДокумента КАК ВТ_ДатаМакДокумента
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СотрудникиПолныеДанные КАК ВТ_СотрудникиПолныеДанные
//                     |      ПО ВТ_ДатаМакДокумента.ОсновнойДокументДата = ВТ_СотрудникиПолныеДанные.ОсновнойДокумент.Дата
//                     |          И ВТ_ДатаМакДокумента.Пользователь = ВТ_СотрудникиПолныеДанные.Пользователь
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  ВТ_Сотрудники.Пользователь,
//                     |  ВТ_Сотрудники.ДатаПриема КАК ДатаНачала,
//                     |  ВТ_Сотрудники.Организация,
//                     |  ВТ_Сотрудники.Сотрудник,
//                     |  ВТ_Сотрудники.ДатаОкончания,
//                     |  ВТ_Сотрудники.Процент
//                     |ПОМЕСТИТЬ ВТ_ОснИтогПоСотр
//                     |ИЗ
//                     |  ВТ_Сотрудники КАК ВТ_Сотрудники
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ ПЕРВЫЕ 1
//                     |  ВТ_ОснИтогПоСотр.Пользователь,
//                     |  ВТ_ОснИтогПоСотр.ДатаНачала,
//                     |  ВТ_ОснИтогПоСотр.Организация,
//                     |  ВТ_ОснИтогПоСотр.Сотрудник,
//                     |  ВТ_ОснИтогПоСотр.ДатаОкончания КАК ДатаОкончания,
//                     |  ВТ_ОснИтогПоСотр.Процент,
//                     |  ВТ_Данные.Ссылка,
//                     |  ВТ_Данные.Физлицо КАК Физлицо,
//                     |  ВТ_Данные.Представление,
//                     |  ВТ_Данные.Подразделение,
//                     |  ВТ_Данные.Организаия
//                     |ИЗ
//                     |  ВТ_Данные КАК ВТ_Данные
//                     |      ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОснИтогПоСотр КАК ВТ_ОснИтогПоСотр
//                     |      ПО ВТ_Данные.Ссылка = ВТ_ОснИтогПоСотр.Сотрудник
//                     |
//                     |УПОРЯДОЧИТЬ ПО
//                     |  ДатаОкончания УБЫВ" ;
//	
//	ТабСостояние = ЗапросС.Выполнить().Выгрузить();
//	Возврат ТабСостояние;		
//	
//КонецФункции
//
//Функция КакиеЕщеОрганизацииНужныПоАРМ()  Экспорт
//    УстановитьПривилегированныйРежим(истина);
//
//    ЗапросД = Новый Запрос; 
//	ЗапросД.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
//    ЗапросД.Текст =   "ВЫБРАТЬ
//                     |  ДоступныеОрганизацииУПользователя.Организация
//                     |ИЗ
//                     |  РегистрСведений.ДоступныеОрганизацииУПользователя КАК ДоступныеОрганизацииУПользователя
//                     |ГДЕ
//                     |  ДоступныеОрганизацииУПользователя.Пользователь = &Пользователь
//                     |  И ДоступныеОрганизацииУПользователя.ARM 
//                     |
//                     |СГРУППИРОВАТЬ ПО
//                     |  ДоступныеОрганизацииУПользователя.Организация"  ;
//    
//     Возврат ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
//КонецФункции
//
//Функция ВернутьСимволВалюты(Валюта) Экспорт
//    Если Валюта = Справочники.Валюты.Евро Тогда
//        Возврат "€";
//    ИначеЕсли Валюта = Справочники.Валюты.ДолларСША Тогда
//        Возврат "$";
//    Иначе
//        Возврат "₽";
//    КонецЕсли;     
//КонецФункции
//
//
//Функция ОрганизацииДоступДляОтчетовПоКонтролюОплат()  Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    //СписокОрг = ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
//    ЗапросД = Новый Запрос; 
//	ЗапросД.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
//    ЗапросД.Текст =   "ВЫБРАТЬ
//                      | ДоступныеОрганизацииУПользователя.Организация
//                      |ИЗ
//                      | РегистрСведений.ДоступныеОрганизацииУПользователя КАК ДоступныеОрганизацииУПользователя
//                      |ГДЕ
//                      | ДоступныеОрганизацииУПользователя.Пользователь = &Пользователь
//                      | И ДоступныеОрганизацииУПользователя.ДоступДляОтчетовПоКонтролюОплат
//                      |
//                      |СГРУППИРОВАТЬ ПО
//                      | ДоступныеОрганизацииУПользователя.Организация"  ;
//     СписокОрг = ЗапросД.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
//    // Если ПустааяКомпания Тогда
//        СписокОрг.Добавить(Справочники.Организации.ПустаяСсылка());
//    //   КонецЕсли;
//     Возврат СписокОрг;
//КонецФункции
//
//Функция ПроверитьВладельцаОтчета(Версия,Наименование) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросС = Новый Запрос;
//    ЗапросС.УстановитьПараметр("Администратор",ПараметрыСеанса.ТекущийПользователь);
//    ЗапросС.УстановитьПараметр("КлючВарианта",Версия);
//    ЗапросС.УстановитьПараметр("Наименование",Наименование);
//
//    ЗапросС.Текст ="ВЫБРАТЬ
//                   |    ВариантыОтчетов.Ссылка
//                   |ИЗ
//                   |    Справочник.ВариантыОтчетов КАК ВариантыОтчетов
//                   |ГДЕ
//                   |    ВариантыОтчетов.Наименование = &Наименование
//                   |    И ВариантыОтчетов.КлючВарианта = &КлючВарианта
//                   |    И ВариантыОтчетов.Администратор = &Администратор"; 
//    Возврат ЗапросС.Выполнить().Пустой();
//КонецФункции
//
//Функция ПроверимЧтоНужноСоздаватьSubTask(Фаза) Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    ЗапросС = Новый Запрос;
//    ЗапросС.УстановитьПараметр("ТипФазы",Фаза.ТипФазы);
//    ЗапросС.Текст ="ВЫБРАТЬ
//    |    МаппингТипаФазыИLabel.ТипФазы
//    |ИЗ
//    |    РегистрСведений.МаппингТипаФазыИLabel КАК МаппингТипаФазыИLabel
//    |ГДЕ
//    |    МаппингТипаФазыИLabel.ТипФазы = &ТипФазы
//    |    И МаппингТипаФазыИLabel.Использовать";
//    Если ЗапросС.Выполнить().Пустой() Тогда
//        Возврат Ложь;
//    Иначе
//        ЗапросФ = Новый Запрос;
//        ЗапросФ.УстановитьПараметр("Владелец",Фаза);
//        ЗапросФ.Текст = "ВЫБРАТЬ
//                        |   SubTasks.Ссылка,
//                        |   SubTasks.КодПроектаJIRA
//                        |ИЗ
//                        |   Справочник.SubTasks КАК SubTasks
//                        |ГДЕ
//                        |   SubTasks.Владелец = &Владелец";
//        
//        Если ЗапросФ.Выполнить().Пустой() Тогда
//            Возврат Истина;
//        Иначе
//            Если ЗапросФ.Выполнить().Выгрузить().Получить(0).КодПроектаJIRA="" Тогда
//                Возврат истина;
//            Иначе
//                Возврат Ложь;
//            КонецЕсли;
//        КонецЕсли;
//    КонецЕсли;
//    
//КонецФункции
//
//Функция ИспользоватьМноговалютныйУчетНаБП() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    Возврат OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьМноговалютныйУчетНаБП);
//    
//КонецФункции
//
//Функция ПолучитьМесяцПоЗакрытию(Период) Экспорт
//    ЗапросС = Новый Запрос;
//    ЗапросС.УстановитьПараметр("ТекДата",Период);
//    ЗапросС.Текст =  "ВЫБРАТЬ
//                     |  ПоследнийДеньЗагрузкиПостингаЗаМесяц.Период
//                     |ПОМЕСТИТЬ ВТ_1
//                     |ИЗ
//                     |  РегистрСведений.ПоследнийДеньЗагрузкиПостингаЗаМесяц КАК ПоследнийДеньЗагрузкиПостингаЗаМесяц
//                     |ГДЕ
//                     |  ПоследнийДеньЗагрузкиПостингаЗаМесяц.ДеньЧтенияИзJIRA <= &ТекДата
//                     |;
//                     |
//                     |////////////////////////////////////////////////////////////////////////////////
//                     |ВЫБРАТЬ
//                     |  МАКСИМУМ(ВТ_1.Период) КАК Период
//                     |ИЗ
//                     |  ВТ_1 КАК ВТ_1" ;
//    ТВ = ЗапросС.Выполнить().Выбрать();
//    Пока ТВ.Следующий() Цикл
//        Возврат ТВ.Период;
//    КонецЦикла;
//    
//КонецФункции
//
//Функция ДоступнаТолькоОднаОрганизация() Экспорт
//    УстановитьПривилегированныйРежим(истина);
//    СтрВ = новый Структура;
//    ЗапросС = Новый Запрос;
//    ЗапросС.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
//    ЗапросС.Текст = "ВЫБРАТЬ
//                    |   ДоступныеОрганизацииУПользователя.Организация
//                    |ИЗ
//                    |   РегистрСведений.ДоступныеОрганизацииУПользователя КАК ДоступныеОрганизацииУПользователя
//                    |ГДЕ
//                    |   ДоступныеОрганизацииУПользователя.Пользователь = &Пользователь
//                    |   И ДоступныеОрганизацииУПользователя.ПоказыватьТолькоОднуОрганизацию";
//    ТВ = ЗапросС.Выполнить().Выбрать();
//    Пока Тв.Следующий() Цикл
//        СтрВ.Вставить("ПоказыватьТолькоОднуОрганизацию",истина);
//        Стрв.Вставить("Организация",Тв.Организация);
//    КонецЦикла;
//    Если СтрВ.Количество()=0 Тогда
//        СтрВ.Вставить("ПоказыватьТолькоОднуОрганизацию",Ложь);
//        Стрв.Вставить("Организация",Справочники.Организации.ПустаяСсылка());       
//    КонецЕсли;
//    Возврат СтрВ;
//КонецФункции
//
//Процедура УказатьНастройкиДляОтчетовТопов(Отчет,ВариантОтчета,КомпоновщикНастроек) Экспорт   
//	
//	//++OW Копачев А.С. 14.08.2023 ONEC-8452
//	//Если СокрЛП(Отчет) = "Отчет по договорам" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//	//	Для Каждого СтрЭ из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//	//		Если СокрЛП(СтрЭ.ИдентификаторПользовательскойНастройки) = "382f94e0-c295-4e7f-887f-7c7a1fdc5d63" Тогда
//	//			СтрЭ.ПравоеЗначение = НачалоГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));   
//	//		КонецЕсли;
//	//		Если СокрЛП(СтрЭ.ИдентификаторПользовательскойНастройки) = "90593483-06dc-4bab-8977-10910daa1364" Тогда
//	//			СтрЭ.ПравоеЗначение = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));   
//	//		КонецЕсли;  
//	//	КонецЦикла;
//	//КонецЕсли;     
//	
//	//   Если СокрЛП(Отчет) = "Отчет по неоплаченным счетам" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//	//	Для Каждого СтрЭ из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//	//		Попытка
//	//            Если СокрЛП(СтрЭ.Параметр) = "НачалоПериода" Тогда
//	//                СтрЭ.Значение = Дата("20190101");   
//	//			КонецЕсли;
//	//		Исключение
//	//		КонецПопытки;
//	//		Попытка
//	//        Если СокрЛП(СтрЭ.Параметр) = "КонецПериода" Тогда
//	//            СтрЭ.Значение = КонецМесяца(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));   
//	//		КонецЕсли; 
//	//		Исключение
//	//		КонецПопытки;
//	//    КонецЦикла;
//	//КонецЕсли;
//	 
//	//Если СокрЛП(Отчет) = "Фазы с неподписанными контрактами" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//	//	Для Каждого СтрЭ из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//	//		Попытка
//	//        Если СокрЛП(СтрЭ.Параметр) = "ПериодОтчета" Тогда
//	//            СтрЭ.Значение.ДатаНачала = НачалоГода(Дата("20210101")); 
//	//			СтрЭ.Значение.ДатаОкончания  = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));
//	//		КонецЕсли;
//	//		Исключение
//	//		КонецПопытки;
//	//    КонецЦикла;
//	//КонецЕсли;
//
//	//Если СокрЛП(Отчет) = "Отчет по расходам саппорта" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//	//	Для Каждого СтрЭ из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//	//		Попытка
//	//        Если СокрЛП(СтрЭ.Параметр) = "НачалоПериода" Тогда
//	//            СтрЭ.Значение = НачалоГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));   
//	//		КонецЕсли;
//	//		Исключение
//	//		КонецПопытки;
//	//		Попытка
//	//        Если СокрЛП(СтрЭ.Параметр) = "КонецПериода" Тогда
//	//            СтрЭ.Значение = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));   
//	//		КонецЕсли;  
//	//		Исключение
//	//        КонецПопытки;
//	//        Попытка
//	//        Если СокрЛП(СтрЭ.Параметр) = "Валюта" Тогда
//	//            СтрЭ.Значение =Справочники.Валюты.Рубль;   
//	//		КонецЕсли;  
//	//		Исключение
//	//		КонецПопытки;  
//	//    КонецЦикла;
//	//КонецЕсли;
//	
//	//Если СокрЛП(Отчет) = "План/факт (по полученным деньгам)" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//	//    Для Каждого СтрЭ из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
//	//		Попытка
//	//            Если СокрЛП(СтрЭ.Параметр) = "Начало" Тогда
//	//                СтрЭ.Значение = НачалоГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата())); 
//	//				//СтрЭ.Значение.ДатаОкончания  = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));
//	//			КонецЕсли;
//	//		Исключение
//	//        КонецПопытки;
//	//        
//	//        Попытка
//	//            Если СокрЛП(СтрЭ.Параметр) = "Конец" Тогда
//	//                СтрЭ.Значение = КонецМесяца(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата())); 
//	//				//СтрЭ.Значение.ДатаОкончания  = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата()));
//	//			КонецЕсли;
//	//		Исключение
//	//		КонецПопытки;
//	//    КонецЦикла;
//	//   
//	//КонецЕсли;  
//	
//	НовыеЗначенияПараметров = Новый Соответствие;
//
//	Если Отчет = Справочники.ОтчетыДляАвтоматическогоФормированияИРассылки.ОтчетПоДоговорам
//		И ВариантОтчета = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ВариантОтчета_ОтчетПоДоговорам_ForTopManagersGroupedByMainBRM) Тогда 
//		
//		МесяцПоЗакрытию = ow.ПолучитьМесяцПоЗакрытию(ТекущаяДата());
//		
//		ПараметрОтчета = Новый ПараметрКомпоновкиДанных("ДатаПодписанияНачало");
//		НовоеЗначение = НачалоГода(МесяцПоЗакрытию);
//		
//		НовыеЗначенияПараметров.Вставить(ПараметрОтчета, НовоеЗначение); 
//		
//		ПараметрОтчета = Новый ПараметрКомпоновкиДанных("ДатаПодписанияОкончание");
//		НовоеЗначение = КонецГода(МесяцПоЗакрытию);
//		
//		НовыеЗначенияПараметров.Вставить(ПараметрОтчета, НовоеЗначение);
//		
//	КонецЕсли;	
//	//--OW Копачев А.С. 14.08.2023 ONEC-8452	
//	
//	//++OW Копачев А.С. 14.08.2023 ONEC-8452
//	Для Каждого ТекЭлементПользовательскойНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//		Если ТипЗнч(ТекЭлементПользовательскойНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
//			Продолжить;
//		КонецЕсли;	
//		
//		НовоеЗначениеПараметра = НовыеЗначенияПараметров.Получить(ТекЭлементПользовательскойНастройки.Параметр);
//		Если НовоеЗначениеПараметра <> Неопределено Тогда
//			ТекЭлементПользовательскойНастройки.Значение = НовоеЗначениеПараметра;	
//		КонецЕсли;			
//	КонецЦикла;
//	//--OW Копачев А.С. 14.08.2023 ONEC-8452
//
//КонецПроцедуры
//
//Функция ПолучитьСтруктуруПараметровФормы(БизнесРегионы, НаДату = Неопределено)
//	
//	ДатаОтчета = НачалоДня(ТекущаяДата());
//	
//	MD_Rate = 650;
//	//курсы
//	Валюта = Справочники.Валюты.Рубль;
//	Курс_EUR = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Евро"), ПредопределенноеЗначение("Справочник.Валюты.Рубль"), ДатаОтчета);
//	Курс_USD = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.ДолларСША"), ПредопределенноеЗначение("Справочник.Валюты.Рубль"), ДатаОтчета);
//	
//	//++OW Копачев А.С. 09.03.2023 ONEC-8350   
//	//ПериодОплатыНачало = НачалоГода(ow.ПолучитьМесяцПоЗакрытию(ДатаОтчета));
//	//ПериодОплатыОкончание = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ДатаОтчета));
//	Если НаДату = Неопределено Тогда
//		ПериодОплатыНачало = НачалоГода(ow.ПолучитьМесяцПоЗакрытию(ДатаОтчета)); 
//		ПериодОплатыОкончание = КонецГода(ow.ПолучитьМесяцПоЗакрытию(ДатаОтчета));
//	Иначе
//		ПериодОплатыНачало = НачалоГода(НаДату);
//		ПериодОплатыОкончание = КонецГода(НаДату);	
//	КонецЕсли;	
//	//--OW Копачев А.С. 09.03.2023 ONEC-8350
//		
//    Коэффициент_EUR_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Евро"), Валюта, ТекущаяДата());
//	Коэффициент_USD_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.ДолларСША"), Валюта, ТекущаяДата());
//	Коэффициент_RUB_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Рубль"), Валюта, ТекущаяДата());
//	Коэффициент_Тенге_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Тенге"), Валюта, ТекущаяДата());
//	Коэффициент_Гривна_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Гривна"), Валюта, ТекущаяДата());	
//	Коэффициент_Рупия_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Рупия"), Валюта, ТекущаяДата());	
//	Коэффициент_Донг_ВалютаОтчета = МодульВалютногоУчета.ПолучитьКоэффициентПересчета(ПредопределенноеЗначение("Справочник.Валюты.Донг"), Валюта, ТекущаяДата());	
//
//	СтруктураПараметров = Новый Структура;
//	
//	СтруктураПараметров.Вставить("ДатаОтчета",ДатаОтчета);
//	
//	СтруктураПараметров.Вставить("ПериодОплатыНачало",ПериодОплатыНачало);	
//	СтруктураПараметров.Вставить("ПериодОплатыОкончание",ПериодОплатыОкончание);	
//	
//	СтруктураПараметров.Вставить("ВерсияОтчета","V02");
//	
//	СтруктураПараметров.Вставить("БанкиВключен",Ложь);
//	СтруктураПараметров.Вставить("БанкиВидСравнения","Равно");
//	СтруктураПараметров.Вставить("Банки","");
//	
//	СтруктураПараметров.Вставить("МенеджерыВключен",Ложь);
//	СтруктураПараметров.Вставить("МенеджерыВидСравнения","Равно");	
//	СтруктураПараметров.Вставить("Менеджеры","");
//	
//	СтруктураПараметров.Вставить("КураторыВключен",Ложь);
//	СтруктураПараметров.Вставить("КураторыВидСравнения","Равно");
//	СтруктураПараметров.Вставить("Кураторы","");
//	СтруктураПараметров.Вставить("КураторыТип","");
//	
//	СтруктураПараметров.Вставить("GRMВключен",Ложь);
//	СтруктураПараметров.Вставить("GRMВидСравнения","Равно");
//	СтруктураПараметров.Вставить("GRMФильтр","");
//	
//	СтруктураПараметров.Вставить("ТипыДоговоровВключен",Ложь);
//	СтруктураПараметров.Вставить("ТипыДоговоровВидСравнения","Равно");
//	СтруктураПараметров.Вставить("ТипыДоговоров","");
//	
//	СтруктураПараметров.Вставить("БизнесРегионыВключен",?(БизнесРегионы=Неопределено,ложь,истина));
//	СтруктураПараметров.Вставить("БизнесРегионыВидСравнения",Перечисления.OW_ВидыСравненияДляОтборов.ВСписке);
//	СтруктураПараметров.Вставить("БизнесРегионы",БизнесРегионы);
//	
//	СтруктураПараметров.Вставить("MD_Rate",MD_Rate);
//	СтруктураПараметров.Вставить("ClientOWI",Ложь);
//	СтруктураПараметров.Вставить("ClientRUSCIS",Ложь);
//	СтруктураПараметров.Вставить("БезДетализации",Ложь);
//	
//	СтруктураПараметров.Вставить("Коэффициент_RUB_ВалютаОтчета",Коэффициент_RUB_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_EUR_ВалютаОтчета",Коэффициент_EUR_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_USD_ВалютаОтчета",Коэффициент_USD_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_Тенге_ВалютаОтчета",Коэффициент_Тенге_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_Гривна_ВалютаОтчета",Коэффициент_Гривна_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_Рупия_ВалютаОтчета",Коэффициент_Рупия_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Коэффициент_Донг_ВалютаОтчета",Коэффициент_Донг_ВалютаОтчета);
//	СтруктураПараметров.Вставить("Валюта",Валюта); 
//	
//	Возврат СтруктураПараметров;
//	
//	//- Пилюгин В.Е. 19.09.2017
//КонецФункции
//
//Функция ВернутьPipelineV02(НастройкиПериода,РезультатДляВозврата, НаДату = Неопределено) Экспорт
//	
//	Если НаДату = Неопределено Тогда 
//		НаДату = ТекущаяДата();	
//	КонецЕсли;
//	
//	ТабДокумент = Новый ТабличныйДокумент;	
//    ТабДокумент.Очистить();
//				
//    СписокБ = Новый СписокЗначений;
//    СписокБ.Добавить(Справочники.БизнесРегионы.CIS);
//    СписокБ.Добавить(Справочники.БизнесРегионы.RUS);
//	
//	//++OW Копачев А.С. 09.03.2023 ONEC-8350 
//	//СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(СписокБ);
//	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(СписокБ, НаДату);
//	//--OW Копачев А.С. 09.03.2023 ONEC-8350
//    	
//    СтруктураПараметров.Вставить("ТекущаяДата",ТекущаяДата());
//    СтруктураПараметров.Вставить("ДатаЭтапа",дата('20140101'));
//    
//    
//    СтруктураПараметров.Вставить("Стареющее_Этап",Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Стареющее);
//    СтруктураПараметров.Вставить("Действует_Этап",Перечисления.СтатусыЭтаповМаркетинговыхПроектов.Действует);
//    
//    СтруктураПараметров.Вставить("Декабрь2014Года",'20141201');
//    СтруктураПараметров.Вставить("ВерсияДляСкд","V3");
//    
//    //СтруктураПараметров.Вставить("ПустойСтатусMaringo", Перечисления.OW_MigrationStatusFromMaringo.ПустаяСсылка());
//    СтруктураПараметров.Вставить("Заморожено",Перечисления.СтатусыКоммерческихПредложенийКлиентам.Заморожено);
//    СтруктураПараметров.Вставить("Стареющее",Перечисления.СтатусыКоммерческихПредложенийКлиентам.Стареющее);
//    СтруктураПараметров.Вставить("Действует",Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
//    СтруктураПараметров.Вставить("ПринятоИОбработано",Перечисления.СтатусыКоммерческихПредложенийКлиентам.ПринятоИОбработано);
//    СтруктураПараметров.Вставить("Принято",Перечисления.СтатусыКоммерческихПредложенийКлиентам.Принято);
//    СтруктураПараметров.Вставить("НеСогласовано",Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано);
//    СтруктураПараметров.Вставить("НеСогласованоСоглашение",Перечисления.СтатусыСоглашений.НеСогласовано);
//    СтруктураПараметров.Вставить("НаВнутреннемСогласованииСоглашение",Перечисления.СтатусыСоглашений.НаВнутреннемСогласовании);
//    СтруктураПараметров.Вставить("ПриостановленоСоглашение",Перечисления.СтатусыСоглашений.Приостановлено);
//    СтруктураПараметров.Вставить("ДействуетПодписанСоглашение",Перечисления.СтатусыСоглашений.Действует);
//    СтруктураПараметров.Вставить("НаправленоКлиентуСоглашение",Перечисления.СтатусыСоглашений.НаправленКлиенту);
//    //вставка 09062016
//    СтруктураПараметров.Вставить("ПодписаноКлиентом",Перечисления.СтатусыСоглашений.ПодписаноКлиентом);
//    СтруктураПараметров.Вставить("ПодписаноOW",Перечисления.СтатусыСоглашений.ПодписаноOW);
//    //конец вставка 09062016
//    
//    СтруктураПараметров.Вставить("ЛицензионныйДоговор",Перечисления.ТипыДоговоров.ЛицензионныйДоговор);
//    СтруктураПараметров.Вставить("ДоговорВнедрения",Перечисления.ТипыДоговоров.ДоговорВнедрения);
//    СтруктураПараметров.Вставить("ДоговорСертификации",Перечисления.ТипыДоговоров.ДоговорСертификации);
//    СтруктураПараметров.Вставить("ДоговорОбучения",Перечисления.ТипыДоговоров.ДоговорОбучения);
//    СтруктураПараметров.Вставить("ДоговорОПредоставленииУслуг",Перечисления.ТипыДоговоров.ДоговорОПредоставленииУслуг);
//    СтруктураПараметров.Вставить("ПредоставлениеУслуг", Перечисления.ТипДокументаЗаказ.ПредоставлениеУслуг);
//    СтруктураПараметров.Вставить("Внедрение", Перечисления.ТипДокументаЗаказ.Внедрение);
//    СтруктураПараметров.Вставить("Лицензии", Перечисления.ТипДокументаЗаказ.Лицензии);
//    СтруктураПараметров.Вставить("Сертификация", Перечисления.ТипДокументаЗаказ.Сертификация);
//    СтруктураПараметров.Вставить("Обучение", Перечисления.ТипДокументаЗаказ.Обучение);
//    СтруктураПараметров.Вставить("Командировка", Перечисления.ТипДокументаЗаказ.Командировка);
//    СтруктураПараметров.Вставить("Сопровождение", Перечисления.ТипДокументаЗаказ.Сопровождение);
//    СтруктураПараметров.Вставить("Rate_MD",СтруктураПараметров.MD_Rate);
//    СтруктураПараметров.Вставить("Аннулирован", Перечисления.СтатусыСчета.Аннулирован);
//    СтруктураПараметров.Вставить("СчетНеСоздан", Перечисления.СтатусыСчета.СчетНеСоздан);
//    СтруктураПараметров.Вставить("СчетОтменен", Перечисления.СтатусыСчета.СчетОтменен);
//    СтруктураПараметров.Вставить("СчетОплачен", Перечисления.СтатусыСчета.СчетОплачен);
//    СтруктураПараметров.Вставить("СчетЗаморожен", Перечисления.СтатусыСчета.СчетЗаморожен);
//    СтруктураПараметров.Вставить("СчетПлохиеДолги", Перечисления.СтатусыСчета.ПлохиеДолги);
//    СписокБизнесРегионовOWI = OW.ПолучитьСписокБизнесРегионов_OWI();
//    СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS();
//    СтруктураПараметров.Вставить("СписокБизнесРегионовOWI", СписокБизнесРегионовOWI);
//    СтруктураПараметров.Вставить("СписокБизнесРегионовRUSCIS", СписокБизнесРегионовRUSCIS);
//    
//    ПроверкаOWICIS = СтруктураПараметров.ClientOWI+СтруктураПараметров.ClientRUSCIS;
//    СтруктураПараметров.Вставить("ПроверкаOWI", ?(ПроверкаOWICIS=1,Истина,Ложь));
//    СтруктураПараметров.Вставить("КлиентыOWI", СтруктураПараметров.ClientOWI);
//    СтруктураПараметров.Вставить("КлиентыRUS_CIS", СтруктураПараметров.ClientRUSCIS); 
//    СтруктураПараметров.Вставить("ПроверкаOWI", ?(ПроверкаOWICIS=1,Истина,Ложь));
//    СтруктураПараметров.Вставить("РольДоступнаPipeLineПоКП",РольДоступна("PipeLineПоКП"));
//	
//	//++OW Копачев А.С. 09.03.2023 ONEC-8448 
//	//СтруктураПараметров.Вставить("период", ТекущаяДата());
//	СтруктураПараметров.Вставить("период", КонецДня(НаДату));
//	СтруктураПараметров.Вставить("НаДату", КонецДня(НаДату));
//	//--OW Копачев А.С. 09.03.2023 ONEC-8448
//    	
//    СтруктураПараметров.Вставить("Thousands", истина);
//    СтруктураПараметров.Вставить("ИспользоватьОтборПоВидуИнстансаJIRA", Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA());
//    СтруктураПараметров.Вставить("ВидИнстансJIRA", OW.ПолучитьОсновнойВидИнстансаJIRA()); 
//    
//    //++OW Копачев А.С. 16.04.2022 ONEC-4295
//    ИспользоватьМноговалютныйУчетНаБП = OW.ИспользоватьМноговалютныйУчетНаБП() = Истина;
//    СтруктураПараметров.Вставить("ИспользоватьМноговалютныйУчетНаБП", ИспользоватьМноговалютныйУчетНаБП);
//    //--OW Копачев А.С. 16.04.2022 ONEC-4295
//    
//    
//    СтрОтвета = Отчеты.PipelineNewVersion.СформироватьОтчетДляPipline(СтруктураПараметров);
//    ТабДокумент = СтрОтвета.таб;
//    ТекУровень = ТабДокумент.КоличествоУровнейГруппировокСтрок();
//    Пока ТекУровень <> 0 Цикл
//        ТекУровень = ТекУровень - 1;
//        ТабДокумент.ПоказатьУровеньГруппировокСтрок(ТекУровень);
//    КонецЦикла;
//    
//    Справочники.ОтчетыДляАвтоматическогоФормированияИРассылки.ЗаменитьТекстВОбласти(ТабДокумент);
//    
//    РезультатДляВозврата.ТабличныйДокумент = ТабДокумент;
//    РезультатДляВозврата.НастройкиПериода = НастройкиПериода; 
//    
//    Возврат РезультатДляВозврата;
//    
//КонецФункции
//
//Процедура ПланФактНастройкиДляОтчетовТопов(Отчет,ВариантОтчета,КомпоновщикНастроек,Результат) Экспорт
//    Если СокрЛП(Отчет) = "План/факт (по полученным деньгам)" и сокрЛП(ВариантОтчета)="for Top Managers - grouped by Main BRM" тогда
//        Н = 1;
//        Для Каждого СтрВ из  КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
//            Если ПолучитьНазваниеПараметра(СтрВ) = Новый ПараметрКомпоновкиДанных("Валюта") Тогда
//                Вал = ?(СтрВ.Значение=ПредопределенноеЗначение("Справочник.Валюты.Евро"),"Eur","Rub");
//                Прервать;
//            КонецЕсли;
//        КонецЦикла;
//        Пока Истина Цикл
//            ТекОбласть = Результат.НайтиТекст("#Валюта");
//            Если ТекОбласть <> Неопределено Тогда
//                Если Н<>1 Тогда
//                    ТекОбласть.Текст = СтрЗаменить(ТекОбласть.Текст,"#Валюта",Вал);
//                КонецЕсли;
//                Н=Н+1;
//            Иначе
//                Прервать;
//            КонецЕсли;
//        КонецЦикла;             
//    КонецЕсли;     
//КонецПроцедуры
//
//Функция ПолучитьНазваниеПараметра(СтрВ)
//    Попытка
//        Возврат СтрВ.Параметр;  
//    Исключение
//        Возврат "";    
//    КонецПопытки;
//КонецФункции
//
//Функция ПолучитьДниПоСотрудникуЗаПериод(Пользователь, НачалоПериода, ОкончаниеПериода) Экспорт	
//	
//	СписокПользователей = Новый СписокЗначений;
//	СписокПользователей.Добавить(Пользователь);
//
//	ТаблицаГрафикПользователя = ПолучитьДниПоСотрудникамЗаПериод(СписокПользователей, НачалоПериода, ОкончаниеПериода);
//	
//	Возврат ТаблицаГрафикПользователя;
//	
//КонецФункции
//
//
//
//Функция ПолучитьДниПоСотрудникамЗаПериод(СписокПользователей, НачалоПериода, ОкончаниеПериода)
//		
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень КАК ПериодДень,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер КАК Пользователь,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Год,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.НаправлениеДеятельности КАК НаправлениеДеятельности,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ВидПолдня,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ЭтоОтсутствие,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ЭтоКомандировка,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ГрафикРаботы,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ВидДня,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.КодПроектаJIRA,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Значение,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ЗначениеПлан,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасов,
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасовПоГрафикуРаботы,
//		|	ВЫБОР
//		|		КОГДА ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ВидДня = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
//		|				И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасов > 0
//		|			ТОГДА ИСТИНА
//		|		ИНАЧЕ ЛОЖЬ
//		|	КОНЕЦ КАК РабочийДеньФакт,
//		|	ВЫБОР
//		|		КОГДА ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ВидДня = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
//		|				И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасовПоГрафикуРаботы > 0
//		|			ТОГДА ИСТИНА
//		|		ИНАЧЕ ЛОЖЬ
//		|	КОНЕЦ КАК РабочийДеньПоГрафику
//		|ИЗ
//		|	РегистрСведений.ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням КАК ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням
//		|ГДЕ
//		|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер В(&Офицеры)
//		|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень МЕЖДУ &ПериодС И &ПериодПо
//		|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ПериодДень,
//		|	Пользователь,
//		|	НаправлениеДеятельности";
//	
//	Запрос.УстановитьПараметр("Офицеры", 	СписокПользователей);
//	Запрос.УстановитьПараметр("ПериодС", 	НачалоПериода);
//	Запрос.УстановитьПараметр("ПериодПо", 	ОкончаниеПериода);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ТаблицаГрафикиПользователей = РезультатЗапроса.Выгрузить();
//	
//	ТаблицаГрафикиПользователей.Индексы.Добавить("Пользователь, РабочийДеньФакт");
//	ТаблицаГрафикиПользователей.Индексы.Добавить("Пользователь, ПериодДень, РабочийДеньФакт");
//	ТаблицаГрафикиПользователей.Индексы.Добавить("Пользователь, ПериодДень, НаправлениеДеятельности");
//	
//	Возврат ТаблицаГрафикиПользователей;
//	
//КонецФункции
//
//
//Функция РассчитатьКоличествоРабочихДнейПоГрафику(ТаблицаГрафикПользователей, Пользователь, ДатаНачала, ДатаОкончания) Экспорт
//	
//	КоличествоРабочихДней = 0;
//	
//	ДанныеПолучены = Ложь;
//	
//	СтруктураОтбора = Новый Структура("Пользователь", Пользователь);
//	
//	ТаблицаГрафикПользователейПоПользователюРабота = ТаблицаГрафикПользователей.Скопировать(СтруктураОтбора);
//	
//	// избавимся от дублей                                                                                   
//	ТаблицаГрафикПользователейПоПользователюРабота.Свернуть("Пользователь, РабочийДеньПоГрафику, ПериодДень");
//	
//	Для каждого ст Из ТаблицаГрафикПользователейПоПользователюРабота Цикл
//		Если ст.ПериодДень >= ДатаНачала И ст.ПериодДень <= ДатаОкончания Тогда
//			Если ст.РабочийДеньПоГрафику Тогда 
//				КоличествоРабочихДней = КоличествоРабочихДней + 1;
//			КонецЕсли;
//			ДанныеПолучены = Истина;
//		КонецЕсли; 
//	КонецЦикла; 
//	
//	Если ДанныеПолучены Тогда 
//		Возврат КоличествоРабочихДней;
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли;	
//	
//КонецФункции
//
