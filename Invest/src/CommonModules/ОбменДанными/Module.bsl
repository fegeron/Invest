
Функция ЗапроситьИдентификаторыИнструмента(Instrument_Id) Экспорт 
	
	СервисAPI = Справочники.СервисыAPI.Tinkoff;
	
	МетодЗапроса = Справочники.МетодыЗапросов.TinkoffGetFindInstrument;
	
	Данные = Новый Структура("Instrument_Id", Instrument_Id);	
	СтрокаJSON = РаботаСJSON.ЗаписатьДанныеВJSON(Данные);		
	
	СтруктураВозврата = ОбработатьЗапросНемедленно(МетодЗапроса, СтрокаJSON, СервисAPI);
	
	Возврат СтруктураВозврата;
	 
КонецФункции

Функция ЗапроситьТорговыйСтатусИнструмента(Instrument_Id) Экспорт 
	
	СервисAPI = Справочники.СервисыAPI.Tinkoff;
	
	МетодЗапроса = Справочники.МетодыЗапросов.TinkoffGetTradingStatus;
	
	Данные = Новый Структура("Instrument_Id", Instrument_Id);	
	СтрокаJSON = РаботаСJSON.ЗаписатьДанныеВJSON(Данные);		
	
	СтруктураВозврата = ОбработатьЗапросНемедленно(МетодЗапроса, СтрокаJSON, СервисAPI);
	
	Возврат СтруктураВозврата;
	 
КонецФункции

Функция ОбработатьЗапросНемедленно(МетодЗапроса, СтрокаJSON, СервисAPI) Экспорт 
			
	СтруктураОтбораОбмена = РаботаСЖурналомОбмена.СтруктураИзмеренийОбмена(ТекущаяУниверсальнаяДата(), МетодЗапроса, Новый УникальныйИдентификатор(), СервисAPI);
		 
	СтруктураВозврата = РаботаСHTTP.ОтправитьДанныеВоВнешнююСистемуДляОбработки(СтруктураОтбораОбмена, СтрокаJSON);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправитьДанныеВоВнешнююСистемуДляОбработки(Знач СтруктураОтбораОбмена, СтрокаJSON) Экспорт
	
	СтруктураВозврата = РаботаСHTTP.ИнициализироватьСтруктутруВозврата();
	
	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда 	
		РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНетДанныхДляОтправки());
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	МетодЗапроса   	= СтруктураОтбораОбмена.МетодЗапроса;
	СервисAPI 		= СтруктураОтбораОбмена.СервисAPI;
	
	СтрокаJSONОтвет = "";
	
		Если МетодЗапроса.ИсходящийЗапрос Тогда 
			
			// соединение			
			АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МетодЗапроса.Адрес);
			ТекстЗапроса = СтрокаJSON;			
			
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда
				// для удаления тело запроса не используется, а меняется адрес
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда
				// для получения тело запроса не используется, а меняется адрес
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;
				Если ДанныеЗапроса.Свойство("requestBody") Тогда 
					ТекстЗапроса = ДанныеЗапроса.requestBody;
				КонецЕсли;
			КонецЕсли;	
			
			///////////////////////////////////////////////////////
			// журналирование				
			ДанныеОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
			ДанныеОбмена.Вставить("ТекстСообщения", ТекстЗапроса);
			ДанныеОбмена.Вставить("ДатаОтправки", 	ТекущаяДатаСеанса());
			ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
			ДанныеОбмена.Вставить("ИсходящийЗапрос",Истина);
			РаботаСЖурналомОбмена.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
			//////////////////////////////////////////////////////	

			// отправка данных
			Соединение = РаботаСHTTP.СоздатьHTTPСоединение(СервисAPI);	
			
			Запрос = РаботаСHTTP.СоздатьHTTPЗапрос(АдресРесурса, СервисAPI);
			Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);	
						
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда 
				ОтветHTTP = Соединение.Записать(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.POST Тогда	
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда	
				ОтветHTTP = Соединение.Удалить(Запрос);	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда	
				ОтветHTTP = Соединение.Получить(Запрос);		
			Иначе
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			КонецЕсли;
			
			СтрокаJSONОтвет 	 			= ОтветHTTP.ПолучитьТелоКакСтроку();
			СтруктураВозврата.КодСостояния  = ОтветHTTP.КодСостояния;
			
			Если ОтветHTTP.КодСостояния >= 400 Тогда 
				РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, СтрокаJSONОтвет, ОтветHTTP.КодСостояния);
			КонецЕсли;
		Иначе		
			РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНеверныйПолучательДанных());
		КонецЕсли;			
//	Иначе	
//		РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНеверныйПолучательДанных());	
//	КонецЕсли;
	
		
	///////////////////////////////////////////////////////
	// журналирование ответа
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, СтруктураВозврата.ТекстОшибки, СтруктураВозврата.КодСостояния);
	Иначе		
		СтруктураВозврата.Данные = СтрокаJSONОтвет;
		OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, СтруктураВозврата.КодСостояния);
	КонецЕсли;
	//////////////////////////////////////////////////////		
	
	ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(СервисAPI, МетодЗапроса, СтруктураОтбораОбмена.ИдентификаторЗапроса, СтрокаJSONОтвет, СтруктураВозврата.ЕстьОшибки);
	
	Возврат СтруктураВозврата;
КонецФункции

//
//Функция ОтправитьДанныеВоВнешнююСистемуДляОбработки(Знач СтруктураОтбораОбмена, СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда 	
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНетДанныхДляОтправки());
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	МетодЗапроса   	= СтруктураОтбораОбмена.МетодЗапроса;
//	Инстанс 		= СтруктураОтбораОбмена.Инстанс;
//	
//	СтрокаJSONОтвет = "";
//	
//	// по умолчанию к JIRA_SPB
//	//++OW Копачев А.С. 05.04.2022 ONEC-7464
//	//Если Инстанс = JIRA.ПолучитьИнстансДляJiraSpb()
//	//ИЛИ Инстанс = WIKI.ПолучитьИнстансWIKI()
//	//	ИЛИ Инстанс = JIRA.ПолучитьИнстансДляJiraOws() Тогда   //OW Копачев А.С. 12.03.2021 ONEC-6602
//	Если JIRA.ЭтоИнстансJiraSpb(Инстанс)
//		ИЛИ WIKI.ЭтоИнстансWIKI(Инстанс)
//		ИЛИ JIRA.ЭтоИнстансJiraOws(Инстанс) Тогда
//	//--OW Копачев А.С. 05.04.2022 ONEC-7464	
//	
//		//++OW Копачев А.С. 08.06.2022 ONEC-7464
//		Если JIRA.ПолучитьВидИнстансаJIRA(Инстанс) <> OW.ПолучитьОсновнойВидИнстансаJIRA() Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, "", "Instance segment differs from the database segment. Data skipped");
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		//--OW Копачев А.С. 08.06.2022 ONEC-7464
//		
//	//Если JIRA.ЭтоИнстансJiraSpb(Инстанс) Тогда
//		
//		// проверка что запрос исходящий
//		
//		//Если  МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferences") 
//		//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostDocuments") Тогда 
//		Если МетодЗапроса.ИсходящийЗапрос Тогда 
//			
//			// соединение			
//			АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МетодЗапроса.Адрес);
//			ТекстЗапроса = СтрокаJSON;			
//			
//			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда
//				// для удаления тело запроса не используется, а меняется адрес
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//					//АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(АдресРесурса);
//				КонецЕсли;	
//			//++OW Копачев А.С. 07.11.2019 ONEC-5049 
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда
//				// для получения тело запроса не используется, а меняется адрес
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//				КонецЕсли;	
//			//--OW Копачев А.С. 07.11.2019 ONEC-5049
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//				КонецЕсли;
//				Если ДанныеЗапроса.Свойство("requestBody") Тогда 
//					ТекстЗапроса = ДанныеЗапроса.requestBody;
//				КонецЕсли;
//			КонецЕсли;	
//			
//			///////////////////////////////////////////////////////
//			// журналирование				
//			ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//			ДанныеОбмена.Вставить("ТекстСообщения", ТекстЗапроса);
//			ДанныеОбмена.Вставить("ДатаОтправки", 	ТекущаяДатаСеанса());
//			ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//			ДанныеОбмена.Вставить("ИсходящийЗапрос",Истина);
//			OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//			//////////////////////////////////////////////////////	
//
//			// отправка данных
//			Соединение = JIRA.СоздатьHTTPСоединениеJIRA(Инстанс);	
//			
//			Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, Инстанс);
//			Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);	
//						
//			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда 
//				ОтветHTTP = Соединение.Записать(Запрос);
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.POST Тогда	
//				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда	
//				ОтветHTTP = Соединение.Удалить(Запрос);	
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда	
//				ОтветHTTP = Соединение.Получить(Запрос);		
//			Иначе
//				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
//			КонецЕсли;
//			
//			СтрокаJSONОтвет 	 			= ОтветHTTP.ПолучитьТелоКакСтроку();
//			СтруктураВозврата.КодСостояния  = ОтветHTTP.КодСостояния;
//			
//			Если ОтветHTTP.КодСостояния >= 400 Тогда 
//				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, СтрокаJSONОтвет, ОтветHTTP.КодСостояния);
//			КонецЕсли;
//		Иначе		
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());
//		КонецЕсли;			
//	Иначе	
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());	
//	КонецЕсли;





//// ПолучитьМетодЗапроса
////
//// Параметры:
////  ИмяМетодаЗапроса  - Строка - наименование метода запроса для поиска
////  СоздаватьПриОтсутствии  - Булево - признак формирования элемента при отсутсвии
//// Возвращаемое значение:
////   Справочник.МетодыЗапросовСВнешнимиСистемами - найденный элемент
////
//Функция ПолучитьМетодЗапроса(Знач ИмяМетодаЗапроса, СоздаватьПриОтсутствии = Истина) Экспорт
//	
//	МетодЗапроса = Справочники.МетодыЗапросовСВнешнимиСистемами.ПустаяСсылка();
//	
//	// проверим длину не более 150 символов (ограничение наименования), чтобы не было дублей при поиске-создании
//	Если СтрДлина(ИмяМетодаЗапроса) > 150 Тогда 
//		ИмяМетодаЗапроса = Сред(ИмяМетодаЗапроса,1,150);	
//	КонецЕсли;	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ ПЕРВЫЕ 1
//		|	МетодыЗапросовСВнешнимиСистемами.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.МетодыЗапросовСВнешнимиСистемами КАК МетодыЗапросовСВнешнимиСистемами
//		|ГДЕ
//		|	МетодыЗапросовСВнешнимиСистемами.Наименование = &ИмяМетодаЗапроса
//		|	И МетодыЗапросовСВнешнимиСистемами.ПометкаУдаления = ЛОЖЬ";
//	
//	Запрос.УстановитьПараметр("ИмяМетодаЗапроса", ИмяМетодаЗапроса);	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Если РезультатЗапроса.Пустой() Тогда 		
//		Если СоздаватьПриОтсутствии = Истина Тогда 
//			//формирование нового элемента
//			МетодЗапроса = СоздатьМетодЗапроса(ИмяМетодаЗапроса);
//		КонецЕсли;	
//	Иначе
//		Выборка = РезультатЗапроса.Выбрать();
//		Выборка.Следующий();
//		МетодЗапроса = Выборка.Ссылка;
//	КонецЕсли;
//
//	Возврат МетодЗапроса;
//	
//КонецФункции	
//
//Функция СоздатьМетодЗапроса(ИмяМетодаЗапроса)  Экспорт
//	НовЭлемент = Справочники.МетодыЗапросовСВнешнимиСистемами.СоздатьЭлемент();
//	НовЭлемент.Наименование = ИмяМетодаЗапроса;
//	НовЭлемент.Записать();
//	
//	Возврат НовЭлемент.Ссылка;
//КонецФункции
//
/////////////////////////////////////////////////////////////////////////////////////
//// ОБЩИЕ ФУНКЦИИ С DELIVERY PORTAL
//
////Функция получения инстанса-источника (EMEAA, RU) по пользователю
//// Параметры: ПользовательВходящегоПодключения - Ссылка на справочник Пользователи
////
//Функция ПолучитьИнстансDeliveryPortal(ПользовательВходящегоПодключения = Неопределено) Экспорт
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИнстансDeliveryPortal = ПолучитьОсновнойИнстансDeliveryPortal(); 	
//	Если ЗначениеЗаполнено(ПользовательВходящегоПодключения) Тогда 
//		Если ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияDeliveryPortal_EMEAA) Тогда 
//			ИнстансDeliveryPortal = ПолучитьИнстансDeliveryPortal_EMEAA();	
//		ИначеЕсли ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияDeliveryPortal_RU) Тогда 
//			ИнстансDeliveryPortal = ПолучитьИнстансDeliveryPortal_RU();
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	Возврат ИнстансDeliveryPortal;
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//КонецФункции
//
//Функция ПолучитьОсновнойИнстансDeliveryPortal() Экспорт
//	
//	ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();
//	Если ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS") Тогда 
//		ИнстансDeliveryPortal = ПолучитьИнстансDeliveryPortal_RU();
//	Иначе
//		ИнстансDeliveryPortal = ПолучитьИнстансDeliveryPortal_EMEAA();	
//	КонецЕсли;
//	
//	Возврат ИнстансDeliveryPortal;; 
//		
//КонецФункции
//
//Функция ПолучитьИнстансDeliveryPortal_EMEAA() Экспорт
//	
//	Возврат ПредопределенноеЗначение("Справочник.СоединениеССайтами.DeliveryPortal_EMEAA"); 
//		
//КонецФункции
//
//Функция ПолучитьИнстансDeliveryPortal_RU() Экспорт
//	
//	Возврат ПредопределенноеЗначение("Справочник.СоединениеССайтами.DeliveryPortal_RU"); 
//		
//КонецФункции
//
//Функция ЭтоИнстансDeliveryPortal_EMEAA(Инстанс) Экспорт
//	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.DeliveryPortal_EMEAA");
//КонецФункции
//
//Функция ЭтоИнстансDeliveryPortal_RU(Инстанс) Экспорт
//	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.DeliveryPortal_RU");
//КонецФункции
//
//Функция ИспользоватьРазделениеПоБизнесРегионамDeliveryPortal() Экспорт
//	//++OW Копачев А.С. 29.03.2022 ONEC-7464
//	ДатаНачалаИспользования = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПоБизнесРегионамDeliveryPortal);
//	
//	Если ЗначениеЗаполнено(ДатаНачалаИспользования) 
//		И НачалоДня(ДатаНачалаИспользования) <= НачалоДня(ТекущаяДатаСеанса()) Тогда 
//		
//		Возврат Истина;
//	КонецЕсли;	
//	
//	Возврат Ложь;
//	//--OW Копачев А.С. 29.03.2022 ONEC-7464
//КонецФункции
//
//Функция ПолучитьВидыИнстансовJIRAПоВидуИнстансаDeliveryPortal(ИнстансDP) Экспорт
//	
//	ВидыИнстансовJIRA = Новый Массив;
//	
//	Если ЭтоИнстансDeliveryPortal_EMEAA(ИнстансDP) Тогда 
//		ВидыИнстансовJIRA.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA"));
//	ИначеЕсли ЭтоИнстансDeliveryPortal_RU(ИнстансDP) Тогда
//		ВидыИнстансовJIRA.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS"))
//	КонецЕсли;	
//	
//	//УДАЛИТЬ
//	ВидыИнстансовJIRA.Добавить(ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.ПустаяСсылка"));   // для совместимости
//	
//	Возврат ВидыИнстансовJIRA;
//	
//КонецФункции	
//
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ С ЖУРНАЛОМ ОБМЕНА ДАННЫМИ С ВНЕШНИМИ СИСТЕМАМИ  
////
//
//Функция СтруктураИзмеренийОбмена(Период, Знач МетодЗапроса, ИдентификаторЗапроса, Инстанс) Экспорт
//	
//	СтруктураИзмеренийОбмена = Новый Структура();
//	СтруктураИзмеренийОбмена.Вставить("Период", 				Период);
//	
//	Если ТипЗнч(МетодЗапроса) = Тип("Строка") Тогда 
//		МетодЗапроса = ПолучитьМетодЗапроса(МетодЗапроса,Истина);	
//	КонецЕсли;
//	
//	СтруктураИзмеренийОбмена.Вставить("МетодЗапроса", 			МетодЗапроса);
//	СтруктураИзмеренийОбмена.Вставить("ИдентификаторЗапроса", 	ИдентификаторЗапроса);	
//		
//	СтруктураИзмеренийОбмена.Вставить("Инстанс", 				Инстанс);
//	
//	Возврат СтруктураИзмеренийОбмена;
//	
//КонецФункции
//
//// ЗаписатьДанныеВЖурналОбмена
////  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами"
//// Параметры
////	СтруктураДанных	- Структура - Содержит данные для регистра
////	
//Процедура ЗаписатьДанныеВЖурналОбмена(СтруктураДанных) Экспорт
//	
//	МенеджерЗаписи = РегистрыСведений.ЖурналОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
//	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
//	
//	МенеджерЗаписи.Записать(Истина);
//			
//КонецПроцедуры // ЗаписатьДанныеВЖурналОбмена
//
//// ОбновитьДанныеЖурналаОбмена
////  процедура обновляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами", перезаписывая РС новыми данными
//// Параметры
////	СтруктураОтбораРегистра	- Структура - Содержит значение измерений регистра для отбора
////	СтруктураДанныхДляОбновления- Структура данных для обновления: измерений, ресурсов, или реквизитов регистра.
//Процедура ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления) Экспорт
//	
//	НаборЗаписей = РегистрыСведений.ЖурналОбменаДаннымиСВнешнимиСистемами.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Период.Установить(СтруктураОтбораРегистра.Период);
//	НаборЗаписей.Отбор.МетодЗапроса.Установить(СтруктураОтбораРегистра.МетодЗапроса);
//	НаборЗаписей.Отбор.Инстанс.Установить(СтруктураОтбораРегистра.Инстанс);
//	НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(СтруктураОтбораРегистра.ИдентификаторЗапроса); 
//	//НаборЗаписей.Отбор.ИсходящийЗапрос.Установить(СтруктураОтбораРегистра.ИсходящийЗапрос);
//
//	НаборЗаписей.Прочитать();
//		
//	Если НаборЗаписей.Количество() > 0 Тогда 
//		Для каждого ЭлементНабора Из НаборЗаписей Цикл
//			
//			ЗаполнитьЗначенияСвойств(ЭлементНабора, СтруктураДанныхДляОбновления);
//			
//		КонецЦикла;
//		
//		НаборЗаписей.Записать();
//	КонецЕсли;	
//		
//КонецПроцедуры // ОбновитьДанныеЖурналаОбмена
//
//// ЗаписатьВыполненоВЖурналОбмена
////  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Выполнено"
//// Параметры
////	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
////	ТекстСообщенияОтвет - Строка - ответ
////
//Процедура ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораРегистра,Знач ТекстСообщенияОтвет, КодСостояния = Неопределено) Экспорт
//	
//	СтруктураДанныхДляОбновления = Новый Структура();
//	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
//	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Выполнено);
//	Если КодСостояния <> Неопределено Тогда 
//		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
//	КонецЕсли;
//	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);
//
//	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
//	
//КонецПроцедуры
//
//// ЗаписатьПредупреждениеВЖурналОбмена
////  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Предупреждение"
//// Параметры
////	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
////	ТекстСообщенияОтвет - Строка - ответ
////	ОписаниеОшибки - Строка - описание ошибки
////
//Процедура ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораРегистра, Знач ТекстСообщенияОтвет, Знач ОписаниеОшибки = "", КодСостояния = Неопределено) Экспорт
//	
//	СтруктураДанныхДляОбновления = Новый Структура();
//	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
//	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Предупреждение);
//	Если КодСостояния <> Неопределено Тогда 
//		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
//	КонецЕсли;
//	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);	
//	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);
//
//	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
//	
//КонецПроцедуры
//
//// ЗаписатьОшибкуВЖурналОбмена
////  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Ошибка"
//// Параметры
////	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
////	ОписаниеОшибки - Строка - описание ошибки
////
//Процедура ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораРегистра, Знач ОписаниеОшибки, КодСостояния = Неопределено) Экспорт
//	
//	СтруктураДанныхДляОбновления = Новый Структура();
//	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
//	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Ошибка);
//	Если КодСостояния <> Неопределено Тогда 
//		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ОписаниеОшибки, ":");
//	КонецЕсли;	
//	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);
//
//	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
//	
//КонецПроцедуры
//
//// ПолучитьДанныеЖурналаОбмена
////  функция получает данные РС "ЖурналОбменаДаннымиСВнешнимиСистемами" по отборам
//// Параметры
////	ПараметрыОтбора	- Структура - Содержит данные для отбора записей регистра
////
//Функция ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора = Неопределено) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.Период,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.МетодЗапроса,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.Инстанс,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ИдентификаторЗапроса,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ИсходящийЗапрос,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ДатаОкончания,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ДатаОтправки,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.РезультатВыполненияОбмена,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ТекстСообщения,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ТекстСообщенияОтвет,
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ОписаниеОшибки
//		|ИЗ
//		|	РегистрСведений.ЖурналОбменаДаннымиСВнешнимиСистемами КАК ЖурналОбменаДаннымиСВнешнимиСистемами
//		|ГДЕ
//		|  ИСТИНА 
//		|
//		|//ОтборПоМетодамЗапроса
//		|//ОтборПоРезультатамВыполненияОбмена
//		|//ОтборПоИнстансам
//		|//ОтборПоИсходящимЗапросам
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЖурналОбменаДаннымиСВнешнимиСистемами.Период";
//	
//		
//	Если ПараметрыОтбора <> Неопределено Тогда 
//		Если ПараметрыОтбора.Свойство("МетодыЗапроса") Тогда 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоМетодамЗапроса","	И ЖурналОбменаДаннымиСВнешнимиСистемами.МетодЗапроса В (&МетодыЗапроса)");		
//			Запрос.УстановитьПараметр("МетодыЗапроса", ПараметрыОтбора.МетодыЗапроса);
//		КонецЕсли;	
//		Если ПараметрыОтбора.Свойство("РезультатыВыполненияОбмена") Тогда 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоРезультатамВыполненияОбмена","	И ЖурналОбменаДаннымиСВнешнимиСистемами.РезультатВыполненияОбмена В (&РезультатыВыполненияОбмена)");			
//			Запрос.УстановитьПараметр("РезультатыВыполненияОбмена", ПараметрыОтбора.РезультатыВыполненияОбмена);
//		КонецЕсли;
//		Если ПараметрыОтбора.Свойство("Инстансы") Тогда 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИнстансам","	И ЖурналОбменаДаннымиСВнешнимиСистемами.Инстанс В (&Инстансы)");			
//			Запрос.УстановитьПараметр("Инстансы", ПараметрыОтбора.Инстансы);
//		КонецЕсли;
//		Если ПараметрыОтбора.Свойство("ИсходящийЗапрос") Тогда 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсходящимЗапросам","	И ЖурналОбменаДаннымиСВнешнимиСистемами.ИсходящийЗапрос = &ИсходящийЗапрос");			
//			Запрос.УстановитьПараметр("ИсходящийЗапрос", ПараметрыОтбора.ИсходящийЗапрос);
//		КонецЕсли;
//	КонецЕсли;	
//	
//	РезультатЗапроса = Запрос.Выполнить();	
//	ТЗ_Данные = РезультатЗапроса.Выгрузить();
//
//	Возврат ТЗ_Данные;
//	
//КонецФункции
//
//////////////////////////////////////////////////////////////////////////////////
//// Обработка журнала обмена
//
//// ОбработатьЖурналОбмена
//Процедура ОбработатьЖурналОбмена() Экспорт
//	
//	Попытка
//		ОбработатьЖурналОбменаВходящиеЗапросы();
//	Исключение
//		ТекстОшибки = "При обработке журнала обмена с внешними системами (входящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
//		OW.ЗаписатьОшибку(, 
//							ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//							ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//							ТекстОшибки);
//	КонецПопытки;
//	
//	Попытка
//		ОбработатьЖурналОбменаИсходящиеЗапросы();
//	Исключение
//		ТекстОшибки = "При обработке журнала обмена с внешними системами (исходящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
//		OW.ЗаписатьОшибку(, 
//							ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//							ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//							ТекстОшибки);
//	КонецПопытки;
//	
//КонецПроцедуры
//
//Процедура ОбработатьЖурналОбменаВходящиеЗапросы() Экспорт
//		
//	// находим события со статусом "Ожидание"	
//	ПараметрыОтбора = Новый Структура();
//	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.РезультатыВыполненияОбмена.Ожидание));
//	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Ложь);
//	
//	МетодыЗапроса = Новый Массив;
//	МетодыЗапроса.Добавить(Справочники.МетодыЗапросовСВнешнимиСистемами.ow_httpPostIssueReadyToImport);
//	ПараметрыОтбора.Вставить("МетодыЗапроса", 			МетодыЗапроса);
//		
//	ДанныеЖурналаОбмена = ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
//	
//	Если ДанныеЖурналаОбмена.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ЕстьОшибки = Ложь;
//	ТекстОшибки = "";
//	ТекстОшибкиEn = "";			
//			
//	Для Каждого ТекДанные Из ДанныеЖурналаОбмена Цикл
//		
//		МетодЗапроса 	= ТекДанные.МетодЗапроса;
//		Инстанс 		= ТекДанные.Инстанс;
//		ИсходящийЗапрос = ТекДанные.ИсходящийЗапрос;
//		ТекстСообщения 	= ТекДанные.ТекстСообщения; 
//		
//		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, МетодЗапроса, ТекДанные.ИдентификаторЗапроса, Инстанс);
//
//		ЕстьОшибки = Ложь;
//		ТекстОшибки = "";
//		
//		// загрузка задачи из JIRA
//		Если МетодЗапроса = Справочники.МетодыЗапросовСВнешнимиСистемами.ow_httpPostIssueReadyToImport Тогда  
//		
//			СтруктураВозврата = ЗагрузитьЗадачуИзJIRA(ТекстСообщения, Инстанс);				
//			ЗадачаИзJIRA = СтруктураВозврата.Данные;
//			Если ЗначениеЗаполнено(ЗадачаИзJIRA) Тогда 
//				//// постановка в очередь на формировние документа
//				//OW_ОтложеннаяОбработкаОбъектов.ДобавитьОбъектДляОтложеннойОбработки(ЗадачаИзJIRA, 
//				//																	ПредопределенноеЗначение("Перечисление.ВидыДействийОтложеннойОбработки.СформироватьДокументПоЗадачеJIRA"));
//			Иначе
//				ЕстьОшибки = Истина;
//				ТекстОшибки	= СтруктураВозврата.ТекстОшибки;
//			КонецЕсли;		
//			
//		Иначе
//			ЕстьОшибки = Истина;
//			ТекстОшибки = "Отложенная обработка данного метода не предусмотрена";			
//		КонецЕсли;	
//			
//		// журналирование
//		Если ЕстьОшибки Тогда
//			ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);
//		ИначеЕсли НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, "", ТекстОшибки);		
//		Иначе			
//			ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, "");
//		КонецЕсли;	
//			
//	КонецЦикла;
//		
//КонецПроцедуры
//
//Процедура ОбработатьЖурналОбменаИсходящиеЗапросы() Экспорт
//	
//	// находим события со статусом "Подготовленно к отправке"
//	ОтправитьПодготовленныеДанныеВоВнешнююСистему();
//	
//КонецПроцедуры
//
//Процедура ОтправитьПодготовленныеДанныеВоВнешнююСистему() Экспорт 
//	
//	ПараметрыОтбора = Новый Структура;
//	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке")));	
//	//ПараметрыОтбора.Вставить("МетодыЗапроса", 				OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferences")));	
//	
//	//++OW Копачев А.С. 12.03.2021 ONEC-6602
//	//ПараметрыОтбора.Вставить("Инстансы", 					OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(JIRA.ПолучитьИнстансДляJiraSpb()));	
//	//--OW Копачев А.С. 12.03.2021 ONEC-6602
//	
//	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Истина);
//	
//	ДанныеДляОтправки = ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
//	
//	Если ДанныеДляОтправки.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	// определение порядка загрузки
//	// Запросы с "connections" обрабаытваем в конце
//	ДанныеДляОтправки.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
//	Для Каждого ТекСтрока Из ДанныеДляОтправки Цикл
//		ТекстСообщения	= ТекСтрока.ТекстСообщения;
//		Если Найти(ТекстСообщения, "connections") > 0 Тогда 
//			ТекСтрока.Приоритет = 2; // обрабатываем после основных пакетов
//		ИначеЕсли ТекСтрока.МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTime")
//			ИЛИ ТекСтрока.МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTime") Тогда 	
//			ТекСтрока.Приоритет = 2; // обрабатываем после основных пакетов	
//		КонецЕсли;
//	КонецЦикла;
//	
//	ДанныеДляОтправки.Сортировать("Приоритет Возр, Период Возр");
//
//	Для Каждого ТекДанные Из ДанныеДляОтправки Цикл
//		
//		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, ТекДанные.МетодЗапроса, ТекДанные.ИдентификаторЗапроса, ТекДанные.Инстанс);
//		 
//		СтруктураВозврата = ОтправитьДанныеВоВнешнююСистемуДляОбработки(СтруктураОтбораОбмена, ТекДанные.ТекстСообщения)
//		
//	КонецЦикла;
//	
//КонецПроцедуры
//
//Функция ОтправитьДанныеВоВнешнююСистемуДляОбработки(Знач СтруктураОтбораОбмена, СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда 	
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНетДанныхДляОтправки());
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	МетодЗапроса   	= СтруктураОтбораОбмена.МетодЗапроса;
//	Инстанс 		= СтруктураОтбораОбмена.Инстанс;
//	
//	СтрокаJSONОтвет = "";
//	
//	// по умолчанию к JIRA_SPB
//	//++OW Копачев А.С. 05.04.2022 ONEC-7464
//	//Если Инстанс = JIRA.ПолучитьИнстансДляJiraSpb()
//	//ИЛИ Инстанс = WIKI.ПолучитьИнстансWIKI()
//	//	ИЛИ Инстанс = JIRA.ПолучитьИнстансДляJiraOws() Тогда   //OW Копачев А.С. 12.03.2021 ONEC-6602
//	Если JIRA.ЭтоИнстансJiraSpb(Инстанс)
//		ИЛИ WIKI.ЭтоИнстансWIKI(Инстанс)
//		ИЛИ JIRA.ЭтоИнстансJiraOws(Инстанс) Тогда
//	//--OW Копачев А.С. 05.04.2022 ONEC-7464	
//	
//		//++OW Копачев А.С. 08.06.2022 ONEC-7464
//		Если JIRA.ПолучитьВидИнстансаJIRA(Инстанс) <> OW.ПолучитьОсновнойВидИнстансаJIRA() Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, "", "Instance segment differs from the database segment. Data skipped");
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		//--OW Копачев А.С. 08.06.2022 ONEC-7464
//		
//	//Если JIRA.ЭтоИнстансJiraSpb(Инстанс) Тогда
//		
//		// проверка что запрос исходящий
//		
//		//Если  МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferences") 
//		//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostDocuments") Тогда 
//		Если МетодЗапроса.ИсходящийЗапрос Тогда 
//			
//			// соединение			
//			АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МетодЗапроса.Адрес);
//			ТекстЗапроса = СтрокаJSON;			
//			
//			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда
//				// для удаления тело запроса не используется, а меняется адрес
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//					//АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(АдресРесурса);
//				КонецЕсли;	
//			//++OW Копачев А.С. 07.11.2019 ONEC-5049 
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда
//				// для получения тело запроса не используется, а меняется адрес
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//				КонецЕсли;	
//			//--OW Копачев А.С. 07.11.2019 ONEC-5049
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда
//				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
//				Если ДанныеЗапроса.Свойство("requestText") Тогда 
//					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
//				КонецЕсли;
//				Если ДанныеЗапроса.Свойство("requestBody") Тогда 
//					ТекстЗапроса = ДанныеЗапроса.requestBody;
//				КонецЕсли;
//			КонецЕсли;	
//			
//			///////////////////////////////////////////////////////
//			// журналирование				
//			ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//			ДанныеОбмена.Вставить("ТекстСообщения", ТекстЗапроса);
//			ДанныеОбмена.Вставить("ДатаОтправки", 	ТекущаяДатаСеанса());
//			ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//			ДанныеОбмена.Вставить("ИсходящийЗапрос",Истина);
//			OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//			//////////////////////////////////////////////////////	
//
//			// отправка данных
//			Соединение = JIRA.СоздатьHTTPСоединениеJIRA(Инстанс);	
//			
//			Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, Инстанс);
//			Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);	
//						
//			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда 
//				ОтветHTTP = Соединение.Записать(Запрос);
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.POST Тогда	
//				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда	
//				ОтветHTTP = Соединение.Удалить(Запрос);	
//			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда	
//				ОтветHTTP = Соединение.Получить(Запрос);		
//			Иначе
//				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
//			КонецЕсли;
//			
//			СтрокаJSONОтвет 	 			= ОтветHTTP.ПолучитьТелоКакСтроку();
//			СтруктураВозврата.КодСостояния  = ОтветHTTP.КодСостояния;
//			
//			Если ОтветHTTP.КодСостояния >= 400 Тогда 
//				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, СтрокаJSONОтвет, ОтветHTTP.КодСостояния);
//			КонецЕсли;
//		Иначе		
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());
//		КонецЕсли;			
//	Иначе	
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());	
//	КонецЕсли;
//	
//		
//	///////////////////////////////////////////////////////
//	// журналирование ответа
//	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, СтруктураВозврата.ТекстОшибки, СтруктураВозврата.КодСостояния);
//	Иначе		
//		СтруктураВозврата.Данные = СтрокаJSONОтвет;
//		OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, СтруктураВозврата.КодСостояния);
//	КонецЕсли;
//	//////////////////////////////////////////////////////		
//	
//	ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(Инстанс, МетодЗапроса, СтруктураОтбораОбмена.ИдентификаторЗапроса, СтрокаJSONОтвет, СтруктураВозврата.ЕстьОшибки);
//	
//	Возврат СтруктураВозврата;
//КонецФункции
//
//Процедура ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(Инстанс, МетодЗапроса, ИдентификаторЗапроса, СтрокаJSONОтвет, ЕстьОшибки)
//		
//	// обработка ответа
//	Если МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostPlannedTime") 
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTimeByID") 
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPutPlannedTimeByID")
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpDeletePlannedTimeByID")  
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTime") 
//		
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpPostPlannedTime") 
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTimeByID") 
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpPutPlannedTimeByID")
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpDeletePlannedTimeByID")  
//		ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTime") Тогда 	
//
//		ЭтоИнстансOWS = JIRA.ЭтоИнстансJiraOws(Инстанс);  //OW Копачев А.С. 09.03.2021 ONEC-6602
//		
//		//++OW Копачев А.С. 08.04.2022 ONEC-7464
//		ВидИнстансаJIRA = JIRA.ПолучитьВидИнстансаJIRA(Инстанс);	
//		//--OW Копачев А.С. 08.04.2022 ONEC-7464
//		
//		Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда 
//			ТЗ_ДанныеПлановоеВремяРаботыПоДнямJIRA = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ПолучитьДанныеПоИдентификаторуЗапроса(ИдентификаторЗапроса);
//			
//			Для Каждого ТекДанные Из ТЗ_ДанныеПлановоеВремяРаботыПоДнямJIRA Цикл
//				// изменим записи в соответствии с ответом Жиры
//				УдалитьВJIRA = ТекДанные.УдалитьВJIRA;
//				ПроверитьВJIRA = ТекДанные.ПроверитьВJIRA;
//				
//				Если ЕстьОшибки Тогда
//					ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//
//					ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//					РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//				Иначе	
//					// данные отправлены
//					
//					// удаление
//					Если  МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpDeletePlannedTimeByID")
//						ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpDeletePlannedTimeByID") Тогда 
//						Если УдалитьВJIRA Тогда 
//							// данные удалены в Жире, теперь удаляем и у себя
//							Набор = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьНаборЗаписей();
//							Набор.Отбор.ПериодДень.Установить(ТекДанные.ПериодДень);
//							Набор.Отбор.Год.Установить(ТекДанные.Год);
//							Набор.Отбор.Офицер.Установить(ТекДанные.Офицер);
//							Набор.Отбор.ВидПолдня.Установить(ТекДанные.ВидПолдня);
//							Набор.Отбор.КодПроектаJIRA.Установить(ТекДанные.КодПроектаJIRA);
//							Набор.Отбор.НаправлениеДеятельности.Установить(ТекДанные.НаправлениеДеятельности);
//							Набор.Отбор.ДокументОтсутствия.Установить(ТекДанные.ДокументОтсутствия);
//							Набор.Отбор.ФазаДокументаОтсутствия.Установить(ТекДанные.ФазаДокументаОтсутствия);
//							
//							Набор.Отбор.ID.Установить(ТекДанные.ID);  //OW Копачев А.С. 21.11.2019 ONEC-5049 
//							
//							Набор.Записать(Истина);	
//						КонецЕсли;
//						
//					ИначеЕсли  МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTimeByID")
//						ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTimeByID")Тогда 
//						// проверка необходимости удаления записи в JIRA
//						Если ПроверитьВJIRA Тогда
//						
//							ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//
//							ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет, Ложь);
//							Если ДанныеJSON = Неопределено Тогда 
//								// ошибка чтения файла
//								ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//								РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//							Иначе
//								
//								ТекДанные.ПроверитьВJIRA = Ложь;
//								
//								// проверка необходимости удаления записей в JIRA
//								// Если автор не jira-1c, то значит данные создал пользователь - не изменяем
//								Если УдалитьВJIRA Тогда 
//									Попытка
//										АвторЗаписи = ДанныеJSON.author;
//									Исключение
//										АвторЗаписи = "";
//									КонецПопытки;
//									
//									Если НЕ ПустаяСтрока(АвторЗаписи) Тогда 
//										ТекДанные.АвторВJIRA = АвторЗаписи;									
//									КонецЕсли;
//									
//									Если ЗначениеЗаполнено(ТекДанные.АвторВJIRA) Тогда 
//										ПользовательОтправкиДанныхВJira = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательРегламентногоЗаданияОтправкаДанныхПоПлановомуВремениРаботыСотрудникаВJIRA);
//										
//										// проверка, если автор не jira-1c, то значит данные создал пользователь - не изменяем
//										Если ТекДанные.АвторВJIRA <> РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ПолучитьCalendarUserKey(ПользовательОтправкиДанныхВJira) Тогда 
//											ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Пропущено");	
//											ТекДанные.УдалитьВJIRA = Ложь;
//											ТекДанные.СозданоПользователемJIRA = Истина;
//											
//										Иначе	
//											// удаляем ненужные записи в JIRA
//											ТекДанные.УдалитьВJIRA = Истина;
//											ТекДанные.СозданоПрограммно = Истина;
//											ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Отправить"); 	                                   
//											ТекДанные.ИдентификаторЗапроса = "";
//											ТекДанные.ДатаОтправки = Дата(1,1,1); 
//											ТекДанные.ДатаОбработки = Дата(1,1,1); 									
//										КонецЕсли;
//									Иначе
//										// пользователя нет - откладываем запись, не далаем ничего
//										ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Пропущено");	
//										ТекДанные.УдалитьВJIRA = Ложь;	
//									КонецЕсли;
//									РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//								Иначе	
//									// пока не обрабатываем некорректные ситуации. Все проверки на корректность делаются при запросе за период
//									ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено");		
//									РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//								КонецЕсли;
//							КонецЕсли;
//						КонецЕсли;	
//						
//					ИначеЕсли МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostPlannedTime")
//							ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpPostPlannedTime") Тогда 
//						// данные были добавлены в Жире, зафиксируем это у себя
//						
//						ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//
//						ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет, Ложь);
//						Если ДанныеJSON = Неопределено Тогда 
//							// ошибка чтения файла
//							ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//							РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//						Иначе
//							ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено");	
//							
//							//1.удаляем старую запись со старым id							
//							НачатьТранзакцию();
//							Запись = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьМенеджерЗаписи();
//							ЗаполнитьЗначенияСвойств(Запись, ТекДанные);
//							Запись.Удалить();
//							
//							//2.формируем новую запись с новым id
//							Попытка
//								ТекДанные.ID = Число(ДанныеJSON.ID);
//							Исключение
//								ТекДанные.ID = 0;
//							КонецПопытки;	
//							
//							Попытка
//								ТекДанные.АвторВJIRA = ДанныеJSON.author;
//							Исключение
//								ТекДанные.АвторВJIRA = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ПолучитьCalendarUserKey(ПараметрыСеанса.ТекущийПользователь);
//							КонецПопытки;	
//							ТекДанные.СозданоПрограммно = Истина;		
//							РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);					
//							ЗафиксироватьТранзакцию();
//							
//						КонецЕсли;
//					ИначеЕсли МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPutPlannedTimeByID") 
//						ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpPutPlannedTimeByID") Тогда 				
//						
//						//++OW Копачев А.С. 28.07.2022  
//						Если ПустаяСтрока(СтрокаJSONОтвет) Тогда 
//							// Если ID записи в JIRA нет, то она не возвращает ошибку при обновлении ID, а только 
//							// пустой ответ, поэтому для этого варианта ответа будем изменять метод запроса с PUT на POST для добавления записи
//
//							//1.удаляем старую запись со старым id							
//							НачатьТранзакцию();
//							Запись = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьМенеджерЗаписи();
//							ЗаполнитьЗначенияСвойств(Запись, ТекДанные);
//							Запись.Удалить();
//							
//							//2.формируем новую запись с новым id
//							ТекДанные.ID = 0; // сбрасываем так как в Жире нет такого идентификатора
//							ТекДанные.ПроверитьВJIRA  = Ложь;
//							ТекДанные.УдалитьВJIRA = Ложь; 
//							ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Отправить"); 
//							ТекДанные.ИдентификаторЗапроса = "";
//							ТекДанные.ДатаОтправки = Дата(1,1,1); 
//							ТекДанные.ДатаОбработки = Дата(1,1,1); 
//		
//							РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);					
//							ЗафиксироватьТранзакцию();
//							
//						Иначе
//						//--OW Копачев А.С. 28.07.2022
//						
//							// данные были модифицированы в Жире, зафиксируем это у себя	
//							ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//
//							ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет, Ложь);
//							Если ДанныеJSON = Неопределено Тогда 
//								// ошибка чтения файла
//								ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//								РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//							Иначе
//								ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено");		
//								
//								Если ПустаяСтрока(ТекДанные.АвторВJIRA) Тогда  
//									Попытка
//										ТекДанные.АвторВJIRA = ДанныеJSON.author;
//										
//										ПользовательОтправкиДанныхВJira = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательРегламентногоЗаданияОтправкаДанныхПоПлановомуВремениРаботыСотрудникаВJIRA);								
//										// проверка, если автор не jira-1c, то значит данные создал пользователь
//										Если ТекДанные.АвторВJIRA <> РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ПолучитьCalendarUserKey(ПользовательОтправкиДанныхВJira) Тогда
//											ТекДанные.СозданоПользователемJIRA = Истина;
//										Иначе
//											ТекДанные.СозданоПрограммно = Истина;
//										КонецЕсли;	
//									Исключение
//										//ТекДанные.АвторВJIRA = "";
//									КонецПопытки;									
//								КонецЕсли;	
//								РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);					
//							КонецЕсли;
//						КонецЕсли;	
//					// получение данных из Жиры для сверки за интервал	
//				ИначеЕсли МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTime")
//					ИЛИ МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTime")Тогда 	
//						
//						ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//
//						ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет, Ложь);
//						Если ДанныеJSON = Неопределено Тогда 
//							// ошибка чтения файла
//							ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//							РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//						Иначе
//							ЗапросДанныхИзJIRAПериодС = ТекДанные.ЗапросДанныхИзJIRAПериодС;
//							ЗапросДанныхИзJIRAПериодПо = ТекДанные.ЗапросДанныхИзJIRAПериодПо;						
//							
//							// формируем таблицу полученных данных за период
//							ДанныеИзJIRA = Новый ТаблицаЗначений;
//							ДанныеИзJIRA.Колонки.Добавить("id_txt", 		Новый ОписаниеТипов("Строка"));
//							ДанныеИзJIRA.Колонки.Добавить("description", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
//							ДанныеИзJIRA.Колонки.Добавить("duration", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("issueKey", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("projectKey", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("startDate", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("user", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							
//							ДанныеИзJIRA.Колонки.Добавить("ID", 						Новый ОписаниеТипов("Число"));
//							ДанныеИзJIRA.Колонки.Добавить("ДляJIRAOWS", 				Новый ОписаниеТипов("Булево")); //OW Копачев А.С. 09.03.2021 ONEC-6602
//							ДанныеИзJIRA.Колонки.Добавить("ВидИнстансJIRA", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегионовИнстансовJIRA")); //OW Копачев А.С. 08.04.2022 ONEC-7464 
//
//							ДанныеИзJIRA.Колонки.Добавить("ДлительностьСекунд", 		Новый ОписаниеТипов("Число"));
//							ДанныеИзJIRA.Колонки.Добавить("ПериодДень", 				Новый ОписаниеТипов("Дата"));
//							ДанныеИзJIRA.Колонки.Добавить("ВремяНачала", 				Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.Время)));
//							//++OW Копачев А.С. 11.08.2022 ONEC-7812
//							ДанныеИзJIRA.Колонки.Добавить("ВремяНачалаПоЧасовомуПоясуПользователя", Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.Время)));
//							//--OW Копачев А.С. 11.08.2022 ONEC-7812
//							ДанныеИзJIRA.Колонки.Добавить("Год", 						Новый ОписаниеТипов("Число"));
//							ДанныеИзJIRA.Колонки.Добавить("КодПроектаJIRA",				Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
//							ДанныеИзJIRA.Колонки.Добавить("НаправлениеДеятельности", 	Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельностиДляКоманд"));
//							ДанныеИзJIRA.Колонки.Добавить("ПроцентВовлеченности", 		Новый ОписаниеТипов("Число"));
//							ДанныеИзJIRA.Колонки.Добавить("ДокументОтсутствияПредставление", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("ФазаДокументаОтсутствияКодПроектаJIRA", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("НаправлениеДеятельностиСтрокой", 		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
//							ДанныеИзJIRA.Колонки.Добавить("ПроцентВовлеченностиСтрокой", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
//							ДанныеИзJIRA.Колонки.Добавить("Офицер",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
//							ДанныеИзJIRA.Колонки.Добавить("ВидПолдня",					Новый ОписаниеТипов("СправочникСсылка.ВидыОтсутствийСотрудниковПолдняJIRA"));
//								
//							ЕстьОшибкиОбработки = Ложь;
//							Попытка
//								// получаем данные из JSON
//								Для Каждого ТекСтрокаДанных Из ДанныеJSON Цикл 
//									НовСтрока = ДанныеИзJIRA.Добавить();
//									ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаДанных);
//									
//									НовСтрока.id_txt = ТекСтрокаДанных.id;	
//									НовСтрока.ДляJIRAOWS = ЭтоИнстансOWS;	//OW Копачев А.С. 09.03.2021 ONEC-6602
//									НовСтрока.ВидИнстансJIRA = ВидИнстансаJIRA;//OW Копачев А.С. 08.04.2022 ONEC-7464 
//									Попытка
//										НовСтрока.ID					= ТекСтрокаДанных.ID;										
//										НовСтрока.ДлительностьСекунд 	= ТекСтрокаДанных.duration;
//										
//										// разложение DescriptionJIRA
//										ДанныеDescriptionJIRA = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.РазложитьDescriptionJIRA(ТекСтрокаДанных.description);
//										Если ЗначениеЗаполнено(ДанныеDescriptionJIRA.ДокументОтсутствияПредставление) Тогда 
//											НовСтрока.ДокументОтсутствияПредставление = ДанныеDescriptionJIRA.ДокументОтсутствияПредставление;	
//										КонецЕсли;	
//										Если ЗначениеЗаполнено(ДанныеDescriptionJIRA.ФазаДокументаОтсутствияКодПроектаJIRA) Тогда 
//											НовСтрока.ФазаДокументаОтсутствияКодПроектаJIRA = ДанныеDescriptionJIRA.ФазаДокументаОтсутствияКодПроектаJIRA;	
//										КонецЕсли;	
//										Если ЗначениеЗаполнено(ДанныеDescriptionJIRA.НаправлениеДеятельностиСтрокой) Тогда 
//											НовСтрока.НаправлениеДеятельностиСтрокой = ДанныеDescriptionJIRA.НаправлениеДеятельностиСтрокой;	
//										КонецЕсли;
//										Если ЗначениеЗаполнено(ДанныеDescriptionJIRA.ПроцентВовлеченностиСтрокой) Тогда 
//											НовСтрока.ПроцентВовлеченностиСтрокой = ДанныеDescriptionJIRA.ПроцентВовлеченностиСтрокой;	
//											
//											НовСтрока.ПроцентВовлеченности = Число(НовСтрока.ПроцентВовлеченностиСтрокой);
//										КонецЕсли;
//
//									Исключение
//										ЕстьОшибкиОбработки = Истина;
//									КонецПопытки;										
//								КонецЦикла;	
//								
//								// получаем доп примитивные данные
//								Для Каждого ТекДанныеИзJIRA Из ДанныеИзJIRA Цикл 									
//									Попытка									
//										ДатаНачала = JIRA.ПреобразоватьДату(ТекДанныеИзJIRA.startDate);
//
//										ТекДанныеИзJIRA.ПериодДень = НачалоДня(ДатаНачала);
//										//++OW Копачев А.С. 11.08.2022 ONEC-7812
//										//ТекДанныеИзJIRA.ВремяНачала = ДатаНачала;
//										ТекДанныеИзJIRA.ВремяНачалаПоЧасовомуПоясуПользователя = ДатаНачала;
//										ТекДанныеИзJIRA.ВремяНачала = ДатаНачала;
//										//--OW Копачев А.С. 11.08.2022 ONEC-7812
//										
//										ТекДанныеИзJIRA.Год = Год(ТекДанныеИзJIRA.ПериодДень);	
//										
//										КодПроектаJIRAСтрокой = ?(ПустаяСтрока(ТекДанныеИзJIRA.issueKey), ТекДанныеИзJIRA.projectKey, ТекДанныеИзJIRA.issueKey);
//										//++OW Копачев А.С. 06.04.2021 ONEC-6602 
//										Если ЭтоИнстансOWS Тогда 
//											// проект в Жире может пока отличаться от проекта 1С
//											ЗаменыПроектов = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаменыПроектовДляВыгрузкиДанныхВJiraOWS();
//											Для Каждого ТекЗамена Из ЗаменыПроектов Цикл
//												Если ВРег(КодПроектаJIRAСтрокой) = ВРег(ТекЗамена.Значение) Тогда 
//													КодПроектаJIRAСтрокой = Строка(ТекЗамена.Ключ);	
//												КонецЕсли;	
//											КонецЦикла;					
//										КонецЕсли;	
//										//--OW Копачев А.С. 06.04.2021 ONEC-6602
//										
//										ТекДанныеИзJIRA.КодПроектаJIRA = КодПроектаJIRAСтрокой;										
//																				
//									Исключение
//										ЕстьОшибкиОбработки = Истина;
//									КонецПопытки;			
//								КонецЦикла;
//								
//								ДанныеИзJIRA.Индексы.Добавить("ID");
//								
//								// получаем ссылочные данные
//								Запрос = Новый Запрос;
//								Запрос.Текст = "ВЫБРАТЬ
//								               |	ДанныеИзJIRA.ID,
//								               |	ДанныеИзJIRA.НаправлениеДеятельностиСтрокой,
//								               |	ДанныеИзJIRA.user
//								               |ПОМЕСТИТЬ ВТ_ДанныеИзJIRA
//								               |ИЗ
//								               |	&ДанныеИзJIRA КАК ДанныеИзJIRA
//								               |;
//								               |
//								               |////////////////////////////////////////////////////////////////////////////////
//								               |ВЫБРАТЬ
//								               |	ВТ_ДанныеИзJIRA.ID КАК ID,
//								               |	ВТ_ДанныеИзJIRA.НаправлениеДеятельностиСтрокой,
//								               |	ВТ_ДанныеИзJIRA.user,
//								               |	ЕСТЬNULL(НаправленияДеятельностиДляКоманд.Ссылка, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
//								               |	ЕСТЬNULL(Пользователи.Ссылка, НЕОПРЕДЕЛЕНО) КАК Офицер
//								               |ИЗ
//								               |	ВТ_ДанныеИзJIRA КАК ВТ_ДанныеИзJIRA
//								               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельностиДляКоманд КАК НаправленияДеятельностиДляКоманд
//								               |		ПО ВТ_ДанныеИзJIRA.НаправлениеДеятельностиСтрокой = НаправленияДеятельностиДляКоманд.Наименование
//								               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
//								               |		ПО ВТ_ДанныеИзJIRA.user = Пользователи.UserKeyCalendarJIRA
//								               |					И Пользователи.UserKeyCalendarJIRA <> """"
//								               |				ИЛИ ВТ_ДанныеИзJIRA.user = Пользователи.Login
//								               |					И Пользователи.UserKeyCalendarJIRA = """"
//											   |ГДЕ
//								               |	ВТ_ДанныеИзJIRA.ID <> 0"; 
//								
//								Запрос.УстановитьПараметр("ДанныеИзJIRA", ДанныеИзJIRA);
//								
//								РезультатЗапроса = Запрос.Выполнить();
//								Выборка = РезультатЗапроса.Выбрать();
//								
//								//++OW Копачев А.С. 11.08.2022 ONEC-7812
//								// приведем время из календаря JIRA к времени часового пояса по умолчанию
//								СдвигЧасовПоПользователям = Новый Соответствие;
//								//--OW Копачев А.С. 11.08.2022 ONEC-7812
//								
//								Пока Выборка.Следующий() Цикл 
//									СтрокаПоиска = ДанныеИзJIRA.Найти(Выборка.ID, "ID");	
//									Если СтрокаПоиска <> Неопределено Тогда 
//										ЗаполнитьЗначенияСвойств(СтрокаПоиска,Выборка);
//										
//										//++OW Копачев А.С. 11.08.2022 ONEC-7812
//										Если ЗначениеЗаполнено(Выборка.Офицер) Тогда 
//											ЗначениеСдвигаЧасовПоПользователям = СдвигЧасовПоПользователям.Получить(Выборка.Офицер);
//											Если ЗначениеСдвигаЧасовПоПользователям = Неопределено Тогда 
//												ЗначениеСдвигаЧасовПоПользователям = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ПолучитьСдвигПоВремениПоЧасовомуПоясуПользователя(Выборка.Офицер);
//												СдвигЧасовПоПользователям.Вставить(Выборка.Офицер, ЗначениеСдвигаЧасовПоПользователям);
//											КонецЕсли;	
//											// переопределяем время начала
//											СтрокаПоиска.ВремяНачала = СтрокаПоиска.ВремяНачала - ЗначениеСдвигаЧасовПоПользователям * 3600;
//										КонецЕсли;	
//										//--OW Копачев А.С. 11.08.2022 ONEC-7812
//									КонецЕсли;	
//								КонецЦикла;	
//								
//								// сравниваем чем отличаются данные в Жире от 1С. При необходимости ставим на обновляе/удаление их
//								Запрос = Новый Запрос;
//								Запрос.Текст = "ВЫБРАТЬ
//								               |	ДанныеИзJIRA.ID,
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |	ДанныеИзJIRA.ДляJIRAOWS,
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |	ДанныеИзJIRA.ВидИнстансJIRA КАК ВидИнстансJIRA,
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//								               |	ДанныеИзJIRA.ПериодДень,
//								               |	ДанныеИзJIRA.Год,
//								               |	ДанныеИзJIRA.user,
//											   |	ДанныеИзJIRA.Офицер,
//								               |	ДанныеИзJIRA.КодПроектаJIRA,
//											   |	ДанныеИзJIRA.description,
//											   |	ДанныеИзJIRA.ДокументОтсутствияПредставление,
//											   |	ДанныеИзJIRA.ФазаДокументаОтсутствияКодПроектаJIRA,
//											   |	ДанныеИзJIRA.НаправлениеДеятельностиСтрокой,
//								               |	ДанныеИзJIRA.НаправлениеДеятельности,
//											   |	ДанныеИзJIRA.ПроцентВовлеченностиСтрокой,
//											   |	ДанныеИзJIRA.ПроцентВовлеченности,
//								               |	ДанныеИзJIRA.ДлительностьСекунд,
//											   |	ДанныеИзJIRA.ВремяНачала,
//											   //++OW Копачев А.С. 11.08.2022 ONEC-7812
//											   |	ДанныеИзJIRA.ВремяНачалаПоЧасовомуПоясуПользователя КАК ВремяНачалаПоЧасовомуПоясуПользователя
//											   //--OW Копачев А.С. 11.08.2022 ONEC-7812
//								               |ПОМЕСТИТЬ ВТ_ДанныеИзJIRA
//								               |ИЗ
//								               |	&ДанныеИзJIRA КАК ДанныеИзJIRA
//								               |;
//								               |
//								               |////////////////////////////////////////////////////////////////////////////////
//								               |ВЫБРАТЬ
//								               |	ВТ_ДанныеИзJIRA.ID КАК ID,
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |	ВТ_ДанныеИзJIRA.ДляJIRAOWS КАК ДляJIRAOWS,
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |	ВТ_ДанныеИзJIRA.ВидИнстансJIRA КАК ВидИнстансJIRA,
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//								               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ПериодДень, ВТ_ДанныеИзJIRA.ПериодДень) КАК ПериодДень,
//								               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.Год, ВТ_ДанныеИзJIRA.Год) КАК Год,
//								               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.Офицер, ВТ_ДанныеИзJIRA.Офицер) КАК Офицер,
//								               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.КодПроектаJIRA, ВТ_ДанныеИзJIRA.КодПроектаJIRA) КАК КодПроектаJIRA,
//								               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.НаправлениеДеятельности, ВТ_ДанныеИзJIRA.НаправлениеДеятельности) КАК НаправлениеДеятельности,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA, ВТ_ДанныеИзJIRA.ФазаДокументаОтсутствияКодПроектаJIRA) КАК ФазаДокументаОтсутствияКодПроектаJIRA,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ДлительностьСекунд, ВТ_ДанныеИзJIRA.ДлительностьСекунд) КАК ДлительностьСекунд,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ВремяНачала, ВТ_ДанныеИзJIRA.ВремяНачала) КАК ВремяНачала,										   
//											   //++OW Копачев А.С. 11.08.2022 ONEC-7812
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ВремяНачала, ВТ_ДанныеИзJIRA.ВремяНачалаПоЧасовомуПоясуПользователя) КАК ВремяНачалаПоЧасовомуПоясуПользователя,
//											   //--OW Копачев А.С. 11.08.2022 ONEC-7812 											   
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ВидПолдня, Значение(Справочник.ВидыОтсутствийСотрудниковПолдняJIRA.ПустаяСсылка)) КАК ВидПолдня,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ДокументОтсутствия, Неопределено) КАК ДокументОтсутствия,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствия, Неопределено) КАК ФазаДокументаОтсутствия,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA, Значение(Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ПустаяСсылка)) КАК СтатусВыгрузкиВJIRA,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.СозданоПрограммно, Ложь) КАК СозданоПрограммно,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.СозданоПользователемJIRA, Ложь) КАК СозданоПользователемJIRA,
//                                               |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.СлужебнаяЗапись, Ложь) КАК СлужебнаяЗапись,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.АвторВJIRA, """") КАК АвторВJIRA,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.РасчетДанныхПоДокументуОтсутствия, ЛОЖЬ) КАК РасчетДанныхПоДокументуОтсутствия,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ПроцентВовлеченности, ВТ_ДанныеИзJIRA.ПроцентВовлеченности) КАК ПроцентВовлеченности,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.ПроцентВовлеченностиПлан, 0) КАК ПроцентВовлеченностиПлан,
//											   |	ЕСТЬNULL(ПлановоеВремяРаботыПоДнямJIRA.Описание, ВТ_ДанныеИзJIRA.description) КАК Описание,
//								               |	ВЫБОР
//								               |		КОГДА ПлановоеВремяРаботыПоДнямJIRA.ПериодДень ЕСТЬ NULL
//								               |			ТОГДА ИСТИНА
//								               |		ИНАЧЕ ЛОЖЬ
//								               |	КОНЕЦ КАК ПроверитьУдалениеВJIRA,
//											   |	ВЫБОР
//								               |		КОГДА ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.НеТребуется))
//								               |			ТОГДА ИСТИНА
//								               |		ИНАЧЕ ЛОЖЬ
//								               |	КОНЕЦ КАК ВыполнитьУдалениеВJIRA,
//								               |	ВЫБОР
//								               |		КОГДА ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено))
//								               |				И (ВТ_ДанныеИзJIRA.ПериодДень <> ПлановоеВремяРаботыПоДнямJIRA.ПериодДень
//								               |					ИЛИ ВТ_ДанныеИзJIRA.Год <> ПлановоеВремяРаботыПоДнямJIRA.Год
//											   //++OW Копачев А.С. 21.01.2020 ONEC-5244 
//											   //|					ИЛИ ВТ_ДанныеИзJIRA.user <> ПлановоеВремяРаботыПоДнямJIRA.Офицер.Login
//											   //++ДОБАВИТЬ
//											   |					ИЛИ (ВТ_ДанныеИзJIRA.user <> ПлановоеВремяРаботыПоДнямJIRA.Офицер.Login И ПлановоеВремяРаботыПоДнямJIRA.Офицер.UserKeyCalendarJIRA = """")
//											   |					ИЛИ (ВТ_ДанныеИзJIRA.user <> ПлановоеВремяРаботыПоДнямJIRA.Офицер.UserKeyCalendarJIRA И ПлановоеВремяРаботыПоДнямJIRA.Офицер.UserKeyCalendarJIRA <> """")
//											   //--ДОБАВИТЬ
//											   //////++УДАЛИТЬ 
//											   //|					ИЛИ (ВТ_ДанныеИзJIRA.user <> ПлановоеВремяРаботыПоДнямJIRA.Офицер.Login)
//											   ////--УДАЛИТЬ											   
//											   //--OW Копачев А.С. 21.01.2020 ONEC-5244	   
//											   //++OW Копачев А.С. 04.12.2019 ONEC-5049 
//											   //|					ИЛИ ВТ_ДанныеИзJIRA.КодПроектаJIRA <> ПлановоеВремяРаботыПоДнямJIRA.КодПроектаJIRA
//											   |					ИЛИ (ВТ_ДанныеИзJIRA.КодПроектаJIRA <> ПлановоеВремяРаботыПоДнямJIRA.КодПроектаJIRA И (ПлановоеВремяРаботыПоДнямJIRA.РасчетДанныхПоДокументуОтсутствия = ЛОЖЬ ИЛИ ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA = ""))
//											   |					ИЛИ (ВТ_ДанныеИзJIRA.КодПроектаJIRA <> ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA И ПлановоеВремяРаботыПоДнямJIRA.РасчетДанныхПоДокументуОтсутствия = ИСТИНА И ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA <> ""))										   
//									   		   //--OW Копачев А.С. 04.12.2019 ONEC-5049								     			   
//								               //|					ИЛИ ВТ_ДанныеИзJIRA.НаправлениеДеятельности <> ПлановоеВремяРаботыПоДнямJIRA.НаправлениеДеятельности
//											   //|					ИЛИ ВТ_ДанныеИзJIRA.ФазаДокументаОтсутствияКодПроектаJIRA <> ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA
//											   |					ИЛИ ВТ_ДанныеИзJIRA.description <> ПлановоеВремяРаботыПоДнямJIRA.Описание
//								               |					ИЛИ ВТ_ДанныеИзJIRA.ДлительностьСекунд <> ПлановоеВремяРаботыПоДнямJIRA.ДлительностьСекунд)
//								               |			ТОГДА ИСТИНА
//								               |		ИНАЧЕ ЛОЖЬ
//								               |	КОНЕЦ КАК ОбновитьВJIRA,
//								               |	ЛОЖЬ КАК ДобавитьВJIRA,
//											   |	ЛОЖЬ КАК УдалитьВ1С
//								               |ИЗ
//								               |	ВТ_ДанныеИзJIRA КАК ВТ_ДанныеИзJIRA
//								               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановоеВремяРаботыПоДнямJIRA КАК ПлановоеВремяРаботыПоДнямJIRA
//								               |		ПО ВТ_ДанныеИзJIRA.ID = ПлановоеВремяРаботыПоДнямJIRA.ID
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |		И ВТ_ДанныеИзJIRA.ДляJIRAOWS = ПлановоеВремяРаботыПоДнямJIRA.ДляJIRAOWS
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |		И ВТ_ДанныеИзJIRA.ВидИнстансJIRA = ПлановоеВремяРаботыПоДнямJIRA.ВидИнстансJIRA
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//								               |ГДЕ
//								               |	ВТ_ДанныеИзJIRA.ID <> 0
//								               |
//								               |ОБЪЕДИНИТЬ ВСЕ
//								               |
//								               |ВЫБРАТЬ
//								               |	ПлановоеВремяРаботыПоДнямJIRA.ID,
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ДляJIRAOWS КАК ДляJIRAOWS,
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ВидИнстансJIRA КАК ВидИнстансJIRA,
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//								               |	ПлановоеВремяРаботыПоДнямJIRA.ПериодДень,
//								               |	ПлановоеВремяРаботыПоДнямJIRA.Год,
//								               |	ПлановоеВремяРаботыПоДнямJIRA.Офицер,
//								               |	ПлановоеВремяРаботыПоДнямJIRA.КодПроектаJIRA,
//								               |	ПлановоеВремяРаботыПоДнямJIRA.НаправлениеДеятельности,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствияКодПроектаJIRA,
//								               |	ПлановоеВремяРаботыПоДнямJIRA.ДлительностьСекунд,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ВремяНачала,
//											   //++OW Копачев А.С. 11.08.2022 ONEC-7812
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ВремяНачала КАК ВремяНачалаПоЧасовомуПоясуПользователя,
//											   //--OW Копачев А.С. 11.08.2022 ONEC-7812
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ВидПолдня КАК ВидПолдня,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ДокументОтсутствия КАК ДокументОтсутствия,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ФазаДокументаОтсутствия КАК ФазаДокументаОтсутствия,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA КАК СтатусВыгрузкиВJIRA,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.СозданоПрограммно КАК СозданоПрограммно,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.СозданоПользователемJIRA КАК СозданоПользователемJIRA,
//                                               |	ПлановоеВремяРаботыПоДнямJIRA.СлужебнаяЗапись КАК СлужебнаяЗапись,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.АвторВJIRA КАК АвторВJIRA,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.РасчетДанныхПоДокументуОтсутствия КАК РасчетДанныхПоДокументуОтсутствия,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ПроцентВовлеченности КАК ПроцентВовлеченности,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.ПроцентВовлеченностиПлан КАК ПроцентВовлеченностиПлан,
//											   |	ПлановоеВремяРаботыПоДнямJIRA.Описание КАК Описание,
//											   |	ЛОЖЬ КАК ПроверитьУдалениеВJIRA,
//											   |	ЛОЖЬ КАК ВыполнитьУдалениеВJIRA,	
//								               |	ЛОЖЬ КАК ОбновитьВJIRA,
//								               |	ВЫБОР
//								               |		КОГДА ВТ_ДанныеИзJIRA.ПериодДень ЕСТЬ NULL И ПлановоеВремяРаботыПоДнямJIRA.СозданоПользователемJIRA = Ложь
//								               |			ТОГДА ИСТИНА
//								               |		ИНАЧЕ ЛОЖЬ
//								               |	КОНЕЦ КАК ДобавитьВJIRA,
//											   |	ВЫБОР
//								               |		КОГДА ВТ_ДанныеИзJIRA.ПериодДень ЕСТЬ NULL И ПлановоеВремяРаботыПоДнямJIRA.СозданоПользователемJIRA = Истина
//								               |			ТОГДА ИСТИНА
//								               |		ИНАЧЕ ЛОЖЬ
//								               |	КОНЕЦ КАК УдалитьВ1С
//								               |ИЗ
//								               |	РегистрСведений.ПлановоеВремяРаботыПоДнямJIRA КАК ПлановоеВремяРаботыПоДнямJIRA
//								               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеИзJIRA КАК ВТ_ДанныеИзJIRA
//								               |		ПО ПлановоеВремяРаботыПоДнямJIRA.ID = ВТ_ДанныеИзJIRA.ID
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |		И ПлановоеВремяРаботыПоДнямJIRA.ДляJIRAOWS = ВТ_ДанныеИзJIRA.ДляJIRAOWS 
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |		И ПлановоеВремяРаботыПоДнямJIRA.ВидИнстансJIRA = ВТ_ДанныеИзJIRA.ВидИнстансJIRA
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//								               |ГДЕ
//								               |	ПлановоеВремяРаботыПоДнямJIRA.ID <> 0
//								               |	И ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено)
//								               |	И ПлановоеВремяРаботыПоДнямJIRA.ПериодДень МЕЖДУ &ПериодС И &ПериодПо
//											   |	И ПлановоеВремяРаботыПоДнямJIRA.СлужебнаяЗапись = ЛОЖЬ
//											   //++OW Копачев А.С. 09.03.2021 ONEC-6602
//											   |	И ПлановоеВремяРаботыПоДнямJIRA.ДляJIRAOWS = &ДляJIRAOWS
//											   //--OW Копачев А.С. 09.03.2021 ONEC-6602
//											   //++OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |	И ПлановоеВремяРаботыПоДнямJIRA.ВидИнстансJIRA = &ВидИнстансаJIRA
//											   //--OW Копачев А.С. 08.04.2022 ONEC-7464
//											   |	И ВТ_ДанныеИзJIRA.ПериодДень ЕСТЬ NULL"; 
//								
//								Запрос.УстановитьПараметр("ДанныеИзJIRA", ДанныеИзJIRA);
//								Запрос.УстановитьПараметр("ПериодС", ЗапросДанныхИзJIRAПериодС);
//								Запрос.УстановитьПараметр("ПериодПо", ЗапросДанныхИзJIRAПериодПо);
//								//++OW Копачев А.С. 09.03.2021 ONEC-6602
//								Запрос.УстановитьПараметр("ДляJIRAOWS", ЭтоИнстансOWS);
//								//--OW Копачев А.С. 09.03.2021 ONEC-6602
//								//++OW Копачев А.С. 08.04.2022 ONEC-7464
//								Запрос.УстановитьПараметр("ВидИнстансаJIRA", ВидИнстансаJIRA);
//								//--OW Копачев А.С. 08.04.2022 ONEC-7464
//								РезультатЗапроса = Запрос.Выполнить();
//								Выборка = РезультатЗапроса.Выбрать();
//								
//								//++OW Копачев А.С. 05.11.2019 ONEC-5049 
//								ПользователиБезВыгрузкиПлановойВовлеченностиВJIRA = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.ПользователиБезВыгрузкиПлановойВовлеченностиВJIRA);
//								//--OW Копачев А.С. 05.11.2019 ONEC-5049
//	
//								Пока Выборка.Следующий() Цикл 
//									ID = Выборка.ID;									
//									Если НЕ ЗначениеЗаполнено(ID) Тогда 
//										Продолжить;
//									КонецЕсли;
//									
//									//++OW Копачев А.С. 05.11.2019 ONEC-5049 
//									Если ПользователиБезВыгрузкиПлановойВовлеченностиВJIRA.НайтиПоЗначению(Выборка.Офицер) <> Неопределено  Тогда 			
//										Продолжить; // не изменяем данные по данному пользователю
//									КонецЕсли;
//									//--OW Копачев А.С. 05.11.2019 ONEC-5049
//									
//									ФазаДокументаОтсутствияКодПроектаJIRA = Выборка.ФазаДокументаОтсутствияКодПроектаJIRA;
//									
//									Попытка
//										Если Выборка.ПроверитьУдалениеВJIRA = Истина 
//											ИЛИ Выборка.ВыполнитьУдалениеВJIRA = Истина Тогда 
//											// есть в Жире, но отсутствует в 1С										
//											Запись = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьМенеджерЗаписи();	
//											ЗаполнитьЗначенияСвойств(Запись, Выборка);
//											
//											Если Выборка.ПроверитьУдалениеВJIRA = Истина Тогда 
//												Запись.ПроверитьВJIRA 	= Истина; 
//												Запись.УдалитьВJIRA 	= Истина;
//											ИначеЕсли  Выборка.ВыполнитьУдалениеВJIRA = Истина Тогда
//												Запись.ПроверитьВJIRA 	= Ложь;
//												Запись.УдалитьВJIRA 	= Истина; 
//											КонецЕсли;	
//												
//											Запись.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Отправить"); 
//											//Запись.СозданоПрограммно = Истина; 
//											Запись.ИдентификаторЗапроса = "";
//											Запись.ДатаСоздания = ТекущаяДатаСеанса(); 
//											Запись.ДатаОтправки = Дата(1,1,1); 
//											Запись.ДатаОбработки = Дата(1,1,1);
//											
//											Запись.Записать(Истина);
//												
//										ИначеЕсли Выборка.ОбновитьВJIRA = Истина 
//											ИЛИ Выборка.ДобавитьВJIRA = Истина
//											ИЛИ Выборка.УдалитьВ1С = Истина  Тогда   //OW Копачев А.С. 07.11.2019 ONEC-5049
//											
//											// Есть в 1С, но отличается или отсутствует в Жире
//											Набор = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьНаборЗаписей();
//											Набор.Отбор.ПериодДень.Установить(Выборка.ПериодДень);
//											Набор.Отбор.Год.Установить(Выборка.Год);
//											Набор.Отбор.Офицер.Установить(Выборка.Офицер);
//											Набор.Отбор.КодПроектаJIRA.Установить(Выборка.КодПроектаJIRA);
//											Набор.Отбор.НаправлениеДеятельности.Установить(Выборка.НаправлениеДеятельности);
//											//Набор.Отбор.ДокументОтсутствия.Установить(Выборка.ДокументОтсутствия);
//											//Набор.Отбор.ФазаДокументаОтсутствия.Установить(Выборка.ФазаДокументаОтсутствия);
//
//											Набор.Прочитать();
//											
//											//++OW Копачев А.С. 07.11.2019 ONEC-5049
//											Если Выборка.УдалитьВ1С = Истина Тогда 
//												ЗаписиКУдалению = Новый Массив;
//												Для Каждого ЗаписьНабора Из Набор Цикл
//													Если ЗаписьНабора.ID <> ID Тогда 
//														Продолжить;
//													КонецЕсли;	
//													//++OW Копачев А.С. 09.03.2021 ONEC-6602
//													Если ЗаписьНабора.ДляJIRAOWS <> ЭтоИнстансOWS 
//														ИЛИ ЗаписьНабора.ВидИнстансJIRA <> ВидИнстансаJIRA Тогда //OW Копачев А.С. 08.04.2022 ONEC-7464 
//														 
//														Продолжить;
//													КонецЕсли;
//													//--OW Копачев А.С. 09.03.2021 ONEC-6602
//													
//													ЗаписиКУдалению.Добавить(ЗаписьНабора); 
//												КонецЦикла;
//												
//												Для Каждого ЗаписьКУдалению Из ЗаписиКУдалению Цикл
//													Набор.Удалить(ЗаписьКУдалению);	
//												КонецЦикла;	
//												Набор.Записать(Истина);
//											Иначе	
//											//--OW Копачев А.С. 07.11.2019 ONEC-5049	
//												Для Каждого ЗаписьНабора Из Набор Цикл
//													Если ЗаписьНабора.ID <> ID Тогда 
//														Продолжить;
//													КонецЕсли;
//													//++OW Копачев А.С. 09.03.2021 ONEC-6602
//													Если ЗаписьНабора.ДляJIRAOWS <> ЭтоИнстансOWS 
//														ИЛИ ЗаписьНабора.ВидИнстансJIRA <> ВидИнстансаJIRA Тогда //OW Копачев А.С. 08.04.2022 ONEC-7464
//														 
//														Продолжить;
//													КонецЕсли;
//													//--OW Копачев А.С. 09.03.2021 ONEC-6602
//													
//													Если Выборка.ДобавитьВJIRA = Истина Тогда 
//														ЗаписьНабора.ID = 0; // сбрасываем так как в Жире нет такого идентификатора	
//													КонецЕсли;
//													
//													ЗаписьНабора.ПроверитьВJIRA  = Ложь;
//													ЗаписьНабора.УдалитьВJIRA = Ложь; 
//													ЗаписьНабора.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Отправить"); 
//													ЗаписьНабора.ИдентификаторЗапроса = "";
//													ЗаписьНабора.ДатаОтправки = Дата(1,1,1); 
//													ЗаписьНабора.ДатаОбработки = Дата(1,1,1); 
//												КонецЦикла;	
//												Набор.Записать(Истина);
//											КонецЕсли;	
//										КонецЕсли;	
//									Исключение
//										ЕстьОшибкиОбработки = Истина;
//										ТекстОшибки = ОписаниеОшибки();
//									КонецПопытки;	
//								КонецЦикла; 
//								
//							Исключение
//								ЕстьОшибкиОбработки = Истина;
//								ТекстОшибки = ОписаниеОшибки();
//							КонецПопытки;	
//								
//							Если ЕстьОшибкиОбработки Тогда 
//								ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//								ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.ОшибкаОтправки");	
//								РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);
//								Продолжить;
//							Иначе							 									
//								ТекДанные.ДатаОбработки = ТекущаяДатаСеанса();
//								ТекДанные.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено");		
//								РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.ЗаписатьДанные(ТекДанные);					
//							КонецЕсли;								
//								
//						КонецЕсли;	
//					КонецЕсли; // Если  МетодЗапроса = ПредопределенноеЗначение
//				КонецЕсли; //	Если ЕстьОшибки Тогда							
//			КонецЦикла;	// Для Каждого ТекДанные Из ТЗ_ДанныеПлановоеВремяРаботыПоДнямJIRA Цикл
//		КонецЕсли;	// Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда	
//		
//	//++OW Копачев А.С. 22.01.2020 ONEC-5244 
//	// заполнение логина пользователя
//	ИначеЕсли МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetCalendarUserKey") Тогда 
//		
//		Если ЕстьОшибки Тогда
//			Возврат;
//		КонецЕсли;
//		
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет);
//		Если ДанныеJSON = Неопределено 
//			ИЛИ ТипЗнч(ДанныеJSON) <> Тип("Массив") Тогда 
//			ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены. Подробности: Текст сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + "> некорректен";
//			OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);
//						
//			Возврат;
//		ИначеЕсли ТипЗнч(ДанныеJSON) = Тип("Массив") И ДанныеJSON.Количество() = 0 Тогда 
//			Возврат; // ничего не отдает	
//		КонецЕсли;	
//		
//		Для Каждого ДанныеПользователя Из ДанныеJSON Цикл 
//			Попытка
//								
//				// находим пользователя для заполнения UserKeyCalendarJIRA
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//					"ВЫБРАТЬ
//					|	Пользователи.Ссылка,
//					|	Пользователи.UserKeyCalendarJIRA,
//					|	Пользователи.Login
//					|ИЗ
//					|	Справочник.Пользователи КАК Пользователи
//					|ГДЕ
//					|	Пользователи.UserKeyCalendarJIRA = """"
//					|	И Пользователи.Login = &Login
//					|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
//				
//				Запрос.УстановитьПараметр("Login", ДанныеПользователя.Получить("name"));
//				РезультатЗапроса = Запрос.Выполнить();
//			
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Пользователь = Выборка.Ссылка;
//					
//					ПользовательОбъект = Пользователь.ПолучитьОбъект();
//					
//					ПользовательОбъект.UserKeyCalendarJIRA = ДанныеПользователя.Получить("key");
//					ПользовательОбъект.ОбменДанными.Загрузка = Истина; 
//					ПользовательОбъект.Записать();					
//				КонецЦикла;	
//			Исключение
//				ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены по тексту сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + ">. Подробности: " + ОписаниеОшибки();
//				OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);	
//			КонецПопытки;
//		КонецЦикла;				
//	//--OW Копачев А.С. 22.01.2020 ONEC-5244
//	
//	//++OW Копачев А.С. 15.08.2022 ONEC-7812 
//	// заполнение часового пояса пользователя из JIRA
//	ИначеЕсли МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetUserData") Тогда 
//		
//		Если ЕстьОшибки Тогда
//			Возврат;
//		КонецЕсли;
//		
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет);
//		Если ДанныеJSON = Неопределено 
//			ИЛИ ТипЗнч(ДанныеJSON) <> Тип("Соответствие") Тогда 
//			ТекстСообщения = "Данные UserData пользователя не заполнены. Подробности: Текст сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + "> некорректен";
//			OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);
//						
//			Возврат;
//		КонецЕсли;	
//		
//		Попытка
//							
//			// находим пользователя для заполнения UserDataJIRA
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//				"ВЫБРАТЬ
//				|	Пользователи.Ссылка,
//				|	Пользователи.ЧасовойПоясJIRA,
//				|	Пользователи.Login,
//				|	Пользователи.ЧасовойПоясJIRAПредставление
//				|ИЗ
//				|	Справочник.Пользователи КАК Пользователи
//				|ГДЕ
//				|	Пользователи.Login = &Login
//				|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
//			
//			Запрос.УстановитьПараметр("Login", ДанныеJSON.Получить("name"));
//			РезультатЗапроса = Запрос.Выполнить();
//		
//			Выборка = РезультатЗапроса.Выбрать();
//			Пока Выборка.Следующий() Цикл
//				Пользователь = Выборка.Ссылка;
//				
//				ПредставлениеЧасовогоПояса = ДанныеJSON.Получить("timeZone");
//				
//				Если ПредставлениеЧасовогоПояса <> Неопределено Тогда 
//					
//					Если Выборка.ЧасовойПоясJIRAПредставление <> ПредставлениеЧасовогоПояса Тогда
//						ПользовательОбъект = Пользователь.ПолучитьОбъект();
//						
//						ПользовательОбъект.ЧасовойПоясJIRAПредставление = ПредставлениеЧасовогоПояса;
//						ПользовательОбъект.ОбменДанными.Загрузка = Истина; 
//						ПользовательОбъект.Записать();						
//					КонецЕсли;	
//				
//					ЧасовойПояс = ПолучитьЧасовойПоясПоПредставлению(ПредставлениеЧасовогоПояса);
//					
//					Если ЧасовойПояс <> Неопределено Тогда 
//						Если Выборка.ЧасовойПоясJIRA <> ЧасовойПояс Тогда 
//							НачатьТранзакцию();
//							
//							ПользовательОбъект = Пользователь.ПолучитьОбъект();
//							
//							ПользовательОбъект.ЧасовойПоясJIRA = ЧасовойПояс;
//							ПользовательОбъект.ОбменДанными.Загрузка = Истина; 
//							ПользовательОбъект.Записать();
//							
//							// обновляем планы в календаре JIRA по пользователю - просто перевыгружаем 
//							Запрос = Новый Запрос;
//							Запрос.Текст = 
//								"ВЫБРАТЬ
//								|	*
//								|ИЗ
//								|	РегистрСведений.ПлановоеВремяРаботыПоДнямJIRA КАК ПлановоеВремяРаботыПоДнямJIRA
//								|ГДЕ
//								|	ПлановоеВремяРаботыПоДнямJIRA.ПериодДень >= &ДатаНачалаРедактирования
//								|	И ПлановоеВремяРаботыПоДнямJIRA.Офицер = &Пользователь
//								|	И ПлановоеВремяРаботыПоДнямJIRA.ID <> 0
//								|	И ПлановоеВремяРаботыПоДнямJIRA.СтатусВыгрузкиВJIRA = Значение(Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Выполнено)";
//							
//							ДатаНачалаРедактирования = НачалоДня(ДобавитьМесяц(ТекущаяДата(), -13));  // -13 месяцев
//							
//							Запрос.УстановитьПараметр("ДатаНачалаРедактирования", ДатаНачалаРедактирования);
//							Запрос.УстановитьПараметр("Пользователь", Пользователь);
//							
//							РезультатЗапроса = Запрос.Выполнить();
//							
//							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//							
//							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//								
//								Запись = РегистрыСведений.ПлановоеВремяРаботыПоДнямJIRA.СоздатьМенеджерЗаписи();	
//								ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
//														
//								Запись.СтатусВыгрузкиВJIRA = ПредопределенноеЗначение("Перечисление.СтатусыВыгрузкиДанныхПоПлановомуВремениРаботыВJIRA.Отправить"); 
//
//								Запись.ИдентификаторЗапроса = "";
//								Запись.ДатаСоздания = ТекущаяДатаСеанса(); 
//								Запись.ДатаОтправки = Дата(1,1,1); 
//								Запись.ДатаОбработки = Дата(1,1,1);
//								
//								Запись.Записать(Истина);
//				
//							КонецЦикла;
//								
//							ЗафиксироватьТранзакцию();
//						КонецЕсли;	
//					КонецЕсли;
//				КонецЕсли;	
//			КонецЦикла;	
//		Исключение
//			ТекстСообщения = "Данные UserData пользователя не заполнены по тексту сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + ">. Подробности: " + ОписаниеОшибки();
//			OW.ЗаписатьОшибку(, 
//					ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//					ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//					ТекстСообщения);	
//		КонецПопытки;
//						
//	//--OW Копачев А.С. 15.08.2022 ONEC-7812
//	КонецЕсли;
//	
//КонецПроцедуры
//
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ С HTTP-СЕРВИСАМИ  
//
//Функция ОбработатьЗапросНаУстановкуПризнакаЗадачаГотоваКЗагрузке(СтрокаJSON, Инстанс) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	СтруктураВозврата.Вставить("АвторИзменений", Неопределено);
//	
//	Если ПустаяСтрока(СтрокаJSON) Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	СтруктураВозврата = ЗагрузитьЗадачуИзJIRA(СтрокаJSON, Инстанс);
//		
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция ЗагрузитьЗадачуИзJIRA(ТекстСообщения, Инстанс)
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстСообщения, Истина);
//	Если ДанныеJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//	
//	// чтение данных
//	issueKey	= JIRA.ПолучитьПоле(ДанныеJSON,"issueKey");
//	author		= JIRA.ПолучитьПоле(ДанныеJSON,"author"); //OW Копачев А.С. 26.01.2021 ONEC-6403 
//	action		= JIRA.ПолучитьПоле(ДанныеJSON,"action"); //OW Копачев А.С. 12.08.2021 ONEC-6903 
//	secondaryIssueKeys = JIRA.ПолучитьПоле(ДанныеJSON,"secondaryIssueKeys"); //OW Копачев А.С. 26.08.2021 ONEC-6382 
//	
//	АвторИзменений = ?(ЗначениеЗаполнено(author), OW.ПолучитьЮзераПоЛогину(author), Неопределено);  //OW Копачев А.С. 26.01.2021 ONEC-6403
//
//	ДействиеИнициатор = ?(ЗначениеЗаполнено(action), action, Неопределено); //OW Копачев А.С. 12.08.2021 ONEC-6903
//	
//	// проверка корректности данных
//	Если НЕ ЗначениеЗаполнено(issueKey) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не задано поле (issueKey)",
//								"No field specified (issueKey)", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//		
//	ИначеЕсли JIRA.ЭтоКодЗадачиJIRA(issueKey) = Ложь Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Неправильный формат номера задачи  поле (issueKey = " + issueKey + ")",
//								"Invalid task number format  field (issueKey = " + issueKey + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 26.01.2021 ONEC-6403
//	Если НЕ ЗначениеЗаполнено(author) Тогда
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не задано поле (author)",
//								"No field specified (author)", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	
//	ИначеЕсли НЕ ЗначениеЗаполнено(АвторИзменений) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найден пользователь по полю (author = " + author + ")",
//							"No user found for field (author = " + author + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	КонецЕсли;	
//	
//	СтруктураВозврата.Вставить("АвторИзменений", АвторИзменений);
//	//--OW Копачев А.С. 26.01.2021 ONEC-6403
//	
//	//++OW Копачев А.С. 26.08.2021 ONEC-6382 
//	МассивПодчиненныхЗадачJIRA = Новый Массив;
//	Если ТипЗнч(secondaryIssueKeys) = Тип("Массив") Тогда 
//		Для Каждого ЗначениеЭлемента Из secondaryIssueKeys Цикл 
//			Если ТипЗнч(ЗначениеЭлемента) = Тип("Строка") И НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда 
//				ТекЗадачаJIRA = JIRA.НайтиСоздатьЗадачуJIRA(ЗначениеЭлемента, Инстанс);
//				Если ЗначениеЗаполнено(ТекЗадачаJIRA) Тогда
//					МассивПодчиненныхЗадачJIRA.Добавить(ТекЗадачаJIRA);
//				КонецЕсли;	
//			Иначе
//				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//					"Не получены данные по подчиненной задаче JIRA для задачи (Код = " + issueKey + ", Инстанс = " + Инстанс + ")",
//					"No data received for the JIRA task (Code = " + issueKey + ", Instance = " + Инстанс + ")", "Все");
//				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//			КонецЕсли;			
//		КонецЦикла;
//	КонецЕсли;
//	//--OW Копачев А.С. 26.08.2021 ONEC-6382
//	
//	// Обработка данных
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		// получим данные по задаче
//		Если НРег(ДействиеИнициатор) <> НРег("Deleted") И JIRA.ОбновитьИсториюПоЗадачеJIRA(issueKey,,,Инстанс, АвторИзменений, ДействиеИнициатор) = Ложь Тогда 
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не получены данные по задаче JIRA (Код = " + issueKey + ", Инстанс = " + Инстанс + ")",
//								"No data received for the JIRA task (Code = " + issueKey + ", Instance = " + Инстанс + ")", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);			
//		Иначе
//			// проверим есть ли в системе задача с таким кодом
//			ЗадачаJIRA = JIRA.НайтиЗадачуJIRA(issueKey, Инстанс);
//			Если НЕ ЗначениеЗаполнено(ЗадачаJIRA) Тогда 
//				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//									"Не найдена задача JIRA (Код = " + issueKey + ", Инстанс = " + Инстанс + ")",
//									"JIRA task not found (Code = " + issueKey + ", Instance = " + Инстанс + ")", "Все");
//				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);	
//			Иначе
//				//++OW Копачев А.С. 26.01.2021 ONEC-6403
//				Если ОбработатьЗагрузкуЗадачиИзJIRA(ЗадачаJIRA, АвторИзменений, ДействиеИнициатор, МассивПодчиненныхЗадачJIRA) = Ложь Тогда 
//					ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//									"Не обработаны данные при загрузке задачи JIRA (Код = " + issueKey + ", Инстанс = " + Инстанс + ")",
//									"Data not processed when loading the JIRA task (Code = " + issueKey + ", Instance = " + Инстанс + ")", "Все");
//					
//					ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);	
//				КонецЕсли;	
//				//--OW Копачев А.С. 26.01.2021 ONEC-6403
//							
//				СтруктураВозврата.Данные = ЗадачаJIRA;	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;	
//		
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция ОбработатьЗагрузкуЗадачиИзJIRA(ЗадачаJIRA, АвторИзменений = Неопределено, ДействиеИнициатор = Неопределено, МассивПодчиненныхЗадачJIRA = Неопределено)
//	
//	ЕстьОшибки = Ложь;
//	
//	//++OW Копачев А.С. 26.01.2021 ONEC-6403
//	ДанныеЗадачиJIRA = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаJIRA, "Код, КодИнтеграции_JIRA, Type, Assignee, ToBeClosedInTheCurrentQuarter, CommentsToPhasesClosure");
//	
//	Если НРег(ДействиеИнициатор) = НРег("Update Assignee") Тогда 
//		Если ДанныеЗадачиJIRA.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.Phase") Тогда 
//			//++OW Копачев А.С. 31.03.2022 ONEC-7464
//			//Фаза = JIRA.ПолучитьФазуПоКодуПроектаJIRA(ДанныеЗадачиJIRA.Код);
//			Фаза = JIRA.ПолучитьФазуПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
//			//--OW Копачев А.С. 31.03.2022 ONEC-7464
//			Если ЗначениеЗаполнено(Фаза) 
//				И ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда 
//				// устанавливаем на фазе поля из задачи
//				
//				ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Фаза, "Офицер, Команда");
//
//				// устанавливаем assignee таска в поле "Офицер"
//				ПользовательAssignee = ДанныеЗадачиJIRA.Assignee;  
//				
//				//Если ДанныеФазы.Офицер <> ПользовательAssignee Тогда  
//					
//					// нужно изменить команду офицера с учетом автора изменений
//					НоваяКоманда = Неопределено;
//					
//					// по автору изменений ищем его команды
//					МассивКомандыАвтора = Справочники.Команды.ПолучитьКомандыТимЛида(АвторИзменений,Истина,ТекущаяДата());
//					МассивКомандыПользователя = Справочники.Команды.ПолучитьКомандыПользователя(ПользовательAssignee, ТекущаяДата());
//					
//					Для Каждого ТекКоманда Из МассивКомандыПользователя Цикл
//						Если МассивКомандыАвтора.Найти(ТекКоманда) <> Неопределено Тогда 
//							НоваяКоманда = ТекКоманда;
//							Прервать;
//						КонецЕсли;
//					КонецЦикла;	
//					
//					Если НЕ ЗначениеЗаполнено(НоваяКоманда) Тогда 
//						// попытаемся проверь старую команду фазы, подойдет ли она
//						Если МассивКомандыПользователя.Найти(ДанныеФазы.Команда) <> Неопределено Тогда 
//							НоваяКоманда = ДанныеФазы.Команда;
//						КонецЕсли;
//					КонецЕсли;	
//					
//					Если НЕ ЗначениеЗаполнено(НоваяКоманда) Тогда 
//						ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не найдена команда фазы (" + Фаза + ") для assignee (" + ПользовательAssignee + ") по задаче JIRA (" + ДанныеЗадачиJIRA.Код + ") и автору изменений (" + АвторИзменений + ").", 
//																								"No phase team found ("+ Фаза +") for assignee (" + ПользовательAssignee + ") and the JIRA task ("+ ДанныеЗадачиJIRA.Код +") and the author of the changes (" + АвторИзменений + ").");
//						OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);	
//						
//						ТекстПисьма = "No phase team found ("+ Фаза +") for assignee (" + ПользовательAssignee + ") and the JIRA task ("+ ДанныеЗадачиJIRA.Код +") and the author of the changes (" + АвторИзменений + ").";
//						НотификацияПриОшибкахИзмененияКомандыФазы(ТекстПисьма, АвторИзменений);
//					КонецЕсли;
//					
//					Если ДанныеФазы.Офицер <> ПользовательAssignee
//						ИЛИ ДанныеФазы.Команда <> НоваяКоманда Тогда 
//						
//						ФазаОбъект = Фаза.ПолучитьОбъект();
//						ФазаОбъект.Офицер = ПользовательAssignee;
//						ФазаОбъект.Команда = НоваяКоманда;		 	
//						
//						Попытка
//							ФазаОбъект.Записать();
//						Исключение
//							
//							ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Ошибка изменения реквизитов при записи фазы (" + Фаза + ") по задаче JIRA (" + ДанныеЗадачиJIRA.Код + "). Подробности: " + ОписаниеОшибки(), 
//																									"Error changing the details when recording the phase ("+ Фаза +") for the JIRA task ("+ ДанныеЗадачиJIRA.Код +"). Details: "+ ОписаниеОшибки());
//							OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);	
//
//							ЕстьОшибки = Истина;
//						КонецПопытки;	
//					КонецЕсли;	
//				//КонецЕсли;
//				
//			КонецЕсли;	
//		КонецЕсли;	
//		
//		
//	//++OW Копачев А.С. 03.04.2023 ONEC-8496 	
//
//	//Запись показателей ПрогнозЗакрытияФаз	
//	ИначеЕсли НРег(ДействиеИнициатор) = НРег("Update Phase Prediction") Тогда 
//		Если ДанныеЗадачиJIRA.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.Phase") Тогда 
//					
//			// запись в регистре ПрогнозЗакрытияФаз
//			Движение = РегистрыСведений.ПрогнозЗакрытияФаз.СоздатьМенеджерЗаписи();
//			Движение.Период = ТекущаяДата();
//			Движение.Задача	= ЗадачаJIRA;
//			Движение.БудетЗакрытаВТекущемКвартале = ДанныеЗадачиJIRA.ToBeClosedInTheCurrentQuarter;
//			Движение.КомментарийКЗакрытиюФазы = ДанныеЗадачиJIRA.CommentsToPhasesClosure;					
//			Движение.Автор = АвторИзменений;
//					
//			Движение.Записать();
//		КонецЕсли;
//	//--OW Копачев А.С. 03.04.2023 ONEC-8496
//	
//	ИначеЕсли НРег(ДействиеИнициатор) = НРег("Tech-move-worklogs") Тогда 
//		// мигрируем постинг
//		Если ТипЗнч(МассивПодчиненныхЗадачJIRA) = Тип("Массив")
//			И МассивПодчиненныхЗадачJIRA.Количество() > 0 Тогда 
//			
//			НоваяЗадачаJIRAПостинга = МассивПодчиненныхЗадачJIRA[0];
//			
//			ИмяРегистраПостинга = "ПостингИзJIRA_2";		
//			НаборЗаписейСтарый = РегистрыСведений[ИмяРегистраПостинга].СоздатьНаборЗаписей(); 
//			//++OW Копачев А.С. 08.04.2022 ONEC-7464
//			//НаборЗаписейСтарый.Отбор.Таск_ID.Установить(ДанныеЗадачиJIRA.Код);
//			НаборЗаписейСтарый.Отбор.Таск.Установить(ЗадачаJIRA);
//			//--OW Копачев А.С. 08.04.2022 ONEC-7464
//			НаборЗаписейСтарый.Прочитать();
//			
//			// создаем новые записи из старых
//			Для Каждого ЗаписьНабора из НаборЗаписейСтарый Цикл
//				НоваяЗапись = РегистрыСведений[ИмяРегистраПостинга].СоздатьМенеджерЗаписи();
//				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
//				
//				НоваяЗапись.Таск	 = НоваяЗадачаJIRAПостинга;
//				НоваяЗапись.Таск_ID  = НоваяЗадачаJIRAПостинга.Код;
//				НоваяЗапись.Записать(истина);
//			КонецЦикла;		
//			
//			// очищаем старые записи
//			НаборЗаписейСтарый.Очистить();
//			НаборЗаписейСтарый.Записать(истина);
//		
//		КонецЕсли;	
//		
//	//++OW Копачев А.С. 29.09.2022 ONEC-4737 
//	// физическое удаление задачи
//	ИначеЕсли НРег(ДействиеИнициатор) = НРег("Deleted") Тогда 
//		
//		Попытка
//			
//			НачатьТранзакцию();
//			
//			ОбъектСсылка = Неопределено;
//		    Если ДанныеЗадачиJIRA.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.Phase") Тогда 
//				
//				ОбъектСсылка = JIRA.ПолучитьФазуПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
//			ИначеЕсли ДанныеЗадачиJIRA.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.Project") Тогда 
//		
//				ОбъектСсылка = JIRA.ПолучитьПроектПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
//				
//			ИначеЕсли ДанныеЗадачиJIRA.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.BAEstimation") Тогда 
//		
//				ОбъектСсылка = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
//				
//			КонецЕсли;	
//			
//			Если ЗначениеЗаполнено(ОбъектСсылка) Тогда 
//				
//				// помечаем на удаление объект
//					
//				Объект = ОбъектСсылка.ПолучитьОбъект();
//                Объект.ПометкаУдаления = Истина;
//                Объект.ОбменДанными.Загрузка = Истина;
//                Объект.Записать();
//			КонецЕсли;
//			
//			//++OW Копачев А.С. 13.07.2023  
//			// не удаляем постинг, так как он закрывается и на его основе строятся данные
//			
//			//// удаляем постинг
//			//ИмяРегистраПостинга = "ПостингИзJIRA_2";	
//			//
//			//НаборЗаписейУдалить = РегистрыСведений[ИмяРегистраПостинга].СоздатьНаборЗаписей(); 
//			//НаборЗаписейУдалить.Отбор.Таск.Установить(ЗадачаJIRA);
//			//
//			//НаборЗаписейУдалить.Записать(истина);	
//			//
//			//ИмяРегистраПостинга = "ПостингИзJIRA_SPB_ДляПроверкиПолнотыПостинга";	
//			//
//			//НаборЗаписейУдалить = РегистрыСведений[ИмяРегистраПостинга].СоздатьНаборЗаписей(); 
//			//НаборЗаписейУдалить.Отбор.Таск.Установить(ЗадачаJIRA);
//			//
//			//НаборЗаписейУдалить.Записать(истина);
//			//
//			//ИмяРегистраПостинга = "OW_ПостингИзJIRA";	
//			//
//			//НаборЗаписейУдалить = РегистрыСведений[ИмяРегистраПостинга].СоздатьНаборЗаписей(); 
//			//НаборЗаписейУдалить.Отбор.Таск.Установить(ЗадачаJIRA);
//			//
//			//НаборЗаписейУдалить.Записать(истина);
//	       	//--OW Копачев А.С. 13.07.2023
//			
//			// удаляем задачу
//			ЗадачаJIRAОбъект = ЗадачаJIRA.ПолучитьОбъект();
//			ЗадачаJIRAОбъект.ЗадачаУдалена = Истина;
//			
//			ЗадачаJIRAОбъект.Записать();
//			
//			ЗафиксироватьТранзакцию();
//			
//		Исключение
//			
//			ОтменитьТранзакцию();
//			
//			ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не удалось обработать удаление задачи JIRA (" + ДанныеЗадачиJIRA.Код + "). Подробности: " + ОписаниеОшибки(), 
//																					"Failed to process deletion of the JIRA task ("+ ДанныеЗадачиJIRA.Код +"). Details: "+ ОписаниеОшибки());
//			OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);	
//			
//			ЕстьОшибки = Истина;
//		КонецПопытки;	
//
//			
//	//--OW Копачев А.С. 29.09.2022 ONEC-4737	
//	
//	КонецЕсли;
//	
//	Возврат ЕстьОшибки = Ложь;
//	//--OW Копачев А.С. 26.01.2021 ONEC-6403
//	
//КонецФункции
//
//Процедура НотификацияПриОшибкахИзмененияКомандыФазы(ТекстПисьма, ДополнительныйПолучательПисьма = Неопределено)
//	
//	//++OW Копачев А.С. 30.07.2021 ONEC-6403  									
//	Тема = "There are errors with the installation of the teams in the phase";		
//					
//	// формируем письмо		
//	ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаОбОшибкахИзмененияКомандыФазы;	
//
//	СписокАдресовКому = Новый СписокЗначений;	
//	СписокПользователей = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);
//	Для Каждого ТекПользователь из СписокПользователей Цикл
//		Если ЗначениеЗаполнено(ТекПользователь) 
//			И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ТекПользователь) Тогда  //OW Копачев А.С. 20.04.2023 ONEC-7812  
//			Мыло = OW.ПолучитьМылоЮзера(ТекПользователь);
//			Если ЗначениеЗаполнено(Мыло) Тогда
//				СписокАдресовКому.Добавить(Мыло, Строка(ТекПользователь));
//			КонецЕсли;  
//		КонецЕсли;	
//	КонецЦикла;
//	
//	Если ЗначениеЗаполнено(ДополнительныйПолучательПисьма) 
//		И OW_Нотификации.РазрешеноОтправлятьПисьмаПользователю(ДополнительныйПолучательПисьма) Тогда  //OW Копачев А.С. 20.04.2023 ONEC-7812   
//		Мыло = OW.ПолучитьМылоЮзера(ДополнительныйПолучательПисьма);
//		Если ЗначениеЗаполнено(Мыло) Тогда
//			СписокАдресовКому.Добавить(Мыло, Строка(ДополнительныйПолучательПисьма));
//		КонецЕсли;	
//	КонецЕсли;	
//		
//	РазделУчетаНотификации = Справочники.OW_РазделыУчета.НотификацииEmail;
//	
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресовКому,,,,, ,,,РазделУчетаНотификации);	
//	//--OW Копачев А.С. 30.07.2021 ONEC-6403
//	
//КонецПроцедуры
//
//Функция ОбработатьЗапросНаПолучениеДанныхКурсаВалютыОрганизации(СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если ПустаяСтрока(СтрокаJSON) Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	// чтение JSON
//	МассивДанныхJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//	Если МассивДанныхJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//	
//	Данные = Новый Массив;
//	
//	// чтение данных из массива
//	Для Каждого ДанныеJSON Из МассивДанныхJSON Цикл
//		
//		СтруктураВозвратаПоЭлементу = ИнициализироватьСтруктутруВозврата();
//
//		issueKey				= JIRA.ПолучитьПоле(ДанныеJSON,"issueKey");
//		currencyFromExpenseItem	= JIRA.ПолучитьПоле(ДанныеJSON,"currencyFromExpenseItem");
//		organizationID 			= СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(JIRA.ПолучитьПоле(ДанныеJSON,"organizationID"));
//		expenseDate 			= JIRA.ПолучитьПоле(ДанныеJSON,"expenseDate");
//		expenseAmountInExpenseCurrency = СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(JIRA.ПолучитьПоле(ДанныеJSON,"expenseAmountInExpenseCurrency"));
//
//		Валюта 		= ?(ЗначениеЗаполнено(currencyFromExpenseItem), Справочники.Валюты.НайтиПоНаименованию(currencyFromExpenseItem,Истина), Неопределено);
//		Организация	= ?(ЗначениеЗаполнено(organizationID), 			Справочники.Организации.ПолучитьОрганизациюПоID_Sync(organizationID), Неопределено);
//		ДатаКурса	= ?(ЗначениеЗаполнено(expenseDate), 			JIRA.ПреобразоватьДату(expenseDate),Неопределено);
//		Сумма		= ?(ЗначениеЗаполнено(expenseAmountInExpenseCurrency), 	expenseAmountInExpenseCurrency, 0);
//
//		// проверка корректности данных
//		Если НЕ ЗначениеЗаполнено(Валюта) Тогда 
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена валюта по полю (currencyFromExpenseItem = " + currencyFromExpenseItem + ")",
//								"No currency found for field (currencyFromExpenseItem = " + currencyFromExpenseItem + ")", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//		КонецЕсли;
//		Если НЕ ЗначениеЗаполнено(Организация) Тогда 
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена организация по полю (organizationID = " + organizationID + ")",
//								"No organization found for field (organizationID = " + organizationID + ")", "Все");
//
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//		КонецЕсли;
//		Если НЕ ЗначениеЗаполнено(ДатаКурса) Тогда 
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не получена дата курса по полю (expenseDate = " + expenseDate + ")",
//								"Expense date not received for field (expenseDate = " + expenseDate + ")", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//		КонецЕсли;
//		//Если НЕ ЗначениеЗаполнено(Сумма) Тогда 
//		//	ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//		//						"Не получена сумма по полю (expenseAmountInExpenseCurrency = " + expenseAmountInExpenseCurrency + ")",
//		//						"Amount not received for field (expenseAmountInExpenseCurrency = " + expenseAmountInExpenseCurrency + ")", "Все");
//		//	ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//		//КонецЕсли;
//		
//		
//		// Обработка данных
//		КурсВалюты 			= 0;
//		СуммаВВалюте 		= 0;
//		ВалютаОрганизации	= "";
//		Если СтруктураВозвратаПоЭлементу.ЕстьОшибки = Ложь Тогда 
//			
//			ВалютаОрганизацииСАП = Неопределено;
//			БазаСАП = SAP_МодульНаСервере.ПолучитьБазуСАПСсылку(Организация);
//			Если ЗначениеЗаполнено(БазаСАП) Тогда 
//				ВалютаОрганизацииСАП = БазаСАП.ВалютаПоУмолчанию;
//				Если ЗначениеЗаполнено(ВалютаОрганизацииСАП) Тогда 
//					// валюта сейчас передается кодом, так как ЖИРА сама сейчас разбирает код и устанавливает у себя в пользовательском поле значение вида: <Наименование валюты> - <НаименованиеПолноеАнгл валюты> (пример, IDR - Rupee)
//					ВалютаОрганизации = ВалютаОрганизацииСАП.Наименование;
//				КонецЕсли;	
//			//++OW Копачев А.С. 21.10.2022  
//			Иначе
//				// берем валюту из организации			
//				ВалютаОрганизацииСАП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ЛокальнаяВалюта");
//				//Если НЕ ЗначениеЗаполнено(ВалютаОрганизацииСАП) Тогда 
//				//	ВалютаОрганизацииСАП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ВалютаПоУмолчанию");
//				//КонецЕсли;
//							
//				Если ЗначениеЗаполнено(ВалютаОрганизацииСАП) Тогда 
//					// валюта сейчас передается кодом, так как ЖИРА сама сейчас разбирает код и устанавливает у себя в пользовательском поле значение вида: <Наименование валюты> - <НаименованиеПолноеАнгл валюты> (пример, IDR - Rupee)
//					ВалютаОрганизации = ВалютаОрганизацииСАП.Наименование;
//				КонецЕсли;
//			//--OW Копачев А.С. 21.10.2022 	
//			КонецЕсли;		
//			
//			// проверим, что нужно пересчитывать
//			Если ЗначениеЗаполнено(ВалютаОрганизацииСАП) И Валюта = ВалютаОрганизацииСАП Тогда 
//				// валюта та же, что и у сотрудника - не пересчитываем	
//				КурсВВалютеОрганизации = 1;
//			Иначе	
//				// получаем курс валюты сотрудника из Oanda по отношению к запрашиваемой
//				КурсВВалютеОрганизации = МодульВалютногоУчета.ПолучитьКурсВалюты_Oanda(Организация, Валюта, ДатаКурса);
//			КонецЕсли;			
//			
//			СуммаВВалюте = ?(КурсВВалютеОрганизации = 0, 0, Окр(Сумма/КурсВВалютеОрганизации,2));
//			КурсВалюты = ?(КурсВВалютеОрганизации = 0, 0, Окр(1/КурсВВалютеОрганизации,4));
//		КонецЕсли;
//		
//		ДанныеПоЭлементу = Новый Структура;
//		ДанныеПоЭлементу.Вставить("issueKey",  				issueKey);
//		ДанныеПоЭлементу.Вставить("currencyExchangeRate",  	JIRA.НормализоватьЧисло(КурсВалюты));
//		ДанныеПоЭлементу.Вставить("amountInLocalCurrency", 	JIRA.НормализоватьЧисло(СуммаВВалюте));
//		ДанныеПоЭлементу.Вставить("localCurrency", 		 	JIRA.НормализоватьСтроку(ВалютаОрганизации));
//		Если СтруктураВозвратаПоЭлементу.ЕстьОшибки Тогда 
//			Сообщить(СтруктураВозвратаПоЭлементу.ТекстОшибки);
//			ДанныеПоЭлементу.Вставить("errors", 		 	СтруктураВозвратаПоЭлементу.ТекстОшибкиEn);
//		КонецЕсли;
//		
//		СтруктураВозвратаПоЭлементу.Данные = ДанныеПоЭлементу;
//		Данные.Добавить(СтруктураВозвратаПоЭлементу.Данные);
//	КонецЦикла;	
//	
//	СтруктураВозврата.Данные = Данные;
//	
//	Возврат СтруктураВозврата;
//КонецФункции	
//
//Функция ОбработатьЗапросНаОбработкуДанныхПоДнямОтпускаСотрудников(СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если ПустаяСтрока(СтрокаJSON) Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	// чтение JSON
//	ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//	Если ДанныеJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//		
//	
//	Данные = Новый Массив;
//    
//	email				= JIRA.ПолучитьПоле(ДанныеJSON,"email");
//    
//    ДанныеПоСотрудникам = Новый Массив;
//    
//    //
//    ТЗ_ДанныеПоСотрудникам = Новый ТаблицаЗначений; 
//    ТЗ_ДанныеПоСотрудникам = HR_НаСервере.ПолучитьТаблицуДанныхДляОстатковОтпусков(email);
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("employeeEmail");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("employeeName");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("entitlementCurrentYear");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("claimedCurrentYear");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("remainingCurrentYear");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("entitlementNextYear");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("claimedNextYear");
//    //ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("remainingNextYear");
//    //
//    //
//    ////***
//    //НС = ТЗ_ДанныеПоСотрудникам.Добавить();
//    //НС.employeeEmail = "pbodnar@openwaygroup.com";
//    //НС.employeeName = "Pavel Bodnar";
//    //НС.entitlementCurrentYear =1;
//    //НС.claimedCurrentYear =2;
//    //НС.remainingCurrentYear =3;
//    //НС.entitlementNextYear =4;
//    //НС.claimedNextYear =5;
//    //НС.remainingNextYear =6;
//    ////***
//    //НС = ТЗ_ДанныеПоСотрудникам.Добавить();
//    //НС.employeeEmail = "akurbatova@openwaygroup.com";
//    //НС.employeeName = "Anna Kurbatova";
//    //НС.entitlementCurrentYear =1;
//    //НС.claimedCurrentYear =2;
//    //НС.remainingCurrentYear =3;
//    //НС.entitlementNextYear =4;
//    //НС.claimedNextYear =5;
//    //НС.remainingNextYear =6;
//
//
//	Для Каждого ТекСтрока Из ТЗ_ДанныеПоСотрудникам Цикл
//		ДанныеПоСотруднику = Новый Структура;
//		ДанныеПоСотруднику.Вставить("employeeEmail", 			JIRA.НормализоватьСтроку(ТекСтрока.employeeEmail));
//        ДанныеПоСотруднику.Вставить("employeeName", 			JIRA.НормализоватьСтроку(ТекСтрока.employeeName));
//  		ДанныеПоСотруднику.Вставить("entitlementCurrentYear", 	JIRA.НормализоватьЧисло(ТекСтрока.entitlementCurrentYear));
//        ДанныеПоСотруднику.Вставить("claimedCurrentYear", 	    JIRA.НормализоватьЧисло(ТекСтрока.claimedCurrentYear));
//        ДанныеПоСотруднику.Вставить("remainingCurrentYear", 	JIRA.НормализоватьЧисло(ТекСтрока.remainingCurrentYear));
//        ДанныеПоСотруднику.Вставить("entitlementNextYear", 	    JIRA.НормализоватьЧисло(ТекСтрока.entitlementNextYear));
//        ДанныеПоСотруднику.Вставить("claimedNextYear", 	        JIRA.НормализоватьЧисло(ТекСтрока.claimedNextYear));
//        ДанныеПоСотруднику.Вставить("remainingNextYear", 	    JIRA.НормализоватьЧисло(ТекСтрока.remainingNextYear));
//       
//        
//		Данные.Добавить(ДанныеПоСотруднику);
//	КонецЦикла;
//	
//	СтруктураВозврата.Данные = Данные;
//		
//	Возврат СтруктураВозврата;
//
//	    
//КонецФункции
//
//Функция ОбработатьЗапросНаОбработкуДанныхПоДнямОтпускаСотрудника(СтрокаJSON, Инстанс) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если ПустаяСтрока(СтрокаJSON) Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	// чтение JSON
//	ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//	Если ДанныеJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//		
//	
//	СтруктураВозвратаПоЭлементу = ИнициализироватьСтруктутруВозврата();
//	
//	issueKey				= JIRA.ПолучитьПоле(ДанныеJSON,"issueKey");
//	idSync					= СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(JIRA.ПолучитьПоле(ДанныеJSON,"idSync"));
//	status					= JIRA.ПолучитьПоле(ДанныеJSON,"status");
//	employeeIdSync			= СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(JIRA.ПолучитьПоле(ДанныеJSON,"employeeIdSync"));
//	legalEntityIdSync		= СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(JIRA.ПолучитьПоле(ДанныеJSON,"legalEntityIdSync"));
//	startDate				= JIRA.ПолучитьПоле(ДанныеJSON,"startDate");
//	endDate					= JIRA.ПолучитьПоле(ДанныеJSON,"endDate");
//	startDateForApplication	= JIRA.ПолучитьПоле(ДанныеJSON,"startDateForApplication");
//	endDateForApplication	= JIRA.ПолучитьПоле(ДанныеJSON,"endDateForApplication");
//	halfDay					= JIRA.ПолучитьПоле(ДанныеJSON,"halfDay");
//
//	// Поиск ID_Sync
//	НайденныеДокументы = Новый Массив;
//	Если ЗначениеЗаполнено(idSync) Тогда 
//		НайденныеДокументы = JIRA.НайтиВсеДокументыПоIDSync(idSync);
//	КонецЕсли;
//	// Поиск по Коду задачи JIRA	
//	Если НайденныеДокументы.Количество() = 0 Тогда
//		//++OW Копачев А.С. 08.04.2022 ONEC-7464
//		//НайденныеДокументы = JIRA.НайтиВсеДокументыПоКодуЗадачиJIRA(issueKey);
//		КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(issueKey, Инстанс); 
//		НайденныеДокументы = JIRA.НайтиВсеДокументыПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
//		//--OW Копачев А.С. 08.04.2022 ONEC-7464
//	КонецЕсли;	
//	
//	// Обработка переданных данных
//	ДокументJIRA 			= ?(НайденныеДокументы.Количество() = 0, Неопределено, НайденныеДокументы[0]);
//	СтатусЗадачиJIRA 		= JIRA.ПолучитьСоздать_Status(status);
//	ФизЛицоСотрудника 		= JIRA.НайтиПоРеквизитуЭлементСправочника("ФизическиеЛица", "ID_Sync", employeeIdSync);
//	ОрганизацияСотрудника 	= JIRA.НайтиПоРеквизитуЭлементСправочника("Организации", 	"ID_Sync", legalEntityIdSync);
//	Сотрудник				= Неопределено;
//	Если ЗначениеЗаполнено(ФизЛицоСотрудника) И ЗначениеЗаполнено(ОрганизацияСотрудника) Тогда 		
//		ПараметрыОтбора = Новый Структура("Организации, СотрудникРаботает", OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОрганизацияСотрудника), Истина);
//		Сотрудник = Справочники.Сотрудники.ПолучитьСотрудникаПоФизЛицу(ФизЛицоСотрудника, ПараметрыОтбора);
//	КонецЕсли;		
//	ВидОтсутствияСотрудникаПолдня = JIRA.НайтиПоНаименованиюЭлементСправочника("ВидыОтсутствийСотрудниковПолдняJIRA", halfDay);
//
//	ДатаНачала 		= ?(ЗначениеЗаполнено(startDate), JIRA.ПреобразоватьДату(startDate),Неопределено);
//	ДатаОкончания 	= ?(ЗначениеЗаполнено(endDate), JIRA.ПреобразоватьДату(endDate),Неопределено);		
//	// если период по заявлению передается, то его нельзя заполнять из ДатаНачала и ДатаОкончания
//	Если ЗначениеЗаполнено(startDateForApplication) Тогда 
//		ДатаНачалаЗаявления	 = ?(ЗначениеЗаполнено(startDateForApplication), JIRA.ПреобразоватьДату(startDateForApplication),Неопределено); 
//	Иначе
//		ДатаНачалаЗаявления  = ДатаНачала;
//	КонецЕсли;
//	Если ЗначениеЗаполнено(endDateForApplication) Тогда 
//		ДатаОкончанияЗаявления	= ?(ЗначениеЗаполнено(endDateForApplication), JIRA.ПреобразоватьДату(endDateForApplication),Неопределено);
//	Иначе
//		ДатаОкончанияЗаявления  = ДатаОкончания;
//	КонецЕсли;
//
//	// проверка корректности данных
//	
//	СтатусыФазыУтверждена = Справочники.OW_СтатусыЗадачJIRA.ПолучитьСтатусыФазы("Утверждена");
//	// Документ обязателен, если задача приходит на утверждение 
//	Если  СтатусыФазыУтверждена.Найти(СтатусЗадачиJIRA) <> Неопределено Тогда  
//		Если НЕ ЗначениеЗаполнено(ДокументJIRA) Тогда 
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найден документ по полю (issueKey = " + issueKey + ") и полю (idSync = " + idSync + ")",
//							"No document found for field (issueKey = " + issueKey + ") and field (idSync = " + idSync + ")", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//		КонецЕсли;    
//	КонецЕсли;	
//	Если НЕ ЗначениеЗаполнено(ФизЛицоСотрудника) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найдено физлицо сотрудника по полю (employeeIdSync = " + employeeIdSync + ")",
//							"No employee found for field (employeeIdSync = " + employeeIdSync + ")", "Все");
//
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если НЕ ЗначениеЗаполнено(ОрганизацияСотрудника) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найдена оранизация по полю (legalEntityIdSync = " + legalEntityIdSync + ")",
//							"No company found for field (legalEntityIdSync = " + legalEntityIdSync + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если ЗначениеЗаполнено(ФизЛицоСотрудника) И ЗначениеЗаполнено(ОрганизацияСотрудника) И НЕ ЗначениеЗаполнено(Сотрудник) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найден сотрудник физлица (" + ФизЛицоСотрудника + ") и организации (" + ОрганизацияСотрудника + ")",
//							"No employee found for person (" + ФизЛицоСотрудника + ") and company (" + ОрганизацияСотрудника + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;	
//	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не получена дата начала периода отпуска по полю (startDate = " + startDate + ")",
//							"Start date for vocation not received for field (startDate = " + startDate + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не получена дата окончания периода отпуска по полю (endDate = " + endDate + ")",
//							"End date for vocation not received for field (endDate = " + endDate + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если НЕ ЗначениеЗаполнено(ДатаНачалаЗаявления) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не получена дата начала периода отпуска (по заявлению) по полю (startDateForApplication = " + startDateForApplication + ")",
//							"Start date for vocation (for application) not received for field (startDateForApplication = " + startDateForApplication + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если НЕ ЗначениеЗаполнено(ДатаОкончанияЗаявления) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не получена дата окончания периода отпуска (по заявлению)по полю (endDateForApplication = " + endDateForApplication + ")",
//							"End date for vocation (for application) not received for field (endendDateForApplicationendDateForApplicationDate = " + endDateForApplication + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	Если ЗначениеЗаполнено(halfDay) И НЕ ЗначениеЗаполнено(ВидОтсутствияСотрудникаПолдня) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не получено значения вида отсутвия полдня по полю (halfDay = " + halfDay + ")",
//							"No half-day absence type found for field (halfDay = " + halfDay + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки);
//	КонецЕсли;
//	
//	// Обработка данных
//	ОстатокДнейОтпуска				= 0;
//	ДнейОтпускаВПериоде				= 0;
//	ДнейОтпускаВПериодеПоЗаявлению	= 0;
//	
//	Если СтруктураВозвратаПоЭлементу.ЕстьОшибки = Ложь Тогда 
//		
//		// если документ утвержден на стороне Жиры, то мы должны этот документ утвердить на стороне 1С
//		// заполнить по переданным данным
//		// и вернуть остаток дней отпуска с учетом этого документа
//		Если ЗначениеЗаполнено(СтатусЗадачиJIRA) Тогда 
//			Если ЗначениеЗаполнено(ДокументJIRA) Тогда
//				
//				СтатусыФазыУтверждена = Справочники.OW_СтатусыЗадачJIRA.ПолучитьСтатусыФазы("Утверждена");
//				// проверим что приходит из Жиры статус утвержден
//				Если  СтатусыФазыУтверждена.Найти(СтатусЗадачиJIRA) <> Неопределено 
//					// проверим также, если документ утвержден, а из Жиры приходит другой статус, то нужно изменить стутус у документа,
//					// чтобы отпуск по нему не учитывался уже
//					ИЛИ СтатусыФазыУтверждена.Найти(ДокументJIRA.СтатусJIRA) <> Неопределено Тогда 	
//					
//					// заполнение документа
//					ДанныеДляЗаполнияДокумента = Новый Структура;
//					ДанныеДляЗаполнияДокумента.Вставить("Организация", 				ОрганизацияСотрудника);
//					ДанныеДляЗаполнияДокумента.Вставить("СтатусJIRA", 				СтатусЗадачиJIRA);
//					ДанныеДляЗаполнияДокумента.Вставить("ФизЛицо", 					ФизЛицоСотрудника);
//					ДанныеДляЗаполнияДокумента.Вставить("Сотрудник", 				Сотрудник);
//					ДанныеДляЗаполнияДокумента.Вставить("ВидОтсутствияПолдня", 		ВидОтсутствияСотрудникаПолдня);
//					ДанныеДляЗаполнияДокумента.Вставить("ДатаНачала", 				ДатаНачала);
//					ДанныеДляЗаполнияДокумента.Вставить("ДатаОкончания", 			ДатаОкончания);
//					ДанныеДляЗаполнияДокумента.Вставить("ДатаНачалаЗаявления", 		ДатаНачалаЗаявления);
//					ДанныеДляЗаполнияДокумента.Вставить("ДатаОкончанияЗаявления", 	ДатаОкончанияЗаявления);
//					
//					ДокументОбъектJIRA = ДокументJIRA.ПолучитьОбъект();
//					ДокументОбъектJIRA.Заполнить(ДанныеДляЗаполнияДокумента);
//					
//					ТекстОшибки = "";
//					Если JIRA.ОбработатьСформированныйДокумент(ДокументОбъектJIRA, ТекстОшибки) = Ложь Тогда 
//						ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозвратаПоЭлементу, ТекстОшибки, 500);	
//					КонецЕсли;					
//				КонецЕсли;
//			КонецЕсли;			
//		КонецЕсли;		
//		
//		ДнейОтпускаВПериоде         		= Справочники.Сотрудники.ПолучитьКоличествоДнейОтпускаПоСотрудникуЗаПериод(Сотрудник, ДатаНачала, ДатаОкончания);
//		ДнейОтпускаВПериодеПоЗаявлению      = Справочники.Сотрудники.ПолучитьКоличествоДнейОтпускаПоСотрудникуЗаПериод(Сотрудник, ДатаНачалаЗаявления, ДатаОкончанияЗаявления);
//		Если ЗначениеЗаполнено(ВидОтсутствияСотрудникаПолдня) Тогда 
//			ДнейОтпускаВПериоде 			= ДнейОтпускаВПериоде / 2;	
//			ДнейОтпускаВПериодеПоЗаявлению 	= ДнейОтпускаВПериодеПоЗаявлению / 2;
//		КонецЕсли;
//		
//		Если СтруктураВозвратаПоЭлементу.ЕстьОшибки = Ложь Тогда
//			ОстатокДнейОтпуска = ПолучитьОстатокОтпускаПоСотруднику(Сотрудник,КонецГода(?(ДатаНачала=дата("00010101"),ТекущаяДата(),ДатаНачала)));			
//		КонецЕсли;	
//	КонецЕсли;
//	
//	Данные = Новый Структура;
//	Данные.Вставить("remainingDays",  	JIRA.НормализоватьЧисло(ОстатокДнейОтпуска));
//	Данные.Вставить("workingDays",  	JIRA.НормализоватьЧисло(ДнейОтпускаВПериодеПоЗаявлению));
//	Если СтруктураВозвратаПоЭлементу.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозвратаПоЭлементу.ТекстОшибки);
//		Данные.Вставить("errors", СтруктураВозвратаПоЭлементу.ТекстОшибкиEn);
//	КонецЕсли;
//
//	СтруктураВозврата.Данные = Данные;
//	
//	Возврат СтруктураВозврата;
//КонецФункции
//
//Функция ПолучитьОстатокОтпускаПоСотруднику(Сотрудник,ПериодГод)
//	
//	ДанныеОтпускаСотрудника = HR_НаСервере.ПолучитьДанныеОтпускаСотрудникаInternational(Сотрудник, ПериодГод);
//	
//	Возврат ДанныеОтпускаСотрудника.КолВоДнейОтпускаОсталось;
//	
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеСтатуса(СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Если ПустаяСтрока(СтрокаJSON) Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	// чтение JSON
//	ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//	Если ДанныеJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//	
//	// чтение данных	
//	echo				= JIRA.ПолучитьПоле(ДанныеJSON,"echo");
//	
//	// проверка корректности данных
//	Если НЕ ЗначениеЗаполнено(echo) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не найден статус запроса по полю (echo = " + echo + ")",
//							"No echo found for field (echo = " + echo + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	КонецЕсли;
//						
//	Данные = Новый Структура;
//	Данные.Вставить("echo", echo);
//				
//	СтруктураВозврата.Данные = Данные;
//	
//	Возврат СтруктураВозврата;
//КонецФункции	
//
//Функция ОбработатьЗапросНаПолучениеДанныхОрганизацийИСпискаСотрудников(СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	Данные = Новый Структура;
//	
//	// Обработка данных
//	ДанныеОрганизаций = Новый Массив;
//	
//	ТЗ_ДанныеОрганизаций = Справочники.Организации.ПолучитьДанныеОрганизаций();
//	Для Каждого ТекСтрока Из ТЗ_ДанныеОрганизаций Цикл
//		ДанныеОрганизации = Новый Структура;
//		ДанныеОрганизации.Вставить("legalEntityName", 	JIRA.НормализоватьСтроку(ТекСтрока.Наименование));
//		ДанныеОрганизации.Вставить("legalEntityID", 	JIRA.НормализоватьЧисло(ТекСтрока.ID_Sync));
//		
//		ДанныеОрганизаций.Добавить(ДанныеОрганизации);
//	КонецЦикла;
//	
//	ДанныеПоСотрудникам = Новый Массив;
//	
//	ТЗ_ДанныеПоСотрудникам = OW.ПолучитьДанныеПоСотрудникам();
//	// заполним емейлы и id организаций
//	ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("СотрудникEmail", Новый ОписаниеТипов("Строка"));	
//	ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("РуководительEmail", Новый ОписаниеТипов("Строка"));
//	ТЗ_ДанныеПоСотрудникам.Колонки.Добавить("ОранизацияID_Sync", Новый ОписаниеТипов("Число"));
//	Для Каждого ТекСтрока Из ТЗ_ДанныеПоСотрудникам Цикл
//		ТекСтрока.СотрудникEmail 	= ?(ЗначениеЗаполнено(ТекСтрока.ФизЛицо), 				OW.ПолучитьМылоЮзера(ТекСтрока.ФизЛицо), "");
//		ТекСтрока.РуководительEmail = ?(ЗначениеЗаполнено(ТекСтрока.РуководительСотрудник), OW.ПолучитьМылоЮзера(ТекСтрока.РуководительСотрудник.Физлицо), "");
//		ТекСтрока.ОранизацияID_Sync = ?(ЗначениеЗаполнено(ТекСтрока.Организация), 			ТекСтрока.Организация.ID_Sync, 0);
//	КонецЦикла;	
//	// свернем по емейлам и id
//	ТЗ_ДанныеПоСотрудникам.Свернуть("СотрудникEmail, РуководительEmail, ОранизацияID_Sync");	
//	
//	Для Каждого ТекСтрока Из ТЗ_ДанныеПоСотрудникам Цикл
//		ДанныеПоСотруднику = Новый Структура;
//		ДанныеПоСотруднику.Вставить("employeeEmail", 			JIRA.НормализоватьСтроку(ТекСтрока.СотрудникEmail));
//		ДанныеПоСотруднику.Вставить("employeeLegalEntityID", 	JIRA.НормализоватьЧисло(ТекСтрока.ОранизацияID_Sync));
//		ДанныеПоСотруднику.Вставить("employeeLineManagerEmail", JIRA.НормализоватьСтроку(ТекСтрока.РуководительEmail));
//		ДанныеПоСотрудникам.Добавить(ДанныеПоСотруднику);
//	КонецЦикла;
//		
//	Данные.Вставить("legalEntitys", ДанныеОрганизаций); 
//	Данные.Вставить("employees", ДанныеПоСотрудникам);
//	
//	СтруктураВозврата.Данные = Данные;
//		
//	Возврат СтруктураВозврата;
//КонецФункции	
//
///// ----- CDT Новые запросы ----- 
//
//Функция ПолучитьПромежуточныйРезультатПолучениеДанныхИнстансовКлиентов(Знач МассивКонфигурацийЛицензийДляОтбора = Неопределено, 
//																		Знач МассивcomponentsCode = Неопределено, Знач МассивcomponentsCodeИсключения = Неопределено,
//																		Знач МассивfiltersCode = Неопределено, Знач МассивfiltersCodeИсключения = Неопределено,
//																		Знач МассивlicensesCode = Неопределено, Знач МассивlicensesCodeИсключения = Неопределено, 
//																		Знач МассивcountriesCode = Неопределено, Знач МассивcountriesCodeИсключения = Неопределено,
//																		Знач МассивВидовИнстансовJIRAДляОтбора = Неопределено)	//OW Копачев А.С. 31.03.2022 ONEC-7464 
//	МассивДистрибутивовДляОтбора 			= Неопределено;
//	МассивДистрибутивовДляОтбораИсключения 	= Неопределено;
//	МассивФильтровДляОтбора 			= Неопределено;
//	МассивФильтровДляОтбораИсключения	= Неопределено;
//	
//	// дистирубутивы
//	Если МассивcomponentsCode <> Неопределено Тогда   
//						
//		МассивДистрибутивов = Новый Массив;
//		Для Каждого ID_SyncДистрибутива Из МассивcomponentsCode Цикл
//			МассивНайденныхДистрибутивов = OW_Дистрибутивы.ПолучитьДистрибутивыПоID_Sync(ID_SyncДистрибутива);
//			Для Каждого ТекНайденныйДистрибутив Из МассивНайденныхДистрибутивов Цикл 
//				МассивДистрибутивов.Добавить(ТекНайденныйДистрибутив);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивДистрибутивовДляОтбора = МассивДистрибутивов;
//	КонецЕсли;
//	
//	// дистирубутивы исключения
//	Если МассивcomponentsCodeИсключения <> Неопределено Тогда   
//						
//		МассивДистрибутивов = Новый Массив;
//		Для Каждого ID_SyncДистрибутива Из МассивcomponentsCodeИсключения Цикл
//			МассивНайденныхДистрибутивов = OW_Дистрибутивы.ПолучитьДистрибутивыПоID_Sync(ID_SyncДистрибутива);
//			Для Каждого ТекНайденныйДистрибутив Из МассивНайденныхДистрибутивов Цикл 
//				МассивДистрибутивов.Добавить(ТекНайденныйДистрибутив);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивДистрибутивовДляОтбораИсключения = МассивДистрибутивов;
//	КонецЕсли;
//	
//	// фильтры
//	Если МассивfiltersCode <> Неопределено Тогда   
//						
//		МассивФильтров = Новый Массив;
//		Для Каждого НаименованиеФильтра Из МассивfiltersCode Цикл
//			МассивНайденныхФильтров = OW_Дистрибутивы.ПолучитьФильтрыПоНаименованию(НаименованиеФильтра, Истина);
//			Для Каждого ТекНайденныйФильтр Из МассивНайденныхФильтров Цикл 
//				МассивФильтров.Добавить(ТекНайденныйФильтр);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивФильтровДляОтбора = МассивФильтров;
//	КонецЕсли;	
//	
//	// фильтры исключения
//	Если МассивfiltersCodeИсключения <> Неопределено Тогда   
//						
//		МассивФильтров = Новый Массив;
//		Для Каждого НаименованиеФильтра Из МассивfiltersCodeИсключения Цикл
//			МассивНайденныхФильтров = OW_Дистрибутивы.ПолучитьФильтрыПоНаименованию(НаименованиеФильтра, Истина);
//			Для Каждого ТекНайденныйФильтр Из МассивНайденныхФильтров Цикл 
//				МассивФильтров.Добавить(ТекНайденныйФильтр);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивФильтровДляОтбораИсключения = МассивФильтров;
//	КонецЕсли;
//	
//	Если МассивcomponentsCode <> Неопределено
//		ИЛИ  МассивcomponentsCodeИсключения <> Неопределено
//		ИЛИ  МассивfiltersCode <> Неопределено
//		ИЛИ  МассивfiltersCodeИсключения <> Неопределено Тогда 
//		// находим по дистрибутивам и фильтрам конфигурации лицензий и уже по ним делаем отбор
//		ЗапросПоИнстансам = Новый Запрос;
//		ЗапросПоИнстансам.Текст = 
//			"ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	КонфигурацииДистрибутивов.КонфигурацияЛицензий
//			|
//			|ПОМЕСТИТЬ ВТ_ДанныеБезОтбора
//			|ИЗ
//			|	РегистрСведений.КонфигурацииДистрибутивов.СрезПоследних(&НаДату,)  КАК КонфигурацииДистрибутивов
//			|ГДЕ
//			//++OW Копачев А.С. 11.09.2020 ONEC-6012
//			//|	КонфигурацииДистрибутивов.Активный
//			| (КонфигурацииДистрибутивов.ДатаОкончания = ДАТАВРЕМЯ(1,1,1) 
//			|	ИЛИ КонфигурацииДистрибутивов.ДатаОкончания  >= &НаДату)
//			//--OW Копачев А.С. 11.09.2020 ONEC-6012
//			|//#ОтборПоДистрибутивам#
//			|//#ОтборПоФильтрам# 
//			|
//			|;
//			|//////////////////////////////////////////////////////////
//			|ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	КонфигурацииДистрибутивов.КонфигурацияЛицензий
//			|
//			|ПОМЕСТИТЬ ВТ_ДанныеПоИсключениям
//			|ИЗ
//			|	РегистрСведений.КонфигурацииДистрибутивов.СрезПоследних(&НаДату,)  КАК КонфигурацииДистрибутивов
//			|ГДЕ
//			//++OW Копачев А.С. 11.09.2020 ONEC-6012
//			//|	КонфигурацииДистрибутивов.Активный
//			| (КонфигурацииДистрибутивов.ДатаОкончания = ДАТАВРЕМЯ(1,1,1) 
//			|	ИЛИ КонфигурацииДистрибутивов.ДатаОкончания  >= &НаДату)
//			//--OW Копачев А.С. 11.09.2020 ONEC-6012
//			|//#ОтборПоДистрибутивамиИсключения#
//			|//#ОтборПоФильтрамИсключения#		
//			|//#ОтборПоДистрибутивам2#
//			|//#ОтборПоФильтрам2#
//			|;
//			|//////////////////////////////////////////////////////////
//			|ВЫБРАТЬ 
//			|	ВТ_ДанныеБезОтбора.КонфигурацияЛицензий КАК КонфигурацияЛицензий 
//			|
//			|ИЗ
//			|	ВТ_ДанныеБезОтбора  КАК ВТ_ДанныеБезОтбора
//			|   	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоИсключениям КАК ВТ_ДанныеПоИсключениям
//			|       ПО ВТ_ДанныеБезОтбора.КонфигурацияЛицензий = ВТ_ДанныеПоИсключениям.КонфигурацияЛицензий
//			|
//			|ГДЕ
//			| ВТ_ДанныеПоИсключениям.КонфигурацияЛицензий ЕСТЬ NULL
//			|";
//
//		ЗапросПоИнстансам.УстановитьПараметр("НаДату", ТекущаяДата());
//
//		Если МассивcomponentsCode <> Неопределено Тогда 
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоДистрибутивам#", "И КонфигурацииДистрибутивов.Дистрибутив В(&МассивДистрибутивов)"); 
//			ЗапросПоИнстансам.УстановитьПараметр("МассивДистрибутивов", МассивДистрибутивовДляОтбора);
//			
//			// если в отбор по "ИЛИ" передали выражение типа "А или !A", то возвращаем А,
//			// для этого в исключениях нужно убрать получение данных по "А"
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоДистрибутивам2#", "И НЕ КонфигурацииДистрибутивов.Дистрибутив В(&МассивДистрибутивов)"); 
//		КонецЕсли;	
//				
//		Если МассивfiltersCode <> Неопределено  Тогда	
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоФильтрам#", "И КонфигурацииДистрибутивов.Фильтр В(&МассивФильтров)"); 
//			ЗапросПоИнстансам.УстановитьПараметр("МассивФильтров", МассивФильтровДляОтбора);
//			
//			// если в отбор по "ИЛИ" передали выражение типа "А или !A", то возвращаем А,
//			// для этого в исключениях нужно убрать получение данных по "А"
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоФильтрам2#", "И НЕ КонфигурацииДистрибутивов.Фильтр В(&МассивФильтров)"); 
//		КонецЕсли;
//		
//		Если МассивcomponentsCodeИсключения <> Неопределено ИЛИ МассивfiltersCodeИсключения <> Неопределено Тогда 
//			Если МассивcomponentsCodeИсключения <> Неопределено Тогда 
//				ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоДистрибутивамиИсключения#", "И КонфигурацииДистрибутивов.Дистрибутив В(&МассивДистрибутивовИсключения)"); 
//				ЗапросПоИнстансам.УстановитьПараметр("МассивДистрибутивовИсключения", МассивДистрибутивовДляОтбораИсключения);
//			КонецЕсли;
//
//			Если МассивfiltersCodeИсключения <> Неопределено  Тогда	
//				ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоФильтрамИсключения#", "И КонфигурацииДистрибутивов.Фильтр В(&МассивФильтровИсключения)"); 
//				ЗапросПоИнстансам.УстановитьПараметр("МассивФильтровИсключения", МассивФильтровДляОтбораИсключения);
//			КонецЕсли;
//		Иначе
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоДистрибутивамиИсключения#", "И ЛОЖЬ"); 
//			ЗапросПоИнстансам.Текст = СтрЗаменить(ЗапросПоИнстансам.Текст, "//#ОтборПоФильтрамИсключения#", "И ЛОЖЬ"); 	
//		КонецЕсли;	
//				
//		РезультатЗапроса = ЗапросПоИнстансам.Выполнить();
//        МассивКонфигурацийЛицензий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("КонфигурацияЛицензий");			
//		
//		Если МассивКонфигурацийЛицензийДляОтбора = Неопределено Тогда 
//			МассивКонфигурацийЛицензийДляОтбора = МассивКонфигурацийЛицензий; 
//		Иначе	
//			OW_ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКонфигурацийЛицензийДляОтбора, МассивКонфигурацийЛицензий, Истина); 
//		КонецЕсли;
//	КонецЕсли;
//				
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//		|	СпрЛицензииКлиентов.Ссылка КАК Лицензия
//		|
//		|ПОМЕСТИТЬ ВТ_ЛицензииКлиентов
//		|ИЗ
//		|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//		|
//		|ГДЕ
//		|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//		|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//		//++OW Копачев А.С. 20.09.2021 ONEC-6781 
//		//?
//		|  	И СпрЛицензииКлиентов.ДоговорЛицензионный <> Значение(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
//		|  	И СпрЛицензииКлиентов.ДоговорЛицензионный.ПометкаУдаления = ЛОЖЬ
//		|  	И НЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДоговорЛицензионный.СтатусСоглашения, Значение(Перечисление.СтатусыСоглашений.ПустаяСсылка)) В (Значение(Перечисление.СтатусыСоглашений.Расторгнут), Значение(Перечисление.СтатусыСоглашений.Аннулирован))
//		//|  	И СпрЛицензииКлиентов.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) 
//		//--OW Копачев А.С. 20.09.2021 ONEC-6781
//		|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//		|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//		|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ
//		|	//#ОтборПоКонфигурациямЛицензий1#
//		//++OW Копачев А.С. 31.03.2022 ONEC-7464
//		|	//#ОтборПоВидамИнстансовJIRA1#
//		//--OW Копачев А.С. 31.03.2022 ONEC-7464
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|   СпрЛицензииКлиентов.Ссылка КАК Лицензия
//		|ИЗ
//		|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//		|ГДЕ
//		|   СпрЛицензииКлиентов.Ссылка В (&ЛицензииПоНеОтмененнымФазам)
//		|	И СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//		|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//		|	//#ОтборПоКонфигурациямЛицензий1#
//		//++OW Копачев А.С. 31.03.2022 ONEC-7464
//		|	//#ОтборПоВидамИнстансовJIRA1#
//		//--OW Копачев А.С. 31.03.2022 ONEC-7464
//		|;
//		|////////////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		//--OW Копачев А.С. 13.08.2021 ONEC-6781
//		|	КонфигурацииЛицензий.Владелец КАК Клиент,
//		|	КонфигурацииЛицензий.Ссылка КАК КонфигурацияЛицензий,
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Ссылка,Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)) КАК Лицензия,
//		//++OW Копачев А.С. 15.12.2020 ONEC-6225 
//		//|	ЕСТЬNULL(СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,"""") КАК ДополнениеКНаименованиюПолное,
//		|	ВЫБОР 
//		|		КОГДА ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь) = ИСТИНА
//		|			ТОГДА ЕСТЬNULL(ВЫБОР
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//		|						ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//		|	 					ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//		|						ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//		|           		КОНЕЦ,"""")
//		|       ИНАЧЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,"""")
//		|	КОНЕЦ КАК ДополнениеКНаименованиюПолное,
//		|	ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь) КАК КоличественнаяЛицензия,
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.UID, """") КАК UIDЛицензии,
//		//--OW Копачев А.С. 15.12.2020 ONEC-6225
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Номенклатура.PartNumber,"""") КАК PartNumber,
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Количество,0) КАК Количество,
//		//++OW Копачев А.С. 25.01.2022 ONEC-6451
//		////++OW Копачев А.С. 16.09.2021 ONEC-6451 
//		////|	МАКСИМУМ(ВЫБОР 
//		////|		КОГДА ЕСТЬNULL(ЛицензииКлиентовПакетыСопровождения.СсылкаНаПакетСопровождения.Статус,ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.НаСопровождении)
//		////|				И ЛицензииКлиентовПакетыСопровождения.СсылкаНаПакетСопровождения.Сумма >= 0 
//		////|		 ТОГДА ИСТИНА
//		////|		ИНАЧЕ ЛОЖЬ
//		////|	КОНЕЦ) КАК ЛицензияНаСопровождении	
//		//|	МАКСИМУМ(ВЫБОР 
//		//|		КОГДА ЕСТЬNULL(СпрЛицензииКлиентов.ПакетСопровождения.Статус,ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.НаСопровождении)
//		//|				И СпрЛицензииКлиентов.ПакетСопровождения.Сумма >= 0 
//		//|		 ТОГДА ИСТИНА
//		//|		ИНАЧЕ ЛОЖЬ
//		//|	КОНЕЦ) КАК ЛицензияНаСопровождении
//		////--OW Копачев А.С. 16.09.2021 ONEC-6451
//		|	МАКСИМУМ(СпрЛицензииКлиентов.ЛицензияНаСопровождении) КАК ЛицензияНаСопровождении
//		//--OW Копачев А.С. 25.01.2022 ONEC-6451
//		|ИЗ
//		|	Справочник.КонфигурацииЛицензий КАК КонфигурацииЛицензий
//		|		ЛЕВОЕ СОЕДИНЕНИЕ	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//		//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицензииКлиентов КАК ВТ_ЛицензииКлиентов
//		|			ПО СпрЛицензииКлиентов.Ссылка = ВТ_ЛицензииКлиентов.Лицензия
//		//--OW Копачев А.С. 13.08.2021 ONEC-6781
//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
//		|			ПО СпрЛицензииКлиентов.Номенклатура = СпрНоменклатура.Ссылка
//		|				И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)
//		//++OW Копачев А.С. 16.09.2021 ONEC-6451
//		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииКлиентов.ПакетыСопровождения КАК ЛицензииКлиентовПакетыСопровождения
//		//|			ПО 	СпрЛицензииКлиентов.Ссылка = ЛицензииКлиентовПакетыСопровождения.Ссылка	
//		//|				И ЛицензииКлиентовПакетыСопровождения.СсылкаНаПакетСопровождения.ПометкаУдаления = ЛОЖЬ	
//		//--OW Копачев А.С. 16.09.2021 ONEC-6451
//		|	ПО
//		|		КонфигурацииЛицензий.Ссылка = СпрЛицензииКлиентов.КонфигурацияЛицензий  
//		//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//		// переместил отбор лицензий во временную таблицу																																										
//		//|		И СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//		//|		И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//		//|		И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//		//|		И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//		//|		И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ
//		//--OW Копачев А.С. 13.08.2021 ONEC-6781		
//		|ГДЕ 
//		|	КонфигурацииЛицензий.ПометкаУдаления = ЛОЖЬ
//		|//#ОтборПоЛицензиям# ИЛИ //#ОтборПоЛицензиямИсключения#
//		|//#ОтборПоСтранам# ИЛИ //#ОтборПоСтранамИсключения#
//		|//#ОтборПоКонфигурациямЛицензий2#
//		//++OW Копачев А.С. 31.03.2022 ONEC-7464
//		|//#ОтборПоВидамИнстансовJIRA2#
//		//--OW Копачев А.С. 31.03.2022 ONEC-7464
//		|
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	КонфигурацииЛицензий.Владелец,
//		|	КонфигурацииЛицензий.Ссылка,
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Ссылка,Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)),
//		|	ВЫБОР 
//		|		КОГДА ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь) = ИСТИНА
//		|			ТОГДА ЕСТЬNULL(ВЫБОР
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//		|						ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//		|	 					ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//		|						ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//		|					ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//		|           		КОНЕЦ,"""")
//		|       ИНАЧЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,"""")
//		|	КОНЕЦ,
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.UID, """"),
//		|	ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь),
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Номенклатура.PartNumber,""""),
//		|	ЕСТЬNULL(СпрЛицензииКлиентов.Количество,0)
//		|
//		|;";
//		//|/////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	ВТ_Данные.Клиент КАК Клиент,
//		//|	ВТ_Данные.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
//		//|	ВТ_Данные.Лицензия КАК Лицензия,
//		//|	ВТ_Данные.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//		//|	ВТ_Данные.PartNumber КАК PartNumber,
//		//|	ВТ_Данные.Количество КАК Количество,
//		//|	ВТ_Данные.ЛицензияНаСопровождении КАК ЛицензияНаСопровождении,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения, Значение(Справочник.ЗадачиПроектов.ПустаяСсылка)) КАК Фаза,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.КодПроектаJIRA, """") КАК ФазаКодПроектаJIRA,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.Наименование, """") КАК ФазаНаименование,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.ТипФазы, """") КАК ФазаТипФазы,
//		////++OW Копачев А.С. 10.11.2020 ONEC-6173 
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.СтатусЭтапа, """") КАК ФазаСтатусЭтапа,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.СтатусЭтапаCRM_Оригинальный, """") КАК ФазаСтатусЭтапаCRM_Оригинальный,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.Офицер, """") КАК ФазаОфицер,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.КодПроектаCRM, """") КАК ФазаКодПроектаCRM	
//		////--OW Копачев А.С. 10.11.2020 ONEC-6173	
//		//|ИЗ ВТ_Данные КАК ВТ_Данные
//		//|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииКлиентов.ПроектыВнедрения КАК ЛицензииКлиентовПроектыВнедрения
//		//|		ПО 	ВТ_Данные.Лицензия = ЛицензииКлиентовПроектыВнедрения.Ссылка	
//		//|			И ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.ПометкаУдаления = ЛОЖЬ	
//		//|УПОРЯДОЧИТЬ ПО
//		//|	Клиент,
//		//|	КонфигурацияЛицензий,
//		//|	ДополнениеКНаименованиюПолное
//		//|ИТОГИ
//		//|	МАКСИМУМ(ДополнениеКНаименованиюПолное),
//		//|	МАКСИМУМ(PartNumber),
//		//|	МАКСИМУМ(Количество),
//		//|	МАКСИМУМ(ЛицензияНаСопровождении)
//		//|ПО
//		//|	Клиент,
//		//|	КонфигурацияЛицензий,
//		//|	Лицензия
//		//|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ЛицензииПоНеОтмененнымФазам", РаботаСЛицензиями.ПолучитьЛицензииПоНеОтмененнымФазам(МассивКонфигурацийЛицензийДляОтбора));  //OW Копачев А.С. 13.08.2021 ONEC-6781 
//
//	Если МассивlicensesCode <> Неопределено ИЛИ МассивlicensesCodeИсключения <> Неопределено Тогда 
//		Если МассивlicensesCode <> Неопределено Тогда  		
//			// делаем отбор
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиям#", "И (СпрЛицензииКлиентов.Номенклатура.PartNumber В (&МассивlicensesCode)"); 
//			Запрос.УстановитьПараметр("МассивlicensesCode", МассивlicensesCode);
//		Иначе
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиям#", "И (ЛОЖЬ"); 				
//		КонецЕсли;
//		Если МассивlicensesCodeИсключения <> Неопределено Тогда  		
//			// делаем отбор
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиямИсключения#", "НЕ СпрЛицензииКлиентов.Номенклатура.PartNumber В (&МассивlicensesCodeИсключения))"); 
//			Запрос.УстановитьПараметр("МассивlicensesCodeИсключения", МассивlicensesCodeИсключения);
//		Иначе 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиямИсключения#", "ЛОЖЬ)"); 		
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если МассивcountriesCode <> Неопределено ИЛИ МассивcountriesCodeИсключения <> Неопределено Тогда 
//		Если  МассивcountriesCode <> Неопределено Тогда   		
//			// делаем отбор
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоСтранам#", "И (КонфигурацииЛицензий.Владелец.СтранаКлиента.NameEN В (&МассивcountriesCode)"); 
//			Запрос.УстановитьПараметр("МассивcountriesCode", МассивcountriesCode);	
//		Иначе
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоСтранам#", "И (ЛОЖЬ"); 					
//		КонецЕсли;
//		Если  МассивcountriesCodeИсключения <> Неопределено Тогда   		
//			// делаем отбор
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоСтранамИсключения#", "НЕ КонфигурацииЛицензий.Владелец.СтранаКлиента.NameEN В (&МассивcountriesCodeИсключения))"); 
//			Запрос.УстановитьПараметр("МассивcountriesCodeИсключения", МассивcountriesCodeИсключения);	
//		Иначе 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоСтранамИсключения#", "ЛОЖЬ)"); 			
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если МассивКонфигурацийЛицензийДляОтбора <> Неопределено Тогда 	
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий1#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий  В (&МассивКонфигурацийЛицензий)"); 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий2#", "И КонфигурацииЛицензий.Ссылка  В (&МассивКонфигурацийЛицензий)"); 
//		Запрос.УстановитьПараметр("МассивКонфигурацийЛицензий", МассивКонфигурацийЛицензийДляОтбора);						
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	Если МассивВидовИнстансовJIRAДляОтбора <> Неопределено  Тогда	
//		//++OW Копачев А.С. 11.07.2022 ONEC-7756 
//		Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РазрешатьРаботатьСЛицензиямиКлиентовЧужогоСегмента) = Истина Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA1#", "И (СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA  В (&МассивВидовИнстансовJIRA) ИЛИ СпрЛицензииКлиентов.Владелец.ВедениеКлиентаВДвухСистемах = ИСТИНА)"); 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA2#", "И (КонфигурацииЛицензий.ВидИнстансJIRA  В (&МассивВидовИнстансовJIRA) ИЛИ КонфигурацииЛицензий.Владелец.ВедениеКлиентаВДвухСистемах = ИСТИНА)"); 	
//		Иначе	
//		//--OW Копачев А.С. 11.07.2022 ONEC-7756
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA1#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA  В (&МассивВидовИнстансовJIRA)"); 
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA2#", "И КонфигурацииЛицензий.ВидИнстансJIRA  В (&МассивВидовИнстансовJIRA)"); 
//		КонецЕсли;
//		Запрос.УстановитьПараметр("МассивВидовИнстансовJIRA", МассивВидовИнстансовJIRAДляОтбора);
//	КонецЕсли;
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	
//	СтруктураВозврата = Новый Структура();
//	СтруктураВозврата.Вставить("РезультатЗапроса", Запрос.Выполнить());																	
//	СтруктураВозврата.Вставить("МассивДистрибутивовДляОтбора", МассивДистрибутивовДляОтбора);
//	СтруктураВозврата.Вставить("МассивДистрибутивовДляОтбораИсключения", МассивДистрибутивовДляОтбораИсключения);
//	СтруктураВозврата.Вставить("МассивФильтровДляОтбора", МассивФильтровДляОтбора);
//	СтруктураВозврата.Вставить("МассивФильтровДляОтбораИсключения", МассивФильтровДляОтбораИсключения);
//
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Процедура ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов(СтруктураДанных,  
//																						МассивДистрибутивовДляОтбора, МассивДистрибутивовДляОтбораИсключения,
//																						МассивФильтровДляОтбора, МассивФильтровДляОтбораИсключения)
//																						
//	Если ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбора) = Тип("Массив") Тогда 		
//		МассивДистрибутивовДляОтбора = ?(МассивДистрибутивовДляОтбора = Неопределено, Новый Массив, МассивДистрибутивовДляОтбора); 
//		
//		Для Каждого ТекЗначение Из СтруктураДанных.МассивДистрибутивовДляОтбора Цикл
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВКоллекцию(МассивДистрибутивовДляОтбора, ТекЗначение, Истина);
//		КонецЦикла;	
//	КонецЕсли;
//	
//	Если ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбораИсключения) = Тип("Массив") Тогда 		
//		МассивДистрибутивовДляОтбораИсключения = ?(МассивДистрибутивовДляОтбораИсключения = Неопределено, Новый Массив, МассивДистрибутивовДляОтбораИсключения); 
//		
//		Для Каждого ТекЗначение Из СтруктураДанных.МассивДистрибутивовДляОтбораИсключения Цикл
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВКоллекцию(МассивДистрибутивовДляОтбораИсключения, ТекЗначение, Истина);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если ТипЗнч(СтруктураДанных.МассивФильтровДляОтбора) = Тип("Массив") Тогда 		
//		МассивФильтровДляОтбора = ?(МассивФильтровДляОтбора = Неопределено, Новый Массив, МассивФильтровДляОтбора); 
//		
//		Для Каждого ТекЗначение Из СтруктураДанных.МассивФильтровДляОтбора Цикл
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВКоллекцию(МассивФильтровДляОтбора, ТекЗначение, Истина);
//		КонецЦикла;	
//	КонецЕсли;
//	
//	Если ТипЗнч(СтруктураДанных.МассивФильтровДляОтбораИсключения) = Тип("Массив") Тогда 		
//		МассивФильтровДляОтбораИсключения = ?(МассивФильтровДляОтбораИсключения = Неопределено, Новый Массив, МассивФильтровДляОтбораИсключения); 
//		
//		Для Каждого ТекЗначение Из СтруктураДанных.МассивФильтровДляОтбораИсключения Цикл
//			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВКоллекцию(МассивФильтровДляОтбораИсключения, ТекЗначение, Истина);
//		КонецЦикла;	
//	КонецЕсли;
//																					
//КонецПроцедуры
//
//Процедура ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов_Старый(СтруктураДанных,  ТЗ_ВспомогательныеДанныеДляОтбора)
//
//	 
//	//ТЗ_ВспомогательныеДанныеДляОтбора = Новый ТаблицаЗначений
//	//ТЗ_ВспомогательныеДанныеДляОтбора.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
//	//ТЗ_ВспомогательныеДанныеДляОтбора.Колонки.Добавить("ИмяПараметраСНомером", Новый ОписаниеТипов("Строка"));
//	//ТЗ_ВспомогательныеДанныеДляОтбора.Колонки.Добавить("МассивЗначений");          // тип массив, если хотя бы одно значние передали, иначе - НЕОПРЕДЕЛЕНО
//	//ТЗ_ВспомогательныеДанныеДляОтбора.Колонки.Добавить("МассивЗначенийИсключений"); // тип массив, если хотя бы одно значние передали, иначе - НЕОПРЕДЕЛЕНО
//	
//	Если ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбора) = Тип("Массив")
//		ИЛИ  ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбораИсключения) = Тип("Массив") Тогда  
//		
//		НовСтрока = ТЗ_ВспомогательныеДанныеДляОтбора.Добавить();
//		НовСтрока.ИмяПараметра = "ДистрибутивыДляОтбора";
//		НомерПараметра = ТЗ_ВспомогательныеДанныеДляОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", НовСтрока.ИмяПараметра)).Количество();
//		
//		НовСтрока.ИмяПараметраСНомером = НовСтрока.ИмяПараметра + НомерПараметра;
//		
//		Если ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбора) = Тип("Массив") Тогда 		
//			НовСтрока.МассивЗначений = СтруктураДанных.МассивДистрибутивовДляОтбора;	
//		КонецЕсли;	
//		
//		Если ТипЗнч(СтруктураДанных.МассивДистрибутивовДляОтбораИсключения) = Тип("Массив") Тогда 
//			НовСтрока.МассивЗначенийИсключений = СтруктураДанных.МассивДистрибутивовДляОтбораИсключения;	
//		КонецЕсли;
//	КонецЕсли;	
//	
//	Если ТипЗнч(СтруктураДанных.МассивФильтровДляОтбора) = Тип("Массив")
//		ИЛИ  ТипЗнч(СтруктураДанных.МассивФильтровДляОтбораИсключения) = Тип("Массив") Тогда  
//
//		НовСтрока = ТЗ_ВспомогательныеДанныеДляОтбора.Добавить();
//		НовСтрока.ИмяПараметра = "ФильтрыДляОтбора";
//		НомерПараметра = ТЗ_ВспомогательныеДанныеДляОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", НовСтрока.ИмяПараметра)).Количество();
//
//		НовСтрока.ИмяПараметраСНомером = НовСтрока.ИмяПараметра + (ТЗ_ВспомогательныеДанныеДляОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", НовСтрока.ИмяПараметра)).Количество() + 1);
//
//		Если ТипЗнч(СтруктураДанных.МассивФильтровДляОтбора) = Тип("Массив") Тогда 		
//			НовСтрока.МассивЗначений = СтруктураДанных.МассивФильтровДляОтбора;	
//		КонецЕсли;	
//		
//		Если ТипЗнч(СтруктураДанных.МассивФильтровДляОтбораИсключения) = Тип("Массив") Тогда 
//			НовСтрока.МассивЗначенийИсключений = СтруктураДанных.МассивФильтровДляОтбораИсключения;	
//		КонецЕсли;
//	КонецЕсли;	
//																				
//КонецПроцедуры
//
//Функция ПолучитьРезультатПолучениеДанныхИнстансовКлиентовНаОсновеПромежуточныхЗапросов(РезультатыПромежуточныхЗапросов)
//	
//	КонфигурацииЛицензийДляОтбора = Неопределено;
//	ВсеДанныеИзПромежуточныхЗапросов = Неопределено;
//	
//	
//	// находим инстансы, которые есть во всех промежуточных расчетах
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ 
//		|	КонфигурацииЛицензий.Ссылка КАК КонфигурацияЛицензий
//		|ИЗ
//		|	Справочник.КонфигурацииЛицензий КАК КонфигурацииЛицензий
//		|ГДЕ
//		|	КонфигурацииЛицензий.ПометкаУдаления = ЛОЖЬ  
//		//++OW Копачев А.С. 09.06.2021 ONEC-6731
//		|	И КонфигурацииЛицензий.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусКлиентаARM.Active), ЗНАЧЕНИЕ(Перечисление.СтатусКлиентаARM.Installation), ЗНАЧЕНИЕ(Перечисление.СтатусКлиентаARM.Negotiations))
//		 //--OW Копачев А.С. 09.06.2021 ONEC-6731
//		|//#ОтборПоКонфигурациямЛицензийЗапросов#
//		|";
//	
//	ТекстОтбораПоКонфигурациямЛицензий = "";
//	
//	Номер = 0;
//	Для Каждого ТекРезультатПромежуточногоЗапроса Из РезультатыПромежуточныхЗапросов Цикл
//		Номер = Номер + 1; 
//		ИмяПараметра = "КонфигурацииЛицензийДляОтбораПромежуточные"+Номер;
//		
//		ТЗ_РезультатПромежуточногоЗапроса = ТекРезультатПромежуточногоЗапроса.Выгрузить();	
//		КонфигурацииЛицензийДляОтбораПромежуточные = ТЗ_РезультатПромежуточногоЗапроса.ВыгрузитьКолонку("КонфигурацияЛицензий");
//		
//		ТекстОтбораПоКонфигурациямЛицензий = ТекстОтбораПоКонфигурациямЛицензий + Символы.ПС + "	И КонфигурацииЛицензий.Ссылка В(&"+ИмяПараметра+")"; 
//		Запрос.УстановитьПараметр(ИмяПараметра, КонфигурацииЛицензийДляОтбораПромежуточные);	
//	
//		
//		// заполним таблицу "все данные"
//		Если ВсеДанныеИзПромежуточныхЗапросов = Неопределено Тогда 
//			ВсеДанныеИзПромежуточныхЗапросов = ТЗ_РезультатПромежуточногоЗапроса.Скопировать();	
//		Иначе
//			Для Каждого ТекСтрока Из ТЗ_РезультатПромежуточногоЗапроса Цикл
//				НовСтрока = ВсеДанныеИзПромежуточныхЗапросов.Добавить();
//				ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока); 
//			КонецЦикла;	
//		КонецЕсли;	
//	КонецЦикла;
//	
//	
//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензийЗапросов#", ТекстОтбораПоКонфигурациямЛицензий); 	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ТЗ_Данные = РезультатЗапроса.Выгрузить();
//	
//	КонфигурацииЛицензийДляОтбора = ТЗ_Данные.ВыгрузитьКолонку("КонфигурацияЛицензий");
//
//	// делаем отбор по полученным клиентам во всех данных	
//	ЗапросФинальный = Новый Запрос;
//	ЗапросФинальный.Текст = 
//		"ВЫБРАТЬ
//		|	ВсеДанныеИзПромежуточныхЗапросов.Клиент КАК Клиент,
//		|	ВсеДанныеИзПромежуточныхЗапросов.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
//		|	ВЫРАЗИТЬ(ВсеДанныеИзПромежуточныхЗапросов.Лицензия КАК Справочник.ЛицензииКлиентов) КАК Лицензия,
//		|	ВсеДанныеИзПромежуточныхЗапросов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//		|	ВсеДанныеИзПромежуточныхЗапросов.UIDЛицензии КАК UIDЛицензии,
//		|	ВсеДанныеИзПромежуточныхЗапросов.КоличественнаяЛицензия КАК КоличественнаяЛицензия,
//		|	ВсеДанныеИзПромежуточныхЗапросов.PartNumber КАК PartNumber,
//		|	ВсеДанныеИзПромежуточныхЗапросов.Количество КАК Количество,
//		|	ВсеДанныеИзПромежуточныхЗапросов.ЛицензияНаСопровождении КАК ЛицензияНаСопровождении	
//		|
//		|ПОМЕСТИТЬ ВТ_ВсеДанныеИзПромежуточныхЗапросов
//		|ИЗ
//		|	&ВсеДанныеИзПромежуточныхЗапросов КАК ВсеДанныеИзПромежуточныхЗапросов		
//		|
//		|;
//		|/////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.Клиент КАК Клиент,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.Лицензия КАК Лицензия,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.UIDЛицензии КАК UIDЛицензии,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.КоличественнаяЛицензия КАК КоличественнаяЛицензия,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.PartNumber КАК PartNumber,
//		|	СУММА(ВТ_ВсеДанныеИзПромежуточныхЗапросов.Количество) КАК Количество,
//		|	МАКСИМУМ(ВТ_ВсеДанныеИзПромежуточныхЗапросов.ЛицензияНаСопровождении) КАК ЛицензияНаСопровождении	
//		|
//		|ПОМЕСТИТЬ ВТ_Данные
//		|ИЗ
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов КАК ВТ_ВсеДанныеИзПромежуточныхЗапросов		
//		|
//		|ГДЕ 
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.КонфигурацияЛицензий В (&КонфигурацииЛицензийДляОтбора)
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.Клиент,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.КонфигурацияЛицензий,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.Лицензия,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.UIDЛицензии,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.КоличественнаяЛицензия,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.ДополнениеКНаименованиюПолное,
//		|	ВТ_ВсеДанныеИзПромежуточныхЗапросов.PartNumber
//		|			
//		|;
//		|/////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Данные.Клиент КАК Клиент,
//		|	ВТ_Данные.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
//		|	ВТ_Данные.Лицензия КАК Лицензия,
//		|	ВТ_Данные.UIDЛицензии КАК UIDЛицензии,
//		|	ВТ_Данные.КоличественнаяЛицензия,
//		|	ВТ_Данные.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//		|	ВТ_Данные.PartNumber КАК PartNumber,
//		|	ЕСТЬNULL(ВТ_Данные.Количество,0) КАК Количество,
//		|	ЕСТЬNULL(ВТ_Данные.Лицензия.Временная, ЛОЖЬ) КАК Временная,
//		|	ЕСТЬNULL(ВТ_Данные.Лицензия.ДатаОкончанияДействия, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОкончанияДействия,
//		|	ВТ_Данные.ЛицензияНаСопровождении КАК ЛицензияНаСопровождении
//		//++OW Копачев А.С. 04.06.2021 ONEC-6731
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения, Значение(Справочник.ЗадачиПроектов.ПустаяСсылка)) КАК Фаза,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.КодПроектаJIRA, """") КАК ФазаКодПроектаJIRA,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.Наименование, """") КАК ФазаНаименование,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.ТипФазы, """") КАК ФазаТипФазы,
//		////++OW Копачев А.С. 10.11.2020 ONEC-6173 
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.СтатусЭтапа, """") КАК ФазаСтатусЭтапа,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.СтатусЭтапаCRM_Оригинальный, """") КАК ФазаСтатусЭтапаCRM_Оригинальный,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.Офицер, """") КАК ФазаОфицер,
//		//|	ЕСТЬNULL(ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.КодПроектаCRM, """") КАК ФазаКодПроектаCRM	
//		////--OW Копачев А.С. 10.11.2020 ONEC-6173	
//		//--OW Копачев А.С. 04.06.2021 ONEC-6731
//		|ИЗ ВТ_Данные КАК ВТ_Данные
//		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииКлиентов.ПроектыВнедрения КАК ЛицензииКлиентовПроектыВнедрения
//		|		ПО 	ВТ_Данные.Лицензия = ЛицензииКлиентовПроектыВнедрения.Ссылка	
//		|			И ЛицензииКлиентовПроектыВнедрения.СсылкаНаПроектВнедрения.ПометкаУдаления = ЛОЖЬ	
//		|УПОРЯДОЧИТЬ ПО
//		|	Клиент,
//		|	КонфигурацияЛицензий,
//		|	ДополнениеКНаименованиюПолное
//		|ИТОГИ
//		|	МАКСИМУМ(ДополнениеКНаименованиюПолное),
//		|	МАКСИМУМ(PartNumber),
//		|	МАКСИМУМ(Количество),
//		|	МАКСИМУМ(ЛицензияНаСопровождении),
//		|	МАКСИМУМ(UIDЛицензии)
//		|ПО
//		|	Клиент,
//		|	КонфигурацияЛицензий,
//		|	ДополнениеКНаименованиюПолное,
//		|	Временная,
//		|	ДатаОкончанияДействия,
//		|	КоличественнаяЛицензия,
//		|	Лицензия
//		|АВТОУПОРЯДОЧИВАНИЕ";
//	
//	ЗапросФинальный.УстановитьПараметр("ВсеДанныеИзПромежуточныхЗапросов", ВсеДанныеИзПромежуточныхЗапросов);
//	ЗапросФинальный.УстановитьПараметр("КонфигурацииЛицензийДляОтбора", КонфигурацииЛицензийДляОтбора);
//
//	РезультатЗапросаФинальный = ЗапросФинальный.Выполнить();
//	Возврат РезультатЗапросаФинальный;
//	
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеДанныхИнстансовКлиентов(СтрокаJSON, ИнстансDP) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	queryТекст		= Неопределено;
//	
//	licensesCode	= Неопределено;		
//	countriesCode	= Неопределено;
//	componentsCode	= Неопределено; 
//	filtersCode		= Неопределено;		
//	clientCode		= Неопределено;
//		
//	Если НЕ ПустаяСтрока(СтрокаJSON) Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		queryТекст		= JIRA.ПолучитьПоле(ДанныеJSON,"query");
//		
//		licensesCode	= JIRA.ПолучитьПоле(ДанныеJSON,"licenses");		
//		countriesCode	= JIRA.ПолучитьПоле(ДанныеJSON,"countries");		
//		componentsCode  = JIRA.ПолучитьПоле(ДанныеJSON,"components");
//		filtersCode		= JIRA.ПолучитьПоле(ДанныеJSON,"filters");
//		
//		clientCode		= JIRA.ПолучитьПоле(ДанныеJSON,"client");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(licensesCode) 
//			И НЕ ЗначениеЗаполнено(countriesCode)
//			И НЕ ЗначениеЗаполнено(componentsCode)
//			И НЕ ЗначениеЗаполнено(filtersCode)
//			И НЕ ЗначениеЗаполнено(clientCode)
//			И НЕ ЗначениеЗаполнено(queryТекст) Тогда 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//		
//	
//	Данные = Новый Массив;
//		
//	МассивКонфигурацийЛицензийДляОтбора = Неопределено;	
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	МассивВидовИнстансовJIRAДляОтбора = Неопределено;
//	Если ИспользоватьРазделениеПоБизнесРегионамDeliveryPortal() Тогда 
//		МассивВидовИнстансовJIRAДляОтбора = ПолучитьВидыИнстансовJIRAПоВидуИнстансаDeliveryPortal(ИнстансDP);		
//	КонецЕсли;	
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//
//	МассивДистрибутивовДляОтбора 			= Неопределено;
//	МассивДистрибутивовДляОтбораИсключения 	= Неопределено;
//	МассивФильтровДляОтбора 			= Неопределено;
//	МассивФильтровДляОтбораИсключения	= Неопределено;
//	
//	// данные по отборам
//	МассивlicensesCode 				= Неопределено;
//	МассивlicensesCodeИсключения	= Неопределено;
//	
//	МассивcountriesCode 			= Неопределено;
//	МассивcountriesCodeИсключения 	= Неопределено;
//	
//	МассивcomponentsCode 			= Неопределено;
//	МассивcomponentsCodeИсключения 	= Неопределено;
//	
//	МассивfiltersCode 				= Неопределено;
//	МассивfiltersCodeИсключения 	= Неопределено;
//
//	ЭтоЗапросПоКлиенту = Ложь;
//	ВозвращатьВсеДанныеПоКлиентам = Истина;
//	
//	РезультатыПромежуточныхЗапросов = Новый Массив;
//
//	Если ЗначениеЗаполнено(queryТекст) Тогда 
//		
//		// проверка, что ничего другого в адрес не добавили
//		Если  ЗначениеЗаполнено(licensesCode) 
//			ИЛИ  ЗначениеЗаполнено(countriesCode)
//			ИЛИ ЗначениеЗаполнено(componentsCode)
//			ИЛИ ЗначениеЗаполнено(filtersCode)
//			ИЛИ ЗначениеЗаполнено(clientCode) Тогда 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//		// для варианта получения данных через запрос отдаем только даннные клиента,
//		// иначе слишком долгий процесс формирования пакета происходит. При этом портал при поиске через запрос используется
//		// только данные клиента (без лицензий, фильтров, фаз и т.д.)
//		ВозвращатьВсеДанныеПоКлиентам = Ложь; // получение всех данных 
//		
//		ДанныеQuery = CDT_РазобратьПроизвольныйЗапрос(queryТекст);	
//
//		ДанныеИзЗапроса = Новый ТаблицаЗначений;
//		ДанныеИзЗапроса.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
//		ДанныеИзЗапроса.Колонки.Добавить("Данные", Новый ОписаниеТипов("ТаблицаЗначений"));
//		
//		ДанныеПараметра = Новый ТаблицаЗначений;
//		ДанныеПараметра.Колонки.Добавить("ИмяПараметраСНомером", Новый ОписаниеТипов("Строка"));
//		ДанныеПараметра.Колонки.Добавить("ЗначениеСтрокой", Новый ОписаниеТипов("Строка"));
//		ДанныеПараметра.Колонки.Добавить("МассивЗначений", Новый ОписаниеТипов("Массив"));
//		ДанныеПараметра.Колонки.Добавить("МассивЗначенийИсключений", Новый ОписаниеТипов("Массив"));
//		
//		ДанныеQuerylicenses 	= ДанныеQuery.Найти("licenses", "ИмяПараметра");
//		ДанныеQuerycountries 	= ДанныеQuery.Найти("countries", "ИмяПараметра");
//		ДанныеQuerycomponents 	= ДанныеQuery.Найти("components", "ИмяПараметра");
//		ДанныеQueryfilters 		= ДанныеQuery.Найти("filters", "ИмяПараметра");
//		
//		// получение данных по Query из запроса
//		Для i_licenses = 1 По ?(ДанныеQuerylicenses = Неопределено, 1, ДанныеQuerylicenses.Данные.Количество()) Цикл
//			
//			МассивlicensesCode 				= ?(ДанныеQuerylicenses = Неопределено, Неопределено, ДанныеQuerylicenses.Данные[i_licenses-1].МассивЗначений);
//			МассивlicensesCodeИсключения 	= ?(ДанныеQuerylicenses = Неопределено, Неопределено, ДанныеQuerylicenses.Данные[i_licenses-1].МассивЗначенийИсключений);
//	
//			Для i_countries = 1 По ?(ДанныеQuerycountries = Неопределено, 1, ДанныеQuerycountries.Данные.Количество()) Цикл
//				
//				МассивcountriesCode 			= ?(ДанныеQuerycountries = Неопределено, Неопределено, ДанныеQuerycountries.Данные[i_countries-1].МассивЗначений);
//				МассивcountriesCodeИсключения 	= ?(ДанныеQuerycountries = Неопределено, Неопределено, ДанныеQuerycountries.Данные[i_countries-1].МассивЗначенийИсключений);
//					
//				Для i_components = 1 По ?(ДанныеQuerycomponents = Неопределено, 1, ДанныеQuerycomponents.Данные.Количество()) Цикл
//					
//					МассивcomponentsCode 			= ?(ДанныеQuerycomponents = Неопределено, Неопределено, ДанныеQuerycomponents.Данные[i_components-1].МассивЗначений);
//					МассивcomponentsCodeИсключения 	= ?(ДанныеQuerycomponents = Неопределено, Неопределено, ДанныеQuerycomponents.Данные[i_components-1].МассивЗначенийИсключений);
//
//				 	Для i_filters = 1 По ?(ДанныеQueryfilters = Неопределено, 1, ДанныеQueryfilters.Данные.Количество()) Цикл
//						
//						МассивfiltersCode 			= ?(ДанныеQueryfilters = Неопределено, Неопределено, ДанныеQueryfilters.Данные[i_filters-1].МассивЗначений);
//						МассивfiltersCodeИсключения = ?(ДанныеQueryfilters = Неопределено, Неопределено, ДанныеQueryfilters.Данные[i_filters-1].МассивЗначенийИсключений);
//						
//						СтруктураДанных = ПолучитьПромежуточныйРезультатПолучениеДанныхИнстансовКлиентов(МассивКонфигурацийЛицензийДляОтбора, 
//																МассивcomponentsCode, МассивcomponentsCodeИсключения,
//																МассивfiltersCode, МассивfiltersCodeИсключения,
//																МассивlicensesCode, МассивlicensesCodeИсключения, 
//																МассивcountriesCode, МассивcountriesCodeИсключения, 
//																МассивВидовИнстансовJIRAДляОтбора); //OW Копачев А.С. 31.03.2022 ONEC-7464 
//																
//										
//																
//						РезультатыПромежуточныхЗапросов.Добавить(СтруктураДанных.РезультатЗапроса);										
//						
//						//ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов(СтруктураДанных, ТЗ_ВспомогательныеДанныеДляОтбора);
//						ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов(СтруктураДанных,  
//																						МассивДистрибутивовДляОтбора, МассивДистрибутивовДляОтбораИсключения,
//																						МассивФильтровДляОтбора, МассивФильтровДляОтбораИсключения);
//					КонецЦикла;
//				КонецЦикла;
//			КонецЦикла;				
//		КонецЦикла;	
//		
//	Иначе
//		Если ЗначениеЗаполнено(clientCode) Тогда 
//		
//			ЭтоЗапросПоКлиенту = Истина;
//			
//			КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьИнстансКлиентаПоCDTClientCode(clientCode);
//			Если НЕ ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда  
//				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//									"Не найден клиент по " + clientCode + "",
//									"No client found for " + clientCode + "", "Все");
//				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//				Возврат СтруктураВозврата;
//			Иначе							
//				// делаем отбор по клиенту
//				МассивКонфигурацийЛицензийДляОтбора = Новый Массив;	
//				МассивКонфигурацийЛицензийДляОтбора.Добавить(КонфигурацияЛицензий);
//			КонецЕсли;
//		
//		Иначе
//			
//			Если ЗначениеЗаполнено(licensesCode) Тогда 
//				МассивlicensesCode = CDT_РазложитьСтрокуВМассивПодстрок(licensesCode);
//			КонецЕсли;	
//			Если ЗначениеЗаполнено(countriesCode) Тогда	
//				МассивcountriesCode = CDT_РазложитьСтрокуВМассивПодстрок(countriesCode);
//			КонецЕсли;
//			Если ЗначениеЗаполнено(componentsCode) Тогда	
//				МассивcomponentsCode = CDT_РазложитьСтрокуВМассивПодстрок(componentsCode);
//			КонецЕсли;
//			Если ЗначениеЗаполнено(filtersCode) Тогда	
//				МассивfiltersCode = CDT_РазложитьСтрокуВМассивПодстрок(filtersCode);
//			КонецЕсли;	
//		КонецЕсли;	
//		
//		СтруктураДанных = ПолучитьПромежуточныйРезультатПолучениеДанныхИнстансовКлиентов(МассивКонфигурацийЛицензийДляОтбора, 
//																МассивcomponentsCode, МассивcomponentsCodeИсключения,
//																МассивfiltersCode, МассивfiltersCodeИсключения,
//																МассивlicensesCode, МассивlicensesCodeИсключения, 
//																МассивcountriesCode, МассивcountriesCodeИсключения, 
//																МассивВидовИнстансовJIRAДляОтбора); //OW Копачев А.С. 31.03.2022 ONEC-7464
//																
//		РезультатыПромежуточныхЗапросов.Добавить(СтруктураДанных.РезультатЗапроса);
//		
//		//ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов(СтруктураДанных, ТЗ_ВспомогательныеДанныеДляОтбора);
//		ЗаполнитьВспомогательныеПараметрыЗапросаНаПолучениеДанныхИнстансовКлиентов(СтруктураДанных,  
//																						МассивДистрибутивовДляОтбора, МассивДистрибутивовДляОтбораИсключения,
//																						МассивФильтровДляОтбора, МассивФильтровДляОтбораИсключения);
//
//	КонецЕсли;
//	
//	РезультатЗапроса = ПолучитьРезультатПолучениеДанныхИнстансовКлиентовНаОсновеПромежуточныхЗапросов(РезультатыПромежуточныхЗапросов);
//	
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//				
//		ВыборкаКлиент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока ВыборкаКлиент.Следующий() Цикл
//			ВыборкаКонфигурацияЛицензий = ВыборкаКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			Пока ВыборкаКонфигурацияЛицензий.Следующий() Цикл
//				Клиент = ВыборкаКонфигурацияЛицензий.Клиент;
//				КонфигурацияЛицензий = ВыборкаКонфигурацияЛицензий.КонфигурацияЛицензий;
//				
//				FaxNumber = ?(ЗначениеЗаполнено(КонфигурацияЛицензий.FaxNumber),КонфигурацияЛицензий.FaxNumber,Клиент.FaxNumber);
//				Статус = ?(ЗначениеЗаполнено(КонфигурацияЛицензий.Статус),КонфигурацияЛицензий.Статус,Клиент.СтатусКлиентаARM);
//
//				НаименованиеНаАнглийском = ?(ЗначениеЗаполнено(КонфигурацияЛицензий.Наименование), КонфигурацияЛицензий.Наименование, Клиент.НаименованиеНаАнглийском);
//				Наименование = Клиент.Наименование;
//				
//				ТипПартнера = Клиент.ТипПартнера;
//				СтранаКлиентаNameEN = Клиент.СтранаКлиента.NameEN;
//				СтранаКлиентаНаименование = Клиент.СтранаКлиента.Наименование;
//				
//				
//				ДанныеПоЭлементу = Новый Структура;	
//				ДанныеПоЭлементу.Вставить("name",  				JIRA.НормализоватьСтроку(?(ЗначениеЗаполнено(НаименованиеНаАнглийском),НаименованиеНаАнглийском,Наименование)));	
//				ДанныеПоЭлементу.Вставить("code",  				JIRA.НормализоватьСтроку(FaxNumber));
//				ДанныеПоЭлементу.Вставить("country",  			JIRA.НормализоватьСтроку(?(ЗначениеЗаполнено(СтранаКлиентаNameEN),СтранаКлиентаNameEN,СтранаКлиентаНаименование)));
//				ДанныеПоЭлементу.Вставить("type",  				JIRA.НормализоватьСтроку(ТипПартнера));
//				ДанныеПоЭлементу.Вставить("status",  			JIRA.НормализоватьСтроку(Статус));
//				//***OW @20221117030918  Start [БПВ]***ONEC-8146 
//                ПрограммныйПродукт = СокрЛП(КонфигурацияЛицензий.ПрограммныйПродукт);
//                ДанныеПоЭлементу.Вставить("software_product",  	JIRA.НормализоватьСтроку(ПрограммныйПродукт));
//                //***OW @20221117030920  End [БПВ]***ONEC-8146
//				//++OW Копачев А.С. 04.06.2021 ONEC-6731
//				МногоПродажныеЛицензии = Справочники.ЛицензииКлиентов.МногоПродажныеЛицензии(КонфигурацияЛицензий);
//				//--OW Копачев А.С. 04.06.2021 ONEC-6731
//				
//				Если ВозвращатьВсеДанныеПоКлиентам = Истина Тогда 
//					//////////////////////////////
//					//
//					
//					ВыборкаДополнениеКНаименованиюПолное = ВыборкаКонфигурацияЛицензий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//					
//					// данные по лицензиям
//					ДанныеЛицензий = Новый Массив;
//					Пока ВыборкаДополнениеКНаименованиюПолное.Следующий() Цикл
//						Если ПустаяСтрока(ВыборкаДополнениеКНаименованиюПолное.ДополнениеКНаименованиюПолное) 
//							И ПустаяСтрока(ВыборкаДополнениеКНаименованиюПолное.PartNumber) Тогда 
//							Продолжить;	
//						КонецЕсли;	
//					
//						ВыборкаВременная = ВыборкаДополнениеКНаименованиюПолное.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//					
//						Пока ВыборкаВременная.Следующий() Цикл
//							
//							ВыборкаДатаОкончанияДействия = ВыборкаВременная.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//							Пока ВыборкаДатаОкончанияДействия.Следующий() Цикл
//																
//								ВыборкаКоличественнаяЛицензия = ВыборкаДатаОкончанияДействия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//
//								Пока ВыборкаКоличественнаяЛицензия.Следующий() Цикл
//			
//			                        //Необходимо осуществлять группировку только для количественных лицензи
//									Если ВыборкаКоличественнаяЛицензия.КоличественнаяЛицензия = Истина Тогда 
//															
//										ДанныеПоЛицензии = Новый Структура;					
//										ДанныеПоЛицензии.Вставить("name",	JIRA.НормализоватьСтроку(ВыборкаДополнениеКНаименованиюПолное.ДополнениеКНаименованиюПолное));
//										ДанныеПоЛицензии.Вставить("code",	JIRA.НормализоватьСтроку(ВыборкаДополнениеКНаименованиюПолное.PartNumber));
//										ДанныеПоЛицензии.Вставить("uid",	JIRA.НормализоватьСтроку(ВыборкаКоличественнаяЛицензия.UIDЛицензии));
//										ДанныеПоЛицензии.Вставить("volume", 0);  // чуть позже заполним
//										ДанныеПоЛицензии.Вставить("maintained", ВыборкаДополнениеКНаименованиюПолное.ЛицензияНаСопровождении);
//							            ДанныеПоЛицензии.Вставить("valid_to", "");
//
//										ДатаОкончанияДействия = ВыборкаДатаОкончанияДействия.ДатаОкончанияДействия;
//										Если ВыборкаВременная.Временная = Истина Тогда							
//											
//											Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
//												ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//												ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//												ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);
//												
//												ДанныеПоЛицензии.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//											КонецЕсли;
//										КонецЕсли;
//								
//										// лицензии на портал выводятся сгруппированными по наименованию, поэтому фазы с разных лицензий, но одинаквых по наименованию
//										// объединяем как и количество лицензий
//										ФазыЛицензий = Новый Массив;
//										МассивДобавленныхФаз = Новый Массив;						
//										ВыборкаЛицензии = ВыборкаКоличественнаяЛицензия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//										Пока ВыборкаЛицензии.Следующий() Цикл
//
//							            	ДанныеПоЛицензии.volume = ДанныеПоЛицензии.volume + ВыборкаЛицензии.Количество;								
//											
//											Лицензия = ВыборкаЛицензии.Лицензия;
//											
//											//Фазы
//											
//											//++OW Копачев А.С. 04.06.2021 ONEC-6731
//											//Выборка = ВыборкаЛицензии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);												
//											//Пока Выборка.Следующий() Цикл
//											//	Если НЕ ЗначениеЗаполнено(Выборка.Фаза) Тогда 
//											//		Продолжить;	
//											//	КонецЕсли;						
//											//	
//											//	Если МассивДобавленныхФаз.Найти(Выборка.Фаза) <> Неопределено Тогда 
//											//		Продолжить; // уже указали данную фазу
//											//	КонецЕсли;
//											//	
//											//	ДанныеПоФазе = Новый Структура;	
//											//	ДанныеПоФазе.Вставить("name",  		JIRA.НормализоватьСтроку(Выборка.ФазаНаименование));
//											//	ДанныеПоФазе.Вставить("jira_issue", JIRA.НормализоватьСтроку(Выборка.ФазаКодПроектаJIRA));
//											//	ДанныеПоФазе.Вставить("type", 		JIRA.НормализоватьСтроку(Выборка.ФазаТипФазы));
//											//	
//											//	
//											//	//++OW Копачев А.С. 10.11.2020 ONEC-6173 
//											//	ДанныеПоФазе.Вставить("phase_сode",  			JIRA.НормализоватьСтроку(Выборка.ФазаКодПроектаCRM));
//											//	ДанныеПоФазе.Вставить("phase_status", 			JIRA.НормализоватьСтроку(Выборка.ФазаСтатусЭтапа));
//											//	ДанныеПоФазе.Вставить("phase_status_crm", 		JIRA.НормализоватьСтроку(Выборка.ФазаСтатусЭтапаCRM_Оригинальный));
//											//	ДанныеПоФазе.Вставить("assignee",  				JIRA.НормализоватьСтроку(Выборка.ФазаОфицер));
//											//	//--OW Копачев А.С. 10.11.2020 ONEC-6173
//											//	
//											//	ФазыЛицензий.Добавить(ДанныеПоФазе);
//											//	
//											//	МассивДобавленныхФаз.Добавить(Выборка.Фаза);
//											//	
//											//КонецЦикла;
//											
//											МассивФазЛицензиии = Справочники.ЛицензииКлиентов.ПолучитьФазыЛицензии(Лицензия, Истина);												
//											Для Каждого ТекФаза Из МассивФазЛицензиии Цикл 
//												
//												Если НЕ ЗначениеЗаполнено(ТекФаза) Тогда
//													Продолжить;
//												КонецЕсли;	
//												
//												Если МассивДобавленныхФаз.Найти(ТекФаза) <> Неопределено Тогда 
//													Продолжить; // уже указали данную фазу
//												КонецЕсли;
//
//												ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекФаза, "КодПроектаJIRA, Наименование, ТипФазы, СтатусЭтапа, СтатусЭтапаCRM_Оригинальный, Офицер, КодПроектаCRM");	
//												
//																									
//												ДанныеПоФазе = Новый Структура;	
//												ДанныеПоФазе.Вставить("name",  		JIRA.НормализоватьСтроку(ДанныеФазы.Наименование));
//												ДанныеПоФазе.Вставить("jira_issue", JIRA.НормализоватьСтроку(ДанныеФазы.КодПроектаJIRA));
//												ДанныеПоФазе.Вставить("type", 		JIRA.НормализоватьСтроку(ДанныеФазы.ТипФазы));
//												
//												
//												//++OW Копачев А.С. 10.11.2020 ONEC-6173 
//												ДанныеПоФазе.Вставить("phase_сode",  			JIRA.НормализоватьСтроку(ДанныеФазы.КодПроектаCRM));
//												ДанныеПоФазе.Вставить("phase_status", 			JIRA.НормализоватьСтроку(ДанныеФазы.СтатусЭтапа));
//												ДанныеПоФазе.Вставить("phase_status_crm", 		JIRA.НормализоватьСтроку(ДанныеФазы.СтатусЭтапаCRM_Оригинальный));
//												ДанныеПоФазе.Вставить("assignee",  				JIRA.НормализоватьСтроку(ДанныеФазы.Офицер));
//												//--OW Копачев А.С. 10.11.2020 ONEC-6173
//												
//												ФазыЛицензий.Добавить(ДанныеПоФазе);
//											
//												МассивДобавленныхФаз.Добавить(ТекФаза);
//											КонецЦикла;
//											//--OW Копачев А.С. 04.06.2021 ONEC-6731
//	
//										КонецЦикла;
//										
//										ДанныеПоЛицензии.Вставить("phases", ФазыЛицензий);
//
//										ДанныеЛицензий.Добавить(ДанныеПоЛицензии);
//									Иначе 
//										// неколичественная лицензия
//										
//										ВыборкаЛицензии = ВыборкаКоличественнаяЛицензия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//										Пока ВыборкаЛицензии.Следующий() Цикл
//											
//											ФазыЛицензий = Новый Массив;
//											МассивДобавленныхФаз = Новый Массив;						
//											
//											ДанныеПоЛицензии = Новый Структура;	
//											
//											//++OW Копачев А.С. 04.06.2021 ONEC-6731
//											Лицензия = ВыборкаЛицензии.Лицензия;
//											
//											// Есть предложение при выгрузке лицензий, которые могут продаваться несколько раз, добавлять 
//											//к названию лицензии "Наименование из договора", чтобы можно было бы различить лицензии активного и неактивного инстансов:
//											НаименованиеЛицензии = ВыборкаДополнениеКНаименованиюПолное.ДополнениеКНаименованиюПолное;
//											Если МногоПродажныеЛицензии.Найти(Лицензия) <> Неопределено Тогда 
//												НаименованиеДоговора = "";
//												Если Лицензия.ТипЛицензии = Перечисления.ТипыЛицензий.Licence Тогда 
//													НаименованиеДоговора = Лицензия.ДополнениеКНаименованию;	
//												ИначеЕсли Лицензия.ТипЛицензии = Перечисления.ТипыЛицензий.OptionGroup Тогда 
//													НаименованиеДоговора = Лицензия.Родитель.ДополнениеКНаименованию;
//												ИначеЕсли Лицензия.ТипЛицензии = Перечисления.ТипыЛицензий.Option Тогда 
//													НаименованиеДоговора = Лицензия.Родитель.Родитель.ДополнениеКНаименованию;
//												Иначе 
//													НаименованиеДоговора = "";
//												КонецЕсли;
//												НаименованиеЛицензии = НаименованиеЛицензии + " (" +  НаименованиеДоговора + ")";
//											КонецЕсли;	
//											//--OW Копачев А.С. 04.06.2021 ONEC-6731
//					
//											
//											ДанныеПоЛицензии.Вставить("name",	JIRA.НормализоватьСтроку(НаименованиеЛицензии));
//											ДанныеПоЛицензии.Вставить("code",	JIRA.НормализоватьСтроку(ВыборкаДополнениеКНаименованиюПолное.PartNumber));
//											ДанныеПоЛицензии.Вставить("uid",	JIRA.НормализоватьСтроку(ВыборкаКоличественнаяЛицензия.UIDЛицензии));
//											ДанныеПоЛицензии.Вставить("volume", ВыборкаЛицензии.Количество);  
//											ДанныеПоЛицензии.Вставить("maintained", ВыборкаЛицензии.ЛицензияНаСопровождении);
//								            ДанныеПоЛицензии.Вставить("valid_to", "");
//
//											ДатаОкончанияДействия = ВыборкаДатаОкончанияДействия.ДатаОкончанияДействия;
//											Если ВыборкаВременная.Временная = Истина Тогда							
//												
//												Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
//													ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//													ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//													ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);
//													
//													ДанныеПоЛицензии.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//												КонецЕсли;
//											КонецЕсли;
//											
//																									
//											//фазы по лицензии
//											
//											//++OW Копачев А.С. 04.06.2021 ONEC-6731
//											//Выборка = ВыборкаЛицензии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);												
//											//Пока Выборка.Следующий() Цикл
//											//	Если НЕ ЗначениеЗаполнено(Выборка.Фаза) Тогда 
//											//		Продолжить;	
//											//	КонецЕсли;						
//											//	
//											//	Если МассивДобавленныхФаз.Найти(Выборка.Фаза) <> Неопределено Тогда 
//											//		Продолжить; // уже указали данную фазу
//											//	КонецЕсли;
//											//	
//											//	ДанныеПоФазе = Новый Структура;	
//											//	ДанныеПоФазе.Вставить("name",  		JIRA.НормализоватьСтроку(Выборка.ФазаНаименование));
//											//	ДанныеПоФазе.Вставить("jira_issue", JIRA.НормализоватьСтроку(Выборка.ФазаКодПроектаJIRA));
//											//	ДанныеПоФазе.Вставить("type", 		JIRA.НормализоватьСтроку(Выборка.ФазаТипФазы));
//											//	
//											//	
//											//	//++OW Копачев А.С. 10.11.2020 ONEC-6173 
//											//	ДанныеПоФазе.Вставить("phase_сode",  			JIRA.НормализоватьСтроку(Выборка.ФазаКодПроектаCRM));
//											//	ДанныеПоФазе.Вставить("phase_status", 			JIRA.НормализоватьСтроку(Выборка.ФазаСтатусЭтапа));
//											//	ДанныеПоФазе.Вставить("phase_status_crm", 		JIRA.НормализоватьСтроку(Выборка.ФазаСтатусЭтапаCRM_Оригинальный));
//											//	ДанныеПоФазе.Вставить("assignee",  				JIRA.НормализоватьСтроку(Выборка.ФазаОфицер));
//											//	//--OW Копачев А.С. 10.11.2020 ONEC-6173
//											//	
//											//	ФазыЛицензий.Добавить(ДанныеПоФазе);
//											//	
//											//	МассивДобавленныхФаз.Добавить(Выборка.Фаза);			
//											//КонецЦикла;										
//											
//											МассивФазЛицензиии = Справочники.ЛицензииКлиентов.ПолучитьФазыЛицензии(Лицензия, Истина);												
//											Для Каждого ТекФаза Из МассивФазЛицензиии Цикл 
//												
//												Если НЕ ЗначениеЗаполнено(ТекФаза) Тогда
//													Продолжить;
//												КонецЕсли;	
//												
//												Если МассивДобавленныхФаз.Найти(ТекФаза) <> Неопределено Тогда 
//													Продолжить; // уже указали данную фазу
//												КонецЕсли;
//
//												ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекФаза, "КодПроектаJIRA, Наименование, ТипФазы, СтатусЭтапа, СтатусЭтапаCRM_Оригинальный, Офицер, КодПроектаCRM");	
//												
//																									
//												ДанныеПоФазе = Новый Структура;	
//												ДанныеПоФазе.Вставить("name",  		JIRA.НормализоватьСтроку(ДанныеФазы.Наименование));
//												ДанныеПоФазе.Вставить("jira_issue", JIRA.НормализоватьСтроку(ДанныеФазы.КодПроектаJIRA));
//												ДанныеПоФазе.Вставить("type", 		JIRA.НормализоватьСтроку(ДанныеФазы.ТипФазы));
//												
//												
//												//++OW Копачев А.С. 10.11.2020 ONEC-6173 
//												ДанныеПоФазе.Вставить("phase_сode",  			JIRA.НормализоватьСтроку(ДанныеФазы.КодПроектаCRM));
//												ДанныеПоФазе.Вставить("phase_status", 			JIRA.НормализоватьСтроку(ДанныеФазы.СтатусЭтапа));
//												ДанныеПоФазе.Вставить("phase_status_crm", 		JIRA.НормализоватьСтроку(ДанныеФазы.СтатусЭтапаCRM_Оригинальный));
//												ДанныеПоФазе.Вставить("assignee",  				JIRA.НормализоватьСтроку(ДанныеФазы.Офицер));
//												//--OW Копачев А.С. 10.11.2020 ONEC-6173
//												
//												ФазыЛицензий.Добавить(ДанныеПоФазе);
//											
//												МассивДобавленныхФаз.Добавить(ТекФаза);
//											КонецЦикла;
//											//--OW Копачев А.С. 04.06.2021 ONEC-6731
//											
//											ДанныеПоЛицензии.Вставить("phases", ФазыЛицензий);
//											ДанныеЛицензий.Добавить(ДанныеПоЛицензии);
//											
//										КонецЦикла;
//																		
//									КонецЕсли;	
//								КонецЦикла;	
//							КонецЦикла;
//						КонецЦикла;	
//					КонецЦикла;	
//					ДанныеПоЭлементу.Вставить("licenses", ДанныеЛицензий);
//					
//					//////////////////////////////
//					// данные по фильтрам и дистрибутивам
//					ДанныеФильтров = Новый Массив;
//					
//					Отбор = Новый Структура("КлиентДляОтбора,КонфигурацияЛицензийДляОтбора", Клиент,КонфигурацияЛицензий);
//					//++OW Копачев А.С. 11.09.2020 ONEC-6012
//					//ДанныеКонфигурацииДистрибутивов = РегистрыСведений.КонфигурацииДистрибутивов.ПолучитьДанныеКонфигурацииДистрибутивов(Отбор,Истина);					
//			        ДанныеКонфигурацииДистрибутивов = РегистрыСведений.КонфигурацииДистрибутивов.ПолучитьПоследниеДанныеКонфигурацииДистрибутивов(ТекущаяДата(),Отбор,Истина);					
//					//--OW Копачев А.С. 11.09.2020 ONEC-6012
//					ДанныеКонфигурацииДистрибутивов.Свернуть("Дистрибутив, Фильтр");
//					
//					ЗапросПоФильтрам = Новый Запрос;
//					ЗапросПоФильтрам.Текст = 
//					"ВЫБРАТЬ
//					|	ДанныеКонфигурацииДистрибутивов.Дистрибутив КАК Дистрибутив,
//					|	ДанныеКонфигурацииДистрибутивов.Фильтр КАК Фильтр
//					|ПОМЕСТИТЬ ВТ_ДанныеКонфигурацииДистрибутивов
//					|ИЗ
//					|	&ДанныеКонфигурацииДистрибутивов КАК ДанныеКонфигурацииДистрибутивов
//					|;
//					|
//					|////////////////////////////////////////////////////////////////////////////////
//					|ВЫБРАТЬ РАЗЛИЧНЫЕ
//					|	ДанныеКонфигурацииДистрибутивов.Дистрибутив КАК Дистрибутив,
//					|	ДанныеКонфигурацииДистрибутивов.Фильтр КАК Фильтр
//					|ИЗ
//					|	ВТ_ДанныеКонфигурацииДистрибутивов КАК ДанныеКонфигурацииДистрибутивов
//					|ГДЕ 
//					|	ИСТИНА 
//					//++OW Копачев А.С. 11.07.2022 ONEC-7732 
//					|	И ДанныеКонфигурацииДистрибутивов.Дистрибутив.ID_Sync <> &ПустаяСтрока
//					//--OW Копачев А.С. 11.07.2022 ONEC-7732
//					|	//#ОтборПоДистрибутивам# ИЛИ //#ОтборПоДистрибутивамИсключения#
//					|	//#ОтборПоФильтрам# ИЛИ //#ОтборПоФильтрамИсключения#
//					|ИТОГИ ПО
//					|	Дистрибутив";
//						
//		
//					ЗапросПоФильтрам.УстановитьПараметр("ДанныеКонфигурацииДистрибутивов", ДанныеКонфигурацииДистрибутивов);	
//					ЗапросПоФильтрам.УстановитьПараметр("ПустаяСтрока", "");
//								
//					// формирование строки отбора по дистрибутивам
//					Если МассивДистрибутивовДляОтбора <> Неопределено ИЛИ МассивДистрибутивовДляОтбораИсключения <> Неопределено Тогда 
//						Если МассивДистрибутивовДляОтбора <> Неопределено Тогда  		
//							// делаем отбор
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоДистрибутивам#", "И (ДанныеКонфигурацииДистрибутивов.Дистрибутив В (&МассивДистрибутивовДляОтбора)"); 
//							ЗапросПоФильтрам.УстановитьПараметр("МассивДистрибутивовДляОтбора", МассивДистрибутивовДляОтбора);
//						Иначе
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоДистрибутивам#", "И (ЛОЖЬ"); 				
//						КонецЕсли;
//						Если МассивДистрибутивовДляОтбораИсключения <> Неопределено Тогда  		
//							// делаем отбор
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоДистрибутивамИсключения#", "НЕ ДанныеКонфигурацииДистрибутивов.Дистрибутив В (&МассивДистрибутивовДляОтбораИсключения))"); 
//							ЗапросПоФильтрам.УстановитьПараметр("МассивДистрибутивовДляОтбораИсключения", МассивДистрибутивовДляОтбораИсключения);
//						Иначе 
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоДистрибутивамИсключения#", "ЛОЖЬ)"); 		
//						КонецЕсли;
//					КонецЕсли;
//					
//					// формирование строки отбора по фильтрам
//					Если МассивФильтровДляОтбора <> Неопределено ИЛИ МассивФильтровДляОтбораИсключения <> Неопределено Тогда 
//						Если  МассивФильтровДляОтбора <> Неопределено Тогда   		
//							// делаем отбор
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоФильтрам#", "И (ДанныеКонфигурацииДистрибутивов.Фильтр В (&МассивФильтровДляОтбора)"); 
//							ЗапросПоФильтрам.УстановитьПараметр("МассивФильтровДляОтбора", МассивФильтровДляОтбора);	
//						Иначе
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоФильтрам#", "И (ЛОЖЬ"); 					
//						КонецЕсли;
//						Если  МассивФильтровДляОтбораИсключения <> Неопределено Тогда   		
//							// делаем отбор
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоФильтрамИсключения#", "НЕ ДанныеКонфигурацииДистрибутивов.Фильтр В (&МассивФильтровДляОтбораИсключения))"); 
//							ЗапросПоФильтрам.УстановитьПараметр("МассивФильтровДляОтбораИсключения", МассивФильтровДляОтбораИсключения);	
//						Иначе 
//							ЗапросПоФильтрам.Текст = СтрЗаменить(ЗапросПоФильтрам.Текст, "//#ОтборПоФильтрамИсключения#", "ЛОЖЬ)"); 			
//						КонецЕсли;
//					КонецЕсли;
//
//					
//					РезультатЗапроса = ЗапросПоФильтрам.Выполнить();
//					ВыборкаДистрибутивы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//					
//					МассивДистрибутивов = Новый Массив;
//					Пока ВыборкаДистрибутивы.Следующий() Цикл
//						ДанныеПоДистрибутиву = Новый Структура;	
//						ДанныеПоДистрибутиву.Вставить("name",  JIRA.НормализоватьСтроку(ВыборкаДистрибутивы.Дистрибутив.Наименование));
//						ДанныеПоДистрибутиву.Вставить("code", ВыборкаДистрибутивы.Дистрибутив.ID_Sync);
//						МассивФильтров = Новый Массив;
//						ВыборкаФильтры = ВыборкаДистрибутивы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//						Пока ВыборкаФильтры.Следующий() Цикл
//							Если НЕ ЗначениеЗаполнено(ВыборкаФильтры.Фильтр) Тогда 
//								Продолжить;	
//							КонецЕсли;
//							
//							ДанныеПоФильтру = Новый Структура;	
//							ДанныеПоФильтру.Вставить("name",  JIRA.НормализоватьСтроку(ВыборкаФильтры.Фильтр.Наименование));
//		                    МассивФильтров.Добавить(ДанныеПоФильтру);
//						КонецЦикла;	
//						
//						ДанныеПоДистрибутиву.Вставить("filters",МассивФильтров);
//						МассивДистрибутивов.Добавить(ДанныеПоДистрибутиву);
//					КонецЦикла;
//					ДанныеПоЭлементу.Вставить("components", МассивДистрибутивов);
//					//
//					//////////////////////////////
//				КонецЕсли;
//						
//				Данные.Добавить(ДанныеПоЭлементу);
//			КонецЦикла;
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоКлиенту Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";	
//		КонецЕсли;
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеДанныхДистрибутивов(СтрокаJSON, ИнстансDP) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	componentCode	= Неопределено; 
//	filtersCode		= Неопределено;		
//	clientCode	    = Неопределено;   //OW Копачев А.С. 25.03.2022 ONEC-7476
//	
//	Если НЕ ПустаяСтрока(СтрокаJSON) Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		filtersCode		= JIRA.ПолучитьПоле(ДанныеJSON,"filters");
//		clientCode		= JIRA.ПолучитьПоле(ДанныеJSON,"client"); //OW Копачев А.С. 25.03.2022 ONEC-7476 
//
//		componentCode		= JIRA.ПолучитьПоле(ДанныеJSON,"component");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(filtersCode)
//			И НЕ ЗначениеЗаполнено(componentCode) 
//			И НЕ ЗначениеЗаполнено(clientCode) Тогда 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//				
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//	
//	МассивДистрибутивовДляОтбора = Неопределено;
//	МассивФильтровДляОтбора = Неопределено;
//	МассивКонфигурацийЛицензийДляОтбора = Неопределено;	
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	МассивВидовИнстансовJIRAДляОтбора = Неопределено;
//	Если ИспользоватьРазделениеПоБизнесРегионамDeliveryPortal() Тогда 
//		МассивВидовИнстансовJIRAДляОтбора = ПолучитьВидыИнстансовJIRAПоВидуИнстансаDeliveryPortal(ИнстансDP);		
//	КонецЕсли;	
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	
//	ЭтоЗапросПоДистрибутиву = Ложь;
//	Если ЗначениеЗаполнено(componentCode) Тогда 
//		
//		ЭтоЗапросПоДистрибутиву = Истина;
//		
//		МассивДистрибутивов = OW_Дистрибутивы.ПолучитьДистрибутивыПоID_Sync(componentCode);
//		Если МассивДистрибутивов.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найден дистрибутив по " + componentCode + "",
//								"No component found for " + componentCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		Иначе							
//			// делаем отбор по клиенту
//			МассивДистрибутивовДляОтбора = МассивДистрибутивов;
//		КонецЕсли;	
//								
//	КонецЕсли;
//	
//	// данные по отборам
//	МассивfiltersCode 		= Неопределено;
//	
//	Если ЗначениеЗаполнено(filtersCode) Тогда	
//		МассивfiltersCode = CDT_РазложитьСтрокуВМассивПодстрок(filtersCode);
//	КонецЕсли;	
//	
//	Если МассивfiltersCode <> Неопределено Тогда   							
//		МассивФильтров = Новый Массив;
//		Для Каждого НаименованиеФильтра Из МассивfiltersCode Цикл
//			МассивНайденныхФильтров = OW_Дистрибутивы.ПолучитьФильтрыПоНаименованию(НаименованиеФильтра, Истина);
//			Для Каждого ТекНайденныйФильтр Из МассивНайденныхФильтров Цикл 
//				МассивФильтров.Добавить(ТекНайденныйФильтр);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивФильтровДляОтбора = МассивФильтров
//	КонецЕсли;
//	
//	
//	//++OW Копачев А.С. 25.03.2022 ONEC-7476 
//	Если ЗначениеЗаполнено(clientCode) Тогда
//		КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьИнстансКлиентаПоCDTClientCode(clientCode);
//		Если НЕ ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//			"Не найден клиент по " + clientCode + "",
//			"No client found for " + clientCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		Иначе							
//			// делаем отбор по клиенту
//			МассивКонфигурацийЛицензийДляОтбора = Новый Массив;	
//			МассивКонфигурацийЛицензийДляОтбора.Добавить(КонфигурацияЛицензий);
//		КонецЕсли;
//		//--OW Копачев А.С. 25.03.2022 ONEC-7476		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//				"ВЫБРАТЬ РАЗЛИЧНЫЕ
//				|	Дистрибутивы.Ссылка КАК Дистрибутив,
//				|	ЕСТЬNULL(КонфигурацииДистрибутивов.Фильтр, Неопределено) КАК Фильтр
//				|ИЗ
//				|	Справочник.Дистрибутивы КАК Дистрибутивы
//				//++OW Копачев А.С. 11.09.2020 ONEC-6012
//				//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонфигурацииДистрибутивов КАК КонфигурацииДистрибутивов
//				//|		ПО Дистрибутивы.Ссылка = КонфигурацииДистрибутивов.Дистрибутив
//				//|			И КонфигурацииДистрибутивов.Активный
//				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонфигурацииДистрибутивов.СрезПоследних(&НаДату,)  КАК КонфигурацииДистрибутивов
//				|		ПО Дистрибутивы.Ссылка = КонфигурацииДистрибутивов.Дистрибутив
//				|			И (КонфигурацииДистрибутивов.ДатаОкончания = ДАТАВРЕМЯ(1,1,1) 
//				|				ИЛИ КонфигурацииДистрибутивов.ДатаОкончания  >= &НаДату)
//				//--OW Копачев А.С. 11.09.2020 ONEC-6012
//				|ГДЕ
//				|	Дистрибутивы.ПометкаУдаления = ЛОЖЬ
//				|//#ОтборПоТолькоАктивным#	
//				|//#ОтборПоДистрибутивам#
//				|//#ОтборПоФильтрам#
//				//++OW Копачев А.С. 25.03.2022 ONEC-7476
//				|//#ОтборПоКонфигурациямЛицензий#
//				//--OW Копачев А.С. 25.03.2022 ONEC-7476
//				//++OW Копачев А.С. 31.03.2022 ONEC-7464
//				|//#ОтборПоВидамИнстансовJIRA#
//				//--OW Копачев А.С. 31.03.2022 ONEC-7464
//				|
//				|ИТОГИ ПО 
//				| Дистрибутивы.Ссылка";
//
//	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
//			
//	Если МассивДистрибутивовДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоДистрибутивам#", "И Дистрибутивы.Ссылка В (&МассивДистрибутивовДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивДистрибутивовДляОтбора", МассивДистрибутивовДляОтбора);
//	Иначе 
//		//++OW Копачев А.С. 11.09.2020 ONEC-6012
//		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоТолькоАктивным#", "И КонфигурацииДистрибутивов.Активный"); 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоТолькоАктивным#", "И (КонфигурацииДистрибутивов.ДатаОкончания = ДАТАВРЕМЯ(1,1,1) 
//																	|				ИЛИ КонфигурацииДистрибутивов.ДатаОкончания  >= &НаДату)");
//		//--OW Копачев А.С. 11.09.2020 ONEC-6012
//	КонецЕсли;	
//
//	Если МассивФильтровДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоФильтрам#", "И КонфигурацииДистрибутивов.Фильтр В (&МассивФильтровДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивФильтровДляОтбора", МассивФильтровДляОтбора);
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 25.03.2022 ONEC-7476 
//	Если МассивКонфигурацийЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий#", "И КонфигурацииДистрибутивов.КонфигурацияЛицензий В (&МассивКонфигурацийЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивКонфигурацийЛицензийДляОтбора", МассивКонфигурацийЛицензийДляОтбора);
//	КонецЕсли;
//	//--OW Копачев А.С. 25.03.2022 ONEC-7476
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	Если МассивВидовИнстансовJIRAДляОтбора <> Неопределено  Тогда	
//		//++OW Копачев А.С. 11.07.2022 ONEC-7756 
//		Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РазрешатьРаботатьСЛицензиямиКлиентовЧужогоСегмента) = Истина Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И (КонфигурацииДистрибутивов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора) ИЛИ КонфигурацииДистрибутивов.КонфигурацияЛицензий.Владелец.ВедениеКлиентаВДвухСистемах = ИСТИНА)"); 
//		Иначе	
//		//--OW Копачев А.С. 11.07.2022 ONEC-7756
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И КонфигурацииДистрибутивов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора)"); 
//		КонецЕсли;	
//		Запрос.УстановитьПараметр("МассивВидовИнстансовJIRAДляОтбора", МассивВидовИнстансовJIRAДляОтбора);
//	КонецЕсли;
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	
//	РезультатЗапроса = Запрос.Выполнить();		
//	
//	ВыборкаДистрибутивы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаДистрибутивы.Следующий() Цикл
//		
//		ДанныеПоДистрибутиву = Новый Структура;	
//		ДанныеПоДистрибутиву.Вставить("name",  	JIRA.НормализоватьСтроку(ВыборкаДистрибутивы.Дистрибутив.Наименование));
//		ДанныеПоДистрибутиву.Вставить("code", 	ВыборкаДистрибутивы.Дистрибутив.ID_Sync);
//		
//		МассивФильтров = Новый Массив;
//		ВыборкаФильтры = ВыборкаДистрибутивы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока ВыборкаФильтры.Следующий() Цикл
//			Если НЕ ЗначениеЗаполнено(ВыборкаФильтры.Фильтр) Тогда 
//				Продолжить;	
//			КонецЕсли;
//			
//			ДанныеПоФильтру = Новый Структура;	
//			ДанныеПоФильтру.Вставить("name",  JIRA.НормализоватьСтроку(ВыборкаФильтры.Фильтр.Наименование));
//            МассивФильтров.Добавить(ДанныеПоФильтру);
//		КонецЦикла;	
//			
//		ДанныеПоДистрибутиву.Вставить("filters",МассивФильтров);
//		Данные.Добавить(ДанныеПоДистрибутиву);
//	КонецЦикла;
//		
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоДистрибутиву Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;			
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеСпискаСтран(СтрокаJSON, ИнстансDP) Экспорт
//
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	countryCode	= Неопределено;
//		
//	Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		countryCode	= JIRA.ПолучитьПоле(ДанныеJSON,"country");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(countryCode) Тогда 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//
//	ЭтоЗапросПоСтране = Ложь;
//	
//	Если ЗначениеЗаполнено(countryCode) Тогда 
//		
//		ЭтоЗапросПоСтране = Истина;
//		
//		МассивСтран = OW_Дистрибутивы.ПолучитьСтраныПоNameEn(countryCode);
//		Если МассивСтран.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена страна по " + countryCode + "",
//								"No country found for " + countryCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//		Иначе							
//			// делаем отбор по стране
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//				"ВЫБРАТЬ 
//				|	СтраныМира.NameEN КАК NameEN,
//				|	СтраныМира.Наименование КАК Наименование
//				|ИЗ
//				|	Справочник.СтраныМира КАК СтраныМира
//				|ГДЕ
//				|	СтраныМира.ПометкаУдаления = ЛОЖЬ
//				|	И СтраныМира.Ссылка В (&МассивСтран)
//				|";
//
//			Запрос.УстановитьПараметр("МассивСтран", МассивСтран);
//						
//		КонецЕсли;
//								
//	Иначе
//			
//		// данные без отбора
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//			"ВЫБРАТЬ 
//			|	СтраныМира.NameEN КАК NameEN,
//			|	СтраныМира.Наименование КАК Наименование
//			|ИЗ
//			|	Справочник.СтраныМира КАК СтраныМира
//			|ГДЕ
//			|	СтраныМира.ПометкаУдаления = ЛОЖЬ
//			|";
//			
//	КонецЕсли;
//	
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока Выборка.Следующий() Цикл		
//			ДанныеПоЭлементу = Новый Структура;					
//			ДанныеПоЭлементу.Вставить("name",  	JIRA.НормализоватьСтроку(?(ЗначениеЗаполнено(Выборка.NameEN),Выборка.NameEN,Выборка.Наименование)));
//			
//			Данные.Добавить(ДанныеПоЭлементу);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоСтране Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;	
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеДанныхЛицензий(СтрокаJSON, ИнстансDP) Экспорт
//
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	licenseCode	= Неопределено;
//	clientCode = Неопределено;
//	
//	Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		//queryТекст		= JIRA.ПолучитьПоле(ДанныеJSON,"query");
//		
//		licenseCode	= JIRA.ПолучитьПоле(ДанныеJSON,"license");
//		clientCode		= JIRA.ПолучитьПоле(ДанныеJSON,"client");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(licenseCode)
//			И НЕ ЗначениеЗаполнено(clientCode)
//			//И НЕ ЗначениеЗаполнено(queryТекст) 
//			Тогда
//			 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//	МассивНоменклатурыЛицензийДляОтбора = Неопределено;
//	МассивКонфигурацийЛицензийДляОтбора = Неопределено;
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	МассивВидовИнстансовJIRAДляОтбора = Неопределено;
//	Если ИспользоватьРазделениеПоБизнесРегионамDeliveryPortal() Тогда 
//		МассивВидовИнстансовJIRAДляОтбора = ПолучитьВидыИнстансовJIRAПоВидуИнстансаDeliveryPortal(ИнстансDP);		
//	КонецЕсли;	
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//
//	ЭтоЗапросПоЛицензии = Ложь;	
//	Если ЗначениеЗаполнено(licenseCode) Тогда 
//		
//		ЭтоЗапросПоЛицензии = Истина;
//		
//		МассивНоменклатурыЛицензий = OW_Дистрибутивы.ПолучитьНоменклатуруПоPartNumber(licenseCode);
//		Если МассивНоменклатурыЛицензий.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена лицензия по " + licenseCode + "",
//								"No license found for " + licenseCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		МассивНоменклатурыЛицензийДляОтбора = МассивНоменклатурыЛицензий;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(clientCode) Тогда	
//		МассивclientsCode = CDT_РазложитьСтрокуВМассивПодстрок(clientCode);
//		
//		МассивКонфигурацийЛицензий = Новый Массив;
//		Для Каждого ТекущийClientCode Из МассивclientsCode Цикл
//			КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьИнстансКлиентаПоCDTClientCode(ТекущийClientCode);
//
//			Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда 
//				МассивКонфигурацийЛицензий.Добавить(КонфигурацияЛицензий);	
//			КонецЕсли;
//		КонецЦикла;
//		
//		МассивКонфигурацийЛицензийДляОтбора = МассивКонфигурацийЛицензий
//	КонецЕсли;
//
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|	СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|
//	|ПОМЕСТИТЬ ВТ_ЛицензииКлиентов
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|
//	|ГДЕ
//	|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//++OW Копачев А.С. 20.09.2021 ONEC-6781 
//	//?
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный <> Значение(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный.ПометкаУдаления = ЛОЖЬ
//	|  	И НЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДоговорЛицензионный.СтатусСоглашения, Значение(Перечисление.СтатусыСоглашений.ПустаяСсылка)) В (Значение(Перечисление.СтатусыСоглашений.Расторгнут), Значение(Перечисление.СтатусыСоглашений.Аннулирован))
//	//|  	И СпрЛицензииКлиентов.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) 
//	//--OW Копачев А.С. 20.09.2021 ONEC-6781
//	|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|   СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|ГДЕ
//	|   СпрЛицензииКлиентов.Ссылка В (&ЛицензииПоНеОтмененнымФазам)
//	|	И СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	|;
//	|
//	|ВЫБРАТЬ
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781	
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066 
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//	|	ВЫБОР
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//	|			ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 		ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|			ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//	|	КОНЕЦ КАК ДополнениеКНаименованиюПолное,
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber КАК PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ КАК ДатаОкончанияДействия,
//	|	СУММА(СпрЛицензииКлиентов.Количество) КАК Количество
//	|
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
//	|		ПО СпрЛицензииКлиентов.Номенклатура = СпрНоменклатура.Ссылка
//	|			И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицензииКлиентов КАК ВТ_ЛицензииКлиентов
//	|		ПО СпрЛицензииКлиентов.Ссылка = ВТ_ЛицензииКлиентов.Лицензия
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	|ГДЕ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781
//	// вынесли отбор списка лицензий выше во врем таблицу
//	//|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	//|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ И 
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	ВЫБОР
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 		ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|			ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка) И СпрЛицензииКлиентов.Родитель.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	
//	|//#ОтборПоЛицензиям#
//	|//#ОтборПоКонфигурациямЛицензий#
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	|//#ОтборПоВидамИнстансовJIRA#
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	|
//	|СГРУППИРОВАТЬ ПО
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066 
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,
//	|	ВЫБОР
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//	|			ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 		ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|			ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|		ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//	|	КОНЕЦ,
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ
//	|
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДополнениеКНаименованиюПолное
//	|";
//	
//	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ЛицензииПоНеОтмененнымФазам", РаботаСЛицензиями.ПолучитьЛицензииПоНеОтмененнымФазам());  //OW Копачев А.С. 13.08.2021 ONEC-6781 
//
//	Если МассивНоменклатурыЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиям#", "И СпрЛицензииКлиентов.Номенклатура В (&МассивНоменклатурыЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивНоменклатурыЛицензийДляОтбора", МассивНоменклатурыЛицензийДляОтбора);
//	КонецЕсли;
//	
//	Если МассивКонфигурацийЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий В (&МассивКонфигурацийЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивКонфигурацийЛицензийДляОтбора", МассивКонфигурацийЛицензийДляОтбора);
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	Если МассивВидовИнстансовJIRAДляОтбора <> Неопределено  Тогда	
//		//++OW Копачев А.С. 11.07.2022 ONEC-7756 
//		Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РазрешатьРаботатьСЛицензиямиКлиентовЧужогоСегмента) = Истина Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И (СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора) ИЛИ СпрЛицензииКлиентов.Владелец.ВедениеКлиентаВДвухСистемах = ИСТИНА)"); 
//		Иначе	
//		//--OW Копачев А.С. 11.07.2022 ONEC-7756
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора)"); 
//		КонецЕсли;	
//		Запрос.УстановитьПараметр("МассивВидовИнстансовJIRAДляОтбора", МассивВидовИнстансовJIRAДляОтбора);
//	КонецЕсли;
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		РезультатЗапроса = Запрос.Выполнить();
//			
//		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
//			
//		Пока Выборка.Следующий() Цикл		
//			ДанныеПоЭлементу = Новый Структура;					
//			ДанныеПоЭлементу.Вставить("name",	JIRA.НормализоватьСтроку(Выборка.ДополнениеКНаименованиюПолное));
//			ДанныеПоЭлементу.Вставить("code",	JIRA.НормализоватьСтроку(Выборка.PartNumber));
//			ДанныеПоЭлементу.Вставить("volume", Выборка.Количество);
//			
//			//++OW Копачев А.С. 15.10.2020 ONEC-6014			
//			ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия;
//			
//			ДатаОкончанияДействияСтрокой = "";
//			Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда 
//				ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//				ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//				ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);		
//			КонецЕсли;						
//			ДанныеПоЭлементу.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//			//--OW Копачев А.С. 15.10.2020 ONEC-6014
//				
//			Данные.Добавить(ДанныеПоЭлементу);	
//		КонецЦикла;
//	КонецЕсли;	
//		
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоЛицензии Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеДанныхЛицензийВРазрезеКлиентов(СтрокаJSON, ИнстансDP) Экспорт
//
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	licenseCode	= Неопределено;
//	clientCode = Неопределено;
//	maintained = Неопределено;
//	
//	Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		//queryТекст		= JIRA.ПолучитьПоле(ДанныеJSON,"query");
//		
//		licenseCode		= JIRA.ПолучитьПоле(ДанныеJSON,"license");
//		clientCode		= JIRA.ПолучитьПоле(ДанныеJSON,"client");
//		maintainedFlag	= JIRA.ПолучитьПоле(ДанныеJSON,"maintained");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(licenseCode)
//			И НЕ ЗначениеЗаполнено(clientCode)
//			И maintainedFlag = Неопределено
//			//И НЕ ЗначениеЗаполнено(queryТекст) 
//			Тогда
//			 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//	МассивНоменклатурыЛицензийДляОтбора = Неопределено;
//	МассивКонфигурацийЛицензийДляОтбора = Неопределено;
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	МассивВидовИнстансовJIRAДляОтбора = Неопределено;
//	Если ИспользоватьРазделениеПоБизнесРегионамDeliveryPortal() Тогда 
//		МассивВидовИнстансовJIRAДляОтбора = ПолучитьВидыИнстансовJIRAПоВидуИнстансаDeliveryPortal(ИнстансDP);		
//	КонецЕсли;	
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	
//	ЭтоЗапросПоЛицензии = Ложь;	
//	Если ЗначениеЗаполнено(licenseCode) Тогда 
//		
//		ЭтоЗапросПоЛицензии = Истина;
//		
//		МассивНоменклатурыЛицензий = OW_Дистрибутивы.ПолучитьНоменклатуруПоPartNumber(licenseCode);
//		Если МассивНоменклатурыЛицензий.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена лицензия по " + licenseCode + "",
//								"No license found for " + licenseCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		МассивНоменклатурыЛицензийДляОтбора = МассивНоменклатурыЛицензий;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(clientCode) Тогда	
//		МассивclientsCode = CDT_РазложитьСтрокуВМассивПодстрок(clientCode);
//		
//		МассивКонфигурацийЛицензий = Новый Массив;
//		Для Каждого ТекущийClientCode Из МассивclientsCode Цикл
//			КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьИнстансКлиентаПоCDTClientCode(ТекущийClientCode);
//
//			Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда 
//				МассивКонфигурацийЛицензий.Добавить(КонфигурацияЛицензий);	
//			КонецЕсли;
//		КонецЦикла;
//		
//		МассивКонфигурацийЛицензийДляОтбора = МассивКонфигурацийЛицензий
//	КонецЕсли;
//	
//	Если maintainedFlag <> Неопределено Тогда	
//		Попытка
//			maintainedFlag = Булево(maintainedFlag);
//		Исключение
//		КонецПопытки;	
//	КонецЕсли;
//
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|	СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|
//	|ПОМЕСТИТЬ ВТ_ЛицензииКлиентов
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|
//	|ГДЕ
//	|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//++OW Копачев А.С. 20.09.2021 ONEC-6781 
//	//?
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный <> Значение(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный.ПометкаУдаления = ЛОЖЬ
//	|  	И НЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДоговорЛицензионный.СтатусСоглашения, Значение(Перечисление.СтатусыСоглашений.ПустаяСсылка)) В (Значение(Перечисление.СтатусыСоглашений.Расторгнут), Значение(Перечисление.СтатусыСоглашений.Аннулирован))
//	//|  	И СпрЛицензииКлиентов.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) 
//	//--OW Копачев А.С. 20.09.2021 ONEC-6781
//	|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|   СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|ГДЕ
//	|   СпрЛицензииКлиентов.Ссылка В (&ЛицензииПоНеОтмененнымФазам)
//	|	И СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	|;
//	|
//	|ВЫБРАТЬ
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781	
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//	|	ВЫБОР 
//	|		КОГДА ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь) = ИСТИНА
//	|			ТОГДА ВЫБОР
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//	|					ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 				ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|					ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//	|			КОНЕЦ
//	|       ИНАЧЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,"""")
//	|	КОНЕЦ КАК ДополнениеКНаименованиюПолное,
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber КАК PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ КАК ДатаОкончанияДействия,
//	|	СУММА(СпрЛицензииКлиентов.Количество) КАК Количество,
//	|
//	| 	СпрЛицензииКлиентов.КонфигурацияЛицензий,
//	//++OW Копачев А.С. 25.01.2022 ONEC-6451 
//	//|	МАКСИМУМ(ВЫБОР 
//	//|		КОГДА ЕСТЬNULL(СпрЛицензииКлиентов.ПакетСопровождения.Статус,ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.НаСопровождении)
//	//|				И СпрЛицензииКлиентов.ПакетСопровождения.Сумма >= 0 
//	//|		 ТОГДА ИСТИНА
//	//|		ИНАЧЕ ЛОЖЬ
//	//|	КОНЕЦ) КАК ЛицензияНаСопровождении
//	|	МАКСИМУМ(СпрЛицензииКлиентов.ЛицензияНаСопровождении) КАК ЛицензияНаСопровождении
//	//--OW Копачев А.С. 25.01.2022 ONEC-6451
//	|
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
//	|		ПО СпрЛицензииКлиентов.Номенклатура = СпрНоменклатура.Ссылка
//	|			И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицензииКлиентов КАК ВТ_ЛицензииКлиентов
//	|		ПО СпрЛицензииКлиентов.Ссылка = ВТ_ЛицензииКлиентов.Лицензия
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	|ГДЕ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781
//	// вынесли отбор списка лицензий выше во врем таблицу
//	//|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	//|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ И 
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	ВЫБОР
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 		ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|			ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка) И СпрЛицензииКлиентов.Родитель.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	
//	|//#ОтборПоЛицензиям#
//	|//#ОтборПоЛицензиямНаСопровождении#
//	|//#ОтборПоКонфигурациямЛицензий#
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	|//#ОтборПоВидамИнстансовJIRA#
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//	|
//	|СГРУППИРОВАТЬ ПО
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,
//	|	ВЫБОР 
//	|		КОГДА ЕСТЬNULL(СпрНоменклатура.КоличественнаяЛицензия, Ложь) = ИСТИНА
//	|			ТОГДА ВЫБОР
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//	|					ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 				ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|					ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//	|				ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//	|			КОНЕЦ
//	|       ИНАЧЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,"""")
//	|	КОНЕЦ,
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ
//	|
//	|	,СпрЛицензииКлиентов.КонфигурацияЛицензий
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДополнениеКНаименованиюПолное
//	|
//	|ИТОГИ ПО 
//	|	СпрЛицензииКлиентов.КонфигурацияЛицензий
//	|";
//	
//	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ЛицензииПоНеОтмененнымФазам", РаботаСЛицензиями.ПолучитьЛицензииПоНеОтмененнымФазам());  //OW Копачев А.С. 13.08.2021 ONEC-6781 
//
//	Если МассивНоменклатурыЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиям#", "И СпрЛицензииКлиентов.Номенклатура В (&МассивНоменклатурыЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивНоменклатурыЛицензийДляОтбора", МассивНоменклатурыЛицензийДляОтбора);
//	КонецЕсли;
//	
//	Если МассивКонфигурацийЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий В (&МассивКонфигурацийЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивКонфигурацийЛицензийДляОтбора", МассивКонфигурацийЛицензийДляОтбора);
//	КонецЕсли;
//	
//	//++OW Копачев А.С. 31.03.2022 ONEC-7464
//	Если МассивВидовИнстансовJIRAДляОтбора <> Неопределено  Тогда	
//		//++OW Копачев А.С. 11.07.2022 ONEC-7756 
//		Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РазрешатьРаботатьСЛицензиямиКлиентовЧужогоСегмента) = Истина Тогда
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И (СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора) ИЛИ СпрЛицензииКлиентов.Владелец.ВедениеКлиентаВДвухСистемах = ИСТИНА)"); 
//		Иначе	
//		//--OW Копачев А.С. 11.07.2022 ONEC-7756
//			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоВидамИнстансовJIRA#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий.ВидИнстансJIRA В (&МассивВидовИнстансовJIRAДляОтбора)"); 
//		КонецЕсли;	
//		Запрос.УстановитьПараметр("МассивВидовИнстансовJIRAДляОтбора", МассивВидовИнстансовJIRAДляОтбора);
//	КонецЕсли;
//	//--OW Копачев А.С. 31.03.2022 ONEC-7464
//		
//	Если maintainedFlag <> Неопределено Тогда 
//		//++OW Копачев А.С. 25.01.2022 ONEC-6451 
//		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиямНаСопровождении#", "И ВЫБОР 
//		//																				|		КОГДА ЕСТЬNULL(СпрЛицензииКлиентов.ПакетСопровождения.Статус,ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетаСопровождения.НаСопровождении)
//		//																				|				И СпрЛицензииКлиентов.ПакетСопровождения.Сумма >= 0 
//		//																				|		 ТОГДА ИСТИНА
//		//																				|		ИНАЧЕ ЛОЖЬ
//		//																				|	КОНЕЦ = &ЛицензияНаСопровождении"); 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиямНаСопровождении#", "И СпрЛицензииКлиентов.ЛицензияНаСопровождении = &ЛицензияНаСопровождении"); 
//
//		//--OW Копачев А.С. 25.01.2022 ONEC-6451
//		Запрос.УстановитьПараметр("ЛицензияНаСопровождении", maintainedFlag);
//	КонецЕсли;
//	
//			
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		ВыборкаПоКонфигурацииЛицензий = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		
//		Пока ВыборкаПоКонфигурацииЛицензий.Следующий() Цикл
//			ДанныеПоКонфигурацииЛицензий = Новый Структура;
//			
//			CDTClientCodeИнстанса = "";
//			КонфигурацияЛицензий = ВыборкаПоКонфигурацииЛицензий.КонфигурацияЛицензий;
//			Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
//				CDTClientCodeИнстанса = КонфигурацияЛицензий.FaxNumber; 
//				
//				Если ПустаяСтрока(CDTClientCodeИнстанса) Тогда 
//					CDTClientCodeИнстанса = КонфигурацияЛицензий.Владелец.FaxNumber;
//				КонецЕсли;
//			КонецЕсли;
//			
//			ДанныеПоКонфигурацииЛицензий.Вставить("client",	CDTClientCodeИнстанса);
//			ДанныеПоКонфигурацииЛицензий.Вставить("licenses", Новый Массив);
//						
//			Выборка = ВыборкаПоКонфигурацииЛицензий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//			Пока Выборка.Следующий() Цикл		
//				ДанныеПоЭлементу = Новый Структура;					
//				ДанныеПоЭлементу.Вставить("name",		JIRA.НормализоватьСтроку(Выборка.ДополнениеКНаименованиюПолное));
//				ДанныеПоЭлементу.Вставить("code",		JIRA.НормализоватьСтроку(Выборка.PartNumber));
//				ДанныеПоЭлементу.Вставить("volume", 	Выборка.Количество);
//				ДанныеПоЭлементу.Вставить("maintained", Выборка.ЛицензияНаСопровождении);
//				
//				//++OW Копачев А.С. 15.10.2020 ONEC-6014			
//				ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия;
//				
//				ДатаОкончанияДействияСтрокой = "";
//				Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда 
//					ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//					ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//					ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);		
//				КонецЕсли;						
//				ДанныеПоЭлементу.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//				//--OW Копачев А.С. 15.10.2020 ONEC-6014
//
//				ДанныеПоКонфигурацииЛицензий["licenses"].Добавить(ДанныеПоЭлементу);		
//			КонецЦикла;					
//			
//			Данные.Добавить(ДанныеПоКонфигурацииЛицензий);
//
//		КонецЦикла;
//	КонецЕсли;	
//		
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоЛицензии Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция СТАРЫЙ_ОбработатьЗапросНаПолучениеДанныхЛицензий_СТАРЫЙ(СтрокаJSON, ВыводитьВРазрезеКлиентов = Ложь) Экспорт
//
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	licenseCode	= Неопределено;
//	clientCode = Неопределено;
//	
//	Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		//queryТекст		= JIRA.ПолучитьПоле(ДанныеJSON,"query");
//		
//		licenseCode	= JIRA.ПолучитьПоле(ДанныеJSON,"license");
//		clientCode		= JIRA.ПолучитьПоле(ДанныеJSON,"client");
//
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(licenseCode)
//			И НЕ ЗначениеЗаполнено(clientCode)
//			//И НЕ ЗначениеЗаполнено(queryТекст) 
//			Тогда
//			 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//	МассивНоменклатурыЛицензийДляОтбора = Неопределено;
//	МассивКонфигурацийЛицензийДляОтбора = Неопределено;
//	
//	ЭтоЗапросПоЛицензии = Ложь;	
//	Если ЗначениеЗаполнено(licenseCode) Тогда 
//		
//		ЭтоЗапросПоЛицензии = Истина;
//		
//		МассивНоменклатурыЛицензий = OW_Дистрибутивы.ПолучитьНоменклатуруПоPartNumber(licenseCode);
//		Если МассивНоменклатурыЛицензий.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найдена лицензия по " + licenseCode + "",
//								"No license found for " + licenseCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		МассивНоменклатурыЛицензийДляОтбора = МассивНоменклатурыЛицензий;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(clientCode) Тогда	
//		МассивclientsCode = CDT_РазложитьСтрокуВМассивПодстрок(clientCode);
//		
//		МассивКонфигурацийЛицензий = Новый Массив;
//		Для Каждого ТекущийClientCode Из МассивclientsCode Цикл
//			КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьИнстансКлиентаПоCDTClientCode(ТекущийClientCode);
//
//			Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда 
//				МассивКонфигурацийЛицензий.Добавить(КонфигурацияЛицензий);	
//			КонецЕсли;
//		КонецЦикла;
//		
//		МассивКонфигурацийЛицензийДляОтбора = МассивКонфигурацийЛицензий
//	КонецЕсли;
//
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|	СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|
//	|ПОМЕСТИТЬ ВТ_ЛицензииКлиентов
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|
//	|ГДЕ
//	|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//++OW Копачев А.С. 20.09.2021 ONEC-6781 
//	//?
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный <> Значение(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
//	|  	И СпрЛицензииКлиентов.ДоговорЛицензионный.ПометкаУдаления = ЛОЖЬ
//	|  	И НЕ ЕСТЬNULL(СпрЛицензииКлиентов.ДоговорЛицензионный.СтатусСоглашения, Значение(Перечисление.СтатусыСоглашений.ПустаяСсылка)) В (Значение(Перечисление.СтатусыСоглашений.Расторгнут), Значение(Перечисление.СтатусыСоглашений.Аннулирован))
//	//|  	И СпрЛицензииКлиентов.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) 
//	//--OW Копачев А.С. 20.09.2021 ONEC-6781
//	|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|   СпрЛицензииКлиентов.Ссылка КАК Лицензия
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|ГДЕ
//	|   СпрЛицензииКлиентов.Ссылка В (&ЛицензииПоНеОтмененнымФазам)
//	|	И СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	|;
//	|
//	|ВЫБРАТЬ
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781	
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066 
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
//	|	//#ПолеПолноеНаименованиеЛицензии# КАК ДополнениеКНаименованиюПолное,
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber КАК PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ КАК ДатаОкончанияДействия,
//	|	СУММА(СпрЛицензииКлиентов.Количество) КАК Количество
//	|
//	|//#ВыборкаВРазрезеКлиентов#
//	|
//	|ИЗ
//	|	Справочник.ЛицензииКлиентов КАК СпрЛицензииКлиентов
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
//	|		ПО СпрЛицензииКлиентов.Номенклатура = СпрНоменклатура.Ссылка
//	|			И (СпрНоменклатура.ПометкаУдаления = ЛОЖЬ)
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781 
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛицензииКлиентов КАК ВТ_ЛицензииКлиентов
//	|		ПО СпрЛицензииКлиентов.Ссылка = ВТ_ЛицензииКлиентов.Лицензия
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	|ГДЕ
//	//++OW Копачев А.С. 13.08.2021 ONEC-6781
//	// вынесли отбор списка лицензий выше во врем таблицу
//	//|	СпрЛицензииКлиентов.ПометкаУдаления = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.Аннулирован = ЛОЖЬ
//	//|	И (СпрЛицензииКлиентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1) ИЛИ СпрЛицензииКлиентов.ДатаОкончанияДействия >= &НачалоДня)
//	//|	И СпрЛицензииКлиентов.НеКуплена = ЛОЖЬ
//	//|	И СпрЛицензииКлиентов.НеПринятоКП = ЛОЖЬ И 
//	//--OW Копачев А.С. 13.08.2021 ONEC-6781
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	ВЫБОР
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//	|	 		ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//	|			ТОГДА СпрЛицензииКлиентов.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка) И СпрЛицензииКлиентов.Родитель.Родитель <> Значение(Справочник.ЛицензииКлиентов.ПустаяСсылка)
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	
//	|//#ОтборПоЛицензиям#
//	|//#ОтборПоКонфигурациямЛицензий#
//	|
//	|СГРУППИРОВАТЬ ПО
//	//++OW Копачев А.С. 28.10.2020 ONEC-6066 
//	//|	СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное,
//	|	//#ПолеПолноеНаименованиеЛицензии# ,
//	//--OW Копачев А.С. 28.10.2020 ONEC-6066
//	|	СпрЛицензииКлиентов.Номенклатура.PartNumber,
//	|	ВЫБОР 
//	|		КОГДА СпрЛицензииКлиентов.Временная 
//	|			ТОГДА СпрЛицензииКлиентов.ДатаОкончанияДействия
//	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
//	|	КОНЕЦ
//	|
//	|//#ВыборкаВРазрезеКлиентов#
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ДополнениеКНаименованиюПолное
//	|
//	|//#ИтогиВРазрезеКлиентов#
//	|";
//	
//	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ЛицензииПоНеОтмененнымФазам", РаботаСЛицензиями.ПолучитьЛицензииПоНеОтмененнымФазам());  //OW Копачев А.С. 13.08.2021 ONEC-6781 
//
//	Если МассивНоменклатурыЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЛицензиям#", "И СпрЛицензииКлиентов.Номенклатура В (&МассивНоменклатурыЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивНоменклатурыЛицензийДляОтбора", МассивНоменклатурыЛицензийДляОтбора);
//	КонецЕсли;
//	
//	Если МассивКонфигурацийЛицензийДляОтбора <> Неопределено Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоКонфигурациямЛицензий#", "И СпрЛицензииКлиентов.КонфигурацияЛицензий В (&МассивКонфигурацийЛицензийДляОтбора)"); 
//		Запрос.УстановитьПараметр("МассивКонфигурацийЛицензийДляОтбора", МассивКонфигурацийЛицензийДляОтбора);
//	КонецЕсли;
//
//	Если ВыводитьВРазрезеКлиентов = Истина Тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ВыборкаВРазрезеКлиентов#", ", СпрЛицензииКлиентов.КонфигурацияЛицензий"); 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ИтогиВРазрезеКлиентов#", " ИТОГИ ПО СпрЛицензииКлиентов.КонфигурацияЛицензий"); 
//	
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ПолеПолноеНаименованиеЛицензии#", " СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное"); 	
//	Иначе
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ПолеПолноеНаименованиеЛицензии#", " 	
//			|	ВЫБОР
//			|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Licence)
//			|			ТОГДА СпрЛицензииКлиентов.Номенклатура.Наименование
//			|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.OptionGroup)
//			|	 		ТОГДА СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//			|		КОГДА СпрЛицензииКлиентов.ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.ТипыЛицензий.Option)
//			|			ТОГДА СпрЛицензииКлиентов.Родитель.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Родитель.Номенклатура.Наименование + "" - "" + СпрЛицензииКлиентов.Номенклатура.Наименование
//			|		ИНАЧЕ СпрЛицензииКлиентов.ДополнениеКНаименованиюПолное
//			|	КОНЕЦ");
//		
//	КонецЕсли;	
//
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Если ВыводитьВРазрезеКлиентов Тогда 
//			ВыборкаПоКонфигурацииЛицензий = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//			
//			Пока ВыборкаПоКонфигурацииЛицензий.Следующий() Цикл
//				ДанныеПоКонфигурацииЛицензий = Новый Структура;
//				
//				CDTClientCodeИнстанса = "";
//				КонфигурацияЛицензий = ВыборкаПоКонфигурацииЛицензий.КонфигурацияЛицензий;
//				Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
//					CDTClientCodeИнстанса = КонфигурацияЛицензий.FaxNumber; 
//					
//					Если ПустаяСтрока(CDTClientCodeИнстанса) Тогда 
//						CDTClientCodeИнстанса = КонфигурацияЛицензий.Владелец.FaxNumber;
//					КонецЕсли;
//				КонецЕсли;
//				
//				ДанныеПоКонфигурацииЛицензий.Вставить("client",	CDTClientCodeИнстанса);
//				ДанныеПоКонфигурацииЛицензий.Вставить("licenses", Новый Массив);
//							
//				Выборка = ВыборкаПоКонфигурацииЛицензий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//				
//				Пока Выборка.Следующий() Цикл		
//					ДанныеПоЭлементу = Новый Структура;					
//					ДанныеПоЭлементу.Вставить("name",	JIRA.НормализоватьСтроку(Выборка.ДополнениеКНаименованиюПолное));
//					ДанныеПоЭлементу.Вставить("code",	JIRA.НормализоватьСтроку(Выборка.PartNumber));
//					ДанныеПоЭлементу.Вставить("volume", Выборка.Количество);
//					
//					//++OW Копачев А.С. 15.10.2020 ONEC-6014			
//					ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия;
//					
//					ДатаОкончанияДействияСтрокой = "";
//					Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда 
//						ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//						ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//						ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);		
//					КонецЕсли;						
//					ДанныеПоЭлементу.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//					//--OW Копачев А.С. 15.10.2020 ONEC-6014
//
//					ДанныеПоКонфигурацииЛицензий["licenses"].Добавить(ДанныеПоЭлементу);		
//				КонецЦикла;					
//				
//				Данные.Добавить(ДанныеПоКонфигурацииЛицензий);
//
//			КонецЦикла;
//		Иначе
//			Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
//				
//			Пока Выборка.Следующий() Цикл		
//				ДанныеПоЭлементу = Новый Структура;					
//				ДанныеПоЭлементу.Вставить("name",	JIRA.НормализоватьСтроку(Выборка.ДополнениеКНаименованиюПолное));
//				ДанныеПоЭлементу.Вставить("code",	JIRA.НормализоватьСтроку(Выборка.PartNumber));
//				ДанныеПоЭлементу.Вставить("volume", Выборка.Количество);
//				
//				//++OW Копачев А.С. 15.10.2020 ONEC-6014			
//				ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия;
//				
//				ДатаОкончанияДействияСтрокой = "";
//				Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда 
//					ДатаОкончанияДействия = OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ДатаОкончанияДействия, 1);
//					ДатаОкончанияДействия = УниверсальноеВремя(ДатаОкончанияДействия);
//					ДатаОкончанияДействияСтрокой =  OW_ОбщегоНазначенияКлиентСервер.ПреробразоватьДатуВUnixTime(ДатаОкончанияДействия);		
//				КонецЕсли;						
//				ДанныеПоЭлементу.Вставить("valid_to", ДатаОкончанияДействияСтрокой);
//				//--OW Копачев А.С. 15.10.2020 ONEC-6014
//					
//				Данные.Добавить(ДанныеПоЭлементу);	
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;	
//		
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоЛицензии Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Функция ОбработатьЗапросНаПолучениеСпискаФильтров(СтрокаJSON, ИнстансDP) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	filterCode	= Неопределено;
//	componentsCode	= Неопределено;
//	
//	ЭтоЗапросПоФильтру = Ложь;
//	
//	Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" Тогда 
//		
//		// чтение JSON
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//		Если ДанныеJSON = Неопределено Тогда 
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"));	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//		
//			
//		// чтение данных 		
//		filterCode	= JIRA.ПолучитьПоле(ДанныеJSON,"filter");
//		componentsCode	= JIRA.ПолучитьПоле(ДанныеJSON,"components");
//		
//		Если НЕ ПустаяСтрока(СтрокаJSON) И СтрокаJSON <> "{}" 
//			И НЕ ЗначениеЗаполнено(filterCode)
//			И НЕ ЗначениеЗаполнено(componentsCode)
//			Тогда 
//			
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных("en"), 400);	
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	
//	Иначе
//		//ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		//Возврат СтруктураВозврата;	
//	КонецЕсли;	
//	
//	Данные = Новый Массив;
//	МассивФильтровДляОтбора = Неопределено;	
//	МассивДистрибутивовДляОтбора = Неопределено;
//	
//	Если ЗначениеЗаполнено(filterCode) Тогда 
//		
//		ЭтоЗапросПоФильтру = Истина;
//		
//		МассивФильтров = OW_Дистрибутивы.ПолучитьФильтрыПоНаименованию(filterCode, Истина);
//					
//		МассивФильтровДляОтбора = МассивФильтров;
//		
//		Если МассивФильтровДляОтбора.Количество() = 0 Тогда  
//			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//								"Не найден фильтр по " + filterCode + "",
//								"No filter found for " + filterCode + "", "Все");
//			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, 404);
//			Возврат СтруктураВозврата;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(componentsCode) Тогда 
//		МассивcomponentsCode = CDT_РазложитьСтрокуВМассивПодстрок(componentsCode);
//		
//		МассивДистрибутивов = Новый Массив;
//		Для Каждого ТекcomponentCode Из МассивcomponentsCode Цикл
//			МассивНайденныхДистрибутивов = OW_Дистрибутивы.ПолучитьДистрибутивыПоID_Sync(ТекcomponentCode);
//			Для Каждого ТекНайденныйДистрибутив Из МассивНайденныхДистрибутивов Цикл 
//				МассивДистрибутивов.Добавить(ТекНайденныйДистрибутив);	
//			КонецЦикла;	
//		КонецЦикла;
//		
//		МассивДистрибутивовДляОтбора = МассивДистрибутивов;			
//	КонецЕсли;
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |	Фильтры.Наименование КАК Наименование
//	               |ИЗ
//	               |	Справочник.Фильтры КАК Фильтры
//	               |ГДЕ
//	               |	Фильтры.ПометкаУдаления = ЛОЖЬ	
//				   |//#ОтборПоФильтрам#
//				   |//#ОтборПоДистрибутивам#
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//	               |	Фильтры.Наименование
//	               |АВТОУПОРЯДОЧИВАНИЕ";
//	
//	Если МассивФильтровДляОтбора <> Неопределено Тогда  
//		
//		// делаем отбор
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоФильтрам#", "И Фильтры.Ссылка В (&МассивФильтров)"); 
//		Запрос.УстановитьПараметр("МассивФильтров", МассивФильтровДляОтбора);
//	КонецЕсли;
//	
//	Если  МассивДистрибутивовДляОтбора <> Неопределено Тогда   
//		
//		// делаем отбор
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоДистрибутивам#", "И Фильтры.Владелец В (&МассивДистрибутивов)"); 
//		Запрос.УстановитьПараметр("МассивДистрибутивов", МассивДистрибутивовДляОтбора);	
//	КонецЕсли;
//	
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока Выборка.Следующий() Цикл		
//			ДанныеПоЭлементу = Новый Структура;					
//			ДанныеПоЭлементу.Вставить("name",  				Выборка.Наименование);	
//			
//			Данные.Добавить(ДанныеПоЭлементу);
//		КонецЦикла;		
//	КонецЕсли;
//	
//	Если СтруктураВозврата.ЕстьОшибки Тогда 
//		Сообщить(СтруктураВозврата.ТекстОшибки);
//	КонецЕсли;
//	
//	Если ЭтоЗапросПоФильтру Тогда 
//		Если Данные.Количество() > 0 Тогда 
//			СтруктураВозврата.Данные = Данные[0];	
//		Иначе
//			СтруктураВозврата.Данные = "{}";
//		КонецЕсли;	
//	Иначе
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
///// ----- JIRA OWS ----- 
//
//Функция ОбработатьЗапросНаПолучениеПлановогоВремениРаботы(СтрокаJSON) Экспорт
//	
//	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
//	
//	dateFrom	= Неопределено;
//	dateTo		= Неопределено;
//	user 		= Неопределено;
//		
//	Если ПустаяСтрока(СтрокаJSON)Тогда
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеПустойПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;	
//	
//	// чтение JSON
//	ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSON, Истина);
//	Если ДанныеJSON = Неопределено Тогда 
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНекорректныйПакетДанных());	
//		Возврат СтруктураВозврата;
//	КонецЕсли;
//		
//	// чтение данных 		
//	dateFrom	= JIRA.ПолучитьПоле(ДанныеJSON,"dateFrom");	
//	dateTo		= JIRA.ПолучитьПоле(ДанныеJSON,"dateTo");
//	user		= JIRA.ПолучитьПоле(ДанныеJSON,"user");
//	
//	// ДатаНачала
//	ДатаНачала = Неопределено;
//	Попытка
//		ДатаНачала = Jira.ПреобразоватьДату(dateFrom);	
//	Исключение
//	КонецПопытки;	
//	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не определена дата по полю (dateFrom = " + dateFrom + ")",
//							"No date found for field (dateFrom = " + dateFrom + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	КонецЕсли;
//	
//	// ДатаОкончания
//	ДатаОкончания = Неопределено;
//	Попытка
//		ДатаОкончания = Jira.ПреобразоватьДату(dateTo);	
//	Исключение
//	КонецПопытки;	
//	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не определена дата по полю (dateTo = " + dateTo + ")",
//							"No date found for field (dateTo = " + dateTo + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	КонецЕсли;
//	
//	// пользователь 
//	Пользователь = Неопределено;
//	Если ЗначениеЗаполнено(user) Тогда 
//		Пользователь = OW.ПолучитьЮзераПоЛогину(user)
//	КонецЕсли;	
//	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда 
//		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(
//							"Не определен пользователь по полю (user = " + user + ")",
//							"No user found for field (user = " + user + ")", "Все");
//		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки);
//	КонецЕсли;	
//		
//	// Обработка данных
//	Если СтруктураВозврата.ЕстьОшибки = Ложь Тогда 
//		
//		Данные = Новый Массив;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//			"ВЫБРАТЬ
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень КАК ПериодДень,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер КАК Офицер,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.НаправлениеДеятельности КАК НаправлениеДеятельности,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.КодПроектаJIRA КАК КодПроектаJIRA,
//			|	СУММА(ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Значение) КАК Значение,
//			|	СУММА(ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ЗначениеПлан) КАК ЗначениеПлан,
//			|	СУММА(ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасов) КАК РабочихЧасов
//			|ИЗ
//			|	РегистрСведений.ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням КАК ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням
//			|ГДЕ
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.РабочихЧасов > 0
//			|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер = &Офицер
//			|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень МЕЖДУ &ДатаНачала И &ДатаОкончания
//			//++OW Копачев А.С. 05.10.2022 ONEC-8000 
//			//|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда.КлассификаторКоманды = &КлассификаторКоманды
//			|	И (ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда.КлассификаторКоманды = &КлассификаторКоманды
//			|		ИЛИ ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда.РазрешитьПередачуПлановойВовлеченностиПоСотрудникамВJiraRND = Истина)
//			//--OW Копачев А.С. 05.10.2022 ONEC-8000
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.КодПроектаJIRA,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.НаправлениеДеятельности,
//			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	ПериодДень,
//			|	Офицер,
//			|	КодПроектаJIRA,
//			|	НаправлениеДеятельности
//			|АВТОУПОРЯДОЧИВАНИЕ";
//		
//		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
//		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
//		Запрос.УстановитьПараметр("Офицер", Пользователь);
//		
//		// для R&D
//		КлассификаторКоманды = Справочники.КлассификаторКоманд.RandD;
//
//		Запрос.УстановитьПараметр("КлассификаторКоманды", КлассификаторКоманды);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Выборка = РезультатЗапроса.Выбрать();
//			
//		Пока Выборка.Следующий() Цикл
//			ДанныеПоЭлементу = Новый Структура;					
//			ДанныеПоЭлементу.Вставить("date", JIRA.НормализоватьДату(Выборка.ПериодДень));	
//			ДанныеПоЭлементу.Вставить("user", JIRA.НормализоватьСтроку(Выборка.Офицер.Login));
//			//ДанныеПоЭлементу.Вставить("groupAD", JIRA.НормализоватьСтроку(Выборка.Команда.ГруппаAD));
//			
//			ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(Выборка.КодПроектаJIRA); 
//			ДанныеПоЭлементу.Вставить("project", ОпределитьПроектПоНомеруЗадачи(Выборка.КодПроектаJIRA));
//			ДанныеПоЭлементу.Вставить("activity", JIRA.НормализоватьСтроку(Выборка.НаправлениеДеятельности));
//			
//			РабочихДней = Окр(Выборка.РабочихЧасов/8, 3);
//			//ДанныеПоЭлементу.Вставить("md", JIRA.НормализоватьЧисло(РабочихДней));
//			ДанныеПоЭлементу.Вставить("md", РабочихДней);
//						
//			Данные.Добавить(ДанныеПоЭлементу);
//		КонецЦикла;
//		
//		СтруктураВозврата.Данные = Данные;
//	КонецЕсли;	
//		
//	Возврат СтруктураВозврата;
//		
//КонецФункции
//
//////////////////////////////////////////////////////////////////////////////////
//// Вспомогательные функции
//
//Функция ТаблицаЗначенийВТаблицуHTML(ТабЗначений,СтруктураПараметрыТаблицыHTML = Неопределено, ЭкранироватьТэги = Истина) Экспорт
//	
//	//СтруктураПараметрыТаблицыHTML
//	//
//	//Общие параметры:
//	//СтруктураПараметрыТаблицыHTML.ШиринаТаблицы - общая ширина таблица
//	//СтруктураПараметрыТаблицыHTML.ЦветШапки - цвет шапки таблицы пример "eadbaf"
//	//СтруктураПараметрыТаблицыHTML.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
//	//
//	//Индивиуальные для каждой колонки:
//	//СтруктураПараметрыТаблицыHTML.Заголовок1 - заголовок для первой колонки, цифра на конце обознает номер колонки (не с нуля)
//	//СтруктураПараметрыТаблицыHTML.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
//	//СтруктураПараметрыТаблицыHTML.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
//	
//	//ТабЗначений = Новый ТаблицаЗначений;
//	МассивИменКолонок = Новый Массив;
//	
//	Если ТипЗнч(СтруктураПараметрыТаблицыHTML) <> Тип("Структура") Тогда
//		СтруктураПараметрыТаблицыHTML = Новый Структура;
//	КонецЕсли;
//				
//	КоличествоКолонок = ТабЗначений.Колонки.Количество();
//	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыHTML.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыHTML.ПунктПорядкуИспользуется,ЛОЖЬ);	
//	
//	Если КоличествоКолонок < 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//			
//	ЦветШапки = ?(СтруктураПараметрыТаблицыHTML.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыHTML.ЦветШапки + """","");
//	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыHTML.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыHTML.ШиринаТаблицы + "px""",""); 
//	ТаблицаHTML = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
//				|<tbody>
//				|<tr>";
//	
//	//Первым выводим столбик П/П если он задан в шапку
//	Если ПунктПорядкуИспользуется Тогда
//		ТаблицаHTML = ТаблицаHTML + "
//				|<td" + ЦветШапки + " style=""width:30px"" align=""center"">№</td>";	
//	КонецЕсли;
//	
//	//Формируем шапку
//	Для Счетчик = 1 по КоличествоКолонок Цикл
//		ИмяСвойстваШирина = "Ширина" + Счетчик;
//		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыHTML.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыHTML[ИмяСвойстваШирина] + "px""","");
//		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;
//		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
//		ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыHTML.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыHTML[ИмяСвойстваЗаголовок],ИмяКолонки);
//		ТаблицаHTML = ТаблицаHTML + " 
//				|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
//		МассивИменКолонок.Добавить(ИмяКолонки);
//	КонецЦикла;
//	ТаблицаHTML = ТаблицаHTML + "
//				|</tr>";
//	
//	//Заполняем таблицу	
//	ПунктПорядку = 0;
//	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
//		ПунктПорядку = ПунктПорядку + 1;
//		ТаблицаHTML = ТаблицаHTML + "
//				|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
//		Для Счетчик = 0 по КоличествоКолонок - 1 Цикл
//			ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
//			Положение = " align=""" + ?(СтруктураПараметрыТаблицыHTML.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыHTML[ИмяСвойстваПоложение],"left") + """";
//			
//			Значение = OW_ОбменДанными.ЭкранироватьСимволыДляHTML(СтрокаТаблицы[МассивИменКолонок[Счетчик]], Истина, ЭкранироватьТэги);
//			ТаблицаHTML = ТаблицаHTML + "
//				|<td " + Положение + ">" + Значение + "</td>";			
//		КонецЦикла;				
//		ТаблицаHTML = ТаблицаHTML + "
//				|</tr>";
//	КонецЦикла;	
//	
//	ТаблицаHTML = ТаблицаHTML + " 
//				|</tbody>
//				|</table>";
//	
//	Возврат ТаблицаHTML;
//
//	
//	
//	//// ПРИМЕР ИСПОЛЬЗОВАНИЯ
//	//тзОшибокОбъектКопия = тзОшибокОбъект.Скопировать();
//	//Параметры = Новый Структура;   
//	//Параметры.Вставить("ПунктПорядкуИспользуется",ИСТИНА);
//	//Параметры.Вставить("ШиринаТаблицы","800");
//	//Параметры.Вставить("ЦветШапки","eadbaf");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "Дата", 					Параметры, 1, "Date", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "Партнер", 				Параметры, 2, "Customer", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "ТаскID",				Параметры, 3, "Task ID", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "Таск_IDOWS",			Параметры, 4, "Task ID (OWS)", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "ПользовательСсылка", 	Параметры, 5, "User", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "MD", 					Параметры, 6, "MD", , "center");
//	//OW_ОбменДанными.ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(тзОшибокОбъектКопия, "Ошибка", 				Параметры, 7, "Description", 300);
//	//ОписаниеТаблицыHTML = OW_ОбменДанными.ТаблицаЗначенийВТаблицуHTML(тзОшибокОбъектКопия,Параметры);
//	//
//	//ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + ОписаниеТаблицыHTML; 
//	//
//КонецФункции
//
//Процедура ПодготовитьКолонкуТаблицыЗначенийДляВыгрузкиВHTML(ТаблицаЗначений, ИмяКолонки, ПараметрыHTML, ПорядокСледования, Заголовок = Неопределено, Ширина = Неопределено, Положение = Неопределено) Экспорт
//	
//	Колонки = ТаблицаЗначений.Колонки;
//	
//	ТекКолонка = Колонки.Найти(ИмяКолонки);	
//	Если ТекКолонка = Неопределено Тогда 
//		Возврат
//	КонецЕсли;
//	
//	ИмяКолонки = ТекКолонка.Имя;
//	ТекКолонка.Имя = "Column" + ПорядокСледования;
//	
//	// сместим колонку исходя из порядка следования
//	ИндексКолонки = Колонки.Индекс(ТекКолонка);
//	СмещениеКолонки = ПорядокСледования-1 - ИндексКолонки;
//	Если СмещениеКолонки <> 0 Тогда 
//		Колонки.Сдвинуть(ТекКолонка, ПорядокСледования)
//	КонецЕсли;
//	
//	Если Заголовок <> Неопределено Тогда 
//		ПараметрыHTML.Вставить("Заголовок"+ПорядокСледования, Заголовок);
//	Иначе	
//		ПараметрыHTML.Вставить("Заголовок"+ПорядокСледования, ИмяКолонки);
//	КонецЕсли;
//	
//	Если Ширина <> Неопределено Тогда 
//		ПараметрыHTML.Вставить("Ширина"+ПорядокСледования, Ширина);			
//	КонецЕсли;
//	
//	Если Положение <> Неопределено Тогда 
//		ПараметрыHTML.Вставить("Положение"+ПорядокСледования, Положение);			
//	КонецЕсли;
//		
//КонецПроцедуры
//
//Функция ЭкранироватьСимволыДляHTML(Знач Текст, ЭкранироватьСпецсимволы = Ложь, ЭкранироватьТэги = Истина) Экспорт
//	
//	Если ЭкранироватьТэги Тогда
//		Текст = СтрЗаменить(Текст, "&", "&amp;");
//		Текст = СтрЗаменить(Текст, "<", "&lt;");
//		Текст = СтрЗаменить(Текст, ">", "&gt;");
//		Текст = СтрЗаменить(Текст, "«", "&laquo;");
//		Текст = СтрЗаменить(Текст, "»", "&raquo;");
//		//Текст = СтрЗаменить(Текст, "'", "&apos;");
//		Текст = СтрЗаменить(Текст, """", "&quot;");
//		Текст = СтрЗаменить(Текст, "¢", "&cent;");
//		Текст = СтрЗаменить(Текст, "£", "&pound;");
//		Текст = СтрЗаменить(Текст, "¥", "&yen;");
//		Текст = СтрЗаменить(Текст, "€", "&euro;");
//	КонецЕсли;
//	
//	// спецсимволы https://www.ou.edu/research/electron/internet/special.shtml
//	Если ЭкранироватьСпецсимволы Тогда 
//		Текст = СтрЗаменить(Текст, "À", "&Agrave;");
//		Текст = СтрЗаменить(Текст, "Á", "&Aacute;");
//		Текст = СтрЗаменить(Текст, "Â", "&Acirc;");
//		Текст = СтрЗаменить(Текст, "Ã", "&Atilde;");
//		Текст = СтрЗаменить(Текст, "Ä", "&Auml;");
//		Текст = СтрЗаменить(Текст, "Å", "&Aring;");
//		Текст = СтрЗаменить(Текст, "à", "&agrave;");
//		Текст = СтрЗаменить(Текст, "á", "&aacute;");
//		Текст = СтрЗаменить(Текст, "â", "&acirc;");
//		Текст = СтрЗаменить(Текст, "ã", "&atilde;");
//		Текст = СтрЗаменить(Текст, "ä", "&auml;");
//		Текст = СтрЗаменить(Текст, "å", "&aring;");
//		Текст = СтрЗаменить(Текст, "Æ", "&AElig;");
//		Текст = СтрЗаменить(Текст, "æ", "&aelig;");
//		Текст = СтрЗаменить(Текст, "ß", "&szlig;");
//		Текст = СтрЗаменить(Текст, "Ç", "&Ccedil;");
//		Текст = СтрЗаменить(Текст, "ç", "&ccedil;");
//		
//		Текст = СтрЗаменить(Текст, "È", "&Egrave;");
//		Текст = СтрЗаменить(Текст, "É", "&Eacute;");
//		Текст = СтрЗаменить(Текст, "Ê", "&Ecirc;");
//		Текст = СтрЗаменить(Текст, "Ë", "&Euml;");
//		Текст = СтрЗаменить(Текст, "è", "&egrave;");
//		Текст = СтрЗаменить(Текст, "é", "&eacute;");
//		Текст = СтрЗаменить(Текст, "ê", "&ecirc;");
//		Текст = СтрЗаменить(Текст, "ë", "&euml;");
//		Текст = СтрЗаменить(Текст, "ƒ", "&#131;");
//		Текст = СтрЗаменить(Текст, "Ì", "&Igrave;");
//		Текст = СтрЗаменить(Текст, "Í", "&Iacute;");
//		Текст = СтрЗаменить(Текст, "Î", "&Icirc;");
//		Текст = СтрЗаменить(Текст, "Ï", "&Iuml;");
//		Текст = СтрЗаменить(Текст, "ì", "&igrave;");
//		Текст = СтрЗаменить(Текст, "í", "&iacute;");
//		Текст = СтрЗаменить(Текст, "î", "&icirc;");
//		Текст = СтрЗаменить(Текст, "ï", "&iuml;");
//		
//		Текст = СтрЗаменить(Текст, "Ñ", "&Ntilde;");
//		Текст = СтрЗаменить(Текст, "ñ", "&ntilde;");
//		Текст = СтрЗаменить(Текст, "Ò", "&Ograve;");
//		Текст = СтрЗаменить(Текст, "Ó", "&Oacute;");
//		Текст = СтрЗаменить(Текст, "Ô", "&Ocirc;");
//		Текст = СтрЗаменить(Текст, "Õ", "&Otilde;");
//		Текст = СтрЗаменить(Текст, "Ö", "&Ouml;");
//		Текст = СтрЗаменить(Текст, "ò", "&ograve;");
//		Текст = СтрЗаменить(Текст, "ó", "&oacute;");
//		Текст = СтрЗаменить(Текст, "ô", "&ocirc;");
//		Текст = СтрЗаменить(Текст, "õ", "&otilde;");
//		Текст = СтрЗаменить(Текст, "ö", "&ouml;");
//		Текст = СтрЗаменить(Текст, "Ø", "&Oslash;");
//		Текст = СтрЗаменить(Текст, "ø", "&oslash;");
//		Текст = СтрЗаменить(Текст, "Œ", "&#140;");
//		Текст = СтрЗаменить(Текст, "œ", "&#156;");
//		Текст = СтрЗаменить(Текст, "Š", "&#138;");
//		
//		Текст = СтрЗаменить(Текст, "š", "&#154;");
//		Текст = СтрЗаменить(Текст, "Ù", "&Ugrave;");
//		Текст = СтрЗаменить(Текст, "Ú", "&Uacute;");
//		Текст = СтрЗаменить(Текст, "Û", "&Ucirc;");
//		Текст = СтрЗаменить(Текст, "Ü", "&Uuml;");
//		Текст = СтрЗаменить(Текст, "ù", "&ugrave;");
//		Текст = СтрЗаменить(Текст, "ú", "&uacute;");
//		Текст = СтрЗаменить(Текст, "û", "&ucirc;");
//		Текст = СтрЗаменить(Текст, "ü", "&uuml;");
//		Текст = СтрЗаменить(Текст, "µ", "&#181;");
//		Текст = СтрЗаменить(Текст, "×", "&#215;");
//		Текст = СтрЗаменить(Текст, "Ý", "&Yacute;");
//		Текст = СтрЗаменить(Текст, "Ÿ", "&#159;");
//		Текст = СтрЗаменить(Текст, "ý", "&yacute;");
//		Текст = СтрЗаменить(Текст, "ÿ", "&yuml;");
//		
//		Текст = СтрЗаменить(Текст, "°", "&#176;");
//		Текст = СтрЗаменить(Текст, "†", "&#134;");
//		Текст = СтрЗаменить(Текст, "‡", "&#135;");
//		Текст = СтрЗаменить(Текст, "±", "&#177;");
//		Текст = СтрЗаменить(Текст, "¿", "&#191;");
//		Текст = СтрЗаменить(Текст, "¡", "&#161;");
//		Текст = СтрЗаменить(Текст, "·", "&#183;");
//		Текст = СтрЗаменить(Текст, "•", "&#149;");
//		Текст = СтрЗаменить(Текст, "™", "&#153;");
//		Текст = СтрЗаменить(Текст, "©", "&copy;");
//		Текст = СтрЗаменить(Текст, "®", "&reg;");
//		Текст = СтрЗаменить(Текст, "§", "&#167;");
//		Текст = СтрЗаменить(Текст, "¶", "&#182;");
//
//		Текст = СтрЗаменить(Текст, "’", "&rsquo;");
//	КонецЕсли;
//	
//	Возврат Текст 
//КонецФункции
//
//Функция ИнициализироватьСтруктутруВозврата() Экспорт
//	
//	СтруктураВозврата = Новый Структура("Данные, ЕстьОшибки, ТекстОшибки, ТекстОшибкиEn, КодСостояния", Неопределено, Ложь, "", "", 200);
//
//	Возврат СтруктураВозврата;
//	
//КонецФункции
//
//Процедура ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, КодСостояния = Неопределено) Экспорт
//	
//	СтруктураВозврата.КодСостояния 	= ?(КодСостояния = Неопределено, 400, КодСостояния);
//	СтруктураВозврата.ЕстьОшибки 	= Истина;
//
//	ТекстОшибкиRU = НСтр(ТекстОшибки, "ru"); 
//	ТекстОшибкиEN = НСтр(ТекстОшибки, "en");
//	
//	ТекстОшибкиRU = ?(ПустаяСтрока(ТекстОшибкиRU), ТекстОшибки, ТекстОшибкиRU); 
//	ТекстОшибкиEN = ?(ПустаяСтрока(ТекстОшибкиEN), ТекстОшибки, ТекстОшибкиEN);
//	
//	СтруктураВозврата.ТекстОшибки 	= СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибки, ТекстОшибкиRU, ";");
//	СтруктураВозврата.ТекстОшибкиEN = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибкиEN, ТекстОшибкиEN, ";");
//	
//КонецПроцедуры
//
//Функция CDT_РазобратьПроизвольныйЗапрос(СтрокаQuery)
//	//Если передается строка с происзвольным запросом, разбираем ее.
//	//	Пример:
//	//	query=components=A|B|C&components=D|E&countries=CO1|CO2&components=F|!G&components=X
//	//Логически строка транслируется в такое выражение:
//    //	( component = A || component = B || component = C ) && ( component = D || component = E ) && ( country = C01 || country = C02 ) && ( component = F || component  != G ) && component = X
//
//	ЕстьОшибки = Ложь;
//	
//	ДанныеИзЗапроса = Новый ТаблицаЗначений;
//	ДанныеИзЗапроса.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
//	ДанныеИзЗапроса.Колонки.Добавить("Данные", Новый ОписаниеТипов("ТаблицаЗначений"));
//	
//	РазделительПараметров = CDT_РазделительПараметров();
//	МассивПараметровСоЗначениями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаQuery, РазделительПараметров); 
//	
//	Для Каждого ТекПараметрСоЗначением Из  МассивПараметровСоЗначениями Цикл
//		
//		СимволОкончанияПараметра = Найти(ТекПараметрСоЗначением, "=");
//		Если СимволОкончанияПараметра = 0 Тогда 
//			ВызватьИсключение ИсключениеНекорректныйПакетДанных("en");
//		КонецЕсли;
//		
//		ИмяПараметра = Лев(ТекПараметрСоЗначением, СимволОкончанияПараметра-1);
//			
//		ЗначениеПараметра = Сред(ТекПараметрСоЗначением, СимволОкончанияПараметра + 1);	
//			
//		CDT_ДобавитьЗначенияПараметровВДанные(ИмяПараметра, ЗначениеПараметра, ДанныеИзЗапроса);
//		
//	КонецЦикла;
//	
//	Возврат ДанныеИзЗапроса;
//	
//КонецФункции
//
//Процедура CDT_ДобавитьЗначенияПараметровВДанные(ИмяПараметра, ЗначениеСтрокой, ТЗ_ДанныеИзЗапроса)
//		
//	ДанныеПараметра = Новый ТаблицаЗначений;
//	ДанныеПараметра.Колонки.Добавить("ИмяПараметраСНомером", Новый ОписаниеТипов("Строка"));
//	ДанныеПараметра.Колонки.Добавить("ЗначениеСтрокой", Новый ОписаниеТипов("Строка"));
//	ДанныеПараметра.Колонки.Добавить("МассивЗначений");          // тип массив, если хотя бы одно значние передали, иначе - НЕОПРЕДЕЛЕНО
//	ДанныеПараметра.Колонки.Добавить("МассивЗначенийИсключений"); // тип массив, если хотя бы одно значние передали, иначе - НЕОПРЕДЕЛЕНО
//	
//	МассивВсехЗначенийПераметра = CDT_РазложитьСтрокуВМассивПодстрок(ЗначениеСтрокой);
//	
//	МассивЗначений = Неопределено;
//	МассивЗначенийИсключений = Неопределено;
//	
//	СимволИсключениеЗначенияПараметра = CDT_СимволИсключениеЗначенияПараметра();
//	
//	Для Каждого ТекЗначение Из МассивВсехЗначенийПераметра Цикл
//		Если Сред(ТекЗначение, 1,СтрДлина(СимволИсключениеЗначенияПараметра)) = СимволИсключениеЗначенияПараметра Тогда 
//			Если МассивЗначенийИсключений = Неопределено Тогда 
//				МассивЗначенийИсключений = Новый Массив;
//			КонецЕсли;
//			МассивЗначенийИсключений.Добавить(Сред(ТекЗначение, СтрДлина(СимволИсключениеЗначенияПараметра) + 1));				
//		Иначе
//			Если МассивЗначений = Неопределено Тогда 
//				МассивЗначений = Новый Массив;
//			КонецЕсли;
//			МассивЗначений.Добавить(ТекЗначение);	
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	
//	СтрокаДанных = ТЗ_ДанныеИзЗапроса.Найти(ИмяПараметра, "ИмяПараметра");
//	Если СтрокаДанных = Неопределено Тогда
//		СтрокаДанных = ТЗ_ДанныеИзЗапроса.Добавить();
//		СтрокаДанных.ИмяПараметра 		= ИмяПараметра;
//		СтрокаДанных.Данные 			= ДанныеПараметра;
//	КонецЕсли;	
//	
//	ДанныеПараметра = СтрокаДанных.Данные;	
//	НомерПараметра = ДанныеПараметра.Количество() + 1;		
//	
//	НовСтрокаДанных = ДанныеПараметра.Добавить();
//	НовСтрокаДанных.ИмяПараметраСНомером = ИмяПараметра + НомерПараметра;
//	НовСтрокаДанных.ЗначениеСтрокой = ЗначениеСтрокой;
//	НовСтрокаДанных.МассивЗначений = МассивЗначений;
//	НовСтрокаДанных.МассивЗначенийИсключений = МассивЗначенийИсключений;
//	
//КонецПроцедуры	
//
//Функция CDT_РазложитьСтрокуВМассивПодстрок(Знач Стр)
//	
//	массивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр,"|");
//	
//	Возврат массивСтрок;
//КонецФункции	
//
//Функция CDT_НормализоватьСтрокуВходящихДанных (Знач Стр) Экспорт
//	СтрНов	= СтрЗаменить(Стр, "+"," ");
//	Возврат СтрНов; 		
//КонецФункции
//
//Функция CDT_РазделительПараметров () Экспорт
//	Возврат "&"; 		
//КонецФункции
//
//Функция CDT_СимволИсключениеЗначенияПараметра () Экспорт
//	Возврат "!"; 		
//КонецФункции
//
//Функция ОпределитьПроектПоНомеруЗадачи(НомерЗадачи) Экспорт
//	
//	НомерСимволаТире = СтрНайти(НомерЗадачи, "-");
//	Если НомерСимволаТире > 0 Тогда
//		Возврат JIRA.ОпределитьПроектПоНомеруЗадачи(НомерЗадачи);
//	Иначе
//		Возврат НомерЗадачи;
//	КонецЕсли; 
//КонецФункции
//
//Функция ПолучитьЧасовойПоясПоПредставлению(ПредставлениеЧасовогоПояса) Экспорт
//	
//	ЧасовойПояс = Неопределено;
//		
//	МассивДопустимыхЧасовыхПоясов = ПолучитьДопустимыеЧасовыеПояса();
//	Если МассивДопустимыхЧасовыхПоясов.Найти(ПредставлениеЧасовогоПояса) <> Неопределено Тогда
//	
//		Смещение = СмещениеСтандартногоВремени(ПредставлениеЧасовогоПояса, ТекущаяДатаСеанса());	
//		Если ТипЗнч(Смещение) = Тип("Число") Тогда 
//			
//			ЧасовойПояс = Смещение / 3600;
//			
//		КонецЕсли;
//	Иначе
//		
//		Сообщить("Not find TimeZone: " + ПредставлениеЧасовогоПояса);
//		
//		// по представлению не нашли, ищем в исключениях
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения = Новый Соответствие;
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("America/Bogota", -5);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Almaty", 6);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Bangkok", 7);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Dubai", 4);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Ho_Chi_Minh", 7);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Jakarta", 7);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Kuala_Lumpur", 8);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Makassar", 8);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Asia/Nicosia",3);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Athens", 3);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Brussels", 2);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Kiev", 2);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Luxembourg", 2);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Nicosia", 2);
//		СоотвествиеПредставленияЧасовогоПоясаИСмещения.Вставить("Europe/Riga", 3);
//		
//		ЧасовойПояс = СоотвествиеПредставленияЧасовогоПоясаИСмещения.Получить(ПредставлениеЧасовогоПояса);	
//		
//	КонецЕсли;
//	
//	Возврат ЧасовойПояс;
//	
//КонецФункции	
//
//////////////////////////////////////////////////////////////////////////////////
//// функции исключения
//
//Функция ИсключениеПустойПакетДанных(КодЯзыка = "Все") Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Пустой пакет данных",  "Empty data packet", КодЯзыка);
//
//КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()
//
//Функция ИсключениеНекорректныйПакетДанных(КодЯзыка = "Все") Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Некорректный пакет данных",  "Invalid data packet", КодЯзыка);
//
//КонецФункции // ИсключениеНекорректныйПакетДанных()
//
//Функция ИсключениеНетДанныхДляОтправки() Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Нет данных для отправки",  "No data to send", "Все");
//
//КонецФункции // ИсключениеНекорректныйПакетДанных()
//
//Функция ИсключениеНеверныйТипДанныхДляОтправки() Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный тип данных для отправки",  "Wrong data type to send", "Все");
//
//КонецФункции // ИсключениеНекорректныйПакетДанных()
//
//Функция ИсключениеНеверныйПолучательДанных() Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный получатель данных",  "Invalid data recipient", "Все");
//
//КонецФункции // ИсключениеНекорректныйПакетДанных()
//
//Функция ИсключениеДанныеНеОтправлены() Экспорт
//	
//	Возврат OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Данные не отправлены",  "Data not sent", "Все");
//
//КонецФункции // ИсключениеНекорректныйПакетДанных()
//
//
//
