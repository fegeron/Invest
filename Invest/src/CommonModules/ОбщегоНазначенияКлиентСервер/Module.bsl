////////////////////////////////////////////////////////////////////////////////
// Клиентские и серверные процедуры общего назначения


///////////////////////////////////////////////////////////////////
// РАБОТА С СООБЩЕНИЯМИ
/////////////////////////////////////////////////////////////////// 

// СообщитьПользователю
// 	Формирует и выводит сообщение, которое может быть связано с элементом 
// 	управления формы.
//
// Параметры:
//		ТекстСообщенияПользователю	- Строка - текст сообщения.
//		Поле						- Строка - наименование реквизита формы
//		ПутьКДанным					- Строка - путь к данным (путь к реквизиту формы)
//		ОбъектИлиСсылка				- Ссылка на объект ИБ или объект
//  Отказ                      		- Булево - Выходной параметр
//                             		  Всегда устанавливается в значение Истина
//
Процедура СообщитьПользователю(ТекстСообщенияПользователю = "", Поле = "", ПутьКДанным = "", ОбъектИлиСсылка = Неопределено, Отказ = Ложь) Экспорт 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СокрЛП(ТекстСообщенияПользователю);
	Сообщение.Поле = Поле;
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Если ОбъектИлиСсылка <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектИлиСсылка);
		#Если Сервер Тогда		
		Если ОбъектИлиСсылка.Ссылка = ОбъектИлиСсылка Тогда
			Сообщение.КлючДанных = ОбъектИлиСсылка;
		КонецЕсли;	
		#КонецЕсли
	КонецЕсли;
	
    Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьПользователю

Функция ЛокализованнаяСтрока(Русский, Английский, КодЯзыка = "") Экспорт
	Русский = СтрЗаменить(Русский, "'", "");
	Английский = СтрЗаменить(Английский, "'", "");
	
	ТекстСтроки = "ru = '"+ Русский +"'; en = '"+ Английский +"'";
	Если ПустаяСтрока(КодЯзыка) Тогда 
		//  выдаваться на языке, определенного для текущего пользователя
		ТекстСтроки = НСтр(ТекстСтроки);
	ИначеЕсли НРег(КодЯзыка) = НРег("Все") Тогда 
		// строка со всеми языками
	Иначе	
		// строка на конкретном языке
		ТекстСтроки = НСтр(ТекстСтроки, КодЯзыка);
	КонецЕсли;	
	
	Возврат ТекстСтроки;	
КонецФункции

///////////////////////////////////////////////////////////////////
// РАБОТА С ДАТАМИ
/////////////////////////////////////////////////////////////////// 

Функция ПустаяДата() Экспорт
	Возврат Дата(1,1,1);	
КонецФункции

// РазностьДат
// 	вычисляет разность между переданными датами
// Параметры:
//	Дата1 - ДатаВремя
//	Дата2 - ДатаВремя
//	ТипРазрядности - строка - варианты ГОД, МЕСЯЦ, НЕДЕЛЯ, ДЕНЬ, ЧАС, МИНУТА, СЕКУНДА
// Возвращаемое значение: 
//	Число
Функция РазностьДат(Дата1, Дата2, ТипРазрядности) Экспорт
	
	Результат = 0;
	
	Если Дата1 <> Дата2 Тогда
		
		Если ВРег(ТипРазрядности) = "ГОД" Тогда
			
			Результат = Год(Дата2) - Год(Дата1);
			
		ИначеЕсли ВРег(ТипРазрядности) = "МЕСЯЦ" Тогда
			
			Результат = Месяц(Дата2) - Месяц(Дата1) + РазностьДат(Дата1, Дата2, "ГОД") * 12;
			
		ИначеЕсли ВРег(ТипРазрядности) = "ДЕНЬ" Тогда
			
			Результат = (НачалоДня(Дата2) - НачалоДня(Дата1)) / 86400;
			
		ИначеЕсли ВРег(ТипРазрядности) = "НЕДЕЛЯ" Тогда
			
			Результат = (НачалоНедели(Дата2) - НачалоНедели(Дата1)) / (86400 * 7);
			
		ИначеЕсли ВРег(ТипРазрядности) = "ЧАС" Тогда
			
			Результат = (НачалоЧаса(Дата2) - НачалоЧаса(Дата1)) / 3600;
			
		ИначеЕсли ВРег(ТипРазрядности) = "МИНУТА" Тогда
			
			Результат = (НачалоМинуты(Дата2) - НачалоМинуты(Дата1)) / 60;
			
		ИначеЕсли ВРег(ТипРазрядности) = "СЕКУНДА" Тогда
			
			Результат = Дата2 - Дата1;
			
		Иначе
			
			ВызватьИсключение "Неизвестный тип разрядности '" + ТипРазрядности + "'";
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции // глРазностьДат 

// ДобавитьДень
// 	Добавляет (или вычитает) к указанной дате заданное число дней.
// Параметры:
//	ИсходнаяДата - ДатаВремя
//	ЧислоДней - Количество дней, которое необходимо добавить к исходной дате. 
//				Если принимает отрицательное значение, то число дней вычитается
// Возвращаемое значение: 
//	Дата
Функция ДобавитьДень(ИсходнаяДата, ЧислоДней) Экспорт
	
	Возврат (ИсходнаяДата + СуткиВСекундах() * ЧислоДней);

КонецФункции

// СуткиВСекундах
//  Возвращает количество секунд в сутках
Функция СуткиВСекундах() Экспорт
	Возврат 86400;
КонецФункции

Функция УбратьЛишниеПробелы(Стр) Экспорт
	
	Возврат СокрЛП(Стр);
	
КонецФункции

// Функция возвращает дату в формате unixtime
Функция ПреробразоватьДатуВUnixTime(Дата1С) Экспорт 
	Возврат Формат(Дата1С - Дата(1970,1,1,0,0,0), "ЧГ=0");
КонецФункции
 
// Функция переводит unixtime в дату в формате 1С
Функция ПреобразоватьUnixTimeВДату(UnixTime) Экспорт
	Возврат Дата(1970,1,1,0,0,0) + Число(Лев(UnixTime, 10));
КонецФункции

///////////////////////////////////////////////////////////////////
// КОПИРОВАНИЕ И ДОПОЛНЕНИЕ
/////////////////////////////////////////////////////////////////// 

// ДополнитьТаблицу
//	Дополняет таблицу значений-приемник данными из таблицы значений-источник
//
// Параметры:
//  ТаблицаИсточник - Таблица значений - таблица из которой будут браться строки для заполнения
//  ТаблицаПриемник - Таблица значений - таблица в которую будут добавлены строки из таблицы-источника
//  
Процедура ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник) Экспорт
	
	Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// СкопироватьРекурсивно
//	Создает копию экземпляра указанного объекта.
//
// Параметры:
// 	Источник - Произвольный - объект, который необходимо скопировать.
//
// Возвращаемое значение:
// 	Произвольный - копия объекта, переданного в параметре Источник.
//
// Примечание:
//  Функцию нельзя использовать для объектных типов (СправочникОбъект, ДокументОбъект и т.п.).
Функция СкопироватьРекурсивно(Знач Источник) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	//@skip-check org.eclipse.xtext.diagnostics.Diagnostic.Syntax
	Если ТипИсточника = Тип("Структура") Тогда
		
		Приемник = СкопироватьСтруктуру(Источник);
		
	ИначеЕсли ТипИсточника = Тип("Соответствие") Тогда
		
		Приемник = СкопироватьСоответствие(Источник);
		
	ИначеЕсли ТипИсточника = Тип("Массив") Тогда
		
		Приемник = СкопироватьМассив(Источник);
		
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		
		Приемник = СкопироватьСписокЗначений(Источник);
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	ИначеЕсли ТипИсточника = Тип("ТаблицаЗначений")
			ИЛИ ТипИсточника = Тип("ДеревоЗначений") Тогда
			
		Приемник = Источник.Скопировать();
		
	#КонецЕсли
	
	Иначе
		
		Приемник = Источник;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции // СкопироватьРекурсивно

// СкопироватьСтруктуру
// 	Создает копию значения типа Структура.
//
// Параметры:
// 	СтруктураИсточник – Структура – копируемая структура.
// 
// Возвращаемое значение:
// 	Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
		
	КонецЦикла;
		
	Возврат СтруктураРезультат;
	
КонецФункции // СкопироватьСтруктуру

// СкопироватьСоответствие
//	Создает копию значения типа Соответствие.
//
// Параметры:
// 	СоответствиеИсточник – Соответствие - соответствие, копию которого необходимо получить.
//
// Возвращаемое значение:
// 	Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение));
		
	КонецЦикла;
	
	Возврат СоответствиеРезультат;

КонецФункции // СкопироватьСоответствие

///////////////////////////////////////////////////////////////////
// СПИСКИ / МАССИВЫ
/////////////////////////////////////////////////////////////////// 

// ЗначениеВМассиве
//	Создает массив и помещает в него переданное значение
// Параметры:
//	Значение, ЗначениеN - произвольное значение
// Возвращаемое значение:
//	Массив
Функция ЗначениеВМассиве(Значение, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Если НЕ Значение2 = Неопределено Тогда
		
		Массив.Добавить(Значение2);
		
	КонецЕсли; 
	
	Если НЕ Значение3 = Неопределено Тогда
		
		Массив.Добавить(Значение3);
		
	КонецЕсли; 
	
	Если НЕ Значение4 = Неопределено Тогда
		
		Массив.Добавить(Значение4);
		
	КонецЕсли; 
	
	Если НЕ Значение5 = Неопределено Тогда
		
		Массив.Добавить(Значение5);
		
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции // ЗначениеВМассиве

// ЗначениеВСписке
//	Создает Список значений и помещает в него переданное значение
// Параметры:
//	Значение, ЗначениеN - произвольное значение
// Возвращаемое значение:
//	Список значений
Функция ЗначениеВСписке(Значение, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено) Экспорт
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(ЗначениеВМассиве(Значение, Значение2, Значение3, Значение4, Значение5));
	
	Возврат Список;
	
КонецФункции // ЗначениеВСписке

// СпискиЗначенийИдентичны
//	Сравнивает элементы списков значений или массивов по значениям
// Параметры:
//	Список1 - Массив / СписокЗначений
//	Список2 - Массив / СписокЗначений
// Возвращаемое значение:
//	булево
Функция СпискиЗначенийИдентичны(Список1, Список2) Экспорт
	
	СпискиИдентичны = Истина;
	
	Для Каждого ЭлементСписка1 Из Список1 Цикл
		
		Если НайтиВСписке(Список2, ЭлементСписка1) = Неопределено Тогда
			
			СпискиИдентичны = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СпискиИдентичны Тогда
		
		Для Каждого ЭлементСписка2 Из Список2 Цикл
			
			Если НайтиВСписке(Список1, ЭлементСписка2) = Неопределено Тогда
				
				СпискиИдентичны = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СпискиИдентичны;
	
КонецФункции // СпискиЗначенийИдентичны

// НайтиВСписке
//	выполняет поиск элемента в коллекции: списке значений или массиве
// Параметры:
//	Список - Массив / СписокЗначений
//	Элемент - произвольное значение / ЭлементСпискаЗначений
// Возвращаемое значение:
//	произвольное значение
Функция НайтиВСписке(Список, Элемент) Экспорт
	
	ЭлементВСписке = Неопределено;
	
	Если ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		
		Если ТипЗнч(Элемент) = Тип("ЭлементСпискаЗначений") Тогда
			
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент.Значение);
			
		Иначе
			
			ЭлементВСписке = Список.НайтиПоЗначению(Элемент);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Список) = Тип("Массив")  Тогда
		
		ЭлементВСписке = Список.Найти(Элемент);
		
	КонецЕсли;
	
	Возврат ЭлементВСписке;
	
КонецФункции // НайтиВСписке

// ДобавитьЗначениеВМассив
//	процедура, для добавления в массив значений 
// Параметры:
//	Коллекция [массив]
//	Значение [произвольное значение]
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина
//
Процедура ДобавитьЗначениеВМассив(Коллекция, Значение, КонтрольУникальности = Истина) Экспорт 
	
	Если Не КонтрольУникальности Или Коллекция.Найти(Значение) = Неопределено Тогда
		Коллекция.Добавить(Значение);
	КонецЕсли;
		
КонецПроцедуры // ДобавитьЗначениеВМассив

// ДобавитьЗначениеВСписок
//	процедура, для добавления в список значений 
// Параметры:
//	Коллекция [список]
//	Значение [произвольное значение]
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина
//
Процедура ДобавитьЗначениеВСписок(Коллекция, Значение, КонтрольУникальности = Истина) Экспорт 
	
	Если Не КонтрольУникальности Или Коллекция.НайтиПоЗначению(Значение) = Неопределено Тогда
		Коллекция.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗначениеВСписок

// ДобавитьЗначениеВКоллекцию
//	процедура, для добавления в произвольную коллекцию (массив или список) 
// Параметры:
//	Коллекция [список/массив]
//	Значение [произвольное значение]
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина
//
Процедура ДобавитьЗначениеВКоллекцию(Коллекция, Значение, КонтрольУникальности = Истина) Экспорт 
	
	Тип = ТипЗнч(Коллекция);
	
	Если Тип = Тип("СписокЗначений") Тогда
		
		ДобавитьЗначениеВСписок(Коллекция, Значение, КонтрольУникальности);
		
	ИначеЕсли Тип = Тип("Массив") Тогда
		
		ДобавитьЗначениеВМассив(Коллекция, Значение, КонтрольУникальности);
		
	Иначе 
		
		ВызватьИсключение "В процедуру ДобавитьЗначениеВКоллекцию передана коллекция неверного типа: " + Тип;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗначениеВКоллекцию

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в массив будут включены только те значения, которых в нем еще нет, причем единожды
// 
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт

	УникальныеЗначения = Новый Соответствие;
	
	Если ТолькоУникальныеЗначения Тогда
		Для каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Значение Из МассивИсточник Цикл
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивПриемник.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет список СписокПриемник значениями из списка СписокИсточник.
//
// Параметры:
//  СписокПриемник - Массив - массив, в который необходимо добавить значения.
//  СписокИсточник - Массив - массив значений для заполнения,
//	ТолькоУникальныеЗначения - булево, необязательный, если истина, 
//		то в список будут включены только те значения, которых в нем еще нет, причем единожды
// 
Процедура ДополнитьСписок(СписокПриемник, СписокИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
			
	УникальныеЗначения = Новый Соответствие;
	
	Если ТолькоУникальныеЗначения Тогда
		Для каждого Эл Из СписокПриемник Цикл
			УникальныеЗначения.Вставить(Эл.Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокИсточник Цикл
		Значение = ЭлементСписка.Значение;
		Если ТолькоУникальныеЗначения И УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПриемник.Добавить(
			Значение, 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
			
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
КонецПроцедуры

// ОбъединитьМассивы
//	функция, объединение двух массивов в один 
// Параметры:
//	Коллекция1 [массив]
//	Коллекция2 [массив]
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина, 
//									если Истина то в результате будет массив с уникальными значениями переданных массивов, 
//									если Ложь, то в результате будет просто объединенный массив
// Возвращаемое значение: 
//	Массив -результат объединения двух массивов
//
Функция ОбъединитьМассивы(Коллекция1, Коллекция2, КонтрольУникальности = Истина) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для каждого Элемент Из Коллекция1 Цикл
		
		ДобавитьЗначениеВМассив(МассивРезультат, Элемент, КонтрольУникальности);
		
	КонецЦикла; 
	
	Для каждого Элемент Из Коллекция2 Цикл
		
		ДобавитьЗначениеВМассив(МассивРезультат, Элемент, КонтрольУникальности);
		
	КонецЦикла;
	
	
	Возврат МассивРезультат;
	
КонецФункции // ОбъединитьМассивы

// ОбъединитьСписки
//	функция, объединение двух списков в один 
// Параметры:
//	Коллекция1 [список]
//	Коллекция2 [список]
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина, 
//		если Истина то в результате будет список с уникальными значениями переданных массивов, 
//		если Ложь, то в результате будет просто объединенный список
// Возвращаемое значение: 
//	СписокЗначений - список-результат объединения двух список
//
Функция ОбъединитьСписки(Коллекция1, Коллекция2, КонтрольУникальности = Истина) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для каждого Элемент Из Коллекция1 Цикл
		
		ДобавитьЗначениеВСписок(СписокРезультат, Элемент.Значение, КонтрольУникальности);
		
	КонецЦикла; 
	
	Для каждого Элемент Из Коллекция2 Цикл
		
		ДобавитьЗначениеВСписок(СписокРезультат, Элемент.Значение, КонтрольУникальности);
		
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции // ОбъединитьСписки

// ОбъединитьКоллекции
//	функция, объединение двух коллекций (массивов или списков) в одну 
// Параметры:
//  Коллекция1 [список/массив]
//	Коллекция2 [список/массив]
//	ВидКоллекцииРезультата [строка] - "массив" или "список", если значение не передано или не соответствует указанным, 
//										то результат формируется по типу параметра "Коллекция1"
//	КонтрольУникальности [булево] - необязательный, по умолчанию Истина, 
//									если Истина то в результате будет коллекция с уникальными значениями переданных коллекций, 
//									если Ложь, то в результате будет просто объединенная коллекция указанного типа
// Возвращаемое значение:
//	Массив/СписокЗначений - коллекция-результат объединения двух коллекций	
//
Функция ОбъединитьКоллекции(Знач Коллекция1, Знач Коллекция2, ВидКоллекцииРезультата = "", КонтрольУникальности = Истина) Экспорт
	
	ТипКоллекции1 = ТипЗнч(Коллекция1);
	ТипКоллекции2 = ТипЗнч(Коллекция2);
	
	Если ТипКоллекции1 <> Тип("Массив") И ТипКоллекции1 <> Тип("СписокЗначений") Тогда
		
		ВызватьИсключение "В функцию ОбъединитьКоллекции передан параметр Коллекция1 неверного типа: " + ТипКоллекции1;
		
	ИначеЕсли НРег(ВидКоллекцииРезультата) <> "массив" И НРег(ВидКоллекцииРезультата) <> "список" Тогда
		
		Если ТипКоллекции1 = Тип("Массив") Тогда
			
			ВидКоллекцииРезультата = "массив";
			
		Иначе
			
			ВидКоллекцииРезультата = "список";
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипКоллекции2 <> Тип("Массив") И ТипКоллекции2 <> Тип("СписокЗначений") Тогда
		
		ВызватьИсключение "В функцию ОбъединитьКоллекции передан параметр Коллекция2 неверного типа: " + ТипКоллекции2;
		
	КонецЕсли;
		
	Если НРег(ВидКоллекцииРезультата) = "массив" Тогда
		
		КоллекцияРезультат = Новый Массив;
		
		Если ТипКоллекции1 = ТипЗнч(КоллекцияРезультат) Тогда
			
			Если ТипКоллекции1 = ТипКоллекции2 Тогда
				
				КоллекцияРезультат = ОбъединитьМассивы(Коллекция1, Коллекция2, КонтрольУникальности);
				
			Иначе
				
				Для Каждого Элемент Из Коллекция1 Цикл
					
					ДобавитьЗначениеВМассив(КоллекцияРезультат, Элемент, КонтрольУникальности);
					
				КонецЦикла;
				
				Для Каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВМассив(КоллекцияРезультат, Элемент.Значение, КонтрольУникальности);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		Иначе
			
			Для Каждого Элемент Из Коллекция1 Цикл
				
				ДобавитьЗначениеВМассив(КоллекцияРезультат, Элемент.Значение, КонтрольУникальности);
				
			КонецЦикла;
			
			Если ТипКоллекции1 = ТипКоллекции2 Тогда
				
				Для Каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВМассив(КоллекцияРезультат, Элемент.Значение, КонтрольУникальности);
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВМассив(КоллекцияРезультат, Элемент, КонтрольУникальности);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли; 
				
	Иначе
		
		КоллекцияРезультат = Новый СписокЗначений;
		
		Если ТипКоллекции1 = ТипЗнч(КоллекцияРезультат) Тогда
			
			Если ТипКоллекции1 = ТипКоллекции2 Тогда
				
				КоллекцияРезультат = ОбъединитьСписки(Коллекция1, Коллекция2, КонтрольУникальности);
				
			Иначе
				
				Для каждого Элемент Из Коллекция1 Цикл
					
					ДобавитьЗначениеВСписок(КоллекцияРезультат, Элемент.Значение, КонтрольУникальности);
					
				КонецЦикла;
				
				Для каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВСписок(КоллекцияРезультат, Элемент, КонтрольУникальности);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		Иначе
			
			Для каждого Элемент Из Коллекция1 Цикл
				
				ДобавитьЗначениеВСписок(КоллекцияРезультат, Элемент, КонтрольУникальности);
				
			КонецЦикла;
			
			Если ТипКоллекции1 = ТипКоллекции2 Тогда
				
				Для каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВСписок(КоллекцияРезультат, Элемент, КонтрольУникальности);
					
				КонецЦикла;
				
			Иначе
				
				Для каждого Элемент Из Коллекция2 Цикл
					
					ДобавитьЗначениеВСписок(КоллекцияРезультат, Элемент.Значение, КонтрольУникальности);
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультат;
	
КонецФункции // ОбъединитьКоллекции

// СкопироватьМассив
//	Создает копию значения типа Массив.
//
// Параметры:
//	МассивИсточник – Массив - массив, копию которого необходимо получить.
//
// Возвращаемое значение:
//	Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент));
		
	КонецЦикла;
		
	Возврат МассивРезультат;
	
КонецФункции // СкопироватьМассив

// СкопироватьСписокЗначений
//	Создает копию значения типа СписокЗначений.
//
// Параметры:
//	СписокИсточник – СписокЗначений - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//	СписокЗначений - копия исходного списка значений
//
Функция СкопироватьСписокЗначений(СписокИсточник) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
			
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции // СкопироватьСписокЗначений

//функция удаляет дубли из массива
Функция СвернутьМассив(Коллекция) Экспорт
	
	МассивРезультат = Новый Массив;	
	ДополнитьМассив(МассивРезультат, Коллекция, Истина);
		
	Возврат МассивРезультат;
	
КонецФункции

//функция удаляет дубли из списка значений
Функция СвернутьСписокЗначений(Коллекция) Экспорт
	
	МассивЗначений = Коллекция.ВыгрузитьЗначения();
	МассивРезультат = СвернутьМассив(МассивЗначений);
	
	СписокРезультат = Новый СписокЗначений;	
	СписокРезультат.ЗагрузитьЗначения(МассивРезультат);
	
	Возврат СписокРезультат;
	
КонецФункции

#Если НЕ ВебКлиент Тогда
// В веб-клиенте не работает "ПолучитьИмяВременногоФайла()"

///////////////////////////////////////////////////////////////////
// РАБОТА С BASE 64
/////////////////////////////////////////////////////////////////// 

// СтрокаВBase64
//	кодирует строку в Base64 используя методы 1с
// Параметры:
//	КодируемаяСтрока - строка
// Возвращаемое значение: 
//	Строка
Функция СтрокаВBase64(КодируемаяСтрока, УдалитьСигнальныйСимвол = Ложь) Экспорт
	
	ИмяВременногоФайла	= ПолучитьИмяВременногоФайла();
	ЗаписьТекста		= Новый ЗаписьТекста(ИмяВременногоФайла, "UTF-8");
	ЗаписьТекста.Записать(КодируемаяСтрока);
	ЗаписьТекста.Закрыть();
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	Если УдалитьСигнальныйСимвол Тогда 
		СигнальныйСимвол = "77u/";
		РезультатСигнальныйСимвол = Лев(Результат, СтрДлина(СигнальныйСимвол));
		Если СигнальныйСимвол = РезультатСигнальныйСимвол Тогда 
			Результат = Сред(Результат,	СтрДлина(СигнальныйСимвол) + 1);
		КонецЕсли;	
	КонецЕсли;
	
	Попытка 
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // глСтрокаВBase64

// СтрокаИзBase64
//	Декодирует из строк в Base64 используя методы 1с
// Параметры:
//	ЗакодированнаяСтрока - строка
// Возвращаемое значение: 
//	Строка
Функция СтрокаИзBase64(ЗакодированнаяСтрока) Экспорт
	
	ВременныйФайл			= ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеBase64	= Base64Значение(ЗакодированнаяСтрока);
	ДвоичныеДанныеBase64.Записать(ВременныйФайл);
	
	ТекстовыйДокумент		= Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВременныйФайл, "UTF-8");
	РаскодированнаяСтрока	= ТекстовыйДокумент.ПолучитьТекст();
	
	Попытка 
		УдалитьФайлы(ВременныйФайл); 
	Исключение 
	КонецПопытки;
	
	Возврат РаскодированнаяСтрока;
	
КонецФункции // СтрокаИзBase64

// СтрокаЗакодированаBase64
//	Функция не дает 100% результата определения, что строка закодирована в BASE64
//	определяет закодирована ли строка в кодировку Base64
//	1. проверяем что закодированная строка кратна 4
//	2. закодированная строка содержит только допустимые символы base64
// Параметры:
//	ЗакодированнаяСтрока - строка - строка предположительно закодированная base64
// Возвращаемое значение:
//	Булево
Функция СтрокаЗакодированаBase64(ЗакодированнаяСтрока) Экспорт
	
	//проверка что закодированная строка делится на целое на 4
	КонечнаяСтрока = СтрЗаменить(ЗакодированнаяСтрока, Символы.ВК, "");
	КонечнаяСтрока = СтрЗаменить(КонечнаяСтрока, Символы.ПС, "");
	ОстатокОтДеления = СтрДлина(КонечнаяСтрока) % 4;
	ДлинаСтрокиКратнаЧетырем = (ОстатокОтДеления = 0);
	
	//Проверка через регулярное выражение
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.Pattern = "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$";
	СтрокаСодержитДопустимыеСимволыBase64 = RegExp.Test(КонечнаяСтрока);
	Результат = ДлинаСтрокиКратнаЧетырем И СтрокаСодержитДопустимыеСимволыBase64;
	
	Возврат Результат;

КонецФункции // СтрокаЗакодированаBase64

#КонецЕсли
