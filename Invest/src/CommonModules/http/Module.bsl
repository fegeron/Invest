//
//////////////////////////////////////////////////////////////////////////////////
//// HTTP-СЕРВИСЫ
//
//Функция СтрокиGet(Запрос)
//	Ответ = Новый HTTPСервисОтвет(200);
//	Ответ.Заголовки["Content-Type"] = "text/html";
//	Email = Запрос.ПараметрыЗапроса.Получить("Email");
//	Start = Запрос.ПараметрыЗапроса.Получить("Start");
//	End = Запрос.ПараметрыЗапроса.Получить("End");
//	Cod = Запрос.ПараметрыЗапроса.Получить("Cod");
//	Ответ.УстановитьТелоИзСтроки("True");
//	Возврат Ответ;
//КонецФункции
//
//Функция WorkEmployeeМетод(Запрос)
//	Ответ = Новый HTTPСервисОтвет(200);
//	Ответ.Заголовки["Content-Type"] = "text/html";
//	Email = Запрос.ПараметрыURL["EMAIL"];
//	DATA1 = Запрос.ПараметрыURL["DATA1"];
//	                    
//	//++OW Копачев А.С. 04.08.2023 ONEC-8686
//	//Если Найти(Email,ow.ВернутьДомен())>0 Тогда 
//	Если Найти(Email,"@")>0 Тогда 
//	//--OW Копачев А.С. 04.08.2023 ONEC-8686	
//		ЗапросФ = Новый Запрос;
//		ЗапросФ.Текст =  "ВЫБРАТЬ
//		                 |	ФизическиеЛицаКонтактнаяИнформация.Ссылка,
//		                 |	ФизическиеЛицаКонтактнаяИнформация.Ссылка.Наименование КАК Наименование
//		                 |ИЗ
//		                 |	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
//		                 |ГДЕ
//		                 |	ФизическиеЛицаКонтактнаяИнформация.Представление = &Представление
//		                 |
//		                 |УПОРЯДОЧИТЬ ПО
//		                 |	Наименование";
//		ЗапросФ.УстановитьПараметр("Представление",Email);
//		ТАБФ = ЗапросФ.Выполнить().Выгрузить();
//		Если ТАБФ.Количество()=0 Тогда
//			Ответ.УстановитьТелоИзСтроки("ERROR, We did not find the employee");
//			Возврат Ответ;
//		КонецЕсли;
//		Попытка      		
//			ТекПериод = ДАТА(DATA1);
//		//	Возврат Ответ;
//		Исключение 
//			Ответ.УстановитьТелоИзСтроки("ERROR, It is not data");
//			Возврат Ответ;
//		КонецПопытки;
//		ЗапроСс = новый Запрос;
//		ЗапроСс.Текст = "ВЫБРАТЬ
//		                |	PR_КомандировкаТаблицаСотрудники.Ссылка
//		                |ИЗ
//		                |	Документ.PR_Командировка.ТаблицаСотрудники КАК PR_КомандировкаТаблицаСотрудники
//		                |ГДЕ
//		                |	PR_КомандировкаТаблицаСотрудники.Сотрудник = &Сотрудник
//		                |	И &Период МЕЖДУ PR_КомандировкаТаблицаСотрудники.ДатаНачала И PR_КомандировкаТаблицаСотрудники.ДатаОкончания
//		                |
//		                |ОБЪЕДИНИТЬ ВСЕ
//		                |
//		                |ВЫБРАТЬ
//		                |	БольничнныйТаблицаСотрудники.Ссылка
//		                |ИЗ
//		                |	Документ.Больничнный.ТаблицаСотрудники КАК БольничнныйТаблицаСотрудники
//		                |ГДЕ
//		                |	БольничнныйТаблицаСотрудники.Сотрудник.Физлицо = &Сотрудник
//		                |	И &Период МЕЖДУ БольничнныйТаблицаСотрудники.ДатаНачала И БольничнныйТаблицаСотрудники.ДатаОкончания";
//		ЗапроСс.УстановитьПараметр("Сотрудник",ТАБФ.Получить(0).Ссылка);
//		ЗапроСс.УстановитьПараметр("Период",ТекПериод);
//		Ответ1 = ЗапроСс.Выполнить().Пустой();
//		Если Ответ1 Тогда
//			Ответ.УстановитьТелоИзСтроки("True");
//		Иначе
//			Ответ.УстановитьТелоИзСтроки("False");
//		КонецЕсли;
//		Возврат Ответ;
//	Иначе
//		Ответ.УстановитьТелоИзСтроки("ERROR, It is not email");
//		Возврат Ответ;
//	КонецЕсли;
//	//Ответ.УстановитьТелоИзСтроки("True");
//	//Возврат Ответ;
//КонецФункции
//
//Функция Test(Запрос)
//	Ответ = Новый HTTPСервисОтвет(200);
//	Ответ.Заголовки["Content-Type"] = "application/json";
//	//Email = Запрос.ПараметрыURL["EMAIL"];
//	//DATA1 = Запрос.ПараметрыURL["DATA1"];
//	
//	ТекстОтвета = OW_Дистрибутивы.СформироватьJSONОтвет();
//		
//	Ответ.УстановитьТелоИзСтроки(ТекстОтвета);
//	Возврат Ответ; 
//КонецФункции
//
//Функция УстановитьЗадачаГотоваКЗагрузке(Запрос)   
//	
//	//++OW Копачев А.С. 13.03.2019 ONEC-4362
//	СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpPostIssueReadyToImport");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//	
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//	
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	СтруктураВозврата = Неопределено;
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаУстановкуПризнакаЗадачаГотоваКЗагрузке(СтрокаJSON, Инстанс);
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//		КонецПопытки;
//		
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642
//	
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//	    Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);	
//		
//		Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Свойство("АвторИзменений") Тогда 
//			НотификацияПриОшибкахЗапроса(ТекстОшибки, СтруктураВозврата.АвторИзменений)
//		КонецЕсли;
//	Иначе		
//		СтрокаJSONОтвет = ?(Данные = Неопределено, "", JIRA.СформироватьТекстЗапросаJIRA(Данные));
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//	
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 13.03.2019 ONEC-4362
//
//КонецФункции
//
//Процедура НотификацияПриОшибкахЗапроса(ТекстПисьма, ПолучательПисьма)
//	
//	//++OW Копачев А.С. 30.07.2021 ONEC-6403
//	Если НЕ ЗначениеЗаполнено(ПолучательПисьма) Тогда 
//		Возврат	
//	КонецЕсли;	
//	
//	Тема = "There are problems with data transfer to 1C";		
//					
//	// формируем письмо	
//	
//	СписокАдресовКому = Новый СписокЗначений;	
//	Если ЗначениеЗаполнено(ПолучательПисьма) Тогда 
//		Мыло = OW.ПолучитьМылоЮзера(ПолучательПисьма);
//		Если ЗначениеЗаполнено(Мыло) Тогда
//			СписокАдресовКому.Добавить(Мыло, Строка(ПолучательПисьма));
//		КонецЕсли;	
//	КонецЕсли;	
//		
//	РазделУчетаНотификации = Справочники.OW_РазделыУчета.НотификацииEmail;
//	
//	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(Тема, ТекстПисьма, СписокАдресовКому,,,,, ,,,РазделУчетаНотификации);	
//	//--OW Копачев А.С. 30.07.2021 ONEC-6403
//	
//КонецПроцедуры
//
//Функция ПолучитьСуммуВВалютеОрганизации(Запрос)
//	
//	//++OW Копачев А.С. 14.03.2019 ONEC-4364 
//	СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	//СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetLocalCurrencyExchangeAmount");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхКурсаВалютыОрганизации(СтрокаJSON);
//
//			Если СтруктураВозврата.Свойство("Данные") Тогда 
//				Данные = СтруктураВозврата.Данные;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			ЕстьОшибки = ЕстьОшибки ИЛИ Данные = Неопределено;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//		КонецПопытки;	
//    //++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//	    Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;	
//	//--OW Копачев А.С. 14.03.2019 ONEC-4364
//КонецФункции
//
//Функция ПолучитьОрганизацииИСписокСотрудников(Запрос)
//	//++OW Копачев А.С. 18.03.2019 ONEC-4402
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetLegalEntitiesAndEmployees");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхОрганизацийИСпискаСотрудников(СтрокаJSON);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		ЕстьОшибки = ЕстьОшибки ИЛИ Данные = Неопределено;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//	
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 18.03.2019 ONEC-4402	
//КонецФункции
//
//Функция ОбработатьДниОтпускаСотрудника(Запрос)
//	
//	//++OW Копачев А.С. 28.05.2019 ONEC-4582
//	СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	//СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpPostVacationDays");
//
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//	
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//	
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаОбработкуДанныхПоДнямОтпускаСотрудника(СтрокаJSON, Инстанс);
//
//			Если СтруктураВозврата.Свойство("Данные") Тогда 
//				Данные = СтруктураВозврата.Данные;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			ЕстьОшибки = ЕстьОшибки ИЛИ Данные = Неопределено;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//		КонецПопытки;	
//		
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642
//	
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//	    Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 28.05.2019 ONEC-4582	
//	
//КонецФункции
//
//Функция ПолучитьСтатус(Запрос)
//	
//	//++OW Копачев А.С. 28.05.2019 ONEC-4582
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetStatus");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//	
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеСтатуса(СтрокаJSON);
//
//			Если СтруктураВозврата.Свойство("Данные") Тогда 
//				Данные = СтруктураВозврата.Данные;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			ЕстьОшибки = ЕстьОшибки ИЛИ Данные = Неопределено;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//		КонецПопытки;	
//    //++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642
//	
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//	    Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 28.05.2019 ONEC-4582
//	
//КонецФункции
//
//
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
//
//Функция СформироватьHTTPСервисОтвет(КодОтвета, Знач ТекстСообщения)
//	
//	Ответ = Новый HTTPСервисОтвет(КодОтвета);	
//	
//	ТекстСообщенияEn = НСтр(ТекстСообщения, "en");
//	ТекстСообщения = ?(ПустаяСтрока(ТекстСообщенияEn), ТекстСообщения, ТекстСообщенияEn); 	
//	
//	Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
//	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
//	
//	Возврат Ответ;
//	
//КонецФункции	
//
//Функция РазрешенHTTPЗапросОтИнстанса(HTTPЗапрос, Инстанс)
//	Результат = Истина;
//	
//	АдресИсточника = СокрЛП(HTTPЗапрос.Заголовки.Получить("X-Forwarded-For")); 
//	
//	АдресВходящегоСоединения = СокрЛП(Инстанс.АдресВходящегоСоединения);
//	
//	Если ЗначениеЗаполнено(АдресВходящегоСоединения) 
//		И НРег(АдресВходящегоСоединения) <> НРег(АдресИсточника) Тогда 
//		
//		Результат = Ложь;
//	КонецЕсли;	
//		
//	Возврат Результат
//КонецФункции	
//
//////////////////////////////////////////////////////////////////////////////////
//// Delivery Portal
//
//// ------ CDT НОВЫЕ ЗАПРОСЫ ------
//
//Функция ClientsПолучитьИнстансыКлиентов(Запрос)
//	//++OW Копачев А.С. 11.06.2020 ONEC-5648 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON = "";
//	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда 
//		СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	ИначеЕсли Запрос.ПараметрыURL.Количество() > 0 Тогда 
//		// в запросе могут быть переданы как параметры отбора, так и запрос по коду клиента
//		ПараметрыURL = Запрос.ПараметрыURL.Получить("*");
//		Если ПараметрыURL <> Неопределено Тогда 
//			ПараметрClient = Сред(ПараметрыURL, 2);
//			Если Найти(ПараметрClient, "/") = 0 И Найти(ПараметрClient, "=") = 0 И Найти(ПараметрClient, "?") = 0  
//				И НЕ ПустаяСтрока(ПараметрClient) Тогда 
//				СтрокаJSON = "{""client"":""" + ПараметрClient + """}";	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTClients");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхИнстансовКлиентов(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//		
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370	
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 11.06.2020 ONEC-5648
//
//КонецФункции
//
//Функция CDTComponentsПолучитьДистрибутивы(Запрос)
//	
//	//++OW Копачев А.С. 11.06.2020 ONEC-5648 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//		
//	СтрокаJSON = "";
//	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда 
//		СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	ИначеЕсли Запрос.ПараметрыURL.Количество() > 0 Тогда 
//		// в запросе могут быть переданы как параметры отбора, так и запрос по коду компоненты
//		ПараметрыURL = Запрос.ПараметрыURL.Получить("*");
//		Если ПараметрыURL <> Неопределено Тогда 
//			ПараметрComponent = Сред(ПараметрыURL, 2);
//			Если Найти(ПараметрComponent, "/") = 0 И Найти(ПараметрComponent, "=") = 0 И Найти(ПараметрComponent, "?") = 0  
//				И НЕ ПустаяСтрока(ПараметрComponent) Тогда 
//				СтрокаJSON = "{""component"":""" + ПараметрComponent + """}";	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTComponents");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхДистрибутивов(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 11.06.2020 ONEC-5648
//	
//КонецФункции
//
//Функция CDTCountriesПолучитьСтраны(Запрос)
//	
//	//++OW Копачев А.С. 11.06.2020 ONEC-5648 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//		
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTCountries");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеСпискаСтран(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//		
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 11.06.2020 ONEC-5648
//
//КонецФункции
//
//Функция CDTLicensesПолучитьЛицензии(Запрос)
//	
//	//++OW Копачев А.С. 11.06.2020 ONEC-5648 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON = "";
//	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда 
//		СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	ИначеЕсли Запрос.ПараметрыURL.Количество() > 0 Тогда 
//		// в запросе могут быть переданы как параметры отбора, так и запрос по коду клиента
//		ПараметрыURL = Запрос.ПараметрыURL.Получить("*");
//		Если ПараметрыURL <> Неопределено Тогда 
//			ПараметрLicenses = Сред(ПараметрыURL, 2);
//			Если Найти(ПараметрLicenses, "/") = 0 И Найти(ПараметрLicenses, "=") = 0 И Найти(ПараметрLicenses, "?") = 0  
//				И НЕ ПустаяСтрока(ПараметрLicenses) Тогда 
//				СтрокаJSON = "{""license"":""" + ПараметрLicenses + """}";	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;
//	
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTLicenses");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхЛицензий(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//		
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 11.06.2020 ONEC-5648
//	
//КонецФункции
//
//Функция CDTClientLicensesПолучитьЛицензииПоКлиентам(Запрос)
//	
//	//++OW Копачев А.С. 01.12.2021 ONEC-7163 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON = "";
//	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда 
//		СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	ИначеЕсли Запрос.ПараметрыURL.Количество() > 0 Тогда 
//		// в запросе могут быть переданы как параметры отбора, так и запрос по коду клиента
//		ПараметрыURL = Запрос.ПараметрыURL.Получить("*");
//		Если ПараметрыURL <> Неопределено Тогда 
//			ПараметрLicenses = Сред(ПараметрыURL, 2);
//			Если Найти(ПараметрLicenses, "/") = 0 И Найти(ПараметрLicenses, "=") = 0 И Найти(ПараметрLicenses, "?") = 0  
//				И НЕ ПустаяСтрока(ПараметрLicenses) Тогда 
//				СтрокаJSON = "{""license"":""" + ПараметрLicenses + """}";	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;
//	
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTClientLicenses");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеДанныхЛицензийВРазрезеКлиентов(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//		
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 01.12.2021 ONEC-7163
//	
//КонецФункции
//
//Функция CDTFiltersПолучитьФильтры(Запрос)
//	//++OW Копачев А.С. 11.06.2020 ONEC-5648 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();
//	
//	СтрокаJSON = "";
//	Если Запрос.ПараметрыЗапроса.Количество() > 0 Тогда 
//		СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	ИначеЕсли Запрос.ПараметрыURL.Количество() > 0 Тогда 
//		// в запросе могут быть переданы как параметры отбора, так и запрос по коду клиента
//		ПараметрыURL = Запрос.ПараметрыURL.Получить("*");
//		Если ПараметрыURL <> Неопределено Тогда 
//			ПараметрFilter = Сред(ПараметрыURL, 2);
//			Если Найти(ПараметрFilter, "/") = 0 И Найти(ПараметрFilter, "=") = 0 И Найти(ПараметрFilter, "?") = 0  
//				И НЕ ПустаяСтрока(ПараметрFilter) Тогда 
//				СтрокаJSON = "{""filter"":""" + ПараметрFilter + """}";	
//			КонецЕсли;	
//		КонецЕсли;	
//	КонецЕсли;
//	
//	СтрокаJSON = OW_ОбменДанными.CDT_НормализоватьСтрокуВходящихДанных(СтрокаJSON);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetCDTFilters");
//	//++OW Копачев А.С. 30.03.2022 ONEC-7463
//	//Инстанс              = Справочники.СоединениеССайтами.DeliveryPortal;
//	ИнстансDP = OW_ОбменДанными.ПолучитьИнстансDeliveryPortal(ПараметрыСеанса.ТекущийПользователь);
//	//--OW Копачев А.С. 30.03.2022 ONEC-7463
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, ИнстансDP);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	Попытка
//		СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеСпискаФильтров(СтрокаJSON, ИнстансDP);
//
//		Если СтруктураВозврата.Свойство("Данные") Тогда 
//			Данные = СтруктураВозврата.Данные;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//			ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//			ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//		КонецЕсли;
//		Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//			КодСостояния = СтруктураВозврата.КодСостояния;
//		КонецЕсли;
//		
//		//++OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370 
//		// если нет данных в 1С, но при этом запрос отработал корректно - это не ошибка
//
//		//ЕстьОшибкиВДанных = Ложь;
//		//
//		//Если Данные = Неопределено Тогда 
//		//	ЕстьОшибкиВДанных = Истина;
//		//	Если ПустаяСтрока(ТекстОшибки) Тогда 
//		//		ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//		//	КонецЕсли;	
//		//КонецЕсли;	
//		//
//		//ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//		//--OW Копачев А.С. 01.09.2021 https://wiki/pages/viewpage.action?pageId=345054370
//		
//	Исключение
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//		
//		КодСостояния = 400;
//	КонецПопытки;	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 11.06.2020 ONEC-5648
//КонецФункции
//
//Функция ПолучитьОстаткиОтпусков(Запрос)
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);
//	
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetVacations");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансJIRA(JIRA.ПолучитьНазваниеИнстансаДляJiraSpb());
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Истина);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаОбработкуДанныхПоДнямОтпускаСотрудников(СтрокаJSON);
//
//			Если СтруктураВозврата.Свойство("Данные") Тогда 
//				Данные = СтруктураВозврата.Данные;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			ЕстьОшибки = ЕстьОшибки ИЛИ Данные = Неопределено;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();		
//		КонецПопытки;	
//    //++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642
//	
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//	    Ответ = СформироватьHTTPСервисОтвет(400, ТекстОшибки);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//
//КонецФункции
//
//// ------ JIRA OWS ------
//
//Функция GetPlannedTimeПолучитьПлановоеВремяРаботы(Запрос)
//	//++OW Копачев А.С. 09.04.2021 ONEC-6708 
//	//СтрокаJSON 		= Запрос.ПолучитьТелоКакСтроку();	
//	СтрокаJSON 		= OW.ЗаписатьДанныеВJSON(Запрос.ПараметрыЗапроса);	
//		
//	///////////////////////////////////////////////////////
//	// журналирование
//	МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.ow_httpGetPlannedTime");
//	
//	//++OW Копачев А.С. 04.04.2022 ONEC-7464
//	//Инстанс              = JIRA.ПолучитьИнстансДляJiraOws();
//	Инстанс              = JIRA.ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПараметрыСеанса.ТекущийПользователь, Ложь);
//	//--OW Копачев А.С. 04.04.2022 ONEC-7464
//	
//	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
//			
//	СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
//	ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
//	ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
//	ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
//	ДанныеОбмена.Вставить("ИсходящийЗапрос",Ложь);
//	OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
//	//////////////////////////////////////////////////////
//		
//	Данные	   	= Неопределено;
//	ЕстьОшибки 	= Ложь;
//	ТекстОшибки = "";
//	КодСостояния = 200;
//	
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642 
//	Если РазрешенHTTPЗапросОтИнстанса(Запрос, Инстанс) = Истина Тогда 
//	//--OW Копачев А.С. 11.08.2023 ONEC-8642
//		Попытка
//			СтруктураВозврата = OW_ОбменДанными.ОбработатьЗапросНаПолучениеПлановогоВремениРаботы(СтрокаJSON);
//
//			Если СтруктураВозврата.Свойство("Данные") Тогда 
//				Данные = СтруктураВозврата.Данные;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ЕстьОшибки") Тогда 
//				ЕстьОшибки = СтруктураВозврата.ЕстьОшибки;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("ТекстОшибкиEn") Тогда 
//				ТекстОшибки = СтруктураВозврата.ТекстОшибкиEn;
//			КонецЕсли;
//			Если СтруктураВозврата.Свойство("КодСостояния") Тогда 
//				КодСостояния = СтруктураВозврата.КодСостояния;
//			КонецЕсли;
//			
//			ЕстьОшибкиВДанных = Ложь;
//			
//			Если Данные = Неопределено Тогда 
//				ЕстьОшибкиВДанных = Истина;
//				Если ПустаяСтрока(ТекстОшибки) Тогда 
//					ТекстОшибки = OW_ОбменДанными.ИсключениеПустойПакетДанных("en");	
//				КонецЕсли;	
//			КонецЕсли;	
//			
//			ЕстьОшибки = ЕстьОшибки ИЛИ ЕстьОшибкиВДанных;
//			
//		Исключение
//			ЕстьОшибки 	= Истина;
//			ТекстОшибки = "Data processing error: " + ОписаниеОшибки();	
//			
//			КодСостояния = 400;
//		КонецПопытки;
//	//++OW Копачев А.С. 11.08.2023 ONEC-8642	
//	Иначе
//		ЕстьОшибки 	= Истина;
//		ТекстОшибки = "Data processing error: " + "Bad source address";		
//	КонецЕсли;	
//    //--OW Копачев А.С. 11.08.2023 ONEC-8642	
//
//	// формирование ответа
//	Если ЕстьОшибки Тогда
//		ДанныеОшибки = Новый Структура("code, message", КодСостояния, ТекстОшибки);
//		ТекстОшибкиJSON = JIRA.СформироватьТекстЗапросаJIRA(Новый Структура("error", ДанныеОшибки));
//	    Ответ = СформироватьHTTPСервисОтвет(КодСостояния, ТекстОшибкиJSON);
//		
//		// журналирование
//		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);			
//	Иначе		
//		СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(Данные);
//		Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//
//		// журналирование
//		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			OW_ОбменДанными.ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, ТекстОшибки);
//		Иначе	
//			OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет);
//		КонецЕсли;	
//	КонецЕсли;		
//
//	Возврат Ответ;
//	//--OW Копачев А.С. 09.04.2021 ONEC-6708
//КонецФункции
//
//Функция PingGetPing(Запрос)
//    ДанныеОтвета = Новый Структура("Result", "Ok");
//	СтрокаJSONОтвет = JIRA.СформироватьТекстЗапросаJIRA(ДанныеОтвета);
//	
//	Ответ = СформироватьHTTPСервисОтвет(200, СтрокаJSONОтвет);
//	Возврат Ответ;
//
//КонецФункции
//
//
//
//
//
//
//
//
//
//
