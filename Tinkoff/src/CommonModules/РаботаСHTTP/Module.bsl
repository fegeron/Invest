
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С HTTP-СЕРВИСАМИ  

Функция СформироватьТекстЗапроса(СтруктураПолей, ИспользоватьДвойныеКавычки = Истина, ЭкранироватьУгловыеСкобки = Истина, ЭкранироватьРазделителиСтрок = Истина, ЭкранироватьАмперсанд = Истина, ЭкранироватьОдинарныеКавычки = Истина,ЭкранироватьСлеш = Истина) Экспорт 
 
  ЗаписьJSON = Новый ЗаписьJSON;
  ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб, ИспользоватьДвойныеКавычки, ЭкранированиеСимволовJSON.СимволыВнеBMP, ЭкранироватьУгловыеСкобки, ЭкранироватьРазделителиСтрок, ЭкранироватьАмперсанд, ЭкранироватьОдинарныеКавычки, ЭкранироватьСлеш);
  ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
  НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
  НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
  НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
  ЗаписатьJSON(ЗаписьJSON, СтруктураПолей, НастройкиСериализацииJSON, "ПреобразованиеJSON", JIRA);
  ТекстЗапроса = ЗаписьJSON.Закрыть();  
 
  Возврат ТекстЗапроса;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОЕДИНЕНИЯМИ 

Функция СоздатьHTTPСоединение(СервисHttp, Логин = Неопределено, Пароль = Неопределено) Экспорт
			
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
 	Логин = ?(ЗначениеЗаполнено(Логин), Логин, СервисHttp.Логин); 
	Пароль = ?(ЗначениеЗаполнено(Пароль), Пароль, СервисHttp.Пароль);
	Адрес = СервисHttp.Адрес;
	
	Порт = Неопределено;
	Если ЗначениеЗаполнено(СервисHttp.Порт) Тогда 
		Порт = СервисHttp.Порт;
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(Адрес, Порт, Логин, Пароль, , , ssl);

КонецФункции

Функция СоздатьHTTPЗапрос(АдресРесурса, СервисHttp, Логин = Неопределено, Пароль = Неопределено, ContentType = Неопределено, ContentLength = Неопределено) Экспорт

	Заголовки = Новый Соответствие();
	
	Если НЕ ЗначениеЗаполнено(ContentType) Тогда 
		Заголовки.Вставить("Content-Type", "application/json");	
	Иначе
		Заголовки.Вставить("Content-Type", ContentType);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ContentLength) Тогда 
		Заголовки.Вставить("Content-Length", ContentLength);
	КонецЕсли;	
	
	Логин = ?(ЗначениеЗаполнено(Логин), Логин, СервисHttp.Логин); 
	Пароль = ?(ЗначениеЗаполнено(Пароль), Пароль, СервисHttp.Пароль);
	СтрокаBase64 = ОбщегоНазначенияКлиентСервер.СтрокаВBase64(Логин + ":"+ Пароль, Истина);		
	Заголовки.Вставить("Authorization", "Basic " + СтрокаBase64);

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Возврат HTTPЗапрос;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// JSON 

Функция ПрочитатьJSONИзСтроки(Значение, ПрочитатьВСоответствие = Истина) Экспорт
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);	
	
	Попытка
		//чтение штатными средствами
		Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);	
	Исключение	
		// сервисное сообщение для анализа ошибок
		ТекстСообщения = "Метод <ПрочитатьJSON(ЧтениеJSON)> вернул ошибку. Подробности: " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Метод <ПрочитатьJSON(ЧтениеJSON)> вернул ошибку. Подробности: " + ОписаниеОшибки());
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации("ПрочитатьJSON", ТекстСообщения);	
	КонецПопытки;
	
	ЧтениеJSON.Закрыть();

	Возврат Результат;
КонецФункции	

Функция ЗаписатьДанныеВJSON(Данные, ПараметрыЗаписиJSON = Неопределено, НастройкиСериализацииJSON = Неопределено) Экспор
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);	
	СтрокаJSON = ЗаписьJSON.Закрыть();	
	Возврат СтрокаJSON;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// функции исключения

Функция ИсключениеПустойПакетДанных(КодЯзыка = "Все") Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Пустой пакет данных",  "Empty data packet", КодЯзыка);

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(КодЯзыка = "Все") Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Некорректный пакет данных",  "Invalid data packet", КодЯзыка);

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНетДанныхДляОтправки() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Нет данных для отправки",  "No data to send", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеверныйТипДанныхДляОтправки() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный тип данных для отправки",  "Wrong data type to send", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеверныйПолучательДанных() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный получатель данных",  "Invalid data recipient", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеДанныеНеОтправлены() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Данные не отправлены",  "Data not sent", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()




#КонецОбласти
