
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С HTTP-СЕРВИСАМИ  

Функция СформироватьТекстЗапроса(СтруктураПолей, ИспользоватьДвойныеКавычки = Истина, ЭкранироватьУгловыеСкобки = Истина, ЭкранироватьРазделителиСтрок = Истина, ЭкранироватьАмперсанд = Истина, ЭкранироватьОдинарныеКавычки = Истина,ЭкранироватьСлеш = Истина) Экспорт 
 
  ЗаписьJSON = Новый ЗаписьJSON;
  ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб, ИспользоватьДвойныеКавычки, ЭкранированиеСимволовJSON.СимволыВнеBMP, ЭкранироватьУгловыеСкобки, ЭкранироватьРазделителиСтрок, ЭкранироватьАмперсанд, ЭкранироватьОдинарныеКавычки, ЭкранироватьСлеш);
  ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
  НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
  НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
  НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
  ЗаписатьJSON(ЗаписьJSON, СтруктураПолей, НастройкиСериализацииJSON, "РаботаСJSON.ПреобразованиеJSON", JIRA);
  ТекстЗапроса = ЗаписьJSON.Закрыть();  
 
  Возврат ТекстЗапроса;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОЕДИНЕНИЯМИ 

Функция СоздатьHTTPСоединение(СервисHttp, Логин = Неопределено, Пароль = Неопределено) Экспорт
			
	ssl = Новый ЗащищенноеСоединениеOpenSSL;
 	Логин = ?(ЗначениеЗаполнено(Логин), Логин, СервисHttp.Логин); 
	Пароль = ?(ЗначениеЗаполнено(Пароль), Пароль, СервисHttp.Пароль);
	Адрес = СервисHttp.Адрес;
	
	Порт = Неопределено;
	Если ЗначениеЗаполнено(СервисHttp.Порт) Тогда 
		Порт = СервисHttp.Порт;
	КонецЕсли;
	
	Возврат Новый HTTPСоединение(Адрес, Порт, Логин, Пароль, , , ssl);

КонецФункции

Функция СоздатьHTTPЗапрос(АдресРесурса, СервисHttp, Логин = Неопределено, Пароль = Неопределено, ContentType = Неопределено, ContentLength = Неопределено) Экспорт

	Заголовки = Новый Соответствие();
	
	Если НЕ ЗначениеЗаполнено(ContentType) Тогда 
		Заголовки.Вставить("Content-Type", "application/json");	
	Иначе
		Заголовки.Вставить("Content-Type", ContentType);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ContentLength) Тогда 
		Заголовки.Вставить("Content-Length", ContentLength);
	КонецЕсли;	
	
	Логин = ?(ЗначениеЗаполнено(Логин), Логин, СервисHttp.Логин); 
	Пароль = ?(ЗначениеЗаполнено(Пароль), Пароль, СервисHttp.Пароль);
	СтрокаBase64 = ОбщегоНазначенияКлиентСервер.СтрокаВBase64(Логин + ":"+ Пароль, Истина);		
	Заголовки.Вставить("Authorization", "Basic " + СтрокаBase64);

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Возврат HTTPЗапрос;
	
КонецФункции


Функция ИнициализироватьСтруктутруВозврата() Экспорт
	
	СтруктураВозврата = Новый Структура("Данные, ЕстьОшибки, ТекстОшибки, ТекстОшибкиEn, КодСостояния", Неопределено, Ложь, "", "", 200);

	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ТекстОшибки, КодСостояния = Неопределено) Экспорт
	
	СтруктураВозврата.КодСостояния 	= ?(КодСостояния = Неопределено, 400, КодСостояния);
	СтруктураВозврата.ЕстьОшибки 	= Истина;

	ТекстОшибкиRU = НСтр(ТекстОшибки, "ru"); 
	ТекстОшибкиEN = НСтр(ТекстОшибки, "en");
	
	ТекстОшибкиRU = ?(ПустаяСтрока(ТекстОшибкиRU), ТекстОшибки, ТекстОшибкиRU); 
	ТекстОшибкиEN = ?(ПустаяСтрока(ТекстОшибкиEN), ТекстОшибки, ТекстОшибкиEN);
	
	СтруктураВозврата.ТекстОшибки 	= СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибки, ТекстОшибкиRU, ";");
	СтруктураВозврата.ТекстОшибкиEN = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибкиEN, ТекстОшибкиEN, ";");
	
КонецПроцедуры


Процедура ОтправитьПодготовленныеДанныеВоВнешнююСистему() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке")));			
	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Истина);
	
	ДанныеДляОтправки = РаботаСЖурналомОбмена.ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// определение порядка загрузки
	ДанныеДляОтправки.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ДанныеДляОтправки Цикл
		ТекстСообщения	= ТекСтрока.ТекстСообщения;
	КонецЦикла;
	
	ДанныеДляОтправки.Сортировать("Приоритет Возр, Период Возр");

	Для Каждого ТекДанные Из ДанныеДляОтправки Цикл
		
		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, ТекДанные.МетодЗапроса, ТекДанные.ИдентификаторЗапроса, ТекДанные.СервисAPI);
		 
		СтруктураВозврата = РаботаСHTTP.ОтправитьДанныеВоВнешнююСистемуДляОбработки(СтруктураОтбораОбмена, ТекДанные.ТекстСообщения)
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьДанныеВоВнешнююСистемуДляОбработки(Знач СтруктураОтбораОбмена, СтрокаJSON) Экспорт
	
	СтруктураВозврата = РаботаСHTTP.ИнициализироватьСтруктутруВозврата();
	
	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда 	
		РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНетДанныхДляОтправки());
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	МетодЗапроса   	= СтруктураОтбораОбмена.МетодЗапроса;
	СервисAPI 		= СтруктураОтбораОбмена.СервисAPI;
	
	СтрокаJSONОтвет = "";
	
		Если МетодЗапроса.ИсходящийЗапрос Тогда 
			
			// соединение			
			АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МетодЗапроса.Адрес);
			ТекстЗапроса = СтрокаJSON;			
			
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда
				// для удаления тело запроса не используется, а меняется адрес
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда
				// для получения тело запроса не используется, а меняется адрес
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда
				ДанныеЗапроса = РаботаСJSON.ПрочитатьJSONИзСтроки(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;
				Если ДанныеЗапроса.Свойство("requestBody") Тогда 
					ТекстЗапроса = ДанныеЗапроса.requestBody;
				КонецЕсли;
			КонецЕсли;	
			
			///////////////////////////////////////////////////////
			// журналирование				
			ДанныеОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
			ДанныеОбмена.Вставить("ТекстСообщения", ТекстЗапроса);
			ДанныеОбмена.Вставить("ДатаОтправки", 	ТекущаяДатаСеанса());
			ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
			ДанныеОбмена.Вставить("ИсходящийЗапрос",Истина);
			РаботаСЖурналомОбмена.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
			//////////////////////////////////////////////////////	

			// отправка данных
			Соединение = РаботаСHTTP.СоздатьHTTPСоединение(СервисAPI);	
			
			Запрос = РаботаСHTTP.СоздатьHTTPЗапрос(АдресРесурса, СервисAPI);
			Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);	
						
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда 
				ОтветHTTP = Соединение.Записать(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.POST Тогда	
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда	
				ОтветHTTP = Соединение.Удалить(Запрос);	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда	
				ОтветHTTP = Соединение.Получить(Запрос);		
			Иначе
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			КонецЕсли;
			
			СтрокаJSONОтвет 	 			= ОтветHTTP.ПолучитьТелоКакСтроку();
			СтруктураВозврата.КодСостояния  = ОтветHTTP.КодСостояния;
			
			Если ОтветHTTP.КодСостояния >= 400 Тогда 
				РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, СтрокаJSONОтвет, ОтветHTTP.КодСостояния);
			КонецЕсли;
		Иначе		
			РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНеверныйПолучательДанных());
		КонецЕсли;			
	Иначе	
		РаботаСHTTP.ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, РаботаСHTTP.ИсключениеНеверныйПолучательДанных());	
	КонецЕсли;
	
		
	///////////////////////////////////////////////////////
	// журналирование ответа
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, СтруктураВозврата.ТекстОшибки, СтруктураВозврата.КодСостояния);
	Иначе		
		СтруктураВозврата.Данные = СтрокаJSONОтвет;
		OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, СтруктураВозврата.КодСостояния);
	КонецЕсли;
	//////////////////////////////////////////////////////		
	
	ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(СервисAPI, МетодЗапроса, СтруктураОтбораОбмена.ИдентификаторЗапроса, СтрокаJSONОтвет, СтруктураВозврата.ЕстьОшибки);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(СервисAPI, МетодЗапроса, ИдентификаторЗапроса, СтрокаJSONОтвет, ЕстьОшибки)
		
//	// обработка ответа
//	Если МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросов.JIRA_httpGetCalendarUserKey") Тогда 
//		
//		Если ЕстьОшибки Тогда
//			Возврат;
//		КонецЕсли;
//		
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет);
//		Если ДанныеJSON = Неопределено 
//			ИЛИ ТипЗнч(ДанныеJSON) <> Тип("Массив") Тогда 
//			ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены. Подробности: Текст сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + "> некорректен";
//			OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);
//						
//			Возврат;
//		ИначеЕсли ТипЗнч(ДанныеJSON) = Тип("Массив") И ДанныеJSON.Количество() = 0 Тогда 
//			Возврат; // ничего не отдает	
//		КонецЕсли;	
//		
//		Для Каждого ДанныеПользователя Из ДанныеJSON Цикл 
//			Попытка
//								
//				// находим пользователя для заполнения UserKeyCalendarJIRA
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//					"ВЫБРАТЬ
//					|	Пользователи.Ссылка,
//					|	Пользователи.UserKeyCalendarJIRA,
//					|	Пользователи.Login
//					|ИЗ
//					|	Справочник.Пользователи КАК Пользователи
//					|ГДЕ
//					|	Пользователи.UserKeyCalendarJIRA = """"
//					|	И Пользователи.Login = &Login
//					|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
//				
//				Запрос.УстановитьПараметр("Login", ДанныеПользователя.Получить("name"));
//				РезультатЗапроса = Запрос.Выполнить();
//			
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Пользователь = Выборка.Ссылка;
//					
//					ПользовательОбъект = Пользователь.ПолучитьОбъект();
//					
//					ПользовательОбъект.UserKeyCalendarJIRA = ДанныеПользователя.Получить("key");
//					ПользовательОбъект.ОбменДанными.Загрузка = Истина; 
//					ПользовательОбъект.Записать();					
//				КонецЦикла;	
//			Исключение
//				ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены по тексту сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + ">. Подробности: " + ОписаниеОшибки();
//				OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);	
//			КонецПопытки;
//		КонецЦикла;				
//	КонецЕсли;
//	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// функции исключения

Функция ИсключениеПустойПакетДанных(КодЯзыка = "Все") Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Пустой пакет данных",  "Empty data packet", КодЯзыка);

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(КодЯзыка = "Все") Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Некорректный пакет данных",  "Invalid data packet", КодЯзыка);

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНетДанныхДляОтправки() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Нет данных для отправки",  "No data to send", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеверныйТипДанныхДляОтправки() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный тип данных для отправки",  "Wrong data type to send", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеверныйПолучательДанных() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не верный получатель данных",  "Invalid data recipient", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеДанныеНеОтправлены() Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Данные не отправлены",  "Data not sent", "Все");

КонецФункции // ИсключениеНекорректныйПакетДанных()




#КонецОбласти
