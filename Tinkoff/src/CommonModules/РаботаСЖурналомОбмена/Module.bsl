
#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЖУРНАЛОМ ОБМЕНА ДАННЫМИ С ВНЕШНИМИ СИСТЕМАМИ  
//

Функция СтруктураИзмеренийОбмена(Период, Знач МетодЗапроса, ИдентификаторЗапроса, СервисAPI) Экспорт
	
	СтруктураИзмеренийОбмена = Новый Структура();
	СтруктураИзмеренийОбмена.Вставить("Период", 				Период);
	
	Если ТипЗнч(МетодЗапроса) = Тип("Строка") Тогда 
		МетодЗапроса = ПолучитьМетодЗапроса(МетодЗапроса,Истина);	
	КонецЕсли;
	
	СтруктураИзмеренийОбмена.Вставить("МетодЗапроса", 			МетодЗапроса);
	СтруктураИзмеренийОбмена.Вставить("ИдентификаторЗапроса", 	ИдентификаторЗапроса);	
		
	СтруктураИзмеренийОбмена.Вставить("СервисAPI", 				СервисAPI);
	
	Возврат СтруктураИзмеренийОбмена;
	
КонецФункции

// ЗаписатьДанныеВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами"
// Параметры
//	СтруктураДанных	- Структура - Содержит данные для регистра
//	
Процедура ЗаписатьДанныеВЖурналОбмена(СтруктураДанных) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОбменаДаннымиСВнешнимиСистемами.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	
	МенеджерЗаписи.Записать(Истина);
			
КонецПроцедуры // ЗаписатьДанныеВЖурналОбмена

// ОбновитьДанныеЖурналаОбмена
//  процедура обновляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами", перезаписывая РС новыми данными
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит значение измерений регистра для отбора
//	СтруктураДанныхДляОбновления- Структура данных для обновления: измерений, ресурсов, или реквизитов регистра.
Процедура ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналОбменаДаннымиСВнешнимиСистемами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураОтбораРегистра.Период);
	НаборЗаписей.Отбор.МетодЗапроса.Установить(СтруктураОтбораРегистра.МетодЗапроса);
	НаборЗаписей.Отбор.СервисAPI.Установить(СтруктураОтбораРегистра.СервисAPI);
	НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(СтруктураОтбораРегистра.ИдентификаторЗапроса); 
	//НаборЗаписей.Отбор.ИсходящийЗапрос.Установить(СтруктураОтбораРегистра.ИсходящийЗапрос);

	НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() > 0 Тогда 
		Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
			ЗаполнитьЗначенияСвойств(ЭлементНабора, СтруктураДанныхДляОбновления);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;	
		
КонецПроцедуры // ОбновитьДанныеЖурналаОбмена

// ЗаписатьВыполненоВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Выполнено"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ТекстСообщенияОтвет - Строка - ответ
//
Процедура ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораРегистра,Знач ТекстСообщенияОтвет, КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Выполнено);
	Если КодСостояния <> Неопределено Тогда 
		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
	КонецЕсли;
	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ЗаписатьПредупреждениеВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Предупреждение"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ТекстСообщенияОтвет - Строка - ответ
//	ОписаниеОшибки - Строка - описание ошибки
//
Процедура ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораРегистра, Знач ТекстСообщенияОтвет, Знач ОписаниеОшибки = "", КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Предупреждение);
	Если КодСостояния <> Неопределено Тогда 
		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
	КонецЕсли;
	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);	
	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ЗаписатьОшибкуВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбменаДаннымиСВнешнимиСистемами" со статусом "Ошибка"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ОписаниеОшибки - Строка - описание ошибки
//
Процедура ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораРегистра, Знач ОписаниеОшибки, КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Ошибка);
	Если КодСостояния <> Неопределено Тогда 
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ОписаниеОшибки, ":");
	КонецЕсли;	
	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ПолучитьДанныеЖурналаОбмена
//  функция получает данные РС "ЖурналОбменаДаннымиСВнешнимиСистемами" по отборам
// Параметры
//	ПараметрыОтбора	- Структура - Содержит данные для отбора записей регистра
//
Функция ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.Период,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.МетодЗапроса,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.СервисAPI,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ИдентификаторЗапроса,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ИсходящийЗапрос,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ДатаОкончания,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ДатаОтправки,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.РезультатВыполненияОбмена,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ТекстСообщения,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ТекстСообщенияОтвет,
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.ОписаниеОшибки
		|ИЗ
		|	РегистрСведений.ЖурналОбменаДаннымиСВнешнимиСистемами КАК ЖурналОбменаДаннымиСВнешнимиСистемами
		|ГДЕ
		|  ИСТИНА 
		|
		|//ОтборПоМетодамЗапроса
		|//ОтборПоРезультатамВыполненияОбмена
		|//ОтборПоСервисамAPI
		|//ОтборПоИсходящимЗапросам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОбменаДаннымиСВнешнимиСистемами.Период";
	
		
	Если ПараметрыОтбора <> Неопределено Тогда 
		Если ПараметрыОтбора.Свойство("МетодыЗапроса") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоМетодамЗапроса","	И ЖурналОбменаДаннымиСВнешнимиСистемами.МетодЗапроса В (&МетодыЗапроса)");		
			Запрос.УстановитьПараметр("МетодыЗапроса", ПараметрыОтбора.МетодыЗапроса);
		КонецЕсли;	
		Если ПараметрыОтбора.Свойство("РезультатыВыполненияОбмена") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоРезультатамВыполненияОбмена","	И ЖурналОбменаДаннымиСВнешнимиСистемами.РезультатВыполненияОбмена В (&РезультатыВыполненияОбмена)");			
			Запрос.УстановитьПараметр("РезультатыВыполненияОбмена", ПараметрыОтбора.РезультатыВыполненияОбмена);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СервисыAPI") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоСервисамAPI","	И ЖурналОбменаДаннымиСВнешнимиСистемами.СервисAPI В (&СервисыAPI)");			
			Запрос.УстановитьПараметр("СервисыAPI", ПараметрыОтбора.СервисыAPI);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИсходящийЗапрос") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсходящимЗапросам","	И ЖурналОбменаДаннымиСВнешнимиСистемами.ИсходящийЗапрос = &ИсходящийЗапрос");			
			Запрос.УстановитьПараметр("ИсходящийЗапрос", ПараметрыОтбора.ИсходящийЗапрос);
		КонецЕсли;
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТЗ_Данные = РезультатЗапроса.Выгрузить();

	Возврат ТЗ_Данные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка журнала обмена

// ОбработатьЖурналОбмена
Процедура ОбработатьЖурналОбмена() Экспорт
	
	Попытка
		ОбработатьЖурналОбменаВходящиеЗапросы();
	Исключение
		ТекстОшибки = "При обработке журнала обмена с внешними системами (входящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
		OW.ЗаписатьОшибку(, 
							ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
							ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
							ТекстОшибки);
	КонецПопытки;
	
	Попытка
		ОбработатьЖурналОбменаИсходящиеЗапросы();
	Исключение
		ТекстОшибки = "При обработке журнала обмена с внешними системами (исходящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
		OW.ЗаписатьОшибку(, 
							ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
							ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
							ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЖурналОбменаВходящиеЗапросы() Экспорт
		
	// находим события со статусом "Ожидание"	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.РезультатыВыполненияОбмена.Ожидание));
	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Ложь);
	
	МетодыЗапроса = Новый Массив;
	МетодыЗапроса.Добавить(Справочники.МетодыЗапросовСВнешнимиСистемами.ow_httpPostIssueReadyToImport);
	ПараметрыОтбора.Вставить("МетодыЗапроса", 			МетодыЗапроса);
		
	ДанныеЖурналаОбмена = ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
	
	Если ДанныеЖурналаОбмена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ТекстОшибкиEn = "";			
			
	Для Каждого ТекДанные Из ДанныеЖурналаОбмена Цикл
		
		МетодЗапроса 	= ТекДанные.МетодЗапроса;
		СервисAPI 		= ТекДанные.СервисAPI;
		ИсходящийЗапрос = ТекДанные.ИсходящийЗапрос;
		ТекстСообщения 	= ТекДанные.ТекстСообщения; 
		
		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, МетодЗапроса, ТекДанные.ИдентификаторЗапроса, СервисAPI);

		ЕстьОшибки = Ложь;
		ТекстОшибки = "";
		
		// загрузка задачи из JIRA
		Если МетодЗапроса = Справочники.МетодыЗапросовСВнешнимиСистемами.ow_httpPostIssueReadyToImport Тогда  
		
			СтруктураВозврата = ЗагрузитьЗадачуИзJIRA(ТекстСообщения, СервисAPI);				
			ЗадачаИзJIRA = СтруктураВозврата.Данные;
			Если ЗначениеЗаполнено(ЗадачаИзJIRA) Тогда 
				//// постановка в очередь на формировние документа
				//OW_ОтложеннаяОбработкаОбъектов.ДобавитьОбъектДляОтложеннойОбработки(ЗадачаИзJIRA, 
				//																	ПредопределенноеЗначение("Перечисление.ВидыДействийОтложеннойОбработки.СформироватьДокументПоЗадачеJIRA"));
			Иначе
				ЕстьОшибки = Истина;
				ТекстОшибки	= СтруктураВозврата.ТекстОшибки;
			КонецЕсли;		
			
		Иначе
			ЕстьОшибки = Истина;
			ТекстОшибки = "Отложенная обработка данного метода не предусмотрена";			
		КонецЕсли;	
			
		// журналирование
		Если ЕстьОшибки Тогда
			ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);
		ИначеЕсли НЕ ПустаяСтрока(ТекстОшибки) Тогда 
			ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, "", ТекстОшибки);		
		Иначе			
			ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, "");
		КонецЕсли;	
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьЖурналОбменаИсходящиеЗапросы() Экспорт
	
	// находим события со статусом "Подготовленно к отправке"
	ОтправитьПодготовленныеДанныеВоВнешнююСистему();
	
КонецПроцедуры

Процедура ОтправитьПодготовленныеДанныеВоВнешнююСистему() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке")));	
	//ПараметрыОтбора.Вставить("МетодыЗапроса", 				OW_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferences")));	
		
	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Истина);
	
	ДанныеДляОтправки = ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
	
	Если ДанныеДляОтправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// определение порядка загрузки
	// Запросы с "connections" обрабаытваем в конце
	ДанныеДляОтправки.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ДанныеДляОтправки Цикл
		ТекстСообщения	= ТекСтрока.ТекстСообщения;
		Если Найти(ТекстСообщения, "connections") > 0 Тогда 
			ТекСтрока.Приоритет = 2; // обрабатываем после основных пакетов
		ИначеЕсли ТекСтрока.МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetPlannedTime")
			ИЛИ ТекСтрока.МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_OWS_httpGetPlannedTime") Тогда 	
			ТекСтрока.Приоритет = 2; // обрабатываем после основных пакетов	
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОтправки.Сортировать("Приоритет Возр, Период Возр");

	Для Каждого ТекДанные Из ДанныеДляОтправки Цикл
		
		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, ТекДанные.МетодЗапроса, ТекДанные.ИдентификаторЗапроса, ТекДанные.СервисAPI);
		 
		СтруктураВозврата = ОтправитьДанныеВоВнешнююСистемуДляОбработки(СтруктураОтбораОбмена, ТекДанные.ТекстСообщения)
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьДанныеВоВнешнююСистемуДляОбработки(Знач СтруктураОтбораОбмена, СтрокаJSON) Экспорт
	
	СтруктураВозврата = ИнициализироватьСтруктутруВозврата();
	
	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда 	
		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНетДанныхДляОтправки());
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	МетодЗапроса   	= СтруктураОтбораОбмена.МетодЗапроса;
	СервисAPI 		= СтруктураОтбораОбмена.СервисAPI;
	
	СтрокаJSONОтвет = "";
	
		Если МетодЗапроса.ИсходящийЗапрос Тогда 
			
			// соединение			
			АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(МетодЗапроса.Адрес);
			ТекстЗапроса = СтрокаJSON;			
			
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда
				// для удаления тело запроса не используется, а меняется адрес
				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
					//АдресРесурса = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(АдресРесурса);
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда
				// для получения тело запроса не используется, а меняется адрес
				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда
				ДанныеЗапроса = OW.ПрочитатьJSONИзСтрокиПереопределяемый(ТекстЗапроса, Ложь);
				Если ДанныеЗапроса.Свойство("requestText") Тогда 
					АдресРесурса = АдресРесурса + ДанныеЗапроса.requestText;
				КонецЕсли;
				Если ДанныеЗапроса.Свойство("requestBody") Тогда 
					ТекстЗапроса = ДанныеЗапроса.requestBody;
				КонецЕсли;
			КонецЕсли;	
			
			///////////////////////////////////////////////////////
			// журналирование				
			ДанныеОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
			ДанныеОбмена.Вставить("ТекстСообщения", ТекстЗапроса);
			ДанныеОбмена.Вставить("ДатаОтправки", 	ТекущаяДатаСеанса());
			ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Ожидание"));
			ДанныеОбмена.Вставить("ИсходящийЗапрос",Истина);
			OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
			//////////////////////////////////////////////////////	

			// отправка данных
			Соединение = РаботаСHTTP.СоздатьHTTPСоединение(СервисAPI);	
			
			Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, СервисAPI);
			Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);	
						
			Если МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.PUT Тогда 
				ОтветHTTP = Соединение.Записать(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.POST Тогда	
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.DELETE Тогда	
				ОтветHTTP = Соединение.Удалить(Запрос);	
			ИначеЕсли МетодЗапроса.МетодHTTP = Перечисления.МетодыHTTPЗапросов.GET Тогда	
				ОтветHTTP = Соединение.Получить(Запрос);		
			Иначе
				ОтветHTTP = Соединение.ОтправитьДляОбработки(Запрос);
			КонецЕсли;
			
			СтрокаJSONОтвет 	 			= ОтветHTTP.ПолучитьТелоКакСтроку();
			СтруктураВозврата.КодСостояния  = ОтветHTTP.КодСостояния;
			
			Если ОтветHTTP.КодСостояния >= 400 Тогда 
				ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, СтрокаJSONОтвет, ОтветHTTP.КодСостояния);
			КонецЕсли;
		Иначе		
			ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());
		КонецЕсли;			
	Иначе	
		ЗафиксироватьОшибкуВСтруктуреВозврата(СтруктураВозврата, ИсключениеНеверныйПолучательДанных());	
	КонецЕсли;
	
		
	///////////////////////////////////////////////////////
	// журналирование ответа
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
		OW_ОбменДанными.ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, СтруктураВозврата.ТекстОшибки, СтруктураВозврата.КодСостояния);
	Иначе		
		СтруктураВозврата.Данные = СтрокаJSONОтвет;
		OW_ОбменДанными.ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, СтрокаJSONОтвет, СтруктураВозврата.КодСостояния);
	КонецЕсли;
	//////////////////////////////////////////////////////		
	
	ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(СервисAPI, МетодЗапроса, СтруктураОтбораОбмена.ИдентификаторЗапроса, СтрокаJSONОтвет, СтруктураВозврата.ЕстьОшибки);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ВыполнитьВспомогательныеДействияПослеОтправкиДанныхВоВнешнююСистемуДляОбработки(СервисAPI, МетодЗапроса, ИдентификаторЗапроса, СтрокаJSONОтвет, ЕстьОшибки)
		
//	// обработка ответа
//	Если МетодЗапроса = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpGetCalendarUserKey") Тогда 
//		
//		Если ЕстьОшибки Тогда
//			Возврат;
//		КонецЕсли;
//		
//		ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет);
//		Если ДанныеJSON = Неопределено 
//			ИЛИ ТипЗнч(ДанныеJSON) <> Тип("Массив") Тогда 
//			ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены. Подробности: Текст сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + "> некорректен";
//			OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);
//						
//			Возврат;
//		ИначеЕсли ТипЗнч(ДанныеJSON) = Тип("Массив") И ДанныеJSON.Количество() = 0 Тогда 
//			Возврат; // ничего не отдает	
//		КонецЕсли;	
//		
//		Для Каждого ДанныеПользователя Из ДанныеJSON Цикл 
//			Попытка
//								
//				// находим пользователя для заполнения UserKeyCalendarJIRA
//				Запрос = Новый Запрос;
//				Запрос.Текст = 
//					"ВЫБРАТЬ
//					|	Пользователи.Ссылка,
//					|	Пользователи.UserKeyCalendarJIRA,
//					|	Пользователи.Login
//					|ИЗ
//					|	Справочник.Пользователи КАК Пользователи
//					|ГДЕ
//					|	Пользователи.UserKeyCalendarJIRA = """"
//					|	И Пользователи.Login = &Login
//					|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
//				
//				Запрос.УстановитьПараметр("Login", ДанныеПользователя.Получить("name"));
//				РезультатЗапроса = Запрос.Выполнить();
//			
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Пользователь = Выборка.Ссылка;
//					
//					ПользовательОбъект = Пользователь.ПолучитьОбъект();
//					
//					ПользовательОбъект.UserKeyCalendarJIRA = ДанныеПользователя.Получить("key");
//					ПользовательОбъект.ОбменДанными.Загрузка = Истина; 
//					ПользовательОбъект.Записать();					
//				КонецЦикла;	
//			Исключение
//				ТекстСообщения = "Данные UserKeyCalendarJIRA пользователя не заполнены по тексту сообщения ответа обмена с идентифкатором запроса <" + ИдентификаторЗапроса + ">. Подробности: " + ОписаниеОшибки();
//				OW.ЗаписатьОшибку(, 
//						ПредопределенноеЗначение("Справочник.OW_РазделыУчета.ОбработкаЖурналаОбменаСВнешнимиСистемами"), 
//						ПредопределенноеЗначение("Справочник.OW_ТипыОшибок.Ошибка"),
//						ТекстСообщения);	
//			КонецПопытки;
//		КонецЦикла;				
//	КонецЕсли;
//	
КонецПроцедуры



// ПолучитьМетодЗапроса
//
// Параметры:
//  ИмяМетодаЗапроса  - Строка - наименование метода запроса для поиска
//  СоздаватьПриОтсутствии  - Булево - признак формирования элемента при отсутсвии
// Возвращаемое значение:
//   Справочник.МетодыЗапросов - найденный элемент
//
Функция ПолучитьМетодЗапроса(Знач ИмяМетодаЗапроса, СоздаватьПриОтсутствии = Истина) Экспорт
	
	МетодЗапроса = Справочники.МетодыЗапросов.ПустаяСсылка();
	
	// проверим длину не более 150 символов (ограничение наименования), чтобы не было дублей при поиске-создании
	Если СтрДлина(ИмяМетодаЗапроса) > 150 Тогда 
		ИмяМетодаЗапроса = Сред(ИмяМетодаЗапроса,1,150);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МетодыЗапросов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МетодыЗапросов КАК МетодыЗапросов
		|ГДЕ
		|	v.Наименование = &ИмяМетодаЗапроса
		|	И МетодыЗапросов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ИмяМетодаЗапроса", ИмяМетодаЗапроса);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 		
		Если СоздаватьПриОтсутствии = Истина Тогда 
			//формирование нового элемента
			МетодЗапроса = СоздатьМетодЗапроса(ИмяМетодаЗапроса);
		КонецЕсли;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МетодЗапроса = Выборка.Ссылка;
	КонецЕсли;

	Возврат МетодЗапроса;
	
КонецФункции	

Функция СоздатьМетодЗапроса(ИмяМетодаЗапроса)  Экспорт
	НовЭлемент = Справочники.МетодыЗапросов.СоздатьЭлемент();
	НовЭлемент.Наименование = ИмяМетодаЗапроса;
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
КонецФункции

#КонецОбласти
