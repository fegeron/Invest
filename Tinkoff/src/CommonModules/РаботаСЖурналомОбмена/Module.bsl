
#Область СлужебныеПроцедурыИФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЖУРНАЛОМ ОБМЕНА ДАННЫМИ С ВНЕШНИМИ СИСТЕМАМИ  
//

Функция СтруктураИзмеренийОбмена(Период, Знач МетодЗапроса, ИдентификаторЗапроса, СервисAPI) Экспорт
	
	СтруктураИзмеренийОбмена = Новый Структура();
	СтруктураИзмеренийОбмена.Вставить("Период", 				Период);
	
	Если ТипЗнч(МетодЗапроса) = Тип("Строка") Тогда 
		МетодЗапроса = ПолучитьМетодЗапроса(МетодЗапроса,Истина);	
	КонецЕсли;
	
	СтруктураИзмеренийОбмена.Вставить("МетодЗапроса", 			МетодЗапроса);
	СтруктураИзмеренийОбмена.Вставить("ИдентификаторЗапроса", 	ИдентификаторЗапроса);			
	СтруктураИзмеренийОбмена.Вставить("СервисAPI", 				СервисAPI);
	
	Возврат СтруктураИзмеренийОбмена;
	
КонецФункции

// ЗаписатьДанныеВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбмена"
// Параметры
//	СтруктураДанных	- Структура - Содержит данные для регистра
//	
Процедура ЗаписатьДанныеВЖурналОбмена(СтруктураДанных) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОбмена.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	
	МенеджерЗаписи.Записать(Истина);
			
КонецПроцедуры // ЗаписатьДанныеВЖурналОбмена

// ОбновитьДанныеЖурналаОбмена
//  процедура обновляет данные в РС "ЖурналОбмена", перезаписывая РС новыми данными
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит значение измерений регистра для отбора
//	СтруктураДанныхДляОбновления- Структура данных для обновления: измерений, ресурсов, или реквизитов регистра.
Процедура ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЖурналОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураОтбораРегистра.Период);
	НаборЗаписей.Отбор.МетодЗапроса.Установить(СтруктураОтбораРегистра.МетодЗапроса);
	НаборЗаписей.Отбор.СервисAPI.Установить(СтруктураОтбораРегистра.СервисAPI);
	НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(СтруктураОтбораРегистра.ИдентификаторЗапроса); 
	//НаборЗаписей.Отбор.ИсходящийЗапрос.Установить(СтруктураОтбораРегистра.ИсходящийЗапрос);

	НаборЗаписей.Прочитать();
		
	Если НаборЗаписей.Количество() > 0 Тогда 
		Для каждого ЭлементНабора Из НаборЗаписей Цикл
			
			ЗаполнитьЗначенияСвойств(ЭлементНабора, СтруктураДанныхДляОбновления);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;	
		
КонецПроцедуры // ОбновитьДанныеЖурналаОбмена

// ЗаписатьВыполненоВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбмена" со статусом "Выполнено"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ТекстСообщенияОтвет - Строка - ответ
//
Процедура ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораРегистра,Знач ТекстСообщенияОтвет, КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Выполнено);
	Если КодСостояния <> Неопределено Тогда 
		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
	КонецЕсли;
	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ЗаписатьПредупреждениеВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбмена" со статусом "Предупреждение"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ТекстСообщенияОтвет - Строка - ответ
//	ОписаниеОшибки - Строка - описание ошибки
//
Процедура ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораРегистра, Знач ТекстСообщенияОтвет, Знач ОписаниеОшибки = "", КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДатаСеанса());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Предупреждение);
	Если КодСостояния <> Неопределено Тогда 
		ТекстСообщенияОтвет = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ТекстСообщенияОтвет, ":");
	КонецЕсли;
	СтруктураДанныхДляОбновления.Вставить("ТекстСообщенияОтвет", 			ТекстСообщенияОтвет);	
	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ЗаписатьОшибкуВЖурналОбмена
//  процедура добавляет данные в РС "ЖурналОбмена" со статусом "Ошибка"
// Параметры
//	СтруктураОтбораРегистра	- Структура - Содержит данные для отбора записи регистра
//	ОписаниеОшибки - Строка - описание ошибки
//
Процедура ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораРегистра, Знач ОписаниеОшибки, КодСостояния = Неопределено) Экспорт
	
	СтруктураДанныхДляОбновления = Новый Структура();
	СтруктураДанныхДляОбновления.Вставить("ДатаОкончания",					ТекущаяДата());
	СтруктураДанныхДляОбновления.Вставить("РезультатВыполненияОбмена", 		Перечисления.РезультатыВыполненияОбмена.Ошибка);
	Если КодСостояния <> Неопределено Тогда 
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(Строка(КодСостояния), ОписаниеОшибки, ":");
	КонецЕсли;	
	СтруктураДанныхДляОбновления.Вставить("ОписаниеОшибки", 				ОписаниеОшибки);

	ОбновитьДанныеЖурналаОбмена(СтруктураОтбораРегистра, СтруктураДанныхДляОбновления);	
	
КонецПроцедуры

// ПолучитьДанныеЖурналаОбмена
//  функция получает данные РС "ЖурналОбмена" по отборам
// Параметры
//	ПараметрыОтбора	- Структура - Содержит данные для отбора записей регистра
//
Функция ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОбмена.Период,
		|	ЖурналОбмена.МетодЗапроса,
		|	ЖурналОбмена.СервисAPI,
		|	ЖурналОбмена.ИдентификаторЗапроса,
		|	ЖурналОбмена.ИсходящийЗапрос,
		|	ЖурналОбмена.ДатаОкончания,
		|	ЖурналОбмена.ДатаОтправки,
		|	ЖурналОбмена.РезультатВыполненияОбмена,
		|	ЖурналОбмена.ТекстСообщения,
		|	ЖурналОбмена.ТекстСообщенияОтвет,
		|	ЖурналОбмена.ОписаниеОшибки
		|ИЗ
		|	РегистрСведений.ЖурналОбмена КАК ЖурналОбмена
		|ГДЕ
		|  ИСТИНА 
		|
		|//ОтборПоМетодамЗапроса
		|//ОтборПоРезультатамВыполненияОбмена
		|//ОтборПоСервисамAPI
		|//ОтборПоИсходящимЗапросам
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОбмена.Период";
	
		
	Если ПараметрыОтбора <> Неопределено Тогда 
		Если ПараметрыОтбора.Свойство("МетодыЗапроса") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоМетодамЗапроса","	И ЖурналОбмена.МетодЗапроса В (&МетодыЗапроса)");		
			Запрос.УстановитьПараметр("МетодыЗапроса", ПараметрыОтбора.МетодыЗапроса);
		КонецЕсли;	
		Если ПараметрыОтбора.Свойство("РезультатыВыполненияОбмена") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоРезультатамВыполненияОбмена","	И ЖурналОбмена.РезультатВыполненияОбмена В (&РезультатыВыполненияОбмена)");			
			Запрос.УстановитьПараметр("РезультатыВыполненияОбмена", ПараметрыОтбора.РезультатыВыполненияОбмена);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("СервисыAPI") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоСервисамAPI","	И ЖурналОбмена.СервисAPI В (&СервисыAPI)");			
			Запрос.УстановитьПараметр("СервисыAPI", ПараметрыОтбора.СервисыAPI);
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ИсходящийЗапрос") Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоИсходящимЗапросам","	И ЖурналОбмена.ИсходящийЗапрос = &ИсходящийЗапрос");			
			Запрос.УстановитьПараметр("ИсходящийЗапрос", ПараметрыОтбора.ИсходящийЗапрос);
		КонецЕсли;
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТЗ_Данные = РезультатЗапроса.Выгрузить();

	Возврат ТЗ_Данные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка журнала обмена

// ОбработатьЖурналОбмена
Процедура ОбработатьЖурналОбмена() Экспорт
	
	Попытка
		ОбработатьЖурналОбменаВходящиеЗапросы();
	Исключение
		ТекстОшибки = "При обработке журнала обмена с внешними системами (входящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации("ОбработкаЖурналаОбменаСВнешнимиСистемами", ТекстОшибки);
	КонецПопытки;
	
	Попытка
		ОбработатьЖурналОбменаИсходящиеЗапросы();
	Исключение
		ТекстОшибки = "При обработке журнала обмена с внешними системами (исходящие запросы) возникли ошибки: " + ОписаниеОшибки(); 
		ОбщегоНазначенияСервер.ЗаписатьОшибкуВЖурналРегистрации("ОбработкаЖурналаОбменаСВнешнимиСистемами", ТекстОшибки);
	КонецПопытки
	
КонецПроцедуры

Процедура ОбработатьЖурналОбменаВходящиеЗапросы() Экспорт
//		
//	// находим события со статусом "Ожидание"	
//	ПараметрыОтбора = Новый Структура();
//	ПараметрыОтбора.Вставить("РезультатыВыполненияОбмена", 	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.РезультатыВыполненияОбмена.Ожидание));
//	ПараметрыОтбора.Вставить("ИсходящийЗапрос", 			Ложь);
//	
//	МетодыЗапроса = Новый Массив;
//	МетодыЗапроса.Добавить(Справочники.МетодыЗапросов.ow_httpPostIssueReadyToImport);
//	ПараметрыОтбора.Вставить("МетодыЗапроса", 			МетодыЗапроса);
//		
//	ДанныеЖурналаОбмена = ПолучитьДанныеЖурналаОбмена(ПараметрыОтбора);
//	
//	Если ДанныеЖурналаОбмена.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//		
//	ЕстьОшибки = Ложь;
//	ТекстОшибки = "";
//	ТекстОшибкиEn = "";			
//			
//	Для Каждого ТекДанные Из ДанныеЖурналаОбмена Цикл
//		
//		МетодЗапроса 	= ТекДанные.МетодЗапроса;
//		СервисAPI 		= ТекДанные.СервисAPI;
//		ИсходящийЗапрос = ТекДанные.ИсходящийЗапрос;
//		ТекстСообщения 	= ТекДанные.ТекстСообщения; 
//		
//		СтруктураОтбораОбмена = СтруктураИзмеренийОбмена(ТекДанные.Период, МетодЗапроса, ТекДанные.ИдентификаторЗапроса, СервисAPI);
//
//		ЕстьОшибки = Ложь;
//		ТекстОшибки = "";
//		
//		// загрузка задачи из JIRA
//		Если МетодЗапроса = Справочники.МетодыЗапросов.ow_httpPostIssueReadyToImport Тогда  
//		
//			СтруктураВозврата = ЗагрузитьЗадачуИзJIRA(ТекстСообщения, СервисAPI);				
//			ЗадачаИзJIRA = СтруктураВозврата.Данные;
//			Если ЗначениеЗаполнено(ЗадачаИзJIRA) Тогда 
//				//// постановка в очередь на формировние документа
//				//OW_ОтложеннаяОбработкаОбъектов.ДобавитьОбъектДляОтложеннойОбработки(ЗадачаИзJIRA, 
//				//																	ПредопределенноеЗначение("Перечисление.ВидыДействийОтложеннойОбработки.СформироватьДокументПоЗадачеJIRA"));
//			Иначе
//				ЕстьОшибки = Истина;
//				ТекстОшибки	= СтруктураВозврата.ТекстОшибки;
//			КонецЕсли;		
//			
//		Иначе
//			ЕстьОшибки = Истина;
//			ТекстОшибки = "Отложенная обработка данного метода не предусмотрена";			
//		КонецЕсли;	
//			
//		// журналирование
//		Если ЕстьОшибки Тогда
//			ЗаписатьОшибкуВЖурналОбмена(СтруктураОтбораОбмена, ТекстОшибки);
//		ИначеЕсли НЕ ПустаяСтрока(ТекстОшибки) Тогда 
//			ЗаписатьПредупреждениеВЖурналОбмена(СтруктураОтбораОбмена, "", ТекстОшибки);		
//		Иначе			
//			ЗаписатьВыполненоВЖурналОбмена(СтруктураОтбораОбмена, "");
//		КонецЕсли;	
//			
//	КонецЦикла;
//		
КонецПроцедуры

Процедура ОбработатьЖурналОбменаИсходящиеЗапросы() Экспорт
	
	// находим события со статусом "Подготовленно к отправке"
	РаботаСHTTP.ОтправитьПодготовленныеДанныеВоВнешнююСистему();
	
КонецПроцедуры


// ПолучитьМетодЗапроса
//
// Параметры:
//  ИмяМетодаЗапроса  - Строка - наименование метода запроса для поиска
//  СоздаватьПриОтсутствии  - Булево - признак формирования элемента при отсутсвии
// Возвращаемое значение:
//   Справочник.МетодыЗапросов - найденный элемент
//
Функция ПолучитьМетодЗапроса(Знач ИмяМетодаЗапроса, СоздаватьПриОтсутствии = Истина) Экспорт
	
	МетодЗапроса = Справочники.МетодыЗапросов.ПустаяСсылка();
	
	// проверим длину не более 150 символов (ограничение наименования), чтобы не было дублей при поиске-создании
	Если СтрДлина(ИмяМетодаЗапроса) > 150 Тогда 
		ИмяМетодаЗапроса = Сред(ИмяМетодаЗапроса,1,150);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МетодыЗапросов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МетодыЗапросов КАК МетодыЗапросов
		|ГДЕ
		|	v.Наименование = &ИмяМетодаЗапроса
		|	И МетодыЗапросов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ИмяМетодаЗапроса", ИмяМетодаЗапроса);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 		
		Если СоздаватьПриОтсутствии = Истина Тогда 
			//формирование нового элемента
			МетодЗапроса = СоздатьМетодЗапроса(ИмяМетодаЗапроса);
		КонецЕсли;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МетодЗапроса = Выборка.Ссылка;
	КонецЕсли;

	Возврат МетодЗапроса;
	
КонецФункции	

Функция СоздатьМетодЗапроса(ИмяМетодаЗапроса)  Экспорт
	НовЭлемент = Справочники.МетодыЗапросов.СоздатьЭлемент();
	НовЭлемент.Наименование = ИмяМетодаЗапроса;
	НовЭлемент.Записать();
	
	Возврат НовЭлемент.Ссылка;
КонецФункции

#КонецОбласти
