
#Область RestAPI 
    
//	https://docs.atlassian.com/software/jira/docs/api/REST/8.4.2/#api/2/issue-getRemoteIssueLinkById
// 
//	Get remote issue link by id
//	GET /rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}
//
//	Update remote issue link
//	PUT /rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}

#КонецОбласти

Функция ПолучитьМеткуТекущаяДата(НомерЗадачи = "")
    
    ГСЧ = Новый ГенераторСлучайныхЧисел(255);
    СлчЧисло = ГСЧ.СлучайноеЧисло(0, 999);
    МеткаТекущаяДата 	= СокрЛП(ТекущаяДата());
    МеткаТекущаяДата 	= СтрЗаменить(МеткаТекущаяДата, ":", "");
    МеткаТекущаяДата 	= СтрЗаменить(МеткаТекущаяДата, " ", "");
    МеткаТекущаяДата 	= СтрЗаменить(МеткаТекущаяДата, ".", "");
    ИмяБазы 			= НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");
    МеткаТекущаяДата 	= "" + сокрЛП(ИмяБазы) + "_" + МеткаТекущаяДата + "_" + сокрЛП(НомерЗадачи)+СокрЛП(СлчЧисло);
    Возврат МеткаТекущаяДата;
КонецФункции

Функция ИспользоватьОбработкуПостингаJIRAOwsЧерезJIRASpb(Знач НаДату = Неопределено) Экспорт       
	//++OW Копачев А.С. 06.05.2019  
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb = ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb();;
	
	Возврат ?(НЕ ЗначениеЗаполнено(ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb), Ложь, НаДату >= ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb);	
	//--OW Копачев А.С. 06.05.2019
КонецФункции	

Функция ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb() Экспорт        
	//++OW Копачев А.С. 06.05.2019  
	ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb = Константы.ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb.Получить();	
	
	Возврат ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb;
	//--OW Копачев А.С. 06.05.2019
КонецФункции

Функция ОпределитьWorkTypeПоIssueType(IssueType) Экспорт
	//+ Пилюгин В.Е. 22.06.2017
	WorkType = Перечисления.OW_ТипТаска.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(IssueType) Тогда
		Возврат WorkType;
	КонецЕсли; 
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	OW_СоответствияWorkTypeИIssueTypeДляПостинга.WorkType КАК WorkType
	|ИЗ
	|	РегистрСведений.OW_СоответствияWorkTypeИIssueTypeДляПостинга КАК OW_СоответствияWorkTypeИIssueTypeДляПостинга
	|ГДЕ
	|	OW_СоответствияWorkTypeИIssueTypeДляПостинга.IssueType = &IssueType";
	Запрос.УстановитьПараметр("IssueType", IssueType);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		OW.ЗаписатьОшибку(IssueType, Справочники.OW_РазделыУчета.JIRA_IssueTypeИлиWorkTypeПроблема, Справочники.OW_ТипыОшибок.Ошибка,
							"Для Issue type " + IssueType + " найдено БОЛЕЕ ОДНОГО сопоставленного Work type!");
	Иначе
		Если Выборка.Следующий() Тогда
			WorkType = Выборка.WorkType; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат WorkType;	
	//- Пилюгин В.Е. 22.06.2017		
КонецФункции

Функция ОпределитьПроектПоНомеруЗадачи(НомерЗадачи) Экспорт
	НомерСимволаТире = СтрНайти(НомерЗадачи, "-");
	Если НомерСимволаТире > 0 Тогда
		НомерСимволаТире = НомерСимволаТире - 1;
		Возврат ВРег(Лев(НомерЗадачи, НомерСимволаТире));
	Иначе
		Возврат "";
	КонецЕсли; 
КонецФункции

Функция ПроектJIRAНеУчаствуетВЗагрузкеДанныхЗадач(НомерЗадачи) Экспорт
	//+ Пилюгин В.Е. 14.11.2017
	Проект = ОпределитьПроектПоНомеруЗадачи(НомерЗадачи);
	
	СписокПроектов = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.ПроектJIRAНеУчаствующийВЗагрузкеДанныхЗадач, ТекущаяДата());	
	
	Если СписокПроектов.НайтиПоЗначению(Проект) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
	//Для каждого эл Из СписокПроектов Цикл
	//	Если вРег(эл.Значение) = вРег(Проект) Тогда
	//		Возврат Истина;
	//	КонецЕсли; 
	//КонецЦикла; 
	//
	//Возврат Ложь;
	//- Пилюгин В.Е. 14.11.2017		
КонецФункции
 
Функция ОпределитьПроектJIRAПоСоответствию(КонфигурацияЛицензий, ТипФазы = Неопределено, СинхронизацияКлиента = Неопределено) Экспорт
    //+ Пилюгин В.Е. 21.03.2018
    УстановитьПривилегированныйРежим(Истина);
    ПроектJIRA = Неопределено;
   
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    СоответствиеПартнеровПроектамВJIRA.ПроектJIRA
    |ИЗ
    |    Справочник.СоответствиеПартнеровПроектамВJIRA КАК СоответствиеПартнеровПроектамВJIRA
    |ГДЕ
    |    СоответствиеПартнеровПроектамВJIRA.КонфигурацияЛицензий = &КонфигурацияЛицензий
    |    И НЕ СоответствиеПартнеровПроектамВJIRA.ПометкаУдаления
    |    И ВЫБОР
    |            КОГДА &ОтборПоТипуФазы
    |                ТОГДА СоответствиеПартнеровПроектамВJIRA.ТипФазы = &ТипФазы
    |            ИНАЧЕ ИСТИНА
    |        КОНЕЦ";
    Запрос.УстановитьПараметр("КонфигурацияЛицензий", КонфигурацияЛицензий);
    Запрос.УстановитьПараметр("ОтборПоТипуФазы", ЗначениеЗаполнено(ТипФазы));
    Запрос.УстановитьПараметр("ТипФазы", ТипФазы);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
   
    //+++ Брук 17.10.2019
    Если СинхронизацияКлиента = Неопределено Тогда
        Если Выборка.Количество() = 1 Тогда
            Выборка.Следующий();
            ПроектJIRA = Выборка.ПроектJIRA;
        КонецЕсли;
    Иначе
        Если Выборка.Количество() > 0 Тогда
            Выборка.Следующий();
            ПроектJIRA = Выборка.ПроектJIRA;
        КонецЕсли;
    КонецЕсли;        
    //*** Брук 17.10.2019
   
    Возврат ПроектJIRA;   
    //- Пилюгин В.Е. 21.03.2018
КонецФункции

Функция ОпределитьПроектJIRAПоДаннымКлиента(РегионКлиента, СтатусКлиента) Экспорт
    //++OW Копачев А.С. 20.11.2019 ONEC-4861 
    УстановитьПривилегированныйРежим(Истина);
    ПроектJIRA = Неопределено;
   
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |	МаппингПроектаJIRAИДанныхКлиента.ПроектJIRA
    |ИЗ
    |	РегистрСведений.МаппингПроектаJIRAИДанныхКлиента КАК МаппингПроектаJIRAИДанныхКлиента
    |ГДЕ
    |	МаппингПроектаJIRAИДанныхКлиента.РегионКлиента = &РегионКлиента
    |	И МаппингПроектаJIRAИДанныхКлиента.СтатусКлиента = &СтатусКлиента";
	
    Запрос.УстановитьПараметр("РегионКлиента", РегионКлиента);
    Запрос.УстановитьПараметр("СтатусКлиента", СтатусКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
        Выборка.Следующий();
		
		ПроектJIRA = Выборка.ПроектJIRA;
	КонецЕсли;
	
    Возврат ПроектJIRA;   
   //--OW Копачев А.С. 20.11.2019 ONEC-4861

КонецФункции

Функция ОпределитьПриоритетJIRA(Знач Приоритет, ИнстансJIRA)
	//+ Пилюгин В.Е. 23.03.2018
	
	//++OW Копачев А.С. 06.06.2019 ONEC-4531
	Если ТипЗнч(Приоритет) = Тип("ПеречислениеСсылка.ПриоритетыЗадач") Тогда 
		Приоритет = Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(Приоритет);
	ИначеЕсли ТипЗнч(Приоритет) = Тип("ПеречислениеСсылка.ПриоритетыПроектов") Тогда 
		Приоритет = Перечисления.ПриоритетыПроектов.ПолучитьПриоритетJIRA(Приоритет);	
	КонецЕсли;	
	//--OW Копачев А.С. 06.06.2019 ONEC-4531
	
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда			
		Если нРег(Приоритет) = "blocker" Тогда
			ПриоритетJIRA = "1";
		ИначеЕсли нРег(Приоритет) = "critical" Тогда
			ПриоритетJIRA = "2";
		ИначеЕсли нРег(Приоритет) = "major" 
			//++OW Копачев А.С. 20.06.2019 ONEC-4293 
			ИЛИ нРег(Приоритет)="highest"
			//--OW Копачев А.С. 20.06.2019 ONEC-4293  
			Тогда
			ПриоритетJIRA = "3";
		ИначеЕсли нРег(Приоритет) = "normal" 
			//++OW Копачев А.С. 20.06.2019 ONEC-4293 
			ИЛИ нРег(Приоритет) = "medium"
			//--OW Копачев А.С. 20.06.2019 ONEC-4293 
			Тогда
			ПриоритетJIRA = "4";
		ИначеЕсли нРег(Приоритет) = "low" Тогда
			ПриоритетJIRA = "5";
		Иначе
			ПриоритетJIRA = "4";  //приоритет Normal
		КонецЕсли;
		
	ИначеЕсли ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда
		Если нРег(Приоритет) = "highest" 
			ИЛИ нРег(Приоритет) = "critical" Тогда    //OW Копачев А.С. 16.04.2021 ONEC-6634 
			ПриоритетJIRA = "10000";
		ИначеЕсли нРег(Приоритет) = "high" Тогда
			ПриоритетJIRA = "10001";
		ИначеЕсли нРег(Приоритет) = "medium" Тогда
			ПриоритетJIRA = "10002";
		ИначеЕсли нРег(Приоритет) = "low" Тогда
			ПриоритетJIRA = "10003";
		ИначеЕсли нРег(Приоритет) = "lowest" Тогда
			ПриоритетJIRA = "10004";
			
		//++OW Копачев А.С. 06.06.2019 ONEC-4531
		// временные приоритеты от Жиры ОВС на Жире СПБ от оценочного проекта
		ИначеЕсли нРег(Приоритет)="major" Тогда
			ПриоритетJIRA = "10000";    // highest
		ИначеЕсли нРег(Приоритет)="normal" Тогда
			ПриоритетJIRA = "10002";    // medium
		//--OW Копачев А.С. 06.06.2019 ONEC-4531	
		
		Иначе
			ПриоритетJIRA = "10002";  //приоритет Medium
		КонецЕсли;
				
	КонецЕсли; 
	
	Возврат ПриоритетJIRA;
	//- Пилюгин В.Е. 23.03.2018	
КонецФункции

Функция ОпределитьТипЗадачиДляВыгрузкиВJIRAпоТипуФазы(ТипФазы)
	
	//++OW Копачев А.С. 06.06.2019 ONEC-4531	
	Соответствие = СоответствиеТипаФазыТипуЗадачиДляВыгрузкиВJIRA();
	ТипЗадачиJIRA = Соответствие.Получить(ТипФазы); 	
	
	Возврат ТипЗадачиJIRA;
	//--OW Копачев А.С. 06.06.2019 ONEC-4531

КонецФункции

Функция ОпределитьТипФазыПоТипуЗадачиJIRA(ТипЗадачиJIRA) Экспорт
	
	//++OW Копачев А.С. 06.06.2019 ONEC-4531
	Значение = Неопределено;
	
	Соответствие = СоответствиеТипаФазыТипуЗадачиДляВыгрузкиВJIRA();
	Для Каждого Эл Из Соответствие Цикл
		ТипФазы = Эл.Ключ;
		ТипЗадачи = Эл.Значение;
		Если ТипЗадачи = ТипЗадачиJIRA Тогда 
			Значение = ТипФазы;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Значение;
	//--OW Копачев А.С. 06.06.2019 ONEC-4531

КонецФункции

Функция СоответствиеТипаФазыТипуЗадачиДляВыгрузкиВJIRA() Экспорт
	
	Соответствие = Новый Соответствие;
	
	//+++ Брук Б 06.06.2020 ONEC-5716
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.Estimation"), 
	//						ПредопределенноеЗначение("Справочник.OW_IssueType.Estimation"));
							ПредопределенноеЗначение("Справочник.OW_IssueType.BAEstimation"));
							
	//	ниже - временный костыль для возможности динамического обновления
	//	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.Estimation"), 
	//						Справочники.OW_IssueType.НайтиПоНаименованию("BA Estimation"));
	//--- Брук Б 06.06.2020 ONEC-5716
							
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.IndicativeEstimation"), 
							ПредопределенноеЗначение("Справочник.OW_IssueType.IndicativeEstimation"));
							
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.PreSaleSupport"), 
							ПредопределенноеЗначение("Справочник.OW_IssueType.PreSaleSupport"));
							
	//++OW Копачев А.С. 13.03.2023 ONEC-8458 
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.TechnicalRequirements"), 
							ПредопределенноеЗначение("Справочник.OW_IssueType.TechnicalRequirements"));
	//--OW Копачев А.С. 13.03.2023 ONEC-8458
	
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.Research"), 
							ПредопределенноеЗначение("Справочник.OW_IssueType.Research"));
							
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.ТипыФаз.SolutionElaboration"), 
							ПредопределенноеЗначение("Справочник.OW_IssueType.Solution"));
						
	
	Возврат	Соответствие;
КонецФункции	

//++OW Копачев А.С. 31.03.2022 ONEC-7464
//функция возвращает данные задачи JIRA 
//	Параметры: КодИнтеграцииJIRA - Строка
//
//Функция ПолучитьИнфуПоТаску(НомерТаска, ИнстансJIRA = Неопределено) Экспорт
Функция ПолучитьИнфуПоТаску(КодИнтеграцииJIRA) Экспорт
//--OW Копачев А.С. 31.03.2022 ONEC-7464	

	СтруктураДанных = Новый Структура("Ссылка, ДатаНачала, ДатаОкончания, Статус, КодПроектаКлиентскойJIRA, PMAudit, ИнстансJIRA, БудетЗакрытаВТекущемКвартале, КомментарийКЗакрытиюФазы", 
										Справочники.ЗадачаJIRA.ПустаяСсылка(), Дата(1, 1, 1), Дата(1, 1, 1), Справочники.OW_СтатусыЗадачJIRA.ПустаяСсылка(), "", 0, Справочники.СоединениеССайтами.ПустаяСсылка(), Ложь, "");
	
	Если ЗначениеЗаполнено(КодИнтеграцииJIRA) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаJIRA.Ссылка,
		|	ЗадачаJIRA.DueDate,
		//++OW Копачев А.С. 14.02.2019 ONEC-4236 
		|	ЗадачаJIRA.ExternalIssueKey,
		//--OW Копачев А.С. 14.02.2019 ONEC-4236
		//++OW Копачев А.С. 12.04.2021 ONEC-6508
		|	ЗадачаJIRA.StartDate,
		//--OW Копачев А.С. 12.04.2021 ONEC-6508
		|	ЗадачаJIRA.Status,
		|	ЗадачаJIRA.PMAudit,
		//++OW Копачев А.С. 05.04.2023 ONEC-8496 
		|	ЗадачаJIRA.ToBeClosedInTheCurrentQuarter КАК ToBeClosedInTheCurrentQuarter,
		|	ЗадачаJIRA.CommentsToPhasesClosure КАК CommentsToPhasesClosure,
		//--OW Копачев А.С. 05.04.2023 ONEC-8496
		|	ЗадачаJIRA.ИнстансJIRA
		|ИЗ
		|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
		|ГДЕ
		//++OW Копачев А.С. 31.03.2022 ONEC-7464
		//|	ЗадачаJIRA.Код = &Код
		//|	И НЕ ЗадачаJIRA.ПометкаУдаления
		//|	И ВЫБОР
		//|			КОГДА &ОтборПоИнстансу
		//|				ТОГДА ЗадачаJIRA.ИнстансJIRA = &ИнстансJIRA
		//|			ИНАЧЕ ИСТИНА
		//|		КОНЕЦ";
		//Запрос.УстановитьПараметр("Код", НомерТаска);
		//Если ЗначениеЗаполнено(ИнстансJIRA) Тогда
		//	Запрос.УстановитьПараметр("ИнстансJIRA", ИнстансJIRA);
		//	Запрос.УстановитьПараметр("ОтборПоИнстансу", Истина);
		//Иначе
		//	Запрос.УстановитьПараметр("ОтборПоИнстансу", Ложь);
		//	Запрос.УстановитьПараметр("ИнстансJIRA", "");
		//КонецЕсли; 		
		|	ЗадачаJIRA.КодИнтеграции_JIRA = &КодИнтеграцииJIRA";
		
		Запрос.УстановитьПараметр("КодИнтеграцииJIRA", КодИнтеграцииJIRA);
		//--OW Копачев А.С. 31.03.2022 ONEC-7464
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанных.Ссылка = Выборка.Ссылка;       //OW Копачев А.С. 04.04.2022 ONEC-7464 
			СтруктураДанных.ДатаНачала = Выборка.StartDate;    //OW Копачев А.С. 12.04.2021 ONEC-6508
			СтруктураДанных.ДатаОкончания = Выборка.DueDate;
			СтруктураДанных.Статус = Выборка.Status;
			СтруктураДанных.КодПроектаКлиентскойJIRA = Выборка.ExternalIssueKey;  //OW Копачев А.С. 14.02.2019 ONEC-4236 
			СтруктураДанных.PMAudit = Выборка.PMAudit; //OW Копачев А.С. 07.04.2022 ONEC-7464 
			СтруктураДанных.ИнстансJIRA = Выборка.ИнстансJIRA; //OW Копачев А.С. 01.04.2022 ONEC-7464 
			//++OW Копачев А.С. 05.04.2023 ONEC-8496 
			СтруктураДанных.БудетЗакрытаВТекущемКвартале = Выборка.ToBeClosedInTheCurrentQuarter;
			СтруктураДанных.КомментарийКЗакрытиюФазы = Выборка.CommentsToPhasesClosure;
			//--OW Копачев А.С. 05.04.2023 ONEC-8496			
		КонецЕсли; 
	КонецЕсли; 
	Возврат СтруктураДанных;	
	//- Пилюгин В.Е. 05.07.2018
КонецФункции

//Функция ПолучитьИнфуПоТаскуСУчетомARBI(КодТаска) Экспорт
//	//+ Пилюгин В.Е. 30.07.2018
//	Если ОпределитьПроектПоНомеруЗадачи(КодТаска) = "ARBI" Тогда
//		ИнфаПоJiraТаску = ПолучитьИнфуПоТаску(КодТаска, ПолучитьИнстансДляJiraSpb());
//	Иначе
//		ИнфаПоJiraТаску = ПолучитьИнфуПоТаску(КодТаска);
//	КонецЕсли; 
//	Возврат ИнфаПоJiraТаску;
//	//+ Пилюгин В.Е. 30.07.2018
//КонецФункции

Функция ПолучитьСписокДоступныхJIRAПроектов() Экспорт
	//+ Пилюгин В.Е. 19.09.2018
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеПартнеровПроектамВJIRA.ПроектJIRA КАК ПроектJIRA
	|ИЗ
	|	Справочник.СоответствиеПартнеровПроектамВJIRA КАК СоответствиеПартнеровПроектамВJIRA
	|ГДЕ
	|	СоответствиеПартнеровПроектамВJIRA.ПроектJIRA <> ""OWCPI""
	|	И НЕ СоответствиеПартнеровПроектамВJIRA.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектJIRA";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	МассивПроектов = Новый Массив;
	МассивПроектов.Добавить("OWCPI");
	Пока Выборка.Следующий() Цикл
		МассивПроектов.Добавить(Выборка.ПроектJIRA);
	КонецЦикла; 
	Возврат МассивПроектов;	
	//- Пилюгин В.Е. 19.09.2018
КонецФункции

Функция ПолучитьЧасыРаботыСотрудникаПоУмолчанию() Экспорт 
	
	ЧасыРаботы = Новый Структура;
	
	ДлительностьРабочегоДняВЧасах = 8;
	
	ЧасыРаботы.Вставить("ЧасНачала", 9);
	ЧасыРаботы.Вставить("ЧасОкончания", ЧасыРаботы.ЧасНачала + ДлительностьРабочегоДняВЧасах);
	
	ЧасыРаботы.Вставить("ЧасНачалаУтро", ЧасыРаботы.ЧасНачала);
	ЧасыРаботы.Вставить("ЧасНачалаВечер", ЧасыРаботы.ЧасНачалаУтро + ДлительностьРабочегоДняВЧасах/2);
	
	ЧасыРаботы.Вставить("ДлительностьРабочегоДняВЧасах", ДлительностьРабочегоДняВЧасах);
	ЧасыРаботы.Вставить("ДлительностьПоловиныРабочегоДняВЧасах", ДлительностьРабочегоДняВЧасах/2);
	
	Возврат ЧасыРаботы;

КонецФункции	

Функция ПолучитьЧасовойПоясJIRAПоУмолчанию() Экспорт
	
	//++OW Копачев А.С. 22.08.2022 ONEC-7812 	
	Смещение = СмещениеСтандартногоВремени(ЧасовойПояс(), ТекущаяДатаСеанса()) / 3600;
	//--OW Копачев А.С. 22.08.2022 ONEC-7812

	Возврат Смещение; 
	
КонецФункции	
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ОБЩИЕ ФУНКЦИИ РАБОТЫ С JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Функция ПолучитьКодИнтеграции_JIRA(КодЗадачиJIRA, ИнстансJIRA) Экспорт
	Возврат ИнстансJIRA.Префикс + "-" + КодЗадачиJIRA;	
КонецФункции	

Функция ПолучитьВебАдресОсновнойJIRA(Инстанс) Экспорт
	Адрес = "";
	Если НЕ ЗначениеЗаполнено(Инстанс) Тогда
		Инстанс = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 	
	Если ЗначениеЗаполнено(Инстанс) Тогда
		Адрес = Инстанс.ПолныйАдрес;
	КонецЕсли; 
	Возврат Адрес;
КонецФункции

Функция ИспользоватьРазделениеПоБизнесРегионамJIRASPB() Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	ДатаНачалаИспользования = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПоБизнесРегионамJIRASPB);
	
	Если ЗначениеЗаполнено(ДатаНачалаИспользования) 
		И НачалоДня(ДатаНачалаИспользования) <= НачалоДня(ТекущаяДатаСеанса()) Тогда 
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

Функция ИспользоватьРазделениеПоБизнесРегионамJIRAOWS() Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	ДатаНачалаИспользования = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПоБизнесРегионамJIRAOWS);
	
	Если ЗначениеЗаполнено(ДатаНачалаИспользования) 
		И НачалоДня(ДатаНачалаИспользования) <= НачалоДня(ТекущаяДатаСеанса()) Тогда 
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ИНСТАНСАМИ  

//Функция получения инстанса по наименованию
//
Функция ПолучитьИнстансJIRA(Наименование = "JIRA", ВидИнстансаJIRA = Неопределено) Экспорт
	ИнстансJIRA = Справочники.СоединениеССайтами.НайтиПоНаименованию(Наименование, Истина);
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	// для совместимости
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
			ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();
		КонецЕсли;		
		ИнстансJIRA = ПолучитьИнстансДляJiraOws(ВидИнстансаJIRA);
	КонецЕсли;	
	//--OW Копачев А.С. 29.03.2022 ONEC-7464	
	Возврат ИнстансJIRA;
	
КонецФункции

//Функция получения инстанса-источника (EMEAA, RU) по пользователю
// Параметры: ПользовательВходящегоПодключения - Ссылка на справочник Пользователи
//            ЭтоJIRASPB - Булево. Используется для более точного указания вида JIRA, если пользователи могут пересекаться
//
Функция ПолучитьИнстансJIRAПоПользователюВходящегоПодключения(ПользовательВходящегоПодключения = Неопределено, ЭтоJIRASPB = Истина) Экспорт
	//++OW Копачев А.С. 30.03.2022 ONEC-7463
	ИнстансJIRA = ПолучитьИнстансДляJiraSpb();
	
	ВыбиратьСредиJIRASPB = ЭтоJIRASPB = Неопределено ИЛИ ЭтоJIRASPB = Истина;
	ВыбиратьСредиJIRAOWS = ЭтоJIRASPB = Неопределено ИЛИ ЭтоJIRASPB = Ложь;
	
	Если ЗначениеЗаполнено(ПользовательВходящегоПодключения) Тогда 			
		//SPB
		Если ВыбиратьСредиJIRASPB И ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияJIRA_SPB_EMEAA) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRASPB() Тогда
				ИнстансJIRA = ПолучитьИнстансДляJiraSpb_EMEAA();
			Иначе
				ИнстансJIRA = ПолучитьИнстансДляJiraSpb();	
			КонецЕсли;	
		ИначеЕсли ВыбиратьСредиJIRASPB И ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияJIRA_SPB_RU) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRASPB() Тогда
				ИнстансJIRA = ПолучитьИнстансДляJiraSpb_RU();	
	        Иначе
				ИнстансJIRA = ПолучитьИнстансДляJiraSpb();	
			КонецЕсли;
		//OWS	
		ИначеЕсли ВыбиратьСредиJIRAOWS И ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияJIRA_OWS_EMEAA) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRAOWS() Тогда
				ИнстансJIRA = ПолучитьИнстансДляJiraOws_EMEAA();
			Иначе
				ИнстансJIRA = ПолучитьИнстансДляJiraOws();
			КонецЕсли	
		ИначеЕсли ВыбиратьСредиJIRAOWS И ПользовательВходящегоПодключения = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательСоединенияJIRA_OWS_RU) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRAOWS() Тогда
				ИнстансJIRA = ПолучитьИнстансДляJiraOws_RU();
			Иначе
				ИнстансJIRA = ПолучитьИнстансДляJiraOws();
			КонецЕсли	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИнстансJIRA;
	//--OW Копачев А.С. 30.03.2022 ONEC-7463	
КонецФункции

Функция ПолучитьИнстансДляJiraSpb(ВидИнстансаJIRA = Неопределено) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	//Возврат ?(OW.ЭтоРабочаяБаза(), OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СоединениеССайтами_JIRASPB), OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СоединениеССайтами_JIRASPB_Copy));
	
	Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();	
	КонецЕсли;
	
	Если ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS") Тогда 
		Возврат	ПолучитьИнстансДляJiraSpb_RU(); 
	Иначе	
		Возврат ПолучитьИнстансДляJiraSpb_EMEAA(); 
	КонецЕсли;	
	//--OW Копачев А.С. 29.03.2022 ONEC-7464	
КонецФункции

Функция ПолучитьИнстансДляJiraSpb_EMEAA() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_EMEAA"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_EMEAA_Copy")); 
КонецФункции

Функция ПолучитьИнстансДляJiraSpb_RU() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_RU"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_RU_Copy")); 
КонецФункции

Функция ПолучитьИнстансДляJiraOws(ВидИнстансаJIRA = Неопределено) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	//Возврат ?(OW.ЭтоРабочаяБаза(), OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СоединениеССайтами_JIRA), OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СоединениеССайтами_JIRA_Copy));	
	
	Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();	
	КонецЕсли;

	Если ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS") Тогда 
		Возврат	ПолучитьИнстансДляJiraOws_RU(); 
	Иначе	
		Возврат ПолучитьИнстансДляJiraOws_EMEAA(); 
	КонецЕсли;	
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

Функция ПолучитьИнстансДляJiraOws_EMEAA() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_EMEAA"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_EMEAA_Copy")); 
КонецФункции

Функция ПолучитьИнстансДляJiraOws_RU() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_RU"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_RU_Copy")); 
КонецФункции

Функция ЭтоИнстансJiraSpb(Инстанс) Экспорт
	Возврат ЭтоИнстансJiraSpb_EMEAA(Инстанс)   
			ИЛИ ЭтоИнстансJiraSpb_RU(Инстанс);
КонецФункции
		
Функция ЭтоИнстансJiraSpb_EMEAA(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_EMEAA")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_EMEAA_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции
		
Функция ЭтоИнстансJiraSpb_RU(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_RU")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_RU_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

Функция ЭтоИнстансJiraOws(Инстанс) Экспорт
	Возврат ЭтоИнстансJiraOws_EMEAA(Инстанс)   
			ИЛИ ЭтоИнстансJiraOws_RU(Инстанс);
КонецФункции

Функция ЭтоИнстансJiraOws_EMEAA(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_EMEAA")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_EMEAA_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции
		
Функция ЭтоИнстансJiraOws_RU(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_RU")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_RU_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

//////Jira SD

Функция ПолучитьИнстансДляJiraSD(ВидИнстансаJIRA) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();	
	КонецЕсли;

	Если ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS") Тогда  
		ИнстансJIRA = ПолучитьИнстансДляJiraSD_RU();
	Иначе
		ИнстансJIRA = ПолучитьИнстансДляJiraSD_EMEAA();
	КонецЕсли;
		
	Возврат ИнстансJIRA; 
КонецФункции
	
Функция ПолучитьИнстансДляJiraSD_EMEAA() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_EMEAA"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_EMEAA_Copy")); 
КонецФункции

Функция ПолучитьИнстансДляJiraSD_RU() Экспорт
	Возврат ?(OW.ЭтоРабочаяБаза(), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_RU"), ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_RU_Copy")); 
КонецФункции

Функция ЭтоИнстансJiraSD_EMEAA(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_EMEAA")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_EMEAA_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции
		
Функция ЭтоИнстансJiraSD_RU(Инстанс) Экспорт
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	Возврат Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_RU")
			ИЛИ Инстанс = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SD_RU_Copy");
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
КонецФункции

Функция ЭтоИнстансJiraSD(Инстанс) Экспорт
	Возврат ЭтоИнстансJiraSD_EMEAA(Инстанс)   
			ИЛИ ЭтоИнстансJiraSD_RU(Инстанс);
КонецФункции

Функция ПолучитьИнстансJIRAИзПараметров(Параметры, ВидИнстансаJIRA = Неопределено) Экспорт
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//УстановитьПривилегированныйРежим(Истина);
	//ИнстансJIRA_строка = "JIRA";
	//Если Параметры.Свойство("ИнстансJIRA") Тогда
	//	Если ЗначениеЗаполнено(Параметры.ИнстансJIRA) Тогда
	//		ИнстансJIRA_строка = Параметры.ИнстансJIRA;		
	//	КонецЕсли; 
	//КонецЕсли;	
	//Возврат ПолучитьИнстансJIRA(ИнстансJIRA_строка, ВидИнстансаJIRA);
	
	ИнстансJIRA = Неопределено;
	Параметры.Свойство("ИнстансJIRA", ИнстансJIRA);
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда 
		Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
			ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();	
		КонецЕсли;
		ИнстансJIRA = ПолучитьИнстансДляJiraOws(ВидИнстансаJIRA);
	КонецЕсли;
	
	Возврат ИнстансJIRA;
	//--OW Копачев А.С. 04.04.2022 ONEC-7464

КонецФункции

//Функция вид истанса JIRA из реквизита объекта 
// Параметры: СсылкаНаОбъект - ссылка на объект
// 								Достпные ссылки: Пользователи, Организации, Парнеры, КонфигурацииЛицензий 
//
Функция ПолучитьВидИнстансаJIRAОбъекта(СсылкаНаОбъект) Экспорт 
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464	
	ТипЗначения = ТипЗнч(СсылкаНаОбъект);	
	Если ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда 
		ВидИнстансаJIRA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ТекущийВидИнстансJIRA");	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗначения = Тип("СправочникСсылка.Партнеры")
			//ИЛИ ТипЗначения = Тип("СправочникСсылка.ЗадачаJIRA")
			//ИЛИ ТипЗначения = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") 
			Тогда 
			
		ВидИнстансаJIRA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ВидИнстансJIRA");		
		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.КонфигурацииЛицензий") Тогда
		
		ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "ВидИнстансJIRA, Владелец");
		ВидИнстансаJIRA = ДанныеКонфигурацииЛицензий.ВидИнстансJIRA;
		Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
			// попробуем взять с клиента
			ВидИнстансаJIRA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеКонфигурацииЛицензий.Владелец, "ВидИнстансJIRA");
		КонецЕсли;	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СоединениеССайтами") Тогда
		
		ВидИнстансаJIRA = ПолучитьВидИнстансаJIRA(СсылкаНаОбъект);	
		
	Иначе
		
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();

	КонецЕсли;		
				
	Возврат ВидИнстансаJIRA;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
	
КонецФункции

Функция ПолучитьВидИнстансаJIRA(Инстанс) Экспорт 
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464	
	ВидИнстансаJIRA = Неопределено;	
	Если JIRA.ЭтоИнстансJiraOws_RU(Инстанс) 
		ИЛИ JIRA.ЭтоИнстансJiraSpb_RU(Инстанс) Тогда 
		ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS");
	ИначеЕсли JIRA.ЭтоИнстансJiraOws_EMEAA(Инстанс) 
		ИЛИ JIRA.ЭтоИнстансJiraSpb_EMEAA(Инстанс) Тогда 	
		ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда 
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();
	КонецЕсли;
	
	Возврат ВидИнстансаJIRA;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
	
КонецФункции

//Функция возвращает истанс JIRA из реквизита объекта 
// Параметры: СсылкаНаОбъект - ссылка на объект
// 								Достпные ссылки: Пользователи, Организации, Парнеры, КонфигурацииЛицензий 
//            ЭтоJIRASPB - булево
//
Функция ПолучитьИнстансJIRAОбъекта(СсылкаНаОбъект, ЭтоJIRASPB) Экспорт 
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	ИнстансJIRA = Неопределено;
		
	ВидИнстансаJIRA = ПолучитьВидИнстансаJIRAОбъекта(СсылкаНаОбъект);
		
	Если ЭтоJIRASPB Тогда 
		ИнстансJIRA = ПолучитьИнстансДляJiraSpb(ВидИнстансаJIRA);
	Иначе
		ИнстансJIRA = ПолучитьИнстансДляJiraOws(ВидИнстансаJIRA);
	КонецЕсли;	
			
	Возврат ИнстансJIRA;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
	
КонецФункции

//Функция возвращает подготовленный истанс JIRA для выгрузки данных в JIRA 
//или выгрузки данных в JIRA с учетом Включенной\Выключенной функциональности
// Параметры: СсылкаНаОбъект - ссылка на объект из которого пытаемся определить инстанс JIRA
// 								Достпные ссылки: Пользователи, Организации, Парнеры, КонфигурацииЛицензий 
//            ЭтоJIRASPB - булево
//
Функция ПолучитьИнстансJIRAОбъектаПодготовленный(СсылкаНаОбъект, ЭтоJIRASPB) Экспорт 
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464	
	ВидИнстансаJIRAПоУмолчанию = OW.ПолучитьОсновнойВидИнстансаJIRA();

	Если ЗначениеЗаполнено(СсылкаНаОбъект) 
		И (ИспользоватьРазделениеПоБизнесРегионамJIRASPB() 
			ИЛИ ИспользоватьРазделениеПоБизнесРегионамJIRAOWS()) Тогда 
		
		ИнстансJIRA = ПолучитьИнстансJIRAОбъекта(СсылкаНаОбъект, ЭтоJIRASPB);	
		
		//SPB
		Если ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRASPB() = Ложь Тогда 
				// Функциональность выключена - возьмем по умолчанию
				ИнстансJIRA = ПолучитьИнстансДляJiraSpb(ВидИнстансаJIRAПоУмолчанию);
			КонецЕсли;	
		//OWS
		ИначеЕсли ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
			Если ИспользоватьРазделениеПоБизнесРегионамJIRAOWS() = Ложь Тогда 
				// Функциональность выключена - возьмем по умолчанию
				ИнстансJIRA = ПолучитьИнстансДляJiraOws(ВидИнстансаJIRAПоУмолчанию);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЭтоJIRASPB = Истина Тогда 
			// по умолчанию JIRA SPB
			ИнстансJIRA = ПолучитьИнстансДляJiraSpb(ВидИнстансаJIRAПоУмолчанию);
		Иначе
			// по умолчанию JIRA OWS
			ИнстансJIRA = ПолучитьИнстансДляJiraOws(ВидИнстансаJIRAПоУмолчанию);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ИнстансJIRA;
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
	
КонецФункции

Функция ОграничиватьДоступПоВидуИнстансаJIRA(Клиент) Экспорт
	//++OW Копачев А.С. 30.05.2022 ONEC-7464
	ОграничитьДоступ = Ложь;
	
	Если Пользователи.ИспользоватьОграничениеДоступаПоВидуИнстансаJIRA() Тогда 
		ВидИнстансаJIRAБазы = OW.ПолучитьОсновнойВидИнстансаJIRA();	
		ВидИнстанса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Клиент, "ВидИнстансJIRA");
		Если ЗначениеЗаполнено(ВидИнстанса) И ВидИнстансаJIRAБазы <> ВидИнстанса Тогда 		
			ОграничитьДоступ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ОграничитьДоступ;
	//--OW Копачев А.С. 30.05.2022 ONEC-7464
КонецФункции


Функция ЭтоКодЗадачиJIRA(ИдентификаторЗадачиJIRAСтрокой) Экспорт 
	//++OW Копачев А.С. 19.03.2019 ONEC-4402
	Результат = Ложь;
	
	// задача JIRA должна удовлетворять следующим условиям:
	// 1. Имеет две части разделенные "-"
	// 2. Первая часть - только буквенные символы
	// 3. Вторая часть - только цифры
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторЗадачиJIRAСтрокой, "-");
	
	Если МассивПодстрок.Количество() = 2 Тогда 
		ПерваяЧасть = МассивПодстрок[0];
		ВтораяЧасть = МассивПодстрок[1];
		Если СтроковыеФункцииКлиентСервер.ТолькоАнглийскиеСимволыВСтроке(ПерваяЧасть)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВтораяЧасть) Тогда 
			Результат = Истина;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат; 
	//--OW Копачев А.С. 19.03.2019 ONEC-4402

КонецФункции

Функция НайтиСоздатьЗадачуJIRA(КодТаска, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 18.10.2017		
	УстановитьПривилегированныйРежим(Истина);	
	Таск = Справочники.ЗадачаJIRA.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(КодТаска) Тогда
		//++OW Копачев А.С. 13.02.2019 ONEC-4137 						   
		Таск = НайтиЗадачуJIRA(КодТаска, ИнстансJIRA);
		Если НЕ ЗначениеЗаполнено(Таск) Тогда 
		//--OW Копачев А.С. 13.02.2019 ONEC-4137
			НовыйТаск = Справочники.ЗадачаJIRA.СоздатьЭлемент();
			НовыйТаск.Код = КодТаска;
			НовыйТаск.ИнстансJIRA = ИнстансJIRA;
			//++OW Копачев А.С. 05.04.2022 ONEC-7463
			НовыйТаск.КодИнтеграции_JIRA = ПолучитьКодИнтеграции_JIRA(КодТаска, ИнстансJIRA);
			//--OW Копачев А.С. 05.04.2022 ONEC-7463
			НовыйТаск.Записать();
			Таск = НовыйТаск.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Таск;
	//- Пилюгин В.Е. 18.10.2017
КонецФункции

Функция НайтиЗадачуJIRA(КодТаска, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 13.02.2019 ONEC-4137 		
	УстановитьПривилегированныйРежим(Истина);	
	Таск = Справочники.ЗадачаJIRA.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(КодТаска) Тогда
		//сначала пробуем найти с инстансом
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаJIRA.Ссылка,
		|	ЗадачаJIRA.ИнстансJIRA
		|ИЗ
		|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
		|ГДЕ
		|	НЕ ЗадачаJIRA.ПометкаУдаления
		|	И ЗадачаJIRA.Код = &Код
		|	И ЗадачаJIRA.ИнстансJIRA = &ИнстансJIRA";
		Запрос.УстановитьПараметр("Код", КодТаска);
		Запрос.УстановитьПараметр("ИнстансJIRA", ИнстансJIRA);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Таск = Выборка.Ссылка;
			
		//теперь пробуем найти без инстанса
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаJIRA.Ссылка,
			|	ЗадачаJIRA.ИнстансJIRA
			|ИЗ
			|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
			|ГДЕ
			|	НЕ ЗадачаJIRA.ПометкаУдаления
			//++OW Копачев А.С. 31.03.2022 ONEC-7464
			//|	И ЗадачаJIRA.Код = &Код		
			|	И ЗадачаJIRA.КодИнтеграции_JIRA = &КодИнтеграции_JIRA
			//--OW Копачев А.С. 31.03.2022 ONEC-7464
			|";
			
			//++OW Копачев А.С. 31.03.2022 ONEC-7464
			//Запрос.УстановитьПараметр("Код", КодТаска);		
			Запрос.УстановитьПараметр("КодИнтеграции_JIRA", ПолучитьКодИнтеграции_JIRA(КодТаска, ИнстансJIRA));
			//--OW Копачев А.С. 31.03.2022 ONEC-7464
					
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Таск = Выборка.Ссылка;
				Если НЕ ЗначениеЗаполнено(Выборка.ИнстансJIRA) И ЗначениеЗаполнено(ИнстансJIRA) Тогда					
					ТаскОбъект = Таск.ПолучитьОбъект();
					ТаскОбъект.ИнстансJIRA = ИнстансJIRA;
					ТаскОбъект.Записать();
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат Таск;
	//--OW Копачев А.С. 13.02.2019 ONEC-4137
КонецФункции

Функция ПолучитьЗадачиJIRAПоID(ID, ИнстансJIRA) Экспорт
	
	//++OW Копачев А.С. 12.11.2019 ONEC-4099 
	УстановитьПривилегированныйРежим(Истина);	
	ЗадачиJIRA = Новый Массив;
	
	Если НЕ ПустаяСтрока(ID) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаJIRA.Ссылка,
		|	ЗадачаJIRA.ИнстансJIRA
		|ИЗ
		|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
		|ГДЕ
		|	НЕ ЗадачаJIRA.ПометкаУдаления
		|	И ЗадачаJIRA.ID = &ID
		|	И ЗадачаJIRA.ИнстансJIRA = &ИнстансJIRA";
		Запрос.УстановитьПараметр("ID", ID);
		Запрос.УстановитьПараметр("ИнстансJIRA", ИнстансJIRA);
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗадачиJIRA = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли; 
	
	Возврат ЗадачиJIRA;
	//--OW Копачев А.С. 12.11.2019 ONEC-4099
	
КонецФункции

Функция ПереместитьОбъектыЗадачиJIRA(СтараяЗадачаJIRA, НоваяЗадачаJIRA) Экспорт 
	//++OW Копачев А.С. 12.11.2019 ONEC-4099
	Результат = Истина;
	
	ИспользоватьАвтоматическуюПерелинковкуПроектовИФазJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьАвтоматическуюПерелинковкуПроектовИФазJIRA) = Истина; 
	
	//++OW Копачев А.С. 31.03.2022 ONEC-7464
	КодСтаройЗадачиJIRA = СтараяЗадачаJIRA.Код;
	КодИнтеграцииСтаройЗадачиJIRA = СтараяЗадачаJIRA.КодИнтеграции_JIRA;
	//--OW Копачев А.С. 31.03.2022 ONEC-7464
	
	Если ЗначениеЗаполнено(НоваяЗадачаJIRA) И ЗначениеЗаполнено(КодСтаройЗадачиJIRA) 
		И ИспользоватьАвтоматическуюПерелинковкуПроектовИФазJIRA  Тогда 
		
		ИнстансJIRA = НоваяЗадачаJIRA.ИнстансJIRA; 
						
		Попытка
			НачатьТранзакцию();
								
			////////////////////
			// изменяем код на объектах				
			КодНовойЗадачиJIRA = НоваяЗадачаJIRA.Код;
			КодИнтеграцииНовойЗадачиJIRA = НоваяЗадачаJIRA.КодИнтеграции_JIRA; //OW Копачев А.С. 31.03.2022 ONEC-7464 
			
			ЭтоОценочныйПроект = Ложь;
			
			КодПроектаСтарый = ОпределитьПроектПоНомеруЗадачи(КодСтаройЗадачиJIRA); 										
			МассивПроектов_BA_SSA = ПроектыJIRA_BA_SSA(); 	
			Для Каждого Проект_BA_SSA Из МассивПроектов_BA_SSA Цикл
				Если Проект_BA_SSA.Код = КодПроектаСтарый Тогда 
					ЭтоОценочныйПроект = Истина;	
					Прервать;
				КонецЕсли;		
			КонецЦикла;	
			
			Если ЭтоОценочныйПроект = Истина Тогда
				//++OW Копачев А.С. 31.03.2022 ONEC-7464
				//ОбъектЗадачиJIRA = ПолучитьОценочныйПроектПоКодуПроектаJIRA(КодСтаройЗадачиJIRA);
				ОбъектЗадачиJIRA = ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииСтаройЗадачиJIRA);
				//--OW Копачев А.С. 31.03.2022 ONEC-7464
				 
				Если ЗначениеЗаполнено(ОбъектЗадачиJIRA) Тогда 
					ОбъектЗадачиJIRAОбъект = ОбъектЗадачиJIRA.ПолучитьОбъект();
					ОбъектЗадачиJIRAОбъект.ЗадачаJIRA_BA = КодНовойЗадачиJIRA;
					ОбъектЗадачиJIRAОбъект.КодИнтеграции_JIRA = КодИнтеграцииНовойЗадачиJIRA;  //OW Копачев А.С. 31.03.2022 ONEC-7464 
					ОбъектЗадачиJIRAОбъект.Записать();
				КонецЕсли;	
			Иначе
				
				//++OW Копачев А.С. 31.03.2022 ONEC-7464
				//ОбъектЗадачиJIRA = ПолучитьФазуПоКодуПроектаJIRA(КодСтаройЗадачиJIRA);
				ОбъектЗадачиJIRA = ПолучитьФазуПоКодуИнтеграцииJIRA(КодИнтеграцииСтаройЗадачиJIRA);
				//--OW Копачев А.С. 31.03.2022 ONEC-7464
				 
				Если НЕ ЗначениеЗаполнено(ОбъектЗадачиJIRA) Тогда 
					//++OW Копачев А.С. 31.03.2022 ONEC-7464
					//ОбъектЗадачиJIRA = ПолучитьПроектПоКодуПроектаJIRA(КодСтаройЗадачиJIRA);
					ОбъектЗадачиJIRA = ПолучитьПроектПоКодуИнтеграцииJIRA(КодИнтеграцииСтаройЗадачиJIRA);
					//--OW Копачев А.С. 31.03.2022 ONEC-7464						
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ОбъектЗадачиJIRA) Тогда 
					ОбъектЗадачиJIRAОбъект = ОбъектЗадачиJIRA.ПолучитьОбъект();
					Если ТипЗнч(ОбъектЗадачиJIRA) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") Тогда 
						ОбъектЗадачиJIRAОбъект.ЗадачаJIRA_BA = КодНовойЗадачиJIRA;
					Иначе
						ОбъектЗадачиJIRAОбъект.КодПроектаJIRA = КодНовойЗадачиJIRA;
					КонецЕсли;
					ОбъектЗадачиJIRAОбъект.КодИнтеграции_JIRA = КодИнтеграцииНовойЗадачиJIRA;  //OW Копачев А.С. 31.03.2022 ONEC-7464
					ОбъектЗадачиJIRAОбъект.Записать();
				КонецЕсли;	
			КонецЕсли;	
			
			
			ЭтоИнстансJiraSpb = ЗначениеЗаполнено(ИнстансJIRA) И JIRA.ЭтоИнстансJiraSpb(ИнстансJIRA); 
						
			////////////////////
			// мигрируем постинг
			//++OW Копачев А.С. 29.03.2022 ONEC-7464
			//ИмяРегистраПостинга = "OW_ПостингИзJIRA";	
			//Если ЭтоИнстансJiraSpb = Истина Тогда								
			//	ИмяРегистраПостинга = "ПостингИзJIRA_2";    	
			//КонецЕсли;
			ИмяРегистраПостинга = ИмяРегистаПостингаПоИнстансуJIRA(ИнстансJIRA);
			//--OW Копачев А.С. 29.03.2022 ONEC-7464
			
			НаборЗаписейСтарый = РегистрыСведений[ИмяРегистраПостинга].СоздатьНаборЗаписей(); 
			
			//++OW Копачев А.С. 31.03.2022 ONEC-7464
			//НаборЗаписейСтарый.Отбор.Таск_ID.Установить(КодСтаройЗадачиJIRA);
			НаборЗаписейСтарый.Отбор.Таск.Установить(СтараяЗадачаJIRA);
			//--OW Копачев А.С. 31.03.2022 ONEC-7464
			
			НаборЗаписейСтарый.Прочитать();
			
			// создаем новые записи из старых
			Для Каждого ЗаписьНабора из НаборЗаписейСтарый Цикл			
				НоваяЗапись = РегистрыСведений[ИмяРегистраПостинга].СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
				
				НоваяЗапись.Таск	 = НоваяЗадачаJIRA;
				НоваяЗапись.Таск_ID  = КодНовойЗадачиJIRA;
				НоваяЗапись.Записать(истина);
			КонецЦикла;		
			
			// очищаем старые записи
			НаборЗаписейСтарый.Очистить();
			НаборЗаписейСтарый.Записать(истина);
			
			////////////////////
			// мигрируем историю изменения задач JIRA	
			Если ЭтоИнстансJiraSpb = Истина Тогда 			
				Если ЗначениеЗаполнено(СтараяЗадачаJira) Тогда 
					
					НаборЗаписейСтарый = РегистрыСведений.ИсторияИзмененийЗадачJIRA.СоздатьНаборЗаписей();  	
					НаборЗаписейСтарый.Отбор.Задача.Установить(СтараяЗадачаJIRA);
					НаборЗаписейСтарый.Прочитать();
					
					// создаем новые записи из старых
					Для Каждого ЗаписьНабора из НаборЗаписейСтарый Цикл
						НоваяЗапись = РегистрыСведений.ИсторияИзмененийЗадачJIRA.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора);
						
						НоваяЗапись.Задача	 = НоваяЗадачаJIRA;
						НоваяЗапись.Записать(истина);
					КонецЦикла;		
					
					// очищаем старые записи
					НаборЗаписейСтарый.Очистить();
					НаборЗаписейСтарый.Записать(истина);
				КонецЕсли;
			КонецЕсли;		
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();		
			OW.ЗаписатьОшибку(НоваяЗадачаJIRA, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка,
										"Ошибка перемещения задачи JIRA " + КодСтаройЗадачиJIRA + ": " + ОписаниеОшибки());	
			
			Результат = Ложь;
		КонецПопытки;	
	КонецЕсли;	
	
	Возврат Результат;
	//--OW Копачев А.С. 12.11.2019 ONEC-4099	
КонецФункции

Функция ПереместитьЗадачуJIRA(СтараяЗадачаJIRA, НоваяЗадачаJIRA)  
	//++OW Копачев А.С. 12.11.2019 ONEC-4099
	Результат = Истина;
	
	Если ЗначениеЗаполнено(СтараяЗадачаJIRA) И ЗначениеЗаполнено(НоваяЗадачаJIRA) И СтараяЗадачаJIRA.IsTransferred = Ложь И СтараяЗадачаJIRA.TransferredToTask <> НоваяЗадачаJIRA  Тогда 
		
		////////////////////
		// 1. перемещаем объекты старой задачи
		КодСтаройЗадачиJIRA = СтараяЗадачаJIRA.Код;
		//++OW Копачев А.С. 31.03.2022 ONEC-7464
		//Если ПереместитьОбъектыЗадачиJIRA(КодСтаройЗадачиJIRA, НоваяЗадачаJIRA) = Истина Тогда
		Если ПереместитьОбъектыЗадачиJIRA(СтараяЗадачаJIRA, НоваяЗадачаJIRA) = Истина Тогда
		//--OW Копачев А.С. 31.03.2022 ONEC-7464
			////////////////////
			// 2. устанавливаем признак "IsTransferred" на старой задаче
			
			СтараяЗадачаОбъект = СтараяЗадачаJIRA.ПолучитьОбъект();
			СтараяЗадачаОбъект.IsTransferred = Истина;
			СтараяЗадачаОбъект.TransferredToTask = НоваяЗадачаJIRA;
			СтараяЗадачаОбъект.ДанныеЗагружены = Истина;
			
			СтараяЗадачаОбъект.Записать();
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат Результат;
	//--OW Копачев А.С. 12.11.2019 ONEC-4099	
КонецФункции

// Установить вотчера в задачу по ее номеру
//- Вотчер - доменный логин
//- НомерЗадачи - номер задачи JIRA, в которой нужно установить вотчера
//- Возвращает структуру (Успех, СообщениеОбОшибке)
Функция УстановитьВотчера(НомерЗадачи, Вотчер, ИнстансJIRA)
	//+ Пилюгин В.Е. 25.10.2017
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
	
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для установки Вотчера не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Если ПустаяСтрока(Вотчер) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Вотчер для установки Вотчера не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);
	ТекстЗапроса = """" + Вотчер + """";
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979 
	АдресРесурса = "/rest/api/2/issue/" + НомерЗадачи + "/watchers";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 204 Тогда
		СтруктураВозврата.Успех = Истина;
	Иначе
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = "Вотчер " + Вотчер +" не добавлен в задачу " + НомерЗадачи;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 25.10.2017	
КонецФункции

Функция ОтправитьАттачи(НомерЗадачи, МассивПутей, ИнстансJIRA, УдалятьФайлыПослеОтправки = Ложь) Экспорт 
	//+ Пилюгин В.Е. 03.04.2018
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
	
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для отправки аттача не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Если МассивПутей.Количество() = 0 Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Массив путей к файлу для отправки аттача не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	ПутиКФайлам = "";
	МассивВыгружаемыхФайлов = Новый Массив;
	Для каждого эл Из МассивПутей Цикл
		Если эл.Файл.ВыгруженJIRA Тогда
			Продолжить;	
		КонецЕсли; 
		МассивВыгружаемыхФайлов.Добавить(эл.Файл);
		
		ПутиКФайлам = ПутиКФайлам + ?(ПустаяСтрока(ПутиКФайлам), СтрЗаменить(эл.Путь,",","_"), ","+эл.Путь);
	КонецЦикла;      
	
	Если ПутиКФайлам = "" Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Все аттачи уже были выгружены в JIRA";
		Возврат СтруктураВозврата;
	КонецЕсли; 

	СтрокаКоманды = " -D- -u """ + ИнстансJIRA.Логин + ":" + ИнстансJIRA.Пароль +
					""" -k -X POST -H ""X-Atlassian-Token: nocheck"" -F ""file=@" +ПутиКФайлам +""" " +
					ИнстансJIRA.ПолныйАдрес + "rest/api/2/issue/" +НомерЗадачи+ "/attachments/"  ;
	КодВозврата = OW.ВыполнитьCURL(СтрокаКоманды);
	Если КодВозврата = 0 Тогда
		//все ОК
		//Сообщить("Аттачи отправлены в " + НомерЗадачи);
		Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Аттачи отправлены в " + НомерЗадачи, "Attachments sent to " + НомерЗадачи));
		СтруктураВозврата.Успех = Истина;
		//помечаем аттачи как выгруженные
		Для каждого ф Из МассивВыгружаемыхФайлов Цикл
			Файл = ф.ПолучитьОбъект();
			Файл.ВыгруженJIRA = Истина;
			Файл.Записать();
		КонецЦикла; 
	Иначе
		//не ОК
		//Сообщить("Ошибка отправки аттачей. Код: " + Строка(КодВозврата));
		Сообщить(OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Ошибка отправки аттачей Код: " + Строка(КодВозврата), "Error sending attachments. Code: " + Строка(КодВозврата)));
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = "Аттачи не добавлены в задачу " + НомерЗадачи + " Код ошибки: " + Строка(КодВозврата);
	КонецЕсли; 
	
	//подчистим за собой после отправки
	Если УдалятьФайлыПослеОтправки Тогда
		Для каждого эл Из МассивПутей Цикл
			Попытка
				УдалитьФайлы(эл);
			Исключение
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 03.04.2018	
КонецФункции

//++OW Копачев А.С. 17.10.2019 ONEC-5035 
Функция ОтправитьUpdate(НомерЗадачи, ПараметрыUpdate, ИнстансJIRA, УдалятьФайлыПослеОтправки = Истина) Экспорт 
		
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = JIRA.ПолучитьИнстансДляJiraSpb();
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке, КодСостояния", Ложь, "", 0);
	
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для отправки update не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Если ПараметрыUpdate.Количество() = 0 Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Данные для update не заполнены!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(ПараметрыUpdate, ИнстансJIRA, Ложь, Истина);	
	СтруктураПолей = СтруктураПолей.Структура;
	ТекстЗапроса = СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
			
	Data = "{
			 |  ""update"": "+ ТекстЗапроса + " 
			 |	}";
		
		
	//отправляем запрос в JIRA
	ИмяФайлаНаОтправку = КаталогВременныхФайлов()+"request_update_issue_" + ПолучитьМеткуТекущаяДата() + ".data";
	ТекстФайл = Новый ТекстовыйДокумент;
	ТекстФайл.УстановитьТекст(Data);
	ТекстФайл.Записать(ИмяФайлаНаОтправку, КодировкаТекста.UTF8);
	ФайлНаОтправку = Новый Файл(ИмяФайлаНаОтправку);
	РазмерФайлаНаОтправку = XMLСтрока(ФайлНаОтправку.Размер());
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);		

	АдресРесурса = "/rest/api/latest/issue/"+НомерЗадачи;
	HTTPЗапрос = СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA); 
		
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаНаОтправку);
	HTTPОтвет = Соединение.Записать(HTTPЗапрос);
		
	СтрокаJSONОтвет 	 			= HTTPОтвет.ПолучитьТелоКакСтроку();
	СтруктураВозврата.КодСостояния  = HTTPОтвет.КодСостояния;

	Если СтруктураВозврата.КодСостояния  >= 400 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = "Update не отправлен в задачу " + НомерЗадачи + ". Подробности: "+ СтрокаJSONОтвет;	
	Иначе
		СтруктураВозврата.Успех = Истина;
		
		//подчищаем за собой
		Соединение = Неопределено;
		Если УдалятьФайлыПослеОтправки Тогда
			МассивФайловНаУдаление = Новый Массив;
			МассивФайловНаУдаление.Добавить(ИмяФайлаНаОтправку);
			OW.УдалитьФайлыИзМассива(МассивФайловНаУдаление);	
		КонецЕсли; 	
	КонецЕсли;	
		
	Возврат СтруктураВозврата;
	
КонецФункции
//--OW Копачев А.С. 17.10.2019 ONEC-5035

Функция ОтправитьВнешниеСсылки(НомерЗадачи, ТаблицаВнешнихСсылок, ИнстансJIRA, ИД = 100, УдалятьФайлыПослеОтправки = Истина) Экспорт 
	
	//++OW Копачев А.С. 20.06.2019 ONEC-4582
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке, КодСостояния", Ложь, "", 0);
	
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для отправки внешней ссылки не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Если ТаблицаВнешнихСсылок.Количество() = 0 Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Список внешних ссылок не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Для Каждого ТекСтрока Из ТаблицаВнешнихСсылок Цикл
		
		СсылкаWeb 			= ТекСтрока.WebСсылка;
		СсылкаПредставление = ТекСтрока.Заголовок;
		СсылкаОписание 		= ТекСтрока.Описание; 
		
		ТекДата = Формат(ТекущаяДата(), "ДФ=ddMMyyyyHHmmss");
		ИмяВременногоФайла = КаталогВременныхФайлов()+ "cat issue_LK" + ИД + ТекДата +".data";
		
		Data = "{
			 |   ""id"":"+ИД+",
			 |   ""self"":""" + ИнстансJIRA.ПолныйАдрес + "browse/" + НомерЗадачи + "/remotelink/" + ТекДата + """,
			 |   ""object"": {
			 |       ""url"":""" + СсылкаWeb + """, 
			 |       ""title"":""" + СсылкаПредставление + """,
			 |       ""summary"":""" + СсылкаОписание + """
			 |   } 
			 |	}";
		ТекстДок = Новый ТекстовыйДокумент;	
		ТекстДок.УстановитьТекст(data);
		ТекстДок.Записать(ИмяВременногоФайла);
		
		Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);		
		
		АдресРесурса = "/rest/api/latest/issue/"+НомерЗадачи+"/remotelink/";
		HTTPЗапрос = СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA); 
		
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяВременногоФайла);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
		СтрокаJSONОтвет 	 			= HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураВозврата.КодСостояния  = HTTPОтвет.КодСостояния;
		
		Если СтруктураВозврата.КодСостояния  >= 400 Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.СообщениеОбОшибке = "Внешняя ссылка не отправлена в задачу " + НомерЗадачи + ". Подробности: "+ СтрокаJSONОтвет;
			Прервать;
			
		Иначе
			СтруктураВозврата.Успех = Истина;
			Если УдалятьФайлыПослеОтправки Тогда
				Попытка
					УдалитьФайлы(ИмяВременногоФайла);
				Исключение
					//Сообщить("Файл не удален. Подробности: " + ОписаниеОшибки());
				КонецПопытки; 
			КонецЕсли; 	
		КонецЕсли; 
		
	КонецЦикла;	
		
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 20.06.2019 ONEC-4582	
	
КонецФункции

Функция ИнициализироватьТаблицуВнешнихСсылок() Экспорт
	
	ТаблицаВнешнихСсылок = Новый ТаблицаЗначений;
	ТаблицаВнешнихСсылок.Колонки.Добавить("WebСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаВнешнихСсылок.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	ТаблицаВнешнихСсылок.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаВнешнихСсылок;
КонецФункции

Функция СлинковатьЗадачи(НомерЗадачиРодитель, НомерЗадачиДочерний, ИнстансJIRA, ТипСвязи = Неопределено) Экспорт
	//+ Пилюгин В.Е. 04.04.2018
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
	
	Если ПустаяСтрока(НомерЗадачиРодитель) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи-родитель для линковки задач не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ПустаяСтрока(НомерЗадачиДочерний) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи-дочерний для линковки задач не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Если ТипСвязи = Неопределено Тогда
		ТипСвязи = "Belongs";
		inward = "contains";
		outward = "belongs to";
	ИначеЕсли ТипСвязи = "Problem/Incident" Тогда
		ТипСвязи = "Problem/Incident";
		inward = "is caused by";
		outward = "causes";
	Иначе // на всякий случай установим тот, что был ранее по умолчанию
		ТипСвязи = "Belongs";
		inward = "contains";
		outward = "belongs to";
	КонецЕсли;
	
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда
		
		//++OW Копачев А.С. 14.11.2019 ONEC-4979 
		АдресРесурса = "/rest/api/2/issue/" + НомерЗадачиДочерний;
		ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
		Если ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда 
			Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);	
		Иначе	
		//--OW Копачев А.С. 14.11.2019 ONEC-4979	
			Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		КонецЕсли;	
			
		ТекстЗапроса = 
		"{
		|   ""update"":{
		|      ""issuelinks"":[
		|         {
		|            ""add"":{
		|               ""type"":{
		|                  ""name"":"""+ТипСвязи+""",
		|                  ""inward"":"""+inward+""",
		|                  ""outward"":"""+outward+"""
		|               },
		|               ""outwardIssue"":{
		|                  ""key"":"""+НомерЗадачиРодитель+"""
		|               }
		|            }
		|         }
		|      ]
		|   }                                                     
		|}";
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);   //PUT
		Ответ = Соединение.Записать(Запрос);                             
		
	Иначе      //jira-ows instance
		Запрос = Новый HTTPЗапрос("/rest/api/2/issueLink/", Заголовки);
		ТекстЗапроса = "{
		|  ""type"": {
		|    ""name"": ""Relates""
		|  },
		|  ""inwardIssue"": {
		|    ""key"":"""+НомерЗадачиДочерний+"""
		|  },
		|  ""outwardIssue"": {
		|    ""key"":"""+НомерЗадачиРодитель+"""
		|  }
		|}";		
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);   //POST
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
	КонецЕсли; 
	
	Если Ответ.КодСостояния = 204 ИЛИ Ответ.КодСостояния = 201 Тогда
		СтруктураВозврата.Успех = Истина;
		
		ТекстСообщения = "Задача "+ НомерЗадачиДочерний +" добавлена в задачу " + НомерЗадачиРодитель;
		OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
	
	Иначе
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = "Задача "+ НомерЗадачиДочерний +" не добавлена в задачу " + НомерЗадачиРодитель +
													Символы.ПС + Ответ.ПолучитьТелоКакСтроку();
		//+++ Брук Б 29.10.2019
		OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, СтруктураВозврата.СообщениеОбОшибке);
		//--- Брук Б 29.10.2019
		
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 04.04.2018	
КонецФункции

Функция СформироватьТекстЗапросаJIRA(СтруктураПолей, ИспользоватьДвойныеКавычки = Истина, ЭкранироватьУгловыеСкобки = Истина, ЭкранироватьРазделителиСтрок = Истина, ЭкранироватьАмперсанд = Истина, ЭкранироватьОдинарныеКавычки = Истина,ЭкранироватьСлеш = Истина) Экспорт 
	//+ Пилюгин В.Е. 21.03.2018
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб, ИспользоватьДвойныеКавычки, ЭкранированиеСимволовJSON.СимволыВнеBMP, ЭкранироватьУгловыеСкобки, ЭкранироватьРазделителиСтрок, ЭкранироватьАмперсанд, ЭкранироватьОдинарныеКавычки, ЭкранироватьСлеш);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	ЗаписатьJSON(ЗаписьJSON, СтруктураПолей, НастройкиСериализацииJSON, "ПреобразованиеJSON", JIRA);
	ТекстЗапроса = ЗаписьJSON.Закрыть();	
	Возврат ТекстЗапроса;
	//- Пилюгин В.Е. 21.03.2018
КонецФункции


Функция СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей) Экспорт 
	//+ Пилюгин В.Е. 27.09.2018
	Возврат СформироватьТекстЗапросаJIRA(СтруктураПолей);
	//- Пилюгин В.Е. 27.09.2018
КонецФункции


Процедура ДобавитьВотчеровВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA)
	//+ Пилюгин В.Е. 21.03.2018
	//вотчеров можно установить только ПОСЛЕ создания задачи
	Если Параметры.Свойство("МассивВотчеров") Тогда
		Если Параметры.МассивВотчеров.Количество() > 0 Тогда
			МассивВотчеров = Новый Массив;
			Для каждого Вотчер Из Параметры.МассивВотчеров Цикл
				СтруктураВозвратаВотчер = УстановитьВотчера(НомерЗадачи, Вотчер, ИнстансJIRA);	
				Если НЕ СтруктураВозвратаВотчер.Успех Тогда
					OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, СтруктураВозвратаВотчер.СообщениеОбОшибке);	
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	//- Пилюгин В.Е. 21.03.2018
КонецПроцедуры


Функция СформироватьОшибки(ИмяФайла, ОтветССервераSD = Ложь)
	//+ Пилюгин В.Е. 21.03.2018
	СтруктураОшибок = Новый Структура;
	Ошибки = Новый Структура("СтруктураОшибок, ТекстВозврата", СтруктураОшибок, "");
	
	ТекстовыйФайлОтвета = Новый ТекстовыйДокумент;
	ТекстовыйФайлОтвета.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаОтветаСервера = ТекстовыйФайлОтвета.ПолучитьТекст();
	СтруктураОтвета = РазобратьОтветОтСервераОСозданииЗадачи(СтрокаОтветаСервера, ОтветССервераSD);	
	ТекстВозврата = "";
	Если СтруктураОтвета.Свойство("МассивОшибок") Тогда
		ТекстВозврата = ТекстВозврата + Символы.ПС;
		н = 1;
		Для каждого эл Из СтруктураОтвета.МассивОшибок Цикл
			ТекстВозврата = ТекстВозврата + эл + Символы.ПС;	
			Ключ = "errors"+н;
			СтруктураОшибок.Вставить(Ключ, эл);
			н = н + 1;
		КонецЦикла; 
	КонецЕсли; 
	Если СтруктураОтвета.Свойство("СтруктураОшибок") Тогда
		ТекстВозврата = ТекстВозврата + Символы.ПС;
		Для каждого эл Из СтруктураОтвета.СтруктураОшибок Цикл     
			ТекстВозврата = ТекстВозврата + Строка(эл.Ключ) + ": " + Строка(эл.Значение) + Символы.ПС;  
			СтруктураОшибок.Вставить(эл.Ключ, эл.Значение);
		КонецЦикла; 
	КонецЕсли; 

	Ошибки.СтруктураОшибок = СтруктураОшибок;
	Ошибки.ТекстВозврата = ТекстВозврата;
	Возврат Ошибки;
	//- Пилюгин В.Е. 21.03.2018		
КонецФункции


Функция СформироватьОтветОбУспешномСозданииЗадачи(ИмяФайла, ОтветССервераSD = Ложь) Экспорт
	//+ Пилюгин В.Е. 21.03.2018	
	ТекстовыйФайлОтвета = Новый ТекстовыйДокумент;
	ТекстовыйФайлОтвета.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаОтветаСервера = ТекстовыйФайлОтвета.ПолучитьТекст();
	СтруктураОтвета = РазобратьОтветОтСервераОСозданииЗадачи(СтрокаОтветаСервера, ОтветССервераSD);	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Истина, СтруктураОтвета.НомерЗадачи, "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Истина, СтруктураОтвета.НомерЗадачи, "", ""); 
	//--OW Копачев А.С. 05.04.2022 ONEC-7464 
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 21.03.2018		
КонецФункции

 
Функция ПолучитьСтрокуОтветаИзФайла(ИмяФайла) Экспорт
	//+ Пилюгин В.Е. 21.03.2018	
	ТекстовыйФайлОтвета = Новый ТекстовыйДокумент;
	ТекстовыйФайлОтвета.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СтрокаОтветаСервера = ТекстовыйФайлОтвета.ПолучитьТекст();
	Возврат СтрокаОтветаСервера;
	//- Пилюгин В.Е. 21.03.2018		
КонецФункции


Функция ЗапуститьТранзишнСПроверкой(НомерЗадачи, Название, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 25.10.2017
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
		
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для выполнения транзишена не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	Если ПустаяСтрока(Название) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Название транзишена не заполнено!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	СтруктураДоступныеТранзишены = ПолучитьДоступныеТранзишеныДляЗадачи(НомерЗадачи, ИнстансJIRA);	
	
	ЕстьНужныйТранзишн = Ложь;
	Если СтруктураДоступныеТранзишены.МассивТранзишенов.Количество() > 0 Тогда
		Для каждого эл Из СтруктураДоступныеТранзишены.МассивТранзишенов Цикл
			Если эл.name = Название Тогда
				ЕстьНужныйТранзишн = Истина;
				СтруктураВозврата = ВыполнитьТранзишн(эл, НомерЗадачи, ИнстансJIRA); 	
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;	
	
	Если НЕ ЕстьНужныйТранзишн И НЕ СтруктураВозврата.Успех Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Для данного состояния задачи выполнение транзишина """ + Название + """ невозможно!";	
	КонецЕсли; 
	
	Возврат СтруктураВозврата;	
	//- Пилюгин В.Е. 25.10.2017	
КонецФункции


Функция ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, Название, Id, ТекстТранзишена = "", ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 06.09.2018
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
		
	Если ПустаяСтрока(НомерЗадачи) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Номер задачи для выполнения транзишена не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	Если ПустаяСтрока(Название) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Название транзишена не заполнено!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	Если ПустаяСтрока(Id) Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Id транзишена не заполнен!";
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	СтруктураДоступныеТранзишены = ПолучитьДоступныеТранзишеныДляЗадачи(НомерЗадачи, ИнстансJIRA);	
	
	ЕстьНужныйТранзишн = Ложь;
	Если СтруктураДоступныеТранзишены.МассивТранзишенов.Количество() > 0 Тогда
		Для каждого эл Из СтруктураДоступныеТранзишены.МассивТранзишенов Цикл
			Если эл.id = Id Тогда
				ЕстьНужныйТранзишн = Истина;
				СтруктураВозврата = ВыполнитьТранзишн(эл, НомерЗадачи, ИнстансJIRA, ТекстТранзишена); 
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;	
	
	Если НЕ ЕстьНужныйТранзишн И НЕ СтруктураВозврата.Успех Тогда
		СтруктураВозврата.СообщениеОбОшибке = "Транзишен """ + Название + """ не найден в списке доступных!";	
	КонецЕсли; 
	
	Возврат СтруктураВозврата;	
	//- Пилюгин В.Е. 06.09.2018	
КонецФункции


Функция ПолучитьДоступныеТранзишеныДляЗадачи(НомерЗадачи, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 04.05.2018
	СтруктураВозврата = Новый Структура("Успех, МассивТранзишенов, СообщениеОбОшибке", Ложь, Новый Массив, "");
	
	ИмяФайлаРезультат = КаталогВременныхФайлов()+"result_transitions_" + ПолучитьМеткуТекущаяДата() + ".data";
	Соединение = JIRA.СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979 
	АдресРесурса = "/rest/api/2/issue/" + НомерЗадачи + "/transitions";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);	
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979	
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");
		//ТекстЗапроса = """" + Название + """";
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	//Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
    Попытка
    	Ответ = Соединение.Получить(Запрос, ИмяФайлаРезультат);
    	Если Ответ.КодСостояния = 200 Тогда
    		СтруктураВозврата.Успех = Истина;
    		СтрокаОтвета = JIRA.ПолучитьСтрокуОтветаИзФайла(ИмяФайлаРезультат);
    		СтруктураВозврата = РазобратьОтветОтСервера_СписокТранзишенов(СтрокаОтвета);
    	Иначе
    		СтруктураВозврата.Успех = Ложь;
    		СтруктураВозврата.СообщениеОбОшибке = "Не удалось получить список транзишенов для задачи " + НомерЗадачи;
        КонецЕсли; 
    Исключение
		ЗаписьЖурналаРегистрации("ОшибкаСинхронизацииCJIRA",,,,""+НомерЗадачи+": "+ОписаниеОшибки());
		Возврат СтруктураВозврата;		
	КонецПопытки;
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 04.05.2018
КонецФункции


Функция ВыполнитьТранзишн(Транзишен, НомерЗадачи, ИнстансJIRA, ТекстТранзишена = "") Экспорт
	//+ Пилюгин В.Е. 04.05.2018
    УстановитьПривилегированныйРежим(истина);
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
	Соединение = JIRA.СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	Если ПустаяСтрока(ТекстТранзишена) Тогда
		ТекстЗапроса = "{""transition"":{""id"":"""+Транзишен.id+"""}}";
	Иначе
		ТекстЗапроса = ТекстТранзишена;
	КонецЕсли; 
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979
	АдресРесурса = "/rest/api/2/issue/" + НомерЗадачи + "/transitions";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979	
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния = 204 Тогда
		СтруктураВозврата.Успех = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		СтруктураВозврата.Успех = Ложь;
		СообщениеОбОшибке = "Транзишн " + Транзишен.name +" НЕ выполнен для задачи " + НомерЗадачи +
							" по причине: " + Ответ.ПолучитьТелоКакСтроку();
		СтруктураВозврата.СообщениеОбОшибке = СообщениеОбОшибке;
		OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, СообщениеОбОшибке);
	ИначеЕсли Ответ.КодСостояния = 404 Тогда   
		СтруктураВозврата.Успех = Ложь;
		СообщениеОбОшибке = "Транзишн " + Транзишен.name +" НЕ выполнен для задачи " + НомерЗадачи +
							" по причине: The issue does not exist or the user does not have permission to view it.";
		СтруктураВозврата.СообщениеОбОшибке = СообщениеОбОшибке;
		OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, СообщениеОбОшибке);
	Иначе
		СтруктураВозврата.Успех = Ложь;
		СообщениеОбОшибке = "Транзишн " + Транзишен.name +" НЕ выполнен для задачи " + НомерЗадачи +
							" по причине: Код ошибки: " + Ответ.КодСостояния + ", " + Ответ.ПолучитьТелоКакСтроку();
		СтруктураВозврата.СообщениеОбОшибке = СообщениеОбОшибке;
		OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, СообщениеОбОшибке);
    КонецЕсли; 
	OW.ЗаписиатьЖурналВыволенияJIRAЗапроса(Справочники.МетодыЗапросовСВнешнимиСистемами.ow_httpGetStatus,ИнстансJIRA,истина,ТекстЗапроса,СообщениеОбОшибке,?(СтруктураВозврата.Успех,Перечисления.РезультатыВыполненияОбмена.Выполнено,Перечисления.РезультатыВыполненияОбмена.Ошибка));
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 04.05.2018
КонецФункции


Функция РазобратьОтветОтСервера_СписокТранзишенов(СтрокаОтвета) Экспорт
	СтруктураВозврата = Новый Структура;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
	ИмяСвойства = "";
	
	ОбрабатываетсяМассив = Ложь;
	МассивТранзишенов = Новый Массив;
	
	ОбрабатываетсяСтруктураОшибок = Ложь;
	СтруктураОшибок = Новый Структура;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если ТипJSON = ТипЗначенияJSON.Число ИЛИ ТипJSON = ТипЗначенияJSON.Строка ИЛИ ТипJSON = ТипЗначенияJSON.Булево ИЛИ ТипJSON = ТипЗначенияJSON.Null Тогда
			Значение = ЧтениеJSON.ТекущееЗначение;  
			Если ИмяСвойства = "id" И ОбрабатываетсяМассив Тогда
				нСтруктура = Новый Структура("id, name");
				нСтруктура.Вставить("id", Значение);
			КонецЕсли; 
			Если ИмяСвойства = "name" И ОбрабатываетсяМассив Тогда
				нСтруктура.Вставить("name", Значение);
				МассивТранзишенов.Добавить(нСтруктура);
			КонецЕсли; 
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.Комментарий Тогда
			Комментарий = ЧтениеJSON.ТекущееЗначение;
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если ИмяСвойства = "errors" Тогда
				ОбрабатываетсяСтруктураОшибок = Истина;	
			КонецЕсли; 
			Если ИмяСвойства = "to" Тогда
				ЧтениеJSON.Пропустить();
			КонецЕсли; 
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			ОбрабатываетсяМассив = Истина;
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.КонецМассива Тогда
			ОбрабатываетсяМассив = Ложь;	
			
		ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.КонецОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.Ничего Тогда
			//начало/конец массива/объекта или отсутствие данных
		КонецЕсли; 
	КонецЦикла; 
	
	СтруктураВозврата.Вставить("МассивТранзишенов", МассивТранзишенов);
	СтруктураВозврата.Вставить("СтруктураОшибок", СтруктураОшибок);
	Возврат СтруктураВозврата
КонецФункции


//-------------------------------------------------------- ОБЩИЕ ФУНКЦИИ РАБОТЫ С JIRA --------------------------------------------------------

Функция ЗначениеЗаполненоJIRA(ЗначениеДляПроверки) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ЗначениеДляПроверки) Тогда 
		
		Если  ТипЗнч(ЗначениеДляПроверки) =  Тип("Строка") 
				И НРег(ЗначениеДляПроверки) = "none" Тогда 
			Результат = Ложь;		
		Иначе
			Результат = Истина;					
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат; 
КонецФункции

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ФУНКЦИИ РАБОТЫ С JSON ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ЗАПИСЬ В JSON

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	//+ Пилюгин В.Е. 27.02.2017
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение,"ДФ=yyyy-MM-dd");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат НормализоватьСтроку(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = СтрЗаменить(Строка(Значение), Символы.НПП, "");
		Значение = СтрЗаменить(Значение, ",", ".");
		Возврат Значение;
		
	Иначе
		Возврат Значение;
	КонецЕсли; 
	//- Пилюгин В.Е. 27.02.2017
КонецФункции

Функция НормализоватьСтроку(Знач Значение) Экспорт
	//+ Пилюгин В.Е. 27.02.2017
	Значение = СтрЗаменить(Значение,"""","");
	Возврат Значение;
	//- Пилюгин В.Е. 27.02.2017
КонецФункции

Функция НормализоватьЧисло(Значение) Экспорт
	//+ Пилюгин В.Е. 11.09.2018
	НовоеЗначение = СтрЗаменить(Строка(Значение), ",", ".");
	НовоеЗначение = СтрЗаменить(НовоеЗначение, Символы.НПП, "");
	Возврат НовоеЗначение;
	//- Пилюгин В.Е. 11.09.2018
КонецФункции

Функция НормализоватьДату(Значение) Экспорт
	Возврат Формат(Значение,"ДФ=yyyy-MM-dd");		
КонецФункции

Функция НормализоватьДатуВремя(Значение) Экспорт
	Возврат Формат(Значение,"ДФ='yyyy-MM-dd HH:mm'");		
КонецФункции

//безопасная функция, которая возвращает вложенное (до 5 уровней вложенности) поле (значение или Неопределено)
Функция ПолучитьПоле(Поля, п1 = "", п2 = "", п3 = "", п4 = "", п5 = "") Экспорт
	Если НЕ ЗначениеЗаполнено(Поля) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(п1) Тогда
		ЗначениеПоля = Поля.Получить(п1);
		Если ЗначениеЗаполнено(п2) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
				Возврат Неопределено;
			КонецЕсли; 
			ЗначениеПоля = ЗначениеПоля.Получить(п2);
			Если ЗначениеЗаполнено(п3) Тогда
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Возврат Неопределено;
				КонецЕсли; 
				ЗначениеПоля = ЗначениеПоля.Получить(п3);
				Если ЗначениеЗаполнено(п4) Тогда
					Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
						Возврат Неопределено;
					КонецЕсли; 
					ЗначениеПоля = ЗначениеПоля.Получить(п4);
					Если ЗначениеЗаполнено(п5) Тогда
						Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
							Возврат Неопределено;
						КонецЕсли; 
						ЗначениеПоля = ЗначениеПоля.Получить(п5);	
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	//++OW Копачев А.С. 20.02.2021 ONEC-6566 
	ЗначениеПоля = УдалитьНедопустимыеСимволыXML(ЗначениеПоля);
	
	Возврат ЗначениеПоля;
	//--OW Копачев А.С. 20.02.2021 ONEC-6566
КонецФункции

//безопасная функция, которая возвращает вложенное (до 5 уровней вложенности) поле в виде строки
Функция ПолучитьПолеСтрока(Поля, п1 = "", п2 = "", п3 = "", п4 = "", п5 = "")
	//+ Пилюгин В.Е. 17.10.2017
	Значение = ПолучитьПоле(Поля, п1, п2, п3, п4, п5);
	Возврат Лев(Строка(Значение),1000);
	//- Пилюгин В.Е. 17.10.2017
КонецФункции

Функция ПолучитьМассивПолейСтроки(Поля, ИмяПоляМассив, ИмяПоляЭлемент1, ИмяПоляЭлемент2 = "") Экспорт
	//+ Пилюгин В.Е. 17.10.2017
	МассивПолейСтроки = Новый Массив;
	Если НЕ ЗначениеЗаполнено(Поля) Тогда
		Возврат МассивПолейСтроки;
	КонецЕсли; 
	
	Массив = ПолучитьПоле(Поля, ИмяПоляМассив);
	Если ТипЗнч(Массив) <> Тип("Массив") Тогда
		Возврат МассивПолейСтроки;
	КонецЕсли; 
	
	Для каждого эл Из Массив Цикл
		Если ЗначениеЗаполнено(ИмяПоляЭлемент2) Тогда
			Элемент1 = ПолучитьПоле(эл, ИмяПоляЭлемент1);
			МассивПолейСтроки.Добавить(ПолучитьПолеСтрока(Элемент1, ИмяПоляЭлемент2));
		Иначе
			МассивПолейСтроки.Добавить(ПолучитьПолеСтрока(эл, ИмяПоляЭлемент1));
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивПолейСтроки;
	//- Пилюгин В.Е. 17.10.2017
КонецФункции

Функция УдалитьНедопустимыеСимволыXML(Знач ЗначениеСтрокой) Экспорт
	//++OW Копачев А.С. 20.02.2021 ONEC-6566 
	Если ТипЗнч(ЗначениеСтрокой) <> Тип("Строка") Тогда 
		Возврат ЗначениеСтрокой	
	КонецЕсли;
	
	ПреобразованноеЗначениеСтрокой = ЗначениеСтрокой; 
	
	ЕстьНедопустимыйСимвол = НайтиНедопустимыеСимволыXML(ПреобразованноеЗначениеСтрокой);
	
	Пока ЕстьНедопустимыйСимвол > 0 Цикл
		НедопустимыйСимвол = Сред(ПреобразованноеЗначениеСтрокой,ЕстьНедопустимыйСимвол, 1);
		
		ПреобразованноеЗначениеСтрокой = СтрЗаменить(ПреобразованноеЗначениеСтрокой,НедопустимыйСимвол,"");
		ЕстьНедопустимыйСимвол = НайтиНедопустимыеСимволыXML(ПреобразованноеЗначениеСтрокой);
	КонецЦикла;	
	
	Возврат ПреобразованноеЗначениеСтрокой;
	//--OW Копачев А.С. 20.02.2021 ONEC-6566	
КонецФункции

// ЧТЕНИЕ ИЗ JSON

Функция ПреобразоватьДату(ДатаСтрокаИсходная)  Экспорт
	//+ Пилюгин В.Е. 18.10.2017
	МассивДат = СтрРазделить(ДатаСтрокаИсходная,"T");
	ДатаЗначение = Дата("00010101");
	
	Если МассивДат.Количество() = 2 Тогда
		ДатаСтрока = СтрЗаменить(МассивДат[0], "-", "");
		ВремяСтрока = Лев(СтрЗаменить(МассивДат[1], ":", ""), 6);
		Если НЕ ПустаяСтрока(ВремяСтрока) Тогда
			ДатаЗначение = Дата(ДатаСтрока + ВремяСтрока);
		Иначе
			ДатаЗначение = Дата(ДатаСтрока);
		КонецЕсли; 
	ИначеЕсли МассивДат.Количество() = 1 Тогда
		ДатаСтрока = СтрЗаменить(МассивДат[0], "-", "");
		Если НЕ ПустаяСтрока(ДатаСтрока) Тогда
			ДатаЗначение = Дата(ДатаСтрока);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ДатаЗначение;
	//- Пилюгин В.Е. 18.10.2017
КонецФункции

Функция ПреобразоватьЧасыВМинуты(Значение) 
	//+ Пилюгин В.Е. 29.03.2018
	Значение = Значение * 60;  	//+ Пилюгин В.Е. 09.10.2017 с часов на минуты переделал ONEC-2621
	ЗначениеСтрока = СтрЗаменить(СтрЗаменить(Формат(Значение, "ЧДЦ=0; ЧН=0")," ", ""), Символы.НПП, "");
	Возврат ЗначениеСтрока +"m";
	//- Пилюгин В.Е. 29.03.2018
КонецФункции

Функция ПреобразоватьБулево(БулевоСтрокой)  Экспорт
	
	Значение = Ложь;
	
	Если БулевоСтрокой = "Yes" Тогда
		Значение = Истина;	
	ИначеЕсли БулевоСтрокой = "No" Тогда
		Значение = Ложь;	
	Иначе
		Попытка
			Значение = Булево(БулевоСтрокой);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

//-------------------------------------------------------- ФУНКЦИИ РАБОТЫ С JSON --------------------------------------------------------


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ СОЗДАНИЕ/ОБНОВЛЕНИЕ ЗАДАЧИ В JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Функция СоздатьЗадачу(Параметры, ИспользоватьFields = Истина) Экспорт
	//+ Пилюгин В.Е. 30.01.2017
	УстановитьПривилегированныйРежим(Истина);	
	//получаем нужный инстанс JIRA
	ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
	//создадим HTTP-соединение с JIRA
	СоединениеJIRA = СоздатьHTTPСоединениеJIRA(ИнстансJIRA, Параметры.Логин, Параметры.Пароль);
	//создаем пустую структуру для возврата
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7463
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь,"","");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь,"","","");
	//--OW Копачев А.С. 05.04.2022 ONEC-7463

	//получаем структуру полей запроса для создания задачи	
	СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, ИспользоватьFields);	
	СтруктураПолей = СтруктураПолей.Структура;	
	//сформируем текст запроса
	ТекстЗапроса = СформироватьТекстЗапросаJIRA(СтруктураПолей);
	
	//отправляем запрос в JIRA
	ИмяФайлаНаОтправку = КаталогВременныхФайлов()+"request_issue_" + ПолучитьМеткуТекущаяДата() + ".data";
	ТекстФайл = Новый ТекстовыйДокумент;
	ТекстФайл.УстановитьТекст(ТекстЗапроса);
	ТекстФайл.Записать(ИмяФайлаНаОтправку, КодировкаТекста.UTF8);
	ФайлНаОтправку = Новый Файл(ИмяФайлаНаОтправку);
	РазмерФайлаНаОтправку = XMLСтрока(ФайлНаОтправку.Размер());
	
	ИмяФайлаРезультат = КаталогВременныхФайлов()+"result_issue_" + ПолучитьМеткуТекущаяДата() + ".data";
	
	ContentType = "application/json; charset=utf-8";
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить("Content-Length", РазмерФайлаНаОтправку);
	ЗаголовокЗапросаHTTP.Вставить("Content-Type", ContentType);
	
	Если Параметры.Свойство("НомерЗадачи") Тогда
		Если ЗначениеЗаполнено(Параметры.НомерЗадачи) Тогда
			НомерЗадачи = Параметры.НомерЗадачи;
			ЗапросURL = "/rest/api/2/issue/" + НомерЗадачи;
			ОбновлениеЗадачи = Истина;
		Иначе	
			//++OW Копачев А.С. 15.06.2021 ONEC-6813		
			Если ЭтоИнстансJiraSD(ИнстансJIRA) Тогда 
				ЗапросURL = "/rest/servicedeskapi/request/";
			//--OW Копачев А.С. 15.06.2021 ONEC-6813	
			Иначе	
				ЗапросURL = "/rest/api/2/issue"; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	КодИнтеграции_JIRA = "";
	Если Параметры.Свойство("КодИнтеграции_JIRA") Тогда
		КодИнтеграции_JIRA = Параметры.КодИнтеграции_JIRA;
	КонецЕсли;
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
		
	//++OW Копачев А.С. 14.11.2019 ONEC-4979
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если (ЭтоИнстансJiraSpb(ИнстансJIRA) ИЛИ ЭтоИнстансJiraSD(ИнстансJIRA)) 
		И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(ЗапросURL, ИнстансJIRA,,,ContentType,РазмерФайлаНаОтправку);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979	
		Запрос = Новый HTTPЗапрос(ЗапросURL, ЗаголовокЗапросаHTTP);
	КонецЕсли;
	Запрос.УстановитьИмяФайлаТела(ИмяФайлаНаОтправку);
	
	Попытка
		Если ЗначениеЗаполнено(НомерЗадачи) Тогда
			Результат = СоединениеJIRA.Записать(Запрос);
		Иначе
			Результат = СоединениеJIRA.ОтправитьДляОбработки(Запрос, ИмяФайлаРезультат);
		КонецЕсли; 
	Исключение
		СтруктураВозврата.УспешноСоздана = Ложь;
		СтруктураВозврата.ТекстВозврата = "Cannot send HTTP-request: " + ОписаниеОшибки();
	    Возврат СтруктураВозврата
	КонецПопытки;
	
	//создание новой задачи
	Если НЕ ЗначениеЗаполнено(НомерЗадачи) Тогда
		//обрабатываем результат запроса //ОК :)
		Если Результат.КодСостояния = 201 Тогда
			//разберем ответ от сервера
			СтруктураВозврата = СформироватьОтветОбУспешномСозданииЗадачи(ИмяФайлаРезультат, ЭтоИнстансJiraSD(ИнстансJIRA));
			//создадим 1С объект "Задача JIRA"
			Если ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
				ЗадачаJIRA = НайтиСоздатьЗадачуJIRA(СтруктураВозврата.НомерЗадачи, ИнстансJIRA);
				//++OW Копачев А.С. 05.04.2022 ONEC-7463
				СтруктураВозврата.КодИнтеграции_JIRA = ЗадачаJIRA.КодИнтеграции_JIRA;
				//--OW Копачев А.С. 05.04.2022 ONEC-7463
			КонецЕсли; 		
			
			//++OW Копачев А.С. 19.02.2020 ONEC-5306 
			//+ Пилюгин В.Е. 26.09.2017 вотчеров добавляем уже после создания таска (при создании добавить их невозможно :( 
			//ДобавитьВотчеровВЗадачу(Параметры, СтруктураВозврата.НомерЗадачи, ИнстансJIRA);    //+ Пилюгин В.Е. 27.09.2018 Лена В. попросила закомментить всезде
			//- Пилюгин В.Е. 26.09.2017	
			ДобавитьВотчеровВЗадачу(Параметры, СтруктураВозврата.НомерЗадачи, ИнстансJIRA);    
			//--OW Копачев А.С. 19.02.2020 ONEC-5306
			
			//++OW Копачев А.С. 03.07.2020 ONEC-5698 
			////+ Пилюгин В.Е. 17.07.2018
			//ОтправитьКодКлиентаВЗадачу(Параметры, СтруктураВозврата.НомерЗадачи, ИнстансJIRA);
			////- Пилюгин В.Е. 17.07.2018
			//--OW Копачев А.С. 03.07.2020 ONEC-5698
			
			//+ Пилюгин В.Е. 11.04.2018
			Если Параметры.Свойство("МассивПутейАттачей") Тогда
				Если Параметры.МассивПутейАттачей.Количество() > 0 Тогда
					СтруктураВозвратаФайлы = ОтправитьАттачи(СтруктураВозврата.НомерЗадачи, Параметры.МассивПутейАттачей, ИнстансJIRA, Истина);
					СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + СтруктураВозвратаФайлы.СообщениеОбОшибке; 
				КонецЕсли; 
			КонецЕсли; 
			//- Пилюгин В.Е. 11.04.2018
			
			//++OW Копачев А.С. 20.06.2019 ONEC-4582
			Если Параметры.Свойство("ТаблицаВнешнихСсылок") Тогда
				Если Параметры.ТаблицаВнешнихСсылок.Количество() > 0 Тогда
					СтруктураВозвратаФайлы = ОтправитьВнешниеСсылки(СтруктураВозврата.НомерЗадачи, Параметры.ТаблицаВнешнихСсылок, ИнстансJIRA);
					СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + СтруктураВозвратаФайлы.СообщениеОбОшибке; 
				КонецЕсли; 
			КонецЕсли;
			//--OW Копачев А.С. 20.06.2019 ONEC-4582
			
		Иначе //Не ОК :(
			Ошибки = СформироватьОшибки(ИмяФайлаРезультат, ЭтоИнстансJiraSD(ИнстансJIRA));		
			СтруктураВозврата.УспешноСоздана = Ложь;
			СтруктураВозврата.ТекстВозврата = "JIRA task wasn`t created" +
													". Reasons: " + Ошибки.ТекстВозврата + "*************************";
			СтруктураВозврата.Вставить("СтруктураОшибок", Ошибки.СтруктураОшибок);
		КонецЕсли; 
	//обновление существующей задачи	
	Иначе                               
		//обрабатываем результат запроса //ОК :)
		Если Результат.КодСостояния = 201 ИЛИ Результат.КодСостояния = 204 Тогда
			//разберем ответ от сервера
			СтруктураВозврата.УспешноСоздана = Истина;
			СтруктураВозврата.НомерЗадачи = НомерЗадачи;
			//++OW Копачев А.С. 05.04.2022 ONEC-7463
			СтруктураВозврата.КодИнтеграции_JIRA = КодИнтеграции_JIRA;
			//--OW Копачев А.С. 05.04.2022 ONEC-7463
			СтруктураВозврата.ТекстВозврата = "";
			
			//++OW Копачев А.С. 19.02.2020 ONEC-5306
			//+ Пилюгин В.Е. 26.09.2017 вотчеров добавляем уже после создания таска (при создании добавить их невозможно :( 
			//ДобавитьВотчеровВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA);  //+ Пилюгин В.Е. 27.09.2018 Лена В. попросила закомментить всезде
			//- Пилюгин В.Е. 26.09.2017
			ДобавитьВотчеровВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA);  
			//--OW Копачев А.С. 19.02.2020 ONEC-5306
			
			//++OW Копачев А.С. 03.07.2020 ONEC-5698
			////+ Пилюгин В.Е. 17.07.2018
			//ОтправитьКодКлиентаВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA);
			////- Пилюгин В.Е. 17.07.2018
			//--OW Копачев А.С. 03.07.2020 ONEC-5698
			
			//+ Пилюгин В.Е. 18.04.2018
			Если Параметры.Свойство("МассивПутейАттачей") Тогда
				Если Параметры.МассивПутейАттачей.Количество() > 0 Тогда
					СтруктураВозвратаФайлы = ОтправитьАттачи(НомерЗадачи, Параметры.МассивПутейАттачей, ИнстансJIRA, Истина);
					СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + СтруктураВозвратаФайлы.СообщениеОбОшибке; 
				КонецЕсли; 
			КонецЕсли; 
			//- Пилюгин В.Е. 18.04.2018
			
		Иначе //Не ОК :(
			СтруктураВозврата.УспешноСоздана = Ложь;
			СтруктураВозврата.ТекстВозврата = "JIRA task wasn`t updated" +
										". Reason - ERROR CODE: " + Строка(Результат.КодСостояния) + Символы.ПС + 
										Строка(Результат.ПолучитьТелоКакСтроку()) + Символы.ПС + "*************************";
		КонецЕсли; 
	КонецЕсли; 
	
	//подчищаем за собой
	СоединениеJIRA = Неопределено;
	МассивФайловНаУдаление = Новый Массив;
	МассивФайловНаУдаление.Добавить(ИмяФайлаНаОтправку);
	МассивФайловНаУдаление.Добавить(ИмяФайлаРезультат);
	OW.УдалитьФайлыИзМассива(МассивФайловНаУдаление);	
	
	Возврат СтруктураВозврата
	//- Пилюгин В.Е. 30.01.2017
КонецФункции


Функция ОбновитьЗадачу(Параметры) Экспорт
	//+ Пилюгин В.Е. 27.09.2018
	УстановитьПривилегированныйРежим(Истина);	
	//++OW Копачев А.С. 05.04.2022 ONEC-7463
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, Параметры.НомерЗадачи, ""); 	
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, Параметры.НомерЗадачи, Параметры.КодИнтеграции_JIRA, "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7463
		
	ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
	НомерЗадачи = Параметры.НомерЗадачи;
	НомерТранзишена = ?(Параметры.Свойство("НомерТранзишена"), Строка(Параметры.НомерТранзишена), "61");
	УдалитьЛишниеПараметрыДляОбновленияЗадачи(Параметры);
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата.ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров; 
	Иначе
		//++OW Копачев А.С. 19.09.2019 ONEC-4936 
		//СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь);	
		СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь, Истина);	
		//--OW Копачев А.С. 19.09.2019 ONEC-4936
		СтруктураПолей = СтруктураПолей.Структура;
		ТекстЗапроса = СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
		
		ТекстТранзишена = "{
		| ""fields"": "+ ТекстЗапроса +",
		| ""transition"": {
		|   ""id"": """+НомерТранзишена+"""
		| }
		|}";
				
		СтруктураВыполненияТранзишена = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление задачи", НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
		
		СтруктураВозврата.УспешноСоздана = СтруктураВыполненияТранзишена.Успех;
		СтруктураВозврата.ТекстВозврата = СтруктураВыполненияТранзишена.СообщениеОбОшибке;
	КонецЕсли;
	
	Если СтруктураВозврата.УспешноСоздана Тогда
		
		//++OW Копачев А.С. 03.07.2020 ONEC-5698
		////++OW Копачев А.С. 24.10.2019 ONEC-4855 
		//ОтправитьКодКлиентаВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA); 
		////--OW Копачев А.С. 24.10.2019 ONEC-4855
		//--OW Копачев А.С. 03.07.2020 ONEC-5698
		
		//++OW Копачев А.С. 20.06.2019 ONEC-4582
		Если Параметры.Свойство("ТаблицаВнешнихСсылок") Тогда
			Если Параметры.ТаблицаВнешнихСсылок.Количество() > 0 Тогда
				СтруктураВозвратаФайлы = ОтправитьВнешниеСсылки(НомерЗадачи, Параметры.ТаблицаВнешнихСсылок, ИнстансJIRA);
				СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + СтруктураВозвратаФайлы.СообщениеОбОшибке; 
			КонецЕсли; 
		КонецЕсли;
		//--OW Копачев А.С. 20.06.2019 ONEC-4582
			
		Если Параметры.Свойство("МассивПутейАттачей") Тогда
			Если Параметры.МассивПутейАттачей.Количество() > 0 Тогда
				СтруктураВозвратаФайлы = ОтправитьАттачи(НомерЗадачи, Параметры.МассивПутейАттачей, ИнстансJIRA, Истина);
				СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + Символы.ПС + СтруктураВозвратаФайлы.СообщениеОбОшибке; 
			КонецЕсли; 
		КонецЕсли;	
				
		//++OW Копачев А.С. 17.10.2019 ONEC-5035 
		// update
		Если Параметры.Свойство("update") Тогда
							
			СтруктураВозвратаUpdate = ОтправитьUpdate(НомерЗадачи, Параметры.update, ИнстансJIRA, Истина);
			СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + Символы.ПС + СтруктураВозвратаUpdate.СообщениеОбОшибке; 

		КонецЕсли;
		//--OW Копачев А.С. 17.10.2019 ONEC-5035
	КонецЕсли; 
		
	Возврат СтруктураВозврата;
	
	//- Пилюгин В.Е. 27.09.2018	
КонецФункции


Функция ПолучитьСтруктуруПараметровЗадачи_СогласованиеДоговоров(Параметры) Экспорт
	//+ Пилюгин В.Е. 27.02.2017
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("НомерЗадачи", Параметры.НомерЗадачи);
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Параметры.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", "");
	
	//++OW Копачев А.С. 19.01.2022 ONEC-7347
	//ИнстансJIRA = ПолучитьИнстансДляJiraOws(); 
	ИнстансJIRA = Параметры.ИнстансJIRA;
	//--OW Копачев А.С. 19.01.2022 ONEC-7347
	
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	
	//ускоряющие переменные
	ОбъектСогласования = Параметры.ОбъектСогласования;
	ВидБизнесПроцесса = Параметры.ВидБизнесПроцесса;
	Пространство = Параметры.Пространство;  
	
	//++OW Копачев А.С. 14.03.2023 ONEC-6185
	//Клиент = ?(ЗначениеЗаполнено(ОбъектСогласования.Партнер.КлиентДляВыгрузкиВCRM), ОбъектСогласования.Партнер.КлиентДляВыгрузкиВCRM.Наименование, "");
	Клиент = ?(ЗначениеЗаполнено(ОбъектСогласования.Партнер.НаименованиеARM), ОбъектСогласования.Партнер.НаименованиеARM, ОбъектСогласования.Партнер.НаименованиеДляJIRA);
	//--OW Копачев А.С. 14.03.2023 ONEC-6185
		
	КомпонентаДляУстановки = Параметры.КомпонентаДляУстановки;  //OW Копачев А.С. 19.01.2022 ONEC-7347
	
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(ОбъектСогласования.Партнер) И ОбъектСогласования.Партнер.ВедениеКлиентаВДвухСистемах = ЛОЖЬ Тогда
        ТекстОшибкиЗаполненияПараметров  = "It is not possible to upload object <" + ОбъектСогласования +"> with this client segment.";
		
		СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров; 
		Возврат СтруктураПараметров;
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	
	// ******************************* заполняем структуру параметров *******************************	
	
	//определяем Компоненту, Наименование задачи. Переопределяем Пространство (Проект) для КП в BOP Review
	Компонента = "";
	Если ЗначениеЗаполнено(ОбъектСогласования.Проект) Тогда
		СтрокаБизнесПроект = ", " + ОбъектСогласования.Проект + ")";
	Иначе
		СтрокаБизнесПроект = ")";
	КонецЕсли; 
	Если ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.AM_BRM_Review Тогда
		НаименованиеЗадачи = "Agreement Preparation (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;     
		Компонента = "Preparation";
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.BOP_Review Тогда
		Если ТипЗнч(ОбъектСогласования) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			НаименованиеЗадачи = "BOP Review (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;
		Иначе   //КП
			НаименованиеЗадачи = Клиент + " - " + ОбъектСогласования.НаименованиеКоммерческогоПредложения;
			Пространство = Справочники.OW_ПроектыJIRA.НайтиПоКоду("BOP");
		КонецЕсли; 
		Компонента = "BOP Review";
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Delivery_Review Тогда
		НаименованиеЗадачи = "Delivery Review (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;
		Компонента = "Delivery Review";
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Finance_Review Тогда
		НаименованиеЗадачи = "Finance Review (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Legal_Review Тогда
		НаименованиеЗадачи = "Legal Review (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Sales_Review Тогда
		НаименованиеЗадачи = "BRM/Sales Review (№" + ОбъектСогласования.Номер + СтрокаБизнесПроект;
		Компонента = "Sales/BRM Review";
	ИначеЕсли ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Contract_Approval_Review Тогда
		НаименованиеЗадачи = Клиент + " - " + ОбъектСогласования.НаименованиеКоммерческогоПредложения;
		Компонента = "Contract Approval";
	Иначе
		СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = "Для вида бизнес-процесса " + ВидБизнесПроцесса + " не настроены параметры!"; 
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	//++OW Копачев А.С. 19.01.2022 ONEC-7347
	Если ЗначениеЗаполнено(КомпонентаДляУстановки) Тогда 
		Компонента = Строка(КомпонентаДляУстановки);	
	КонецЕсли;	
	//--OW Копачев А.С. 19.01.2022 ONEC-7347
	
	//++OW Копачев А.С. 19.01.2022 ONEC-7347
	//ТипЗадачи = "Contract Check";
	ТипЗадачи = Параметры.ТипЗадачи;
	//--OW Копачев А.С. 19.01.2022 ONEC-7347
	СтруктураПараметров.Вставить("ТипЗадачи", ТипЗадачи);

	НаименованиеЗадачи = НаименованиеЗадачи;
	СтруктураПараметров.Вставить("НаименованиеЗадачи",НаименованиеЗадачи);
	
	ОписаниеЗадачи = Параметры.ТекстЗадачи;
	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);		//Содержание
	
	//++OW Копачев А.С. 19.01.2022 ONEC-7347
	//СтруктураПараметров.Вставить("Клиент", Клиент);
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 		
		СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(ОбъектСогласования.Партнер));
	Иначе	
		СтруктураПараметров.Вставить("Клиент", Клиент);
	КонецЕсли;
	//--OW Копачев А.С. 19.01.2022 ONEC-7347
			
	СтруктураПараметров.Вставить("Компонента", Компонента);
	
	СтруктураПараметров.Вставить("ДатаНачала", НормализоватьДату(ТекущаяДата()));
	
	СтруктураПараметров.Вставить("БюджетПлановый", 0);
	
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(Параметры.ПлановаяДатаОкончания));    //СрокИсполнения
		
	СтруктураПараметров.Вставить("Приоритет", СокрЛП(Строка(Параметры.Приоритет)));
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Пространство.ЕстьУчетВремени);

	СтруктураПараметров.Вставить("КодПроектаCRM", "");
	
	//++OW Копачев А.С. 17.02.2022 ONEC-7347 
	Если Параметры.Свойство("Репортер") И ЗначениеЗаполнено(Параметры.Репортер) Тогда 
		Репортер = Параметры.Репортер;	
		
	//--OW Копачев А.С. 17.02.2022 ONEC-7347	
	//#ONEC-2238 репортет = BRM клиента
	ИначеЕсли СокрЛП(Пространство.Код) = "CAP" И ЗначениеЗаполнено(ОбъектСогласования.Партнер.Куратор) И ОбъектСогласования.Партнер.Куратор.Наименование <> "<Не указан>" Тогда
		Репортер = "";
		СтруктураПользователь = ПолучитьПользователяJIRA(ОбъектСогласования.Партнер.Куратор, "Main BRM (curator)");
		Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
			СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = СтруктураПользователь.ТекстОшибки;
			Возврат СтруктураПараметров;
		Иначе
			Репортер = СтруктураПользователь.ПользовательJIRA;
		КонецЕсли;	
	Иначе 
		Репортер = "";
	КонецЕсли;
	СтруктураПараметров.Вставить("Репортер", Репортер);

	Код1С = СокрЛП(ОбъектСогласования.УникальныйИдентификатор());
	СтруктураПараметров.Вставить("Код1С", Код1С);                                        //?
	
	//ВебСсылкаНаОбъект1С = "https://"+ow.ВренутьСтруктуру1С().Сервер1С+"/Trade/#" + ПолучитьНавигационнуюСсылку(ОбъектСогласования);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОбъектСогласования);   
	СсылкаWeb = "https://" + OW_ОбщегоНазначенияПовтИсп.ИмяСервераТекущейБазы() + "/" + OW_ОбщегоНазначенияПовтИсп.ИмяТекущейБазы() + "/#" + НавигационнаяСсылка;	
	СтруктураПараметров.Вставить("ВебСсылкаНаОбъект1С", СсылкаWeb);            //ТекСсылкаWeb
	
	//?
	//ЗадачаОснованиеJIRA="";
	//видЗадачиОснованиеJIRA=""; 	
	
	//проект JIRA
    Если СокрЛП(Пространство.Код) = "" Тогда
		СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = "Наименование проекта JIRA не заполнено!";
		Возврат СтруктураПараметров;
	Иначе
		Проект = ВРег(СокрЛП(Пространство.Код));
		СтруктураПараметров.Вставить("Проект", Проект);
	КонецЕсли;
	
	//логин и пароль для авторизации
	ТиповаяУчеткаJIRA = НЕ OW.ПолучитьПроверкуНаСменуПароля();
	Если ТиповаяУчеткаJIRA Тогда
		Логин = ИнстансJIRA.Логин;
		Пароль = ИнстансJIRA.Пароль;
	Иначе
		Логин = ПараметрыСеанса.ТекущийПользователь.Login; 
		Пароль = ow.ПолучитьДанныеПоПользователюП(ПараметрыСеанса.ТекущийПользователь.Ссылка); 
	КонецЕсли;
	
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);
	
	//исполнитель	
	Если Параметры.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.Default") Тогда
		Исполнитель = "";
	Иначе
		Исполнитель = "";
		СтруктураПользователь = ПолучитьПользователяJIRA(Параметры.Исполнитель, "Исполнитель");
		Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
			СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = СтруктураПользователь.ТекстОшибки;
			Возврат СтруктураПараметров;
		Иначе
			Исполнитель = СтруктураПользователь.ПользовательJIRA;
		КонецЕсли;						
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);
	
	Если Проект = "FIN" Тогда   
		СтруктураПараметров.Исполнитель = "";	
	КонецЕсли; 

	
	//партисипанты / вотчеры
	
	//ТАМ
	//ONEC-2588
	ТАМ = Неопределено;
	Если ЗначениеЗаполнено(ОбъектСогласования.Партнер.TAM) И ОбъектСогласования.Партнер.TAM.Наименование <> "<Не указан>" 
	И ВидБизнесПроцесса = Справочники.аДокументооборотВидыКорпоративныхПроцессов.Delivery_Review Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(ОбъектСогласования.Партнер.Куратор, "Main BRM (curator)");
		Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
			СтруктураПараметров.ТекстОшибкиЗаполненияПараметров = СтруктураПользователь.ТекстОшибки;
			Возврат СтруктураПараметров;
		Иначе
			ТАМ = СтруктураПользователь.ПользовательJIRA;
		КонецЕсли;				
	КонецЕсли; 

	МассивПартисипантов = Новый Массив;
	МассивВотчеров = Новый Массив;
	
	Для каждого сп Из Параметры.СписокУчастников Цикл
		//++OW Копачев А.С. 17.02.2022 ONEC-7347
		//ЮзерJIRA = ПолучитьПользователяJIRA_OLD(сп.Значение);
		//Если ЗначениеЗаполнено(ЮзерJIRA) Тогда                                 
		//	МассивПартисипантов.Добавить(ЮзерJIRA);	
		//КонецЕсли; 
		Если ЗначениеЗаполнено(сп.Значение) Тогда
			МассивПартисипантов.Добавить(сп.Значение);
		КонецЕсли;
		//--OW Копачев А.С. 17.02.2022 ONEC-7347
	КонецЦикла; 

	Если Пространство.ЕстьУчастники Тогда
		 		
		Если ЗначениеЗаполнено(Исполнитель) Тогда 
			МассивПартисипантов.Добавить(Исполнитель);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТАМ) Тогда
			МассивПартисипантов.Добавить(ТАМ);
		КонецЕсли; 
		
		//++OW Копачев А.С. 17.05.2022 ONEC-7464
		//Если Проект = "CAP" Тогда				
		//	Если OW.ЭтоРабочаяБаза() Тогда
		//		МассивВотчеров.Добавить("drotkevich");		//ONEC-1134
		//	КонецЕсли; 
		//Иначе	
		//	//Если нРег(ПроектJIRA) = "legal" ИЛИ нРег(ПроектJIRA) = "fin" Тогда 		//+ Пилюгин В.Е. 17.03.2016 	#ONEC-963
		//	Если OW.ЭтоРабочаяБаза() Тогда
		//		МассивПартисипантов.Добавить("vafanasieva");		//ONEC-1920 (п.13)
		//	КонецЕсли;
		//КонецЕсли; 
		
		ДополнительныйПартисипант = Неопределено;
		Если Проект = "CAP" Тогда				
			Если OW.ЭтоРабочаяБаза() Тогда
				ДополнительныйПартисипант = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательДополнительныйПартисипантСогласованияДляПроектаCAP); 	
			КонецЕсли; 
		Иначе	
			Если OW.ЭтоРабочаяБаза() Тогда
				ДополнительныйПартисипант = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательДополнительныйПартисипантСогласованияДляПроектаКромеCAP); 			
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйПартисипант) Тогда 
			СтруктураПользователь = ПолучитьПользователяJIRA(ДополнительныйПартисипант, "Participant");
			Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
				МассивПартисипантов.Добавить(СтруктураПользователь.ПользовательJIRA);	
			КонецЕсли; 				
		КонецЕсли;		
		//--OW Копачев А.С. 17.05.2022 ONEC-7464

	КонецЕсли; 
		
	СтруктураПараметров.Вставить("МассивПартисипантов", OW.СвернутьМассив(МассивПартисипантов));
	//СтруктураПараметров.Вставить("МассивВотчеров", OW.СвернутьМассив(МассивВотчеров));
	
	//++OW Копачев А.С. 25.07.2019 ONEC-4791 
	// Внешние ссылки на JIRA-SPB
	ТаблицаВнешнихСсылок = ИнициализироватьТаблицуВнешнихСсылок();	
	Если Параметры.Свойство("СписокВнешнихЗадачJIRA")
		И Параметры.СписокВнешнихЗадачJIRA <> Неопределено Тогда
		
		//++OW Копачев А.С. 04.04.2022 ONEC-7464
		//ИнстансJIRASPB = ПолучитьИнстансДляJiraSpb();
		//--OW Копачев А.С. 04.04.2022 ONEC-7464
		ТаблицаВнешнихСсылок = ИнициализироватьТаблицуВнешнихСсылок();
		Для Каждого ЭлементСписка Из Параметры.СписокВнешнихЗадачJIRA Цикл
			
			//++OW Копачев А.С. 04.04.2022 ONEC-7464
			//НомерЗадачи = ЭлементСписка.Значение; 
			ЗадачаJIRA = ЭлементСписка.Значение;
			НомерЗадачи = ЗадачаJIRA.Код;
			
			ИнстансJIRA = ЗадачаJIRA.ИнстансJIRA;
			//--OW Копачев А.С. 04.04.2022 ONEC-7464
			
			ПредставлениеЗадачи = ЭлементСписка.Представление;
			
			//++OW Копачев А.С. 04.04.2022 ONEC-7464
			//СсылкаWeb = ИнстансJIRASPB.ПолныйАдрес + "browse/" + НомерЗадачи;
			СсылкаWeb = ИнстансJIRA.ПолныйАдрес + "browse/" + НомерЗадачи;
			//--OW Копачев А.С. 04.04.2022 ONEC-7464
						
			НовСтрока = ТаблицаВнешнихСсылок.Добавить();
			НовСтрока.WebСсылка = СсылкаWeb;
			НовСтрока.Заголовок = НомерЗадачи;
			НовСтрока.Описание 	= ПредставлениеЗадачи;				
		КонецЦикла;	
	КонецЕсли;	
	СтруктураПараметров.Вставить("ТаблицаВнешнихСсылок", ТаблицаВнешнихСсылок);
	//--OW Копачев А.С. 25.07.2019 ONEC-4791

	//++OW Копачев А.С. 20.01.2022 ONEC-7347
	Если Параметры.Свойство("МассивПутейПрисоединенныхФайлов")
		И Параметры.МассивПутейПрисоединенныхФайлов <> Неопределено Тогда 
		СтруктураПараметров.Вставить("МассивПутейАттачей", Параметры.МассивПутейПрисоединенныхФайлов);	
	КонецЕсли;	
	//--OW Копачев А.С. 20.01.2022 ONEC-7347
	
	
	//todo временно, для тестов, не устанавливаем Компоненту, Клиента, Тип задачи
	//СтруктураПараметров.Компонента = "";
	////Клиент = "";
	//СтруктураПараметров.ТипЗадачи = "Client Request";       //todo для тестов в ONEC	
	//todo

	Возврат СтруктураПараметров;
	//- Пилюгин В.Е. 27.02.2017
КонецФункции

//++OW Копачев А.С. 19.09.2019 ONEC-4936 
//Функция ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(ПараметрыЗадачи, ИнстансJIRA, ИспользоватьFields = Истина) 	
Функция ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(ПараметрыЗадачи, ИнстансJIRA, ИспользоватьFields = Истина, ПовторнаяСинхронизация = Ложь) Экспорт	
//--OW Копачев А.С. 19.09.2019 ONEC-4936
	
	СтруктураПараметров = Новый Структура;
	
	Структура = Новый Структура;	
	
	Структура_fields = Новый Структура(); 
	
	//проект (спэйс)
	Если ПараметрыЗадачи.Свойство("Проект") Тогда
		Если ЗначениеЗаполнено(ПараметрыЗадачи.Проект) Тогда
			Структура_project = Новый Структура("key", ПараметрыЗадачи.Проект);
			Структура_fields.Вставить("project", Структура_project);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("НаименованиеЗадачи") Тогда
		//заголовок задачи
		Если ЗначениеЗаполнено(ПараметрыЗадачи.НаименованиеЗадачи) Тогда
			Структура_fields.Вставить("summary", ПараметрыЗадачи.НаименованиеЗадачи);
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("ОписаниеЗадачи") Тогда
		//текст задачи
		Если ЗначениеЗаполнено(ПараметрыЗадачи.ОписаниеЗадачи) Тогда
			Структура_fields.Вставить("description", ПараметрыЗадачи.ОписаниеЗадачи);
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("ТипЗадачи") Тогда
		//тип
		Если ЗначениеЗаполнено(ПараметрыЗадачи.ТипЗадачи) Тогда
			Структура_issuetype = Новый Структура("name", ПараметрыЗадачи.ТипЗадачи);
			Структура_fields.Вставить("issuetype", Структура_issuetype);
		КонецЕсли;
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("Исполнитель") Тогда
		//исполнитель
		Если ЗначениеЗаполнено(ПараметрыЗадачи.Исполнитель) Тогда
			Структура_assignee = Новый Структура("name", ПараметрыЗадачи.Исполнитель);
			Структура_fields.Вставить("assignee", Структура_assignee);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("Репортер") Тогда
		//репортер
		Если ЗначениеЗаполнено(ПараметрыЗадачи.Репортер) Тогда
			Структура_reporter = Новый Структура("name", ПараметрыЗадачи.Репортер);
			Структура_fields.Вставить("reporter", Структура_reporter);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("МассивПартисипантов") Тогда
		//партисипанты
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Participants", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда
			Если ПараметрыЗадачи.МассивПартисипантов.Количество() > 0 Тогда  
				Массив_participants = Новый Массив;
				Для каждого Партисипант Из ПараметрыЗадачи.МассивПартисипантов Цикл
					Структура_participant = Новый Структура("name",Партисипант);
					Массив_participants.Добавить(Структура_participant);
				КонецЦикла; 
				Структура_fields.Вставить(Поле, Массив_participants);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("Компонента") Тогда
		//компонента (-ы)
		Если ЗначениеЗаполнено(ПараметрыЗадачи.Компонента) Тогда
			Массив_components = Новый Массив;
			Структура_component = Новый Структура("name",ПараметрыЗадачи.Компонента);
			Массив_components.Добавить(Структура_component);
			Структура_fields.Вставить("components", Массив_components);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПараметрыЗадачи.Свойство("Клиент") Тогда
		//клиент
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Клиент", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда
			Если ЗначениеЗаполнено(ПараметрыЗадачи.Клиент) Тогда
				Массив_customers = Новый Массив;
				Структура_customer = Новый Структура("value",ПараметрыЗадачи.Клиент);
				Массив_customers.Добавить(Структура_customer);
				Структура_fields.Вставить(Поле, Массив_customers);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	//если у проекта есть тайм трекинг
	Если ПараметрыЗадачи.Свойство("ЕстьТаймТрекинг") Тогда
		Если ПараметрыЗадачи.ЕстьТаймТрекинг Тогда
			
			Если ПараметрыЗадачи.Свойство("ДатаНачала2") Тогда
				ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_11400", ПараметрыЗадачи.ДатаНачала2); 
			КонецЕсли; 	
			
			Если ПараметрыЗадачи.Свойство("ПлановаяДатаОкончания") Тогда
				ДобавитьПолеВСтруктуруПолей(Структура_fields, "duedate", ПараметрыЗадачи.ПлановаяДатаОкончания);
			КонецЕсли; 	
			
			Если ПараметрыЗадачи.Свойство("БюджетПлановый") Тогда
				Если ЗначениеЗаполнено(ПараметрыЗадачи.БюджетПлановый) ИЛИ ПараметрыЗадачи.БюджетПлановый = 0 Тогда
					БюджетПлановый = ПреобразоватьЧасыВМинуты(ПараметрыЗадачи.БюджетПлановый);
					//++OW Копачев А.С. 19.09.2019 ONEC-4936 
					Если ПовторнаяСинхронизация = Истина Тогда 
						// не обновляем остаток бюджета, так как нет данных фактического постинга
						Структура_originalEstimate = Новый Структура("originalEstimate", БюджетПлановый);
					Иначе	
					//--OW Копачев А.С. 19.09.2019 ONEC-4936
						Структура_originalEstimate = Новый Структура("originalEstimate, remainingEstimate", БюджетПлановый, БюджетПлановый);
					//++OW Копачев А.С. 19.09.2019 ONEC-4936	
					КонецЕсли;  
					Если ПараметрыЗадачи.Свойство("ОстатокБюджета") Тогда
						ОстатокБюджета = ПреобразоватьЧасыВМинуты(ПараметрыЗадачи.ОстатокБюджета);
						Структура_originalEstimate.Вставить("remainingEstimate", ОстатокБюджета);
					КонецЕсли;	
					//--OW Копачев А.С. 19.09.2019 ONEC-4936
					Структура_fields.Вставить("timetracking", Структура_originalEstimate);
				КонецЕсли; 						 
			КонецЕсли; 
			
			Если ПараметрыЗадачи.Свойство("ОбщийБюджет") Тогда
				Если ЗначениеЗаполнено(ПараметрыЗадачи.ОбщийБюджет) ИЛИ ПараметрыЗадачи.ОбщийБюджет = 0 Тогда
					ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_11501", ПараметрыЗадачи.ОбщийБюджет);
				КонецЕсли;
			КонецЕсли; 
			
			Если ПараметрыЗадачи.Свойство("РаспределенныйРисковыйБюджет") Тогда
				Если ЗначениеЗаполнено(ПараметрыЗадачи.РаспределенныйРисковыйБюджет) ИЛИ ПараметрыЗадачи.РаспределенныйРисковыйБюджет = 0 Тогда
					ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_13100", ПараметрыЗадачи.РаспределенныйРисковыйБюджет);
				КонецЕсли;
			КонецЕсли; 
			
			Если ПараметрыЗадачи.Свойство("НераспределенныйРисковыйБюджет") Тогда
				Если ЗначениеЗаполнено(ПараметрыЗадачи.НераспределенныйРисковыйБюджет) ИЛИ ПараметрыЗадачи.НераспределенныйРисковыйБюджет = 0 Тогда
					ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_13101", ПараметрыЗадачи.НераспределенныйРисковыйБюджет);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	//приоритет
	Если ПараметрыЗадачи.Свойство("Приоритет") Тогда				
		Структура_priority = Новый Структура("id", ОпределитьПриоритетJIRA(ПараметрыЗадачи.Приоритет, ИнстансJIRA));
		Структура_fields.Вставить("priority", Структура_priority);
	КонецЕсли;
	
	//код проекта CRM
	Если ПараметрыЗадачи.Свойство("КодПроектаCRM") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("КодПроектаCRM", ИнстансJIRA);
		ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.КодПроектаCRM);
	КонецЕсли;
	
	//код проекта Maringo
	Если ПараметрыЗадачи.Свойство("КодПроектаMaringo") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("КодПроектаMaringo", ИнстансJIRA);
		ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.КодПроектаMaringo);
	КонецЕсли;
	
	//код проекта 1С
	Если ПараметрыЗадачи.Свойство("КодПроекта1С") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("КодПроекта1С", ИнстансJIRA);
		ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, СтрЗаменить(Строка(ПараметрыЗадачи.КодПроекта1С),Символы.НПП, ""));  
	КонецЕсли;
	
	//имя эпика
	Если ПараметрыЗадачи.Свойство("ИмяЭпика") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("ИмяЭпика", ИнстансJIRA);
		ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.ИмяЭпика);
	КонецЕсли;
	
	//статус фазы
	Если ПараметрыЗадачи.Свойство("СтатусФазы") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_11800", ПараметрыЗадачи.СтатусФазы);
	КонецЕсли;
	
	//статус проекта
	Если ПараметрыЗадачи.Свойство("СтатусПроекта") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_11800", ПараметрыЗадачи.СтатусПроекта);
	КонецЕсли;
	
	//видна клиенту
	Если ПараметрыЗадачи.Свойство("ВиднаКлиенту") Тогда
		Структура_ = Новый Структура("value", ?(ПараметрыЗадачи.ВиднаКлиенту, "True", "False"));
		Структура_fields.Вставить("customfield_12302", Структура_);
		//Массив_ = Новый Массив;
		//Структура_ = Новый Структура("value",?(ПараметрыЗадачи.ВиднаКлиенту, "true", "false"));
		//Массив_.Добавить(Структура_);
		//Структура_fields.Вставить("customfield_12302", Массив_);
	КонецЕсли;
	
	//прогноз бюджета (форкаст)
	Если ПараметрыЗадачи.Свойство("ПрогнозБюджета") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_13003", ПараметрыЗадачи.ПрогнозБюджета);
	КонецЕсли; 
	
	//кто утвердил бюджет (форкаст)
	Если ПараметрыЗадачи.Свойство("КтоУтвердил") Тогда
		Структура_ = Новый Структура("name", ПараметрыЗадачи.КтоУтвердил);
		Структура_fields.Вставить("customfield_13005", Структура_);
	КонецЕсли; 
	
	//дата утверждения (форкаст)
	Если ПараметрыЗадачи.Свойство("ДатаУтверждения") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_13004", ПараметрыЗадачи.ДатаУтверждения);
	КонецЕсли; 
	               	
	//тип фазы (новый)
	Если ПараметрыЗадачи.Свойство("ТипФазы") Тогда
		
		//+++ Брук Б 18.11.2019 Проверяем - выгружать старый тип фазы или нет
		Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ВыгружатьСтарыйТипФазыВJira) = Истина Тогда
			ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_13103", ПараметрыЗадачи.ТипФазы);
		КонецЕсли;
		//--- Брук Б 18.11.2019
	             		
		//+++ Брук Б 12.11.2019 Новый тип фазы передаем в структуре
		Структура_ТФ = Новый Структура("value",  ПараметрыЗадачи.ТипФазы);
		Структура_fields.Вставить("customfield_17500", Структура_ТФ);
		//--- Брук Б 12.11.2019 Новый тип фазы
		
	КонецЕсли;
	
	//нераспределенный плановый бюджет проекта
	Если ПараметрыЗадачи.Свойство("НераспределенныйПлановыйБюджетПроекта") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "customfield_14100", ПараметрыЗадачи.НераспределенныйПлановыйБюджетПроекта);
	КонецЕсли; 
	
	//ID_Sync
	Если ПараметрыЗадачи.Свойство("ID_Sync") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("ID_Sync", ИнстансJIRA);
		ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.ID_Sync);
	КонецЕсли; 

	// labels
	Если ПараметрыЗадачи.Свойство("labels") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Labels", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			//стрЗначение = "[" + СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПараметрыЗадачи.labels, ",") + "]";
			Структура_fields.Вставить(Поле, ПараметрыЗадачи.labels);
		КонецЕсли;	
	КонецЕсли;
	
	//+++ Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937
	// ContactPerson
	Если ПараметрыЗадачи.Свойство("ContactPerson") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Contact Person", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			Структура_fields.Вставить(Поле, ПараметрыЗадачи.ContactPerson);
		КонецЕсли;	
	КонецЕсли;
	//--- Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937
	
	//++OW Копачев А.С. 20.05.2020 ONEC-5647
	// Лицензии строкой
	Если ПараметрыЗадачи.Свойство("ЛицензииСтрокой") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Licenses", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.ЛицензииСтрокой);  
		КонецЕсли;	
	КонецЕсли;
	//--OW Копачев А.С. 20.05.2020 ONEC-5647	
	
	//++OW Копачев А.С. 23.06.2020 ONEC-5678 
	// CustomerPhaseSuggestion
	Если ПараметрыЗадачи.Свойство("РекомендованнаяФазаКлиента") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("CustomerPhaseSuggestion", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.РекомендованнаяФазаКлиента);  
		КонецЕсли;
	КонецЕсли;	
	//--OW Копачев А.С. 23.06.2020 ONEC-5678
	
	//++OW Копачев А.С. 03.07.2020 ONEC-5698 
	Если ПараметрыЗадачи.Свойство("КодИнстансаКлиента") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("CDTClientCode", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.КодИнстансаКлиента);  
		КонецЕсли;
	КонецЕсли;
	//--OW Копачев А.С. 03.07.2020 ONEC-5698
	
	//++OW Копачев А.С. 22.01.2021 ONEC-6379 
	Если ПараметрыЗадачи.Свойство("НомерДокумента") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("DocumentNumber", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			ДобавитьПолеВСтруктуруПолей(Структура_fields, Поле, ПараметрыЗадачи.НомерДокумента);  
		КонецЕсли;
	КонецЕсли;
	//--OW Копачев А.С. 22.01.2021 ONEC-6379
	
	
	//++OW Копачев А.С. 16.03.2021 ONEC-6561 
	Если ПараметрыЗадачи.Свойство("МассивГруппAD") Тогда
		Поле = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторПоля("Teams", ИнстансJIRA);
		Если ЗначениеЗаполнено(Поле) Тогда 
			МассивСтруктур = Новый Массив;
			Для Каждого ТекГруппаAD Из ПараметрыЗадачи.МассивГруппAD Цикл
				МассивСтруктур.Добавить(Новый Структура("name", ТекГруппаAD));	
			КонецЦикла;
			Структура_fields.Вставить(Поле, МассивСтруктур);
		КонецЕсли;
	КонецЕсли;
	//--OW Копачев А.С. 16.03.2021 ONEC-6561
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	////////////////////////////////////////////////////////
	// ПОЛЯ SD-JIRA
	Если ПараметрыЗадачи.Свойство("SD_ТипЗадачи") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "serviceDeskId", ПараметрыЗадачи.SD_ТипЗадачи);
	КонецЕсли;
	Если ПараметрыЗадачи.Свойство("SD_Проект") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "requestTypeId", ПараметрыЗадачи.SD_Проект);
	КонецЕсли;
	Если ПараметрыЗадачи.Свойство("SD_ДанныеЗадачи") Тогда
		Структура_fields.Вставить("requestFieldValues", ПараметрыЗадачи.SD_ДанныеЗадачи);
	КонецЕсли;
	Если ПараметрыЗадачи.Свойство("SD_МассивВотчеров") Тогда
		Структура_fields.Вставить("requestParticipants", ПараметрыЗадачи.SD_МассивВотчеров);
	КонецЕсли;
	Если ПараметрыЗадачи.Свойство("SD_Репортер") Тогда
		ДобавитьПолеВСтруктуруПолей(Структура_fields, "raiseOnBehalfOf", ПараметрыЗадачи.SD_Репортер);
	КонецЕсли;
	//
	////////////////////////////////////////////////////////
	//--OW Копачев А.С. 09.06.2021 ONEC-6788
    Если ПараметрыЗадачи.Свойство("ContainerLink") Тогда
		Структура_fields.Вставить("customfield_11103", ПараметрыЗадачи.ContainerLink);
    КонецЕсли;
    Если ПараметрыЗадачи.Свойство("ContainerLinkCode") Тогда
		Структура_fields.Вставить("customfield_14600", ПараметрыЗадачи.ContainerLinkCode);
	КонецЕсли;

	 
	Если ИспользоватьFields Тогда
		Структура.Вставить("fields", Структура_fields);
		СтруктураПараметров.Вставить("Структура", Структура);
	Иначе
		СтруктураПараметров.Вставить("Структура", Структура_fields);
	КонецЕсли; 
				
	Возврат СтруктураПараметров
КонецФункции


Процедура ДобавитьПолеВСтруктуруПолей(СтруктураПолей, Поле, Данные)
	//+ Пилюгин В.Е. 22.03.2018
	Если ЗначениеЗаполнено(Поле) Тогда
		Если ЗначениеЗаполнено(Данные) ИЛИ ТипЗнч(Данные) = Тип("Число") Тогда
			Если ТипЗнч(Данные) = Тип("Число") Тогда
				СтруктураПолей.Вставить(Поле, Данные);		
			Иначе
				СтруктураПолей.Вставить(Поле, СтрЗаменить(Строка(Данные), Символы.НПП, ""));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	//- Пилюгин В.Е. 22.03.2018		
КонецПроцедуры

Функция ПолучитьПользователяJIRA_OLD(физЛицо)
	//+ Пилюгин В.Е. 02.03.2016
	Если ЗначениеЗаполнено(физЛицо) Тогда
		ЮзерJIRA = Справочники.OW_ПользовательJIRA.НайтиПоРеквизиту("ФизЛицо",физЛицо).Наименование;
	Иначе
		Возврат "";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЮзерJIRA) Тогда
		Возврат ЮзерJIRA
	Иначе
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо",физЛицо);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Email = OW.ПолучитьМылоЮзера(Пользователь);
			Если ЗначениеЗаполнено(Email) Тогда
				
				нЭлемент = Справочники.OW_ПользовательJIRA.СоздатьЭлемент();
				нЭлемент.Email = Email;
				ЮзерJIRA = OW.ПолучитьЛогинИзМыла(Email);
				
				нЭлемент.Наименование = ЮзерJIRA;
				нЭлемент.ФизЛицо = физЛицо;
				нЭлемент.Пользователь1С = Пользователь;
				нЭлемент.ПолноеИмяПользователя = Пользователь.Наименование;
				нЭлемент.Записать();
			Иначе
				ЮзерJIRA = "";
			КонецЕсли; 
		Иначе
			ЮзерJIRA = "";		
		КонецЕсли; 
	КонецЕсли; 
	Возврат ЮзерJIRA;
	//- Пилюгин В.Е. 02.03.2016
КонецФункции

Функция ПолучитьПользователяJIRA(Пользователь, ИмяПоля = "") Экспорт
	//+ Пилюгин В.Е. 23.03.2018
	СтруктураВозврата = Новый Структура("ПользовательJIRA, ТекстОшибки", "", "");
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			СтруктураВозврата.ТекстОшибки = "Was not chosen user in the field " + ИмяПоля;
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Мыло = OW.ПолучитьМылоЮзера(Пользователь);
		Если НЕ ЗначениеЗаполнено(Мыло) Тогда
			СтруктураВозврата.ТекстОшибки = "For user " + Строка(Пользователь) + " Was not entered e-mail! Please contact with 1C Administrator."
		Иначе
			Логин = OW.ПолучитьЛогинИзМыла(Мыло);
			СтруктураВозврата.ПользовательJIRA = Логин;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.OW_Officers") Тогда
		Мыло = Пользователь.Email;
		Если НЕ ЗначениеЗаполнено(Мыло) Тогда
			СтруктураВозврата.ТекстОшибки = "For officer " + Строка(Пользователь) + " Was not entered e-mail! Please contact with 1C Administrator."
		Иначе
			Логин = OW.ПолучитьЛогинИзМыла(Мыло);
			СтруктураВозврата.ПользовательJIRA = Логин;
		КонецЕсли;
	КонецЕсли; 
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 23.03.2018
КонецФункции

Функция РазобратьОтветОтСервераОСозданииЗадачи(СтрокаОтветаСервера, ОтветССервераSD = Ложь)
	СтруктураВозврата = Новый Структура;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтветаСервера);
	ИмяСвойства = "";
	
	ОбрабатываетсяМассив = Ложь;
	МассивОшибок = Новый Массив;
	
	ОбрабатываетсяСтруктураОшибок = Ложь;
	СтруктураОшибок = Новый Структура;
	
	Попытка
		Пока ЧтениеJSON.Прочитать() Цикл
			ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
			
			Если ТипJSON = ТипЗначенияJSON.Число ИЛИ ТипJSON = ТипЗначенияJSON.Строка ИЛИ ТипJSON = ТипЗначенияJSON.Булево ИЛИ ТипJSON = ТипЗначенияJSON.Null Тогда
				Значение = ЧтениеJSON.ТекущееЗначение;  
				Если ОбрабатываетсяСтруктураОшибок Тогда
					СтруктураОшибок.Вставить(ИмяСвойства,Значение);
				КонецЕсли; 
				//++OW Копачев А.С. 15.06.2021 ONEC-6788
				Если ОтветССервераSD = Ложь Тогда
				//--OW Копачев А.С. 15.06.2021 ONEC-6788	
					Если ИмяСвойства = "key" Тогда
						СтруктураВозврата.Вставить("НомерЗадачи",Значение);		
					КонецЕсли; 
					Если ИмяСвойства = "self" Тогда
						СтруктураВозврата.Вставить("СсылкаНаИнфуПоЗадаче",Значение);		
					КонецЕсли; 
					Если ИмяСвойства = "errorMessages" И ОбрабатываетсяМассив Тогда
						МассивОшибок.Добавить(Значение)	
					КонецЕсли;
				//++OW Копачев А.С. 15.06.2021 ONEC-6788	
				Иначе	 
					Если ИмяСвойства = "issueKey" Тогда
						СтруктураВозврата.Вставить("НомерЗадачи",Значение);		
					КонецЕсли; 
					Если ИмяСвойства = "jiraRest" Тогда
						СтруктураВозврата.Вставить("СсылкаНаИнфуПоЗадаче",Значение);		
					КонецЕсли;
					Если ИмяСвойства = "errorMessage" Тогда
						МассивОшибок.Добавить(Значение)	
					КонецЕсли;	
				КонецЕсли;	
				//--OW Копачев А.С. 15.06.2021 ONEC-6788
			ИначеЕсли ТипJSON = ТипЗначенияJSON.Комментарий Тогда
				Комментарий = ЧтениеJSON.ТекущееЗначение;
				
			ИначеЕсли ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
				ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
				Если ИмяСвойства = "errors" Тогда
					ОбрабатываетсяСтруктураОшибок = Истина;	
				КонецЕсли; 
				
			ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоМассива Тогда
				ОбрабатываетсяМассив = Истина;
				
			ИначеЕсли ТипJSON = ТипЗначенияJSON.КонецМассива Тогда
				ОбрабатываетсяМассив = Ложь;	
				
			ИначеЕсли ТипJSON = ТипЗначенияJSON.НачалоОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.КонецОбъекта ИЛИ ТипJSON = ТипЗначенияJSON.Ничего Тогда
				//начало/конец массива/объекта или отсутствие данных
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	    МассивОшибок.Добавить(СтрокаОтветаСервера);
	КонецПопытки;
	
	СтруктураВозврата.Вставить("МассивОшибок", МассивОшибок);
	СтруктураВозврата.Вставить("СтруктураОшибок", СтруктураОшибок);
	Возврат СтруктураВозврата
КонецФункции

Функция ЗакрытьЗадачу(НомерЗадачи, ИнстансJIRA) Экспорт
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли;
	Возврат ЗапуститьТранзишнСПроверкой(НомерЗадачи, "Close Issue", ИнстансJIRA); 
КонецФункции

Функция ЗакрытьЗадачуТранзишеном(НомерЗадачи, СсылкаНаОбъект, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 15.10.2018
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraSpb();
	КонецЕсли; 
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ПроектыВерхнегоУровня") Тогда
		НазваниеТранзишена = "Complete issue (project)";
		ТранзишенИд = "41";
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
		НазваниеТранзишена = "Close issue (phase)";
		ТранзишенИд = "21";
	Иначе
		НазваниеТранзишена = "Close issue";
		ТранзишенИд = "";
	КонецЕсли; 
	
	Возврат ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, НазваниеТранзишена, ТранзишенИд, "", ИнстансJIRA);  
	//- Пилюгин В.Е. 15.10.2018		
КонецФункции

//++OW Копачев А.С. 03.07.2020 ONEC-5698 
//Функция ОтправитьКодКлиентаВЗадачу(Параметры, НомерЗадачи, ИнстансJIRA) Экспорт
//	//+ Пилюгин В.Е. 17.07.2018
//	ТекстСообщения = "";
//	Если Параметры.Свойство("КодИнстансаКлиента") И ЗначениеЗаполнено(НомерЗадачи) И ЗначениеЗаполнено(ИнстансJIRA) Тогда
//		КодИнстансаКлиента = Параметры.КодИнстансаКлиента;
//		Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
//		Заголовки = Новый Соответствие();
//		Заголовки.Вставить("Content-Type", "application/json");
//		ТекстЗапроса = "/rest/entry/1.0/OneC2Jira/setInstance/" + НомерЗадачи + "/" + КодИнстансаКлиента;
//		
//		//++OW Копачев А.С. 14.11.2019 ONEC-4979
//		ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
//		Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
//			Запрос = JIRA.СоздатьHTTPЗапросJIRA(ТекстЗапроса, ИнстансJIRA);
//		Иначе	
//		//--OW Копачев А.С. 14.11.2019 ONEC-4979
//			Запрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
//		КонецЕсли;	
//		Ответ = Соединение.Записать(Запрос);
//		Если Ответ.КодСостояния = 200 Тогда
//			//все ок
//			//ТекстСообщения = "Код инстанса (конф.лицензий) " + КодИнстансаКлиента +" добавлен в задачу " + НомерЗадачи;
//			ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Код инстанса (конф.лицензий) " + КодИнстансаКлиента +" добавлен в задачу " + НомерЗадачи, "Instance code (conf. License)" + КодИнстансаКлиента + " has been added to the task "+ НомерЗадачи);
//			
//			OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
//		Иначе
//			ТекстСообщения = "Код инстанса (конф.лицензий) " + КодИнстансаКлиента +" НЕ добавлен в задачу " + НомерЗадачи + 
//			" по причине: " + ответ.ПолучитьТелоКакСтроку();
//			OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);	
//		КонецЕсли; 
//		Сообщить(ТекстСообщения);
//	КонецЕсли;
//	Возврат ТекстСообщения;
//	//- Пилюгин В.Е. 17.07.2018		
//КонецФункции
//--OW Копачев А.С. 03.07.2020 ONEC-5698

Процедура УдалитьЛишниеПараметрыДляОбновленияЗадачи(Параметры)
	//+ Пилюгин В.Е. 27.09.2018
	Если Параметры.Свойство("Проект") Тогда
		Параметры.Удалить("Проект");	
	КонецЕсли; 
	//- Пилюгин В.Е. 27.09.2018		
КонецПроцедуры


//-------------------------------------------------------- СОЗДАНИЕ ЗАДАЧИ В JIRA --------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ ПО ЗАДАЧЕ JIRA 

Функция СформироавтьДокументПоЗадачеJIRA_International(ЗадачаJIRA,ДанныеЗадачиJIRA,ДокументыДляОтмены,ТипНужногоДокумента,ДокументДляЗаполнения,СтруктураВозврата,ШаблонПредставления,ВидДокумента) Экспорт
    // Поиск ID_Sync
	НайденныеДокументы = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеЗадачиJIRA.ID_Sync) Тогда 
		НайденныеДокументы = НайтиВсеДокументыПоIDSync(ДанныеЗадачиJIRA.ID_Sync);
	КонецЕсли;
	
	// Поиск по Коду задачи JIRA	
	Если НайденныеДокументы.Количество() = 0 Тогда 	
		//++OW Копачев А.С. 08.04.2022 ONEC-7464
		//НайденныеДокументы = НайтиВсеДокументыПоКодуЗадачиJIRA(ДанныеЗадачиJIRA.Код);
		НайденныеДокументы = НайтиВсеДокументыПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
		//--OW Копачев А.С. 08.04.2022 ONEC-7464
	КонецЕсли;
	
	// Обработаем список документов на те, что к редактированию и те, что нужно отменить
	Для Каждого ТекДокументДляПроверки Из НайденныеДокументы Цикл
		
		// если документ не подходит по типу, значит у задачи в JIRA изменили тип и такой документ в 1С нам уже не нужен
		Если ТипЗнч(ТекДокументДляПроверки) <> ТипНужногоДокумента Тогда 
			ДокументыДляОтмены.Добавить(ТекДокументДляПроверки);	
			
		Иначе		
			Если ДокументДляЗаполнения = Неопределено Тогда 
				ДокументДляЗаполнения = ТекДокументДляПроверки;
			Иначе
				
				// если нашли еще один документ, то оставляем тот, что более актуальнее, другой будет распроведен
				Если ДокументДляЗаполнения.Дата > ТекДокументДляПроверки.Дата Тогда 
					ДокументыДляОтмены.Добавить(ТекДокументДляПроверки);	
				Иначе
					ДокументыДляОтмены.Добавить(ДокументДляЗаполнения);
					ДокументДляЗаполнения = ТекДокументДляПроверки;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	//// проверка что документ можно редактировать
	//Если ЗначениеЗаполнено(ДокументДляЗаполнения) Тогда И ДокументЗапрещенДляРедактирования(ДокументДляЗаполнения) Тогда 
	//	СтруктураВозврата.ЕстьОшибки = Истина;
	//	СтруктураВозврата.ТекстОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибки,
	//							"Документ <" + ДокументДляЗаполнения + "> по задаче " + ШаблонПредставления + " запрещено изменять.", Символы.ПС);
	//КонецЕсли;	
		
	// проверка что документы для отмены можно отменять
	Для Каждого ПроверяемыйДокумент Из ДокументыДляОтмены Цикл
		Если ЗначениеЗаполнено(ПроверяемыйДокумент) И ДокументЗапрещенДляРедактирования(ПроверяемыйДокумент) Тогда 
			СтруктураВозврата.ЕстьОшибки = Истина;
			СтруктураВозврата.ТекстОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибки,
								OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Документ <" + ПроверяемыйДокумент + "> по задаче" + ШаблонПредставления + " запрещено отменять.",
																						"Document <" + ПроверяемыйДокумент + "> by task" + ШаблонПредставления + " is not allowed to be canceled."), Символы.ПС);
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	НеобходимоОповещать = Ложь;
	
	// Формирование/обновление документа
	ДокументДляЗаполненияОбъект = Неопределено;
	ДанныеДокументаДоЗаполнения = Неопределено; 
	СтатусJIRAДоЗаполнения 		= Неопределено;  //OW Копачев А.С. 20.01.2020 ONEC-5285
	Если НЕ ЗначениеЗаполнено(ДокументДляЗаполнения) Тогда 
		ДокументДляЗаполненияОбъект = Документы[ВидДокумента].СоздатьДокумент();
		ДокументДляЗаполненияОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументДляЗаполненияОбъект = ДокументДляЗаполнения.ПолучитьОбъект();
		
		//++OW Копачев А.С. 20.01.2020 ONEC-5285 
		СтатусJIRAДоЗаполнения = ДокументДляЗаполнения.СтатусJIRA;
		
		//НеобходимоОповещать = ДокументУтвержден(ДокументДляЗаполнения);  // Истина;
		НеобходимоОповещать = НеобходимоОповещатьПоДокументуОтсутствия(ДокументДляЗаполнения);  // Истина;
		//--OW Копачев А.С. 20.01.2020 ONEC-5285	
	КонецЕсли;
	
	// получим реквизиты для проверки заполнения и изменения
	ПолноеИмяДокумента = ДокументДляЗаполненияОбъект.Метаданные().ПолноеИмя();
	СсылкаНаОбъектМетаданных = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ПолноеИмяДокумента);
	
	Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.Реквизит"));	
	РевизитыДляПроверкиИзмененийВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(СсылкаНаОбъектМетаданных, Истина, Отбор);
	
	Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.ТабЧасть"));	
	ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(СсылкаНаОбъектМетаданных, Истина, Отбор);
	
	Если НеобходимоОповещать Тогда //ДокументДляЗаполненияОбъект.ЭтоНовый() = Ложь Тогда 
		/////////////////////////////
		// информация для проверки изменений
		
		ИменаРевизитов 			= РевизитыДляПроверкиИзмененийВДокументеJIRA.ВыгрузитьКолонку("Имя");
		ИменаТабличныхЧастей    = ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA.ВыгрузитьКолонку("Имя");
		
		ДанныеДокументаДоЗаполнения = ВыгрузитьДанныеОбъектаВСтруктуру(ДокументДляЗаполнения, ИменаРевизитов, ИменаТабличныхЧастей);

		/////////////////////////////	
	КонецЕсли;
	
	// заполнение документа
	ДокументДляЗаполненияОбъект.Заполнить(ЗадачаJIRA);
		
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Попытка
		НачатьТранзакцию();
		ЕстьОшибки = ОбработатьСформированныйДокумент(ДокументДляЗаполненияОбъект, ТекстОшибки) <> Истина;
		
		Если ЕстьОшибки = Ложь Тогда 
			Для Каждого ДокументДляОтмены Из ДокументыДляОтмены Цикл 
				ДокументДляОтменыОбъект = ДокументДляОтмены.ПолучитьОбъект();
				ДокументДляОтменыОбъект.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		
		ДокументДляЗаполнения = ДокументДляЗаполненияОбъект.Ссылка;
		
	Исключение
		ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не удалось сформировать документ по задаче" + ШаблонПредставления + ". Подробности: " + ОписаниеОшибки(), 
																			"Failed to create a document by task" + ШаблонПредставления + ". Details: " + ОписаниеОшибки());		
	КонецПопытки;	
		
	Если ЕстьОшибки = Ложь Тогда 	
		
		ТипЗнчДокумента = ТипЗнч(ДокументДляЗаполнения);

		ДокументУтвержден = ДокументУтвержден(ДокументДляЗаполненияОбъект);
					
		/////////////////////////////
		// отправка в SAP					
        //Если ТипЗнчДокумента = Тип("ДокументСсылка.КомандировочныеИДругиеРасходыСотрудниковJIRA") 
        //	И (ДокументДляЗаполненияОбъект.Организация = Справочники.Организации.OpenwayEurope 
        //	 	ИЛИ	ДокументДляЗаполненияОбъект.Организация = Справочники.Организации.OpenwayTechnologiesLtd)
        //	Тогда 
        //	
        //	// если документ утвержден - выгружаем в SAP
        //	Если ДокументУтвержден = Истина И НЕ ЗначениеЗаполнено(ДокументДляЗаполненияОбъект.CodeSAP) Тогда 
        //		РезультатОбработкиВSAP = SAP_МодульНаСервере.ПоместитьОбъект_В_SAP_Расходы(ДокументДляЗаполнения); 
        //		Если РезультатОбработкиВSAP.Успех <> Истина Тогда 
        //			ТекстОшибки = РезультатОбработкиВSAP.ТекстОшибки;
        //			OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);		
        //		КонецЕсли;	
        //	КонецЕсли;	
        //КонецЕсли;
		
		Если (ТипЗнчДокумента = Тип("ДокументСсылка.PR_Командировка") ИЛИ ТипЗнчДокумента = Тип("ДокументСсылка.ЗапросНаВозмещениеJIRA")) 
			
			Тогда 
			
			// если документ утвержден - выгружаем в SAP
			Если ДокументУтвержден = Истина И НЕ ЗначениеЗаполнено(ДокументДляЗаполненияОбъект.CodeSAP) Тогда 
				РезультатОбработкиВSAP = SAP_МодульНаСервере.ПоместитьОбъект_В_SAP_Расходы_Новая(ДокументДляЗаполнения); 
				Если РезультатОбработкиВSAP.Успех <> Истина Тогда 
					ТекстОшибки = РезультатОбработкиВSAP.ТекстОшибки;
					OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);		
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;		
		/////////////////////////////	
		// уведомления о проблемах
		
		//++OW Копачев А.С. 20.01.2020 ONEC-5285 		
		// проверка необходимости оповещений "старых" документов (кроме смены статуса на canceled)
		Если НеобходимоОповещать Тогда 
			Если ЗначениеЗаполнено(СтатусJIRAДоЗаполнения) 
				И ДокументДляЗаполненияОбъект.СтатусJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СтатусЗадачиJIRA_Canceled)
				И СтатусJIRAДоЗаполнения <> ДокументДляЗаполненияОбъект.СтатусJIRA Тогда 
				
				// оставляем оповещения
			Иначе
				НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты, Дата(2020,1,1));
				Если НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты > ДокументДляЗаполненияОбъект.Дата Тогда 
					// не отправляем оповещения
					НеобходимоОповещать = Ложь;	
				КонецЕсли;	
			КонецЕсли;					
		КонецЕсли;	
		//--OW Копачев А.С. 20.01.2020 ONEC-5285

		// проверка заполненности реквизитов
		
		// проверка на заполненность документа и отправка нотификации, если документ утвержден
		//++OW Копачев А.С. 20.01.2020 ONEC-5285 
		//Если ДокументУтвержден = Истина Тогда //OW Копачев А.С. 14.10.2019 ONEC-5028 
		Если НеобходимоОповещать Тогда	
		//--OW Копачев А.С. 20.01.2020 ONEC-5285	
			Попытка 				
				ИнформацияОНезаполненныхДанныхВДокументе = ПолучитьИнформациюОНезаполненныхДанныхОбъекта(ДокументДляЗаполненияОбъект, РевизитыДляПроверкиИзмененийВДокументеJIRA, ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA, "en");
				Если НЕ ПустаяСтрока(ИнформацияОНезаполненныхДанныхВДокументе) Тогда 								
					//++OW Копачев А.С. 20.01.2020 ONEC-5285
					// проверка что текст письма не равен предыдущему
					ЭтоДругойТекстПисьма = OW_Нотификации.СравнитьТекстПисьмаСПредыдущимПисьмомНаДубликат(ДокументДляЗаполнения, ИнформацияОНезаполненныхДанныхВДокументе);
					Если ЭтоДругойТекстПисьма Тогда
					//--OW Копачев А.С. 20.01.2020 ONEC-5285	
						OW_Нотификации.НотификацияОНезаполненныхДанныхДокументаJIRA(ДокументДляЗаполнения, ИнформацияОНезаполненныхДанныхВДокументе);	
					КонецЕсли;	
				КонецЕсли;	
			Исключение
				ТекстОшибки =  "Ошибка при попытке анализа заполненности документа " + ДокументДляЗаполнения + ". Подробности: " + ОписаниеОшибки();
				OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
			КонецПопытки;
		КонецЕсли;	
			
		// уведомления об изменениях		
		Если НеобходимоОповещать Тогда 		
			Попытка 
				ИнформацияОбИзмененияхВДокументе = ПолучитьИнформациюОбИзмененияхОбъекта(ДанныеДокументаДоЗаполнения, ДокументДляЗаполненияОбъект, РевизитыДляПроверкиИзмененийВДокументеJIRA, ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA, "en");
				Если НЕ ПустаяСтрока(ИнформацияОбИзмененияхВДокументе) Тогда 		
					
					//++OW Копачев А.С. 20.01.2020 ONEC-5285
					// проверка что текст письма не равен предыдущему
					ЭтоДругойТекстПисьма = OW_Нотификации.СравнитьТекстПисьмаСПредыдущимПисьмомНаДубликат(ДокументДляЗаполнения, ИнформацияОбИзмененияхВДокументе);
					Если ЭтоДругойТекстПисьма Тогда 
					//--OW Копачев А.С. 20.01.2020 ONEC-5285
						OW_Нотификации.НотификацияОбИзмененииДокументаJIRA(ДокументДляЗаполнения, ИнформацияОбИзмененияхВДокументе);
					КонецЕсли;	
				КонецЕсли;	
			Исключение
				ТекстОшибки =  "Ошибка при попытке анализа изменений документа " + ДокументДляЗаполнения + ". Подробности: " + ОписаниеОшибки();
				OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
			КонецПопытки;	
		КонецЕсли;
		//
		/////////////////////////////
		
	Иначе		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	СтруктураВозврата.Ссылка = ДокументДляЗаполнения;
	
	Возврат СтруктураВозврата;

КонецФункции


Функция СформироавтьДокументПоЗадачеJIRA_RUSCIS(ЗадачаJIRA,ДанныеЗадачиJIRA,ДокументыДляОтмены,ТипНужногоДокумента,ДокументДляЗаполнения,СтруктураВозврата,ШаблонПредставления,ВидДокумента) Экспорт
    // Поиск ID_Sync
	НайденныеДокументы = Новый Массив;
    Если ВидДокумента="PR_Командировка" Тогда
        Если не ЗадачаJIRA.ParentTask.Пустая() Тогда
            ИщемПоРодителю = Истина;
        Иначе
            ИщемПоРодителю = Ложь;
        КонецЕсли;
    Иначе
        ИщемПоРодителю = Ложь;
    КонецЕсли;
    Если ИщемПоРодителю Тогда
        Если ЗначениеЗаполнено(ЗадачаJIRA.ParentTask.ID_Sync) Тогда 
    		НайденныеДокументы = НайтиВсеДокументыПоIDSync(ЗадачаJIRA.ParentTask.ID_Sync);
    	КонецЕсли;
    Иначе
    	Если ЗначениеЗаполнено(ДанныеЗадачиJIRA.ID_Sync) Тогда 
    		НайденныеДокументы = НайтиВсеДокументыПоIDSync(ДанныеЗадачиJIRA.ID_Sync);
    	КонецЕсли;
	КонецЕсли;
	// Поиск по Коду задачи JIRA
    Если ИщемПоРодителю Тогда
        Если НайденныеДокументы.Количество() = 0 Тогда 	
			//++OW Копачев А.С. 08.04.2022 ONEC-7464
			//НайденныеДокументы = НайтиВсеДокументыПоКодуЗадачиJIRA(ЗадачаJIRA.ParentTask.Код);
			НайденныеДокументы = НайтиВсеДокументыПоКодуИнтеграцииJIRA(ЗадачаJIRA.ParentTask.КодИнтеграции_JIRA);
			//--OW Копачев А.С. 08.04.2022 ONEC-7464
    	КонецЕсли;
    Иначе
		Если НайденныеДокументы.Количество() = 0 Тогда 	
			//++OW Копачев А.С. 08.04.2022 ONEC-7464
    		//НайденныеДокументы = НайтиВсеДокументыПоКодуЗадачиJIRA(ДанныеЗадачиJIRA.Код);
			НайденныеДокументы = НайтиВсеДокументыПоКодуИнтеграцииJIRA(ДанныеЗадачиJIRA.КодИнтеграции_JIRA);
			//--OW Копачев А.С. 08.04.2022 ONEC-7464
    	КонецЕсли;
	КонецЕсли;
	// Обработаем список документов на те, что к редактированию и те, что нужно отменить
	Для Каждого ТекДокументДляПроверки Из НайденныеДокументы Цикл
		
		// если документ не подходит по типу, значит у задачи в JIRA изменили тип и такой документ в 1С нам уже не нужен
		Если ТипЗнч(ТекДокументДляПроверки) <> ТипНужногоДокумента Тогда 
			ДокументыДляОтмены.Добавить(ТекДокументДляПроверки);	
			
		Иначе		
			Если ДокументДляЗаполнения = Неопределено Тогда 
				ДокументДляЗаполнения = ТекДокументДляПроверки;
			Иначе
				
				// если нашли еще один документ, то оставляем тот, что более актуальнее, другой будет распроведен
				Если ДокументДляЗаполнения.Дата > ТекДокументДляПроверки.Дата Тогда 
					ДокументыДляОтмены.Добавить(ТекДокументДляПроверки);	
				Иначе
					ДокументыДляОтмены.Добавить(ДокументДляЗаполнения);
					ДокументДляЗаполнения = ТекДокументДляПроверки;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
		
	// проверка что документы для отмены можно отменять
	Для Каждого ПроверяемыйДокумент Из ДокументыДляОтмены Цикл
		Если ЗначениеЗаполнено(ПроверяемыйДокумент) И ДокументЗапрещенДляРедактирования(ПроверяемыйДокумент) Тогда 
			СтруктураВозврата.ЕстьОшибки = Истина;
			СтруктураВозврата.ТекстОшибки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстОшибки,
								OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Документ <" + ПроверяемыйДокумент + "> по задаче" + ШаблонПредставления + " запрещено отменять.",
																						"Document <" + ПроверяемыйДокумент + "> by task" + ШаблонПредставления + " is not allowed to be canceled."), Символы.ПС);
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда 
		Возврат СтруктураВозврата;
	КонецЕсли;
		
	НеобходимоОповещать = Ложь;
	
	// Формирование/обновление документа
	ДокументДляЗаполненияОбъект = Неопределено;
	ДанныеДокументаДоЗаполнения = Неопределено; 
	СтатусJIRAДоЗаполнения 		= Неопределено;  //OW Копачев А.С. 20.01.2020 ONEC-5285
	Если НЕ ЗначениеЗаполнено(ДокументДляЗаполнения) Тогда 
		ДокументДляЗаполненияОбъект = Документы[ВидДокумента].СоздатьДокумент();
		ДокументДляЗаполненияОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументДляЗаполненияОбъект = ДокументДляЗаполнения.ПолучитьОбъект();
		
		//++OW Копачев А.С. 20.01.2020 ONEC-5285 
		СтатусJIRAДоЗаполнения = ДокументДляЗаполнения.СтатусJIRA;
		
		//НеобходимоОповещать = ДокументУтвержден(ДокументДляЗаполнения);  // Истина;
		НеобходимоОповещать = НеобходимоОповещатьПоДокументуОтсутствия(ДокументДляЗаполнения);  // Истина;
		//--OW Копачев А.С. 20.01.2020 ONEC-5285	
	КонецЕсли;
	
	// получим реквизиты для проверки заполнения и изменения
	ПолноеИмяДокумента = ДокументДляЗаполненияОбъект.Метаданные().ПолноеИмя();
	СсылкаНаОбъектМетаданных = Справочники.ОбъектыМетаданных.ВернутьСсылкуПоПолномуИмени(ПолноеИмяДокумента);
	
	Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.Реквизит"));	
	РевизитыДляПроверкиИзмененийВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(СсылкаНаОбъектМетаданных, Истина, Отбор);
	
	Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.ТабЧасть"));	
	ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(СсылкаНаОбъектМетаданных, Истина, Отбор);
	
	Если НеобходимоОповещать Тогда //ДокументДляЗаполненияОбъект.ЭтоНовый() = Ложь Тогда 
		/////////////////////////////
		// информация для проверки изменений
		
		ИменаРевизитов 			= РевизитыДляПроверкиИзмененийВДокументеJIRA.ВыгрузитьКолонку("Имя");
		ИменаТабличныхЧастей    = ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA.ВыгрузитьКолонку("Имя");
		
		ДанныеДокументаДоЗаполнения = ВыгрузитьДанныеОбъектаВСтруктуру(ДокументДляЗаполнения, ИменаРевизитов, ИменаТабличныхЧастей);

		/////////////////////////////	
	КонецЕсли;
	
	// заполнение документа
	ДокументДляЗаполненияОбъект.Заполнить(ЗадачаJIRA);
		
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Попытка
		НачатьТранзакцию();
		ЕстьОшибки = ОбработатьСформированныйДокумент(ДокументДляЗаполненияОбъект, ТекстОшибки) <> Истина;
		
		Если ЕстьОшибки = Ложь Тогда 
			Для Каждого ДокументДляОтмены Из ДокументыДляОтмены Цикл 
				ДокументДляОтменыОбъект = ДокументДляОтмены.ПолучитьОбъект();
				ДокументДляОтменыОбъект.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
		
		ДокументДляЗаполнения = ДокументДляЗаполненияОбъект.Ссылка;
		
	Исключение
		ОтменитьТранзакцию();
		ЕстьОшибки = Истина;
		ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не удалось сформировать документ по задаче" + ШаблонПредставления + ". Подробности: " + ОписаниеОшибки(), 
																			"Failed to create a document by task" + ШаблонПредставления + ". Details: " + ОписаниеОшибки());		
	КонецПопытки;	
		
	Если ЕстьОшибки = Ложь Тогда 	
		
		ТипЗнчДокумента = ТипЗнч(ДокументДляЗаполнения);

		ДокументУтвержден = ДокументУтвержден(ДокументДляЗаполненияОбъект);
					
        
        /////////////////////////////	
		// уведомления о проблемах
		
        ////++OW Копачев А.С. 20.01.2020 ONEC-5285 		
        //// проверка необходимости оповещений "старых" документов (кроме смены статуса на canceled)
        //Если НеобходимоОповещать Тогда 
        //	Если ЗначениеЗаполнено(СтатусJIRAДоЗаполнения) 
        //		И ДокументДляЗаполненияОбъект.СтатусJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СтатусЗадачиJIRA_Canceled)
        //		И СтатусJIRAДоЗаполнения <> ДокументДляЗаполненияОбъект.СтатусJIRA Тогда 
        //		
        //		// оставляем оповещения
        //	Иначе
        //		НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты, Дата(2020,1,1));
        //		Если НеОтправлятьНотификациюПоДокументамОтстувияСозданнымДоДаты > ДокументДляЗаполненияОбъект.Дата Тогда 
        //			// не отправляем оповещения
        //			НеобходимоОповещать = Ложь;	
        //		КонецЕсли;	
        //	КонецЕсли;					
        //КонецЕсли;	
		//--OW Копачев А.С. 20.01.2020 ONEC-5285

		// проверка заполненности реквизитов
		
		// проверка на заполненность документа и отправка нотификации, если документ утвержден
		//++OW Копачев А.С. 20.01.2020 ONEC-5285 
		//Если ДокументУтвержден = Истина Тогда //OW Копачев А.С. 14.10.2019 ONEC-5028 
        //Если НеобходимоОповещать Тогда	
        ////--OW Копачев А.С. 20.01.2020 ONEC-5285	
        //	Попытка 				
        //		ИнформацияОНезаполненныхДанныхВДокументе = ПолучитьИнформациюОНезаполненныхДанныхОбъекта(ДокументДляЗаполненияОбъект, РевизитыДляПроверкиИзмененийВДокументеJIRA, ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA, "en");
        //		Если НЕ ПустаяСтрока(ИнформацияОНезаполненныхДанныхВДокументе) Тогда 								
        //			//++OW Копачев А.С. 20.01.2020 ONEC-5285
        //			// проверка что текст письма не равен предыдущему
        //			ЭтоДругойТекстПисьма = OW_Нотификации.СравнитьТекстПисьмаСПредыдущимПисьмомНаДубликат(ДокументДляЗаполнения, ИнформацияОНезаполненныхДанныхВДокументе);
        //			Если ЭтоДругойТекстПисьма Тогда
        //			//--OW Копачев А.С. 20.01.2020 ONEC-5285	
        //				OW_Нотификации.НотификацияОНезаполненныхДанныхДокументаJIRA(ДокументДляЗаполнения, ИнформацияОНезаполненныхДанныхВДокументе);	
        //			КонецЕсли;	
        //		КонецЕсли;	
        //	Исключение
        //		ТекстОшибки =  "Ошибка при попытке анализа заполненности документа " + ДокументДляЗаполнения + ". Подробности: " + ОписаниеОшибки();
        //		OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
        //	КонецПопытки;
        //КонецЕсли;	
			
        //// уведомления об изменениях		
        //Если НеобходимоОповещать Тогда 		
        //	Попытка 
        //		ИнформацияОбИзмененияхВДокументе = ПолучитьИнформациюОбИзмененияхОбъекта(ДанныеДокументаДоЗаполнения, ДокументДляЗаполненияОбъект, РевизитыДляПроверкиИзмененийВДокументеJIRA, ТабличныеЧастиДляПроверкиИзмененийВДокументеJIRA, "en");
        //		Если НЕ ПустаяСтрока(ИнформацияОбИзмененияхВДокументе) Тогда 		
        //			
        //			//++OW Копачев А.С. 20.01.2020 ONEC-5285
        //			// проверка что текст письма не равен предыдущему
        //			ЭтоДругойТекстПисьма = OW_Нотификации.СравнитьТекстПисьмаСПредыдущимПисьмомНаДубликат(ДокументДляЗаполнения, ИнформацияОбИзмененияхВДокументе);
        //			Если ЭтоДругойТекстПисьма Тогда 
        //			//--OW Копачев А.С. 20.01.2020 ONEC-5285
        //				OW_Нотификации.НотификацияОбИзмененииДокументаJIRA(ДокументДляЗаполнения, ИнформацияОбИзмененияхВДокументе);
        //			КонецЕсли;	
        //		КонецЕсли;	
        //	Исключение
        //		ТекстОшибки =  "Ошибка при попытке анализа изменений документа " + ДокументДляЗаполнения + ". Подробности: " + ОписаниеОшибки();
        //		OW.ЗаписатьОшибку(ДокументДляЗаполнения, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
        //	КонецПопытки;	
        //КонецЕсли;
		//
		/////////////////////////////
		
	Иначе		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	СтруктураВозврата.Ссылка = ДокументДляЗаполнения;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция СформироватьДокументПоЗадачеJIRA(ЗадачаJIRA) Экспорт

	СтруктураВозврата = Новый Структура("Ссылка, ЕстьОшибки, ТекстОшибки", Неопределено, Ложь, "");
	
	
	ДанныеЗадачиJIRA = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаJIRA, "Код, КодИнтеграции_JIRA, ID_Sync, RUSCISAttendance");
	ШаблонПредставления = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(" с кодом <" + ДанныеЗадачиJIRA.Код + ">", " with code <" + ДанныеЗадачиJIRA.Код + ">");
	
	ВидДокумента = ОпределитьВидДокументаПоЗадачеJIRA(ЗадачаJIRA);
	Если ВидДокумента = Неопределено Тогда 
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не определен вид документа для формирования по задаче", "Undefined document type for formation by task") + ШаблонПредставления;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументДляЗаполнения = Неопределено;
	ТипНужногоДокумента = Тип("ДокументСсылка." + ВидДокумента);
	
	ДокументыДляОтмены = Новый Массив;	
	Если не ДанныеЗадачиJIRA.RUSCISAttendance Тогда
	    СтруктураВозврата = СформироавтьДокументПоЗадачеJIRA_International(ЗадачаJIRA,ДанныеЗадачиJIRA,ДокументыДляОтмены,ТипНужногоДокумента,ДокументДляЗаполнения,СтруктураВозврата,ШаблонПредставления,ВидДокумента);	
    Иначе
        СтруктураВозврата = СформироавтьДокументПоЗадачеJIRA_RUSCIS(ЗадачаJIRA,ДанныеЗадачиJIRA,ДокументыДляОтмены,ТипНужногоДокумента,ДокументДляЗаполнения,СтруктураВозврата,ШаблонПредставления,ВидДокумента);
    КонецЕсли;
    Возврат СтруктураВозврата;
	
КонецФункции

Функция ПроектыJIRAДляФормированияДокументов() Экспорт
	мПроектов = Новый Массив;
	мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_CLDR));
    Если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда
        мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_CLDRRC));
    КонецЕсли;
	Возврат мПроектов;
КонецФункции

Функция ДокументУтвержден(Документ) Экспорт
	//++OW Копачев А.С. 14.10.2019 ONEC-5028 
	Результат = Ложь;
	
	// утвержденные по статусу документы запрещены к редактированию
	Если ЗначениеЗаполнено(Документ.СтатусJIRA) Тогда 
		СтатусыФазы = Справочники.OW_СтатусыЗадачJIRA.ПолучитьСтатусыФазы("Утверждена");
		Результат = СтатусыФазы.Найти(Документ.СтатусJIRA) <> Неопределено;
    КонецЕсли;
	
	Возврат Результат;
	//--OW Копачев А.С. 14.10.2019 ONEC-5028

КонецФункции

Функция НеобходимоОповещатьПоДокументуОтсутствия(ДокументОтсутствия) Экспорт
	
	//++OW Копачев А.С. 20.01.2020 ONEC-5285 
	НеобходимоОповещать = Ложь;
	
	ИсторическиеДанные = Ложь;
	Попытка
		ИсторическиеДанные = ДокументОтсутствия.ИсторическиеДанные;
	Исключение
	КонецПопытки;
	
	НеобходимоОповещать = ИсторическиеДанные = Ложь И ДокументУтвержден(ДокументОтсутствия);  // Истина;
	
	Возврат НеобходимоОповещать;
	//--OW Копачев А.С. 20.01.2020 ONEC-5285 
КонецФункции

Функция ДокументЗапрещенДляРедактирования(Документ) Экспорт
		
    //***
    Если РольДоступна("ПолныеПрава") Тогда
        Возврат Ложь;
    КонецЕсли;
    //***
	
	
	//++OW Копачев А.С. 14.10.2019 ONEC-5028 
	// утвержденные по статусу документы запрещены к редактированию
	
	//Результат = Ложь;
	//Если ЗначениеЗаполнено(ДокументСсылка.СтатусJIRA) Тогда 
	//	СтатусыФазы = Справочники.OW_СтатусыЗадачJIRA.ПолучитьСтатусыФазы("Утверждена");
	//	Результат = СтатусыФазы.Найти(ДокументСсылка.СтатусJIRA) <> Неопределено;
	//КонецЕсли;
	
	Результат = ДокументУтвержден(Документ);
	//--OW Копачев А.С. 14.10.2019 ONEC-5028
	
	
	Возврат Результат;

КонецФункции

Функция ОбработатьСформированныйДокумент(ДокументОбъект, ТекстОшибки = "") Экспорт
	
	Если ДокументОбъект.ПометкаУдаления Тогда 
		ДокументОбъект.ПометкаУдаления = Ложь;		
	КонецЕсли;
	
	метаДокумента = ДокументОбъект.Метаданные();
	// проведение
	Если метаДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда  
		Попытка 		
	//		ДокументОбъект.обменданными.загрузка =истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ТекстОшибки =  "Ошибка при попытке проведения документа: " + ОписаниеОшибки();
				OW.ЗаписатьОшибку(ДокументОбъект.Ссылка, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;

		Исключение			
			ТекстОшибки =  "Ошибка при попытке записи документа: " + ОписаниеОшибки();
			OW.ЗаписатьОшибку(ДокументОбъект.Ссылка, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
			
			Возврат Ложь;
		КонецПопытки;
			
	Иначе
		//запись
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение			
			ТекстОшибки =  "Ошибка при попытке записи документа: " + ОписаниеОшибки();
			OW.ЗаписатьОшибку(ДокументОбъект.Ссылка, Справочники.OW_РазделыУчета.JIRA_ФормированиеДокумента, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
			
			Возврат Ложь;
		КонецПопытки;	
	КонецЕсли;	
		
	Возврат Истина;

	
КонецФункции

Функция НайтиВсеДокументыПоIDSync(IDSync) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	ВидыДокументов = Новый Массив;
	СоответствиеВидовДокументовСТипомЗадачJIRA = ВидыДокументовПоТипуЗадачиJIRA();	
	
	Для Каждого ТекЭлемент Из СоответствиеВидовДокументовСТипомЗадачJIRA Цикл
		ВидДокумента = ТекЭлемент.Ключ;			
		OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(ВидыДокументов, ВидДокумента, Истина);
	КонецЦикла;	
	
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		
		ТекстЗапросаПоДокументу = 
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТекВидДокумента + " КАК Документ
		|ГДЕ
		|	Документ.ID_Sync = &IDSync
		//|	И Документ.Проведен
		|	И Документ.ПометкаУдаления = ЛОЖЬ
		|";
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстЗапроса, ТекстЗапросаПоДокументу, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
			
	КонецЦикла;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("IDSync", IDSync);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НайденныеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	
	Возврат НайденныеДокументы;
	
КонецФункции

Функция НайтиВсеДокументыПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	ВидыДокументов = Новый Массив;
	СоответствиеВидовДокументовСТипомЗадачJIRA = ВидыДокументовПоТипуЗадачиJIRA();	
	
	Для Каждого ТекЭлемент Из СоответствиеВидовДокументовСТипомЗадачJIRA Цикл
		ВидДокумента = ТекЭлемент.Ключ;			
		OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(ВидыДокументов, ВидДокумента, Истина);
	КонецЦикла;	
	
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		
		ТекстЗапросаПоДокументу = 
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ТекВидДокумента + " КАК Документ
		|ГДЕ
		//++OW Копачев А.С. 08.04.2022 ONEC-7464
		//|	Документ.КодПроектаJIRA = &КодПроектаJIRA
		|	Документ.КодИнтеграции_JIRA = &КодИнтеграцииJIRA
		//--OW Копачев А.С. 08.04.2022 ONEC-7464
		//|	И Документ.Проведен
		|	И Документ.ПометкаУдаления = ЛОЖЬ
		|";
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстЗапроса, ТекстЗапросаПоДокументу, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
			
	КонецЦикла;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КодИнтеграцииJIRA", КодИнтеграцииJIRA);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НайденныеДокументы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	
	Возврат НайденныеДокументы;
	
КонецФункции

Функция ОпределитьВидДокументаПоЗадачеJIRA(ЗадачаJIRA) Экспорт
	
	ВидДокумента = Неопределено;
	
	ДанныеЗадачиJIRA = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаJIRA, "Type, AbsenceReason"); 
	
	ТипЗадачи = ДанныеЗадачиJIRA.Type;
	ПричинаОтсуствия = ДанныеЗадачиJIRA.AbsenceReason;

	Если ТипЗадачи = ПредопределенноеЗначение("Справочник.OW_IssueType.BusinessTrip")  или ТипЗадачи = ПредопределенноеЗначение("Справочник.OW_IssueType.SupplementalTrip") Тогда 
		ВидДокумента = "PR_Командировка";		
	ИначеЕсли ТипЗадачи = ПредопределенноеЗначение("Справочник.OW_IssueType.AbsenceRequest") Тогда 
		Если ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.PaidLeaveVacation") Тогда 
			ВидДокумента = "Отпуск";		
		ИначеЕсли ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.SickLeave")
			ИЛИ ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.SickLeaveWithCertificate")
			ИЛИ ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.SickLeaveWthoutCertificate")
			ИЛИ ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.Hospitalization") Тогда 
			
			ВидДокумента = "Больничнный";
			
		//++OW Копачев А.С. 31.01.2020 ONEC-5332 	
		ИначеЕсли ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.Flex")
			ИЛИ ПричинаОтсуствия = ПредопределенноеЗначение("Справочник.ПричиныОтсутствияСотрудниковJIRA.DayOff") Тогда
			
			ВидДокумента = "ОтгулJIRA";
		//--OW Копачев А.С. 31.01.2020 ONEC-5332
		
		Иначе			
			ВидДокумента = "ОтсутствиеJIRA";
		КонецЕсли;	
	ИначеЕсли ТипЗадачи = ПредопределенноеЗначение("Справочник.OW_IssueType.Reimbursement") Тогда	
		ВидДокумента = "ЗапросНаВозмещениеJIRA";
		
	ИначеЕсли ТипЗадачи = ПредопределенноеЗначение("Справочник.OW_IssueType.ExpenseItem") Тогда	
		ВидДокумента = "КомандировочныеИДругиеРасходыСотрудниковJIRA";		
	КонецЕсли;
	
	Возврат ВидДокумента
КонецФункции

Функция ВидыДокументовПоТипуЗадачиJIRA() Экспорт

	ВидДокументаТипЗадачиJIRА = Новый Структура;
	
	ТипЗадачиJIRA = ПредопределенноеЗначение("Справочник.OW_IssueType.BusinessTrip"); 
	ВидыДокументов = ВидыДокументовПоТипуЗадачиJIRABusinessTrip();
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		ВидДокументаТипЗадачиJIRА.Вставить(ТекВидДокумента, ТипЗадачиJIRA);	
	КонецЦикла;	
	
	ТипЗадачиJIRA = ПредопределенноеЗначение("Справочник.OW_IssueType.AbsenceRequest"); 
	ВидыДокументов = ВидыДокументовПоТипуЗадачиJIRAAbsenceRequest();
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		ВидДокументаТипЗадачиJIRА.Вставить(ТекВидДокумента, ТипЗадачиJIRA);	
	КонецЦикла;
	
	ТипЗадачиJIRA = ПредопределенноеЗначение("Справочник.OW_IssueType.Reimbursement"); 
	ВидыДокументов = ВидыДокументовПоТипуЗадачиJIRAReimbursement();
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		ВидДокументаТипЗадачиJIRА.Вставить(ТекВидДокумента, ТипЗадачиJIRA);	
	КонецЦикла;
	
	ТипЗадачиJIRA = ПредопределенноеЗначение("Справочник.OW_IssueType.ExpenseItem"); 
	ВидыДокументов = ВидыДокументовПоТипуЗадачиJIRAExpenseItem();
	Для Каждого ТекВидДокумента Из ВидыДокументов Цикл
		ВидДокументаТипЗадачиJIRА.Вставить(ТекВидДокумента, ТипЗадачиJIRA);	
	КонецЦикла;
			
	Возврат ВидДокументаТипЗадачиJIRА;
	
КонецФункции

Функция ВидыДокументовПоТипуЗадачиJIRABusinessTrip() 
	мВидов = Новый Массив;
	мВидов.Добавить("PR_Командировка");
	Возврат мВидов;
КонецФункции	

Функция ВидыДокументовПоТипуЗадачиJIRAAbsenceRequest() 
	мВидов = Новый Массив;
	мВидов.Добавить("Отпуск");
	мВидов.Добавить("ОтсутствиеJIRA");
	мВидов.Добавить("Больничнный");	
	мВидов.Добавить("ОтгулJIRA");   //OW Копачев А.С. 23.10.2020 ONEC-6014
	Возврат мВидов;
КонецФункции

Функция ВидыДокументовПоТипуЗадачиJIRAReimbursement() 
	мВидов = Новый Массив;
	мВидов.Добавить("ЗапросНаВозмещениеJIRA");	
	Возврат мВидов;
КонецФункции	

Функция ВидыДокументовПоТипуЗадачиJIRAExpenseItem() 
	мВидов = Новый Массив;
	мВидов.Добавить("КомандировочныеИДругиеРасходыСотрудниковJIRA");
	Возврат мВидов;
КонецФункции
 
Функция ПолучитьЦентрЗатратФазы(Фаза) Экспорт		

	ЦентрЗатрат = Справочники.ЦентрыЗатратJIRA.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Фаза) Тогда 
		Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ЗадачиПроектов.ПроектВерхнегоУровня.КатегорияПроекта.ЦентрЗатрат, Значение(Справочник.ЗадачиПроектов.ПустаяСсылка)) КАК ЦентрЗатрат
			|ИЗ
			|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
			|ГДЕ
			|	ЗадачиПроектов.Ссылка = &Фаза";
			
			Запрос.УстановитьПараметр("Фаза", Фаза);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда 
				Выборка = РезультатЗапроса.Выбрать();
			    Выборка.Следующий();
				ЦентрЗатрат = Выборка.ЦентрЗатрат;
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда 
			ЦентрЗатрат = Справочники.ЦентрыЗатратJIRA.Implementation;	
		КонецЕсли;	
	КонецЕсли;
		
	Возврат ЦентрЗатрат;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОВЕРКОЙ ЗАПОЛНЕННОСТИ ОбЪЕКТОВ

// СсылкаНаОбъект - объект после изменений
// РевизитыДляПроверки - данные справочника объекты метаданных по реквизитам объекта
// ТабличныеЧастиДляПроверки - данные справочника объекты метаданных по табличным частям объекта
//
Функция ПолучитьИнформациюОНезаполненныхДанныхОбъекта(ПроверяемыйОбъект, РевизитыДляПроверки, ТабличныеЧастиДляПроверки, КодЯзыка = "ru") Экспорт
	
	ИнформацияДляПользователя = "";
	
	ДокументУтвержден = ДокументУтвержден(ПроверяемыйОбъект);
	
	СсылкаНаОбъект = ПроверяемыйОбъект.Ссылка;
	
	ОбъектМетаданных = СсылкаНаОбъект.Метаданные(); 
		
	ИмяРеквизитаСинонима = Справочники.ОбъектыМетаданных.ПолучитьИмяРеквизитаСинонима(КодЯзыка);

	ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
	Если НРег(КодЯзыка) = "en" И ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда 
		ПредставлениеОбъекта = OW_ОбщегоНазначения.ПолучитьПредставлениеДокументаEN(СсылкаНаОбъект);
	КонецЕсли;	
	
	ТекстОбщейИнформации =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(ПредставлениеОбъекта + " (JIRA код = " + ПроверяемыйОбъект.КодПроектаJIRA + ") не заполнен:",
																				ПредставлениеОбъекта + " (JIRA task = " + ПроверяемыйОбъект.КодПроектаJIRA + ") not filled:", КодЯзыка);
																				
	ТекстСообщенияПоОбъекту = "";
	
	// Проверка реквизитов объекта
	Для Каждого ТекРеквизитДляПроверки Из РевизитыДляПроверки Цикл
		ИмяРеквизита 	= ТекРеквизитДляПроверки.Имя;
		ВидОбъекта 		= ТекРеквизитДляПроверки.ВидОбъекта;
		Синоним 		= ТекРеквизитДляПроверки[ИмяРеквизитаСинонима];
		Синоним 		= ?(ПустаяСтрока(Синоним), ИмяРеквизита, Синоним);
		
		Значение		= ПроверяемыйОбъект[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(Значение) 
			ИЛИ Значение = ЛОЖЬ Тогда // булевское не анализируем

			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщенияОНезаполненныхДанныхОбъекта(ИмяРеквизита, Синоним, Ложь, КодЯзыка);
		ТекстСообщенияПоОбъекту = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоОбъекту, ТекстСообщения, Символы.ПС);
	КонецЦикла;
	
	// проверка таб частей объекта
	Для Каждого ТекТабЧастьДляПроверки Из ТабличныеЧастиДляПроверки Цикл
		
		ИмяТЧ 			= ТекТабЧастьДляПроверки.Имя;
		ВидОбъекта 		= ТекТабЧастьДляПроверки.ВидОбъекта;
		СинонимТЧ 		= ТекТабЧастьДляПроверки[ИмяРеквизитаСинонима];
		СинонимТЧ 		= ?(ПустаяСтрока(СинонимТЧ), ИмяТЧ, СинонимТЧ);

		ТабЧасть 		= ПроверяемыйОбъект[ИмяТЧ];
	
		Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.РеквизитТЧ"));	
		РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(ТекТабЧастьДляПроверки.Ссылка, Истина, Отбор);
		
		// убираем ненужные реквизиты
		РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA = ОбработатьРевизитыТабличнойЧастиДляПроверкиВДокументеJIRA(РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA, ДокументУтвержден);
			
		//ТекстОбщейИнформацииТЧ =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Табличная часть (" + СинонимТЧ + ") не заполнена:",
		//																				"The table (" + СинонимТЧ + ") not filled:", КодЯзыка);
		ТекстОбщейИнформацииТЧ = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(СинонимТЧ + ":",
																					  СинонимТЧ + ":", КодЯзыка);
		
		ТекстСообщенияПоТЧ = "";
		Для Каждого ТекСтрока Из ТабЧасть Цикл
			ИндексСтроки = ТабЧасть.Индекс(ТекСтрока); 
			НомерСтроки = ИндексСтроки + 1;
						
			ТекстОбщейИнформацииПоСтрокеТЧ =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("  Реквизиты не заполнены в строке № " + НомерСтроки + ":",
																									"  Attributes not filled in row № " + НомерСтроки + ":", КодЯзыка);
			
			ТекстСообщенияПоСтрокеТЧ = "";
			// проверка по реквизитам таб частей объекта
			Для Каждого ТекРеквизитТабличнойЧастиДляПроверки Из РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA Цикл
				ИмяРеквизитаТЧ 	= ТекРеквизитТабличнойЧастиДляПроверки.Имя;
				ВидОбъектаТЧ 	= ТекРеквизитТабличнойЧастиДляПроверки.ВидОбъекта;
				СинонимТЧ 		= ТекРеквизитТабличнойЧастиДляПроверки[ИмяРеквизитаСинонима];
				СинонимТЧ 		= ?(ПустаяСтрока(СинонимТЧ), ИмяРеквизитаТЧ, СинонимТЧ);
									
				ЗначениеТЧ 		= ТекСтрока[ИмяРеквизитаТЧ];			
				Если ЗначениеЗаполнено(ЗначениеТЧ) 
					ИЛИ ЗначениеТЧ = ЛОЖЬ Тогда // булевское не анализируем
					Продолжить;
				КонецЕсли;
				
				// доп проверки
				Если ИмяРеквизитаТЧ = "БизнесРегионФазы" 
					ИЛИ ИмяРеквизитаТЧ = "ЦентрЗатратФазы"
					ИЛИ ИмяРеквизитаТЧ = "КодПроектаФазы"
					ИЛИ ИмяРеквизитаТЧ = "КонфигурацияЛицензий"  
					ИЛИ ИмяРеквизитаТЧ = "КлиентПартнер"          // зависят от конфигур. лицензий, которая зависит от фазы
					ИЛИ ИмяРеквизитаТЧ = "Клиент"  Тогда          // зависят от конфигур. лицензий, которая зависит от фазы
					
					// проверяем заполненость фазы. Только при заполненной фазе д.б. заполнены связанные с ней реквизиты
					Если НЕ ЗначениеЗаполнено(ТекСтрока["Фаза"]) Тогда 
						Продолжить;	
					КонецЕсли;
					
				ИначеЕсли ИмяРеквизитаТЧ = "ОрганизацияЦентраЗатрат" 
					ИЛИ ИмяРеквизитаТЧ = "БизнесРегионЦентраЗатрат"
					ИЛИ ИмяРеквизитаТЧ = "КодПроектаЦентраЗатрат" Тогда 

					// проверяем заполненость центр затрат. Только при заполненном центре затрат д.б. заполнены связанные с ним реквизиты
					Если НЕ ЗначениеЗаполнено(ТекСтрока["ЦентрЗатрат"]) Тогда 
						Продолжить;	
					КонецЕсли;	
					
				ИначеЕсли ИмяРеквизитаТЧ = "Фаза" Тогда
					// проверяем заполненость центр затрат. Если он заполнен, то фаза пустая
					Если ЗначениеЗаполнено(ТекСтрока["ЦентрЗатрат"]) Тогда 
						Продолжить;	
					КонецЕсли;
					
				ИначеЕсли ИмяРеквизитаТЧ = "ЦентрЗатрат" Тогда
					// проверяем заполненость фазы. Если она заполнена, то центр звтрат пустой
					Если ЗначениеЗаполнено(ТекСтрока["Фаза"]) Тогда 
						Продолжить;	
					КонецЕсли;
				
				КонецЕсли;
				
				
				
				ТекстСообщения = ТекстСообщенияОНезаполненныхДанныхОбъекта(ИмяРеквизитаТЧ, СинонимТЧ, Истина, КодЯзыка);
				ТекстСообщенияПоСтрокеТЧ = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоСтрокеТЧ, ТекстСообщения, Символы.ПС);
		
			КонецЦикла;	
			
			Если НЕ ПустаяСтрока(ТекстСообщенияПоСтрокеТЧ) Тогда 
				ТекстСообщенияПоСтрокеТЧ = ТекстОбщейИнформацииПоСтрокеТЧ + Символы.ПС + ТекстСообщенияПоСтрокеТЧ;
				ТекстСообщенияПоТЧ = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоТЧ, ТекстСообщенияПоСтрокеТЧ, Символы.ПС);
			КонецЕсли;	
	
		КонецЦикла;		
		
		Если НЕ ПустаяСтрока(ТекстСообщенияПоТЧ) Тогда 
			ТекстСообщенияПоТЧ = ТекстОбщейИнформацииТЧ + Символы.ПС + ТекстСообщенияПоТЧ;
			ТекстСообщенияПоОбъекту = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоОбъекту, ТекстСообщенияПоТЧ, Символы.ПС + Символы.ПС);
		КонецЕсли;	
				
	КонецЦикла;	

	Если НЕ ПустаяСтрока(ТекстСообщенияПоОбъекту) Тогда 
		ТекстСообщенияПоОбъекту = ТекстОбщейИнформации + Символы.ПС + ТекстСообщенияПоОбъекту;
		ИнформацияДляПользователя = ТекстСообщенияПоОбъекту;
	КонецЕсли;
	
	Возврат	ИнформацияДляПользователя;
	
КонецФункции

Функция ОбработатьРевизитыТабличнойЧастиДляПроверкиВДокументеJIRA(РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA, ДокументУтвержден)
	
	НовыеРевизитыТабличнойЧастиДляПроверкиВДокументеJIRA = РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA.СкопироватьКолонки();	
	
	// не проверяем поля, связанные с утверждением
	ПоляПроверяемыеПриУтверждении = Новый Массив;
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакСотрудникEmail");
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакСотрудник");
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакРуководительEmail");
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакРуководитель");
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакФинансистEmail");			
	ПоляПроверяемыеПриУтверждении.Добавить("КтоУтвердилКакФинансист");

		
	Для Каждого ТекРеквизит Из РевизитыТабличнойЧастиДляПроверкиВДокументеJIRA Цикл
		ИмяРеквизита = ТекРеквизит.Имя;
		
		Если ДокументУтвержден = Ложь Тогда 
			// не проверяем поля, связанные с утверждением
			Если ПоляПроверяемыеПриУтверждении.Найти(ИмяРеквизита) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(НовыеРевизитыТабличнойЧастиДляПроверкиВДокументеJIRA.Добавить(), ТекРеквизит);		
	КонецЦикла;	

	Возврат НовыеРевизитыТабличнойЧастиДляПроверкиВДокументеJIRA;
	
КонецФункции

Функция ТекстСообщенияОНезаполненныхДанныхОбъекта(ИмяРеквизита, Знач Синоним, ЭтоРеквизитТЧ = Ложь, КодЯзыка = "ru")
	
	Если ЭтоРеквизитТЧ = Истина Тогда 
		ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("    " + Синоним,
																			  "    " + Синоним, КодЯзыка);
	Иначе
		ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не заполнен реквизит (" + Синоним + ")",
																			"The attribute (" + Синоним + ") not filled", КодЯзыка);
	КонецЕсли;
	
	Возврат ТекстСообщения; 
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТСЛЕЖИВАНИЕМ ИЗМЕНЕНИЙ ОбЪЕКТОВ

// ОбъектСсылка - ссылка на объект БД
// ИменаРевизитов - массив имен реквизитов
// ИменаТабличныхЧастей - массив имен таб частей
//
Функция ВыгрузитьДанныеОбъектаВСтруктуру(ОбъектСсылка, ИменаРевизитов, ИменаТабличныхЧастей) Экспорт
	
	ДанныеСсылки = Новый Структура;
	
	// получим данные ссылки запросом, чтоб не дергать каждый раз ссылку
	ИменаРеквизитовСтрокой 		= СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ИменаРевизитов);
	ИменаТабличныхЧастейСтрокой = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ИменаТабличныхЧастей);
	
	ИменаРеквизитовДляЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ИменаРеквизитовСтрокой, ИменаТабличныхЧастейСтрокой, ",");
	
	Попытка 
		// получаем стурктуру данных
		ДанныеСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбъектСсылка, ИменаРеквизитовДляЗапроса);

		// дополнительно таблицы получим из результата запроса
		Для Каждого ИмяТЧ Из ИменаТабличныхЧастей Цикл
			ДанныеСсылки[ИмяТЧ] = ДанныеСсылки[ИмяТЧ].Выгрузить();	
		КонецЦикла;	
	Исключение
		ТекстОшибки = "Не удалось получить данные объекта <" + ОбъектСсылка + "> по реквизитам. Подробности: " + ОписаниеОшибки();
		OW.ЗаписатьОшибку(ОбъектСсылка, Справочники.OW_РазделыУчета.РаботаСМетаданными, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
	КонецПопытки;	
		
	Возврат ДанныеСсылки;
	
КонецФункции	

// ДанныеОбъектаДо - Структура значений данных объекта до изменений
// ОбъектПосле - объект после изменений
// РевизитыДляПроверкиИзменений - данные справочника объекты метаданных по реквизитам объекта
// ТабличныеЧастиДляПроверкиИзменений - данные справочника объекты метаданных по табличным частям объекта
//
Функция ПолучитьИнформациюОбИзмененияхОбъекта(ДанныеОбъектаДо, ОбъектПосле, РевизитыДляПроверкиИзменений, ТабличныеЧастиДляПроверкиИзменений, КодЯзыка = "ru") Экспорт
	
	ИнформацияОбИзменениях = "";
	
	ОбъектМетаданных = ОбъектПосле.Метаданные(); 
	//ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();	
	//ИмяОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъекта, ".")[0];
	
	СсылкаНаОбъект = ОбъектПосле.Ссылка; 	

	ИмяРеквизитаСинонима = Справочники.ОбъектыМетаданных.ПолучитьИмяРеквизитаСинонима(КодЯзыка);

	ПредставлениеОбъекта = Строка(СсылкаНаОбъект);
	Если НРег(КодЯзыка) = "en" И ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда 
		ПредставлениеОбъекта = OW_ОбщегоНазначения.ПолучитьПредставлениеДокументаEN(СсылкаНаОбъект);
	КонецЕсли;	
	
	ТекстОбщейИнформации =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(ПредставлениеОбъекта + " (JIRA код = " + ОбъектПосле.КодПроектаJIRA + ") изменен:",
																				ПредставлениеОбъекта + " (JIRA task = " + ОбъектПосле.КодПроектаJIRA + ") has changed:", КодЯзыка); 
																			
	ТекстСообщенияПоОбъекту = "";
	
	// Проверка изменений реквизитов объекта
	Для Каждого ТекРеквизитДляПроверки Из РевизитыДляПроверкиИзменений Цикл
		ИмяРеквизита 	= ТекРеквизитДляПроверки.Имя;
		ВидОбъекта 		= ТекРеквизитДляПроверки.ВидОбъекта;
		Синоним 		= ТекРеквизитДляПроверки[ИмяРеквизитаСинонима];
		Синоним 		= ?(ПустаяСтрока(Синоним), ИмяРеквизита, Синоним);
		
		ЗначениеДо 		= ДанныеОбъектаДо[ИмяРеквизита];
		ЗначениеПосле 	= ОбъектПосле[ИмяРеквизита];
		
		Если ЗначениеДо = ЗначениеПосле Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщенияОбИзмененииЗначенийОбъекта(ИмяРеквизита, Синоним, ЗначениеДо, ЗначениеПосле, Ложь, КодЯзыка);
		ТекстСообщенияПоОбъекту = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоОбъекту, ТекстСообщения, Символы.ПС);
	КонецЦикла;
	
	// проверка изменений таб частей объекта
	Для Каждого ТекТабЧастьДляПроверки Из ТабличныеЧастиДляПроверкиИзменений Цикл
		
		ИмяТЧ 			= ТекТабЧастьДляПроверки.Имя;
		ВидОбъекта 		= ТекТабЧастьДляПроверки.ВидОбъекта;
		СинонимТЧ 		= ТекТабЧастьДляПроверки[ИмяРеквизитаСинонима];
		СинонимТЧ 		= ?(ПустаяСтрока(СинонимТЧ), ИмяТЧ, СинонимТЧ);

		ТабЧастьДо 		= ДанныеОбъектаДо[ИмяТЧ];
		ТабЧастьПосле 	= ОбъектПосле[ИмяТЧ];
	
		Отбор =  Новый Структура("ОтслеживатьИзмененияРеквизитаJIRA, ВидОбъекта", Истина, ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.РеквизитТЧ"));	
		РевизитыТабличнойЧастиДляПроверкиИзмененийВДокументеJIRA = Справочники.ОбъектыМетаданных.ПолучитьПодчиненныеЭлементыОбъектаМетаданных(ТекТабЧастьДляПроверки.Ссылка, Истина, Отбор);
			
		//ТекстОбщейИнформацииТЧ =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Табличная часть (" + СинонимТЧ + ") изменена:",
		//																				"The table (" + СинонимТЧ + ") has changed:", КодЯзыка);
		ТекстОбщейИнформацииТЧ = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(СинонимТЧ + ":",
																					  СинонимТЧ + ":", КодЯзыка);

		
		ТекстСообщенияПоТЧ = "";
		// проверяем по количеству строк
		Если ТабЧастьДо.Количество() <> ТабЧастьПосле.Количество() Тогда 
			ТекстСообщенияПоТЧ =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("  Изменилось количество строк: было <" + ТабЧастьДо.Количество() + "> стало <" + ТабЧастьПосле.Количество() + ">",
																					   "  Changed the number of rows: from <" + ТабЧастьДо.Количество() + "> to <" + ТабЧастьПосле.Количество() + ">", КодЯзыка); 		
		Иначе	
			// строк одинаковое количество, сравниваем по колонкам
			Для Каждого ТекСтрокаДо Из ТабЧастьДо Цикл
				ИндексСтроки = ТабЧастьДо.Индекс(ТекСтрокаДо); 
				НомерСтроки = ИндексСтроки + 1;
				
				ТекСтрокаПосле = ТабЧастьПосле[ИндексСтроки];
				
				ТекстОбщейИнформацииПоСтрокеТЧ =  OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("  Cтрока № " + НомерСтроки + " изменена:",
																									   "  Row № " + НомерСтроки + " has changed:", КодЯзыка);
				
				ТекстСообщенияПоСтрокеТЧ = "";
				// проверка изменений по реквизитам таб частей объекта
				Для Каждого ТекРеквизитТабличнойЧастиДляПроверки Из РевизитыТабличнойЧастиДляПроверкиИзмененийВДокументеJIRA Цикл
					ИмяРеквизитаТЧ 	= ТекРеквизитТабличнойЧастиДляПроверки.Имя;
					ВидОбъектаТЧ 	= ТекРеквизитТабличнойЧастиДляПроверки.ВидОбъекта;
					СинонимТЧ 		= ТекРеквизитТабличнойЧастиДляПроверки[ИмяРеквизитаСинонима];
					СинонимТЧ 		= ?(ПустаяСтрока(СинонимТЧ), ИмяРеквизитаТЧ, СинонимТЧ);
					
					//Если ВидОбъектаТЧ = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМетаданных.РеквизитТЧ") Тогда
						
					ЗначениеТЧДо 		= ТекСтрокаДо[ИмяРеквизитаТЧ];
					ЗначениеТЧПосле 	= ТекСтрокаПосле[ИмяРеквизитаТЧ];
					
					Если ЗначениеТЧДо = ЗначениеТЧПосле Тогда 
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = ТекстСообщенияОбИзмененииЗначенийОбъекта(ИмяРеквизитаТЧ, СинонимТЧ, ЗначениеТЧДо, ЗначениеТЧПосле, Истина, КодЯзыка);
					ТекстСообщенияПоСтрокеТЧ = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоСтрокеТЧ, ТекстСообщения, Символы.ПС);
			
					//КонецЕсли;	
				КонецЦикла;	
				
				Если НЕ ПустаяСтрока(ТекстСообщенияПоСтрокеТЧ) Тогда 
					ТекстСообщенияПоСтрокеТЧ = ТекстОбщейИнформацииПоСтрокеТЧ + Символы.ПС + ТекстСообщенияПоСтрокеТЧ;
					ТекстСообщенияПоТЧ = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоТЧ, ТекстСообщенияПоСтрокеТЧ, Символы.ПС);
				КонецЕсли;	
		
			КонецЦикла;	
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ТекстСообщенияПоТЧ) Тогда 
			ТекстСообщенияПоТЧ = ТекстОбщейИнформацииТЧ + Символы.ПС + ТекстСообщенияПоТЧ;
			ТекстСообщенияПоОбъекту = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстСообщенияПоОбъекту, ТекстСообщенияПоТЧ, Символы.ПС + Символы.ПС);
		КонецЕсли;	
				
	КонецЦикла;	

	Если НЕ ПустаяСтрока(ТекстСообщенияПоОбъекту) Тогда 
		ТекстСообщенияПоОбъекту = ТекстОбщейИнформации + Символы.ПС + ТекстСообщенияПоОбъекту;
		ИнформацияОбИзменениях = ТекстСообщенияПоОбъекту;
	КонецЕсли;
	
	Возврат	ИнформацияОбИзменениях;
	
КонецФункции

Функция ТекстСообщенияОбИзмененииЗначенийОбъекта(ИмяРеквизита, Знач Синоним, ЗначениеДо, ЗначениеПосле, ЭтоРеквизитТЧ = Ложь, КодЯзыка = "ru")
	
	
	Если ЭтоРеквизитТЧ = Истина Тогда 
		ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("    Изменен реквизит (" + Синоним + "): было <" + ЗначениеДо + "> стало <" + ЗначениеПосле + ">",
																		  	  "    The attribute (" + Синоним + ") has been changed: from <" + ЗначениеДо + "> to <" + ЗначениеПосле + ">", КодЯзыка);
	Иначе
		
		ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Изменен реквизит (" + Синоним + "): было <" + ЗначениеДо + "> стало <" + ЗначениеПосле + ">",
																		  	  "The attribute (" + Синоним + ") has been changed: from <" + ЗначениеДо + "> to <" + ЗначениеПосле + ">", КодЯзыка);
	КонецЕсли;
		
	Возврат ТекстСообщения; 
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//ЗАГРУЗКА ПОСТИНГА ИЗ JIRA 

Процедура ЗагрузкаПостингJIRA(ДатаНачала, ДатаОкончания, ИнстансJIRA) Экспорт
	
	Если ДатаНачала <= ДатаОкончания Тогда   
		
		// загружаем помесячно
		ТекущаяДатаНачала = ДатаНачала;
		ТекущаяДатаОкончания = ДатаОкончания; 
		
		Если НачалоМесяца(ТекущаяДатаНачала) <> НачалоМесяца(ТекущаяДатаОкончания) Тогда  
			ТекущаяДатаОкончания = КонецМесяца(ТекущаяДатаНачала);
		КонецЕсли;
		
		Пока НачалоМесяца(ТекущаяДатаОкончания) <= НачалоМесяца(ДатаОкончания) Цикл 	
			// Конец периода - либо конец след месяца, либо дата окончания (что меньше)
			ТекущаяДатаОкончания = Мин(ТекущаяДатаОкончания, ДатаОкончания);
			
			ЗагрузитьПостингJIRAЗаПериод(ТекущаяДатаНачала, ТекущаяДатаОкончания, ИнстансJIRA);
			//***OW @20210113040132  Start [БПВ]
            Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда
                ЗагрузитьПостингJIRAЗаПериод(ТекущаяДатаНачала, ТекущаяДатаОкончания, ИнстансJIRA,,"&user_group=Retired%20Users");
            КонецЕсли;
            //***OW @20210113040134  End [БПВ]            
            // новый период
			ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
			// Конец периода - либо конец след месяца
			ТекущаяДатаОкончания = КонецМесяца(ДобавитьМесяц(ТекущаяДатаОкончания,1));
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗагрузитьПостингJIRAЗаПериод(ДатаНачала, ДатаОкончания, ИнстансJIRA, СчетчикОшибок = 0,UserGroup="&user_group=All%20Users%20Security") Экспорт
			
	СтруктураВозврата = СформироватьСырыеДанные(ДатаНачала, ДатаОкончания, ИнстансJIRA, UserGroup);
	Если СтруктураВозврата.ЕстьОшибки = Истина Тогда
		// попытка загрузить меньшими интервалами (делим на два равных)	
		Если СчетчикОшибок <= 3 Тогда 
			
			КолДнейВИнтервале = OW_ОбщегоНазначенияКлиентСервер.РазностьДат(ДатаНачала, ДатаОкончания, "ДЕНЬ");
			Если КолДнейВИнтервале > 0 Тогда 
				КолДнейВПоловинеИнтервала = Окр(КолДнейВИнтервале / 2,0,РежимОкругления.Окр15как10); 
				
				// первый интервал
				ТекущаяДатаНачала = ДатаНачала;
				ТекущаяДатаОкончания = КонецДня(OW.ДобавитьДень(ДатаНачала, КолДнейВПоловинеИнтервала));
				ЗагрузитьПостингJIRAЗаПериод(ТекущаяДатаНачала, ТекущаяДатаОкончания, ИнстансJIRA, СчетчикОшибок + 1);
				
				// второй интервал
				ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
				ТекущаяДатаОкончания = ДатаОкончания;
				ЗагрузитьПостингJIRAЗаПериод(ТекущаяДатаНачала, ТекущаяДатаОкончания, ИнстансJIRA, СчетчикОшибок + 1)
			КонецЕсли;	
		Иначе
			// не получилось никак загрузить - критическая ошибка загрузки постинга
			ТекстОшибки = "Не удалось загрузить постинг из JIRA по инстансу (" + ИнстансJIRA + ") за период <" + ДатаНачала + "> - <" + ДатаОкончания + ">.";
			OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
		КонецЕсли;		
	Иначе	
		тзСырыеДанные = СтруктураВозврата.Данные;	
	//--OW Копачев А.С. 18.04.2019 		
	
	   	//+ OW Курбатова А.А. 2020/04/15 проверяем что есть тзСырыеДанные, а если они не заполнены, то возвращаем ошибку
		// в текущей реализаци если мы не получили данные из JIRA приходит нотификация что нет ошибок при загрузке постинга
		Если тзСырыеДанные.Количество()>0 Тогда
			тзПроверенныеДанные = ПроверкаИФормированиеДанныхПостингаJIRA(тзСырыеДанные, ДатаНачала, ДатаОкончания, ИнстансJIRA);	
            //***OW @20210114103801  Start [БПВ]  
            Если UserGroup<> "&user_group=Retired%20Users" Тогда
				ОчиститьРегистрПостингаЗаПериод(ДатаНачала, ДатаОкончания, ИнстансJIRA);
				
				////++OW Копачев А.С. 30.03.2022 ONEC-7463
				//// в копии можно удалить рабочий постинг, если за этот период получен постинг из тестовой
				//Если OW.ЭтоРабочаяБаза() = Ложь Тогда 
				//	ДополнительныйИнстансJIRAДляУдаленияПостинга = Неопределено;
				//	Если ЭтоИнстансJiraOws_EMEAA(ИнстансJIRA) Тогда 
				//		ДополнительныйИнстансJIRAДляУдаленияПостинга = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_EMEAA");	
				//	ИначеЕсли ЭтоИнстансJiraOws_RU(ИнстансJIRA) Тогда 
				//		ДополнительныйИнстансJIRAДляУдаленияПостинга = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_OWS_RU");	
				//	ИначеЕсли ЭтоИнстансJiraSpb_EMEAA(ИнстансJIRA) Тогда 
				//		ДополнительныйИнстансJIRAДляУдаленияПостинга = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_EMEAA");	
				//	ИначеЕсли ЭтоИнстансJiraSpb_RU(ИнстансJIRA) Тогда 
				//		ДополнительныйИнстансJIRAДляУдаленияПостинга = ПредопределенноеЗначение("Справочник.СоединениеССайтами.JIRA_SPB_RU");	
				//	КонецЕсли;
				//	
				//	Если ЗначениеЗаполнено(ДополнительныйИнстансJIRAДляУдаленияПостинга) Тогда 
				//		ОчиститьРегистрПостингаЗаПериод(ДатаНачала, ДатаОкончания, ДополнительныйИнстансJIRAДляУдаленияПостинга);	
				//	КонецЕсли;	
				//КонецЕсли; 
				////--OW Копачев А.С. 30.03.2022 ONEC-7463
			КонецЕсли;
            //***OW @20210114103809  End [БПВ]              
			ЗаписьДанныхПостингаJIRAВРегистр(тзПроверенныеДанные, ДатаНачала, ДатаОкончания, ИнстансJIRA);	
        Иначе
            ДопПроверкаУволенные="";
            Если UserGroup= "&user_group=Retired%20Users" Тогда
                ДопПроверкаУволенные = " (загрузка уволенных)";
			КонецЕсли;
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			//OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, "Не смогли загрузить постинг или нет данных"+ДопПроверкаУволенные+" (произошла ошибка на строне JIRA) из "+?(ИнстансJIRA=ПолучитьИнстансДляJiraOws(),"OWS-JIRA",СокрЛП(ИнстансJIRA))+" за период с "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"));
			OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, "Не смогли загрузить постинг или нет данных"+ДопПроверкаУволенные+" (произошла ошибка на строне JIRA) из " + СокрЛП(ИнстансJIRA)+" за период с "+Формат(ДатаНачала,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"));
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
		КонецЕсли;		
		//- OW Курбатова А.А. 2020/04/15 проверяем что есть тзСырыеДанные, а если они не заполнены, то возвращаем ошибку
	КонецЕсли;
		
КонецПроцедуры
//--OW Копачев А.С. 18.04.2019

Функция СформироватьСырыеДанные(ДатаНачала, ДатаОкончания, ИнстансJIRA,UserGroup="&user_group=All%20Users%20Security") Экспорт
	
	//++OW Копачев А.С. 18.04.2019   
	СтруктураВозврата = OW_ОбменДанными.ИнициализироватьСтруктутруВозврата();
	//--OW Копачев А.С. 18.04.2019

	тзДанные = Новый ТаблицаЗначений;
	тзДанные.Колонки.Добавить("start_date");
	тзДанные.Колонки.Добавить("used_time_in_days");
	тзДанные.Колонки.Добавить("user");
	тзДанные.Колонки.Добавить("customer");
	тзДанные.Колонки.Добавить("crmProjectCode");
	тзДанные.Колонки.Добавить("taskName");
	тзДанные.Колонки.Добавить("taskId");                              
	тзДанные.Колонки.Добавить("issueType");
	тзДанные.Колонки.Добавить("id_sync");
	тзДанные.Колонки.Добавить("src_key");       //OW Копачев А.С. 11.04.2019  
	тзДанные.Колонки.Добавить("requester");
	тзДанные.Колонки.Добавить("instanceId");

	
	//+ Пилюгин В.Е. 26.01.2018
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	//- Пилюгин В.Е. 26.01.2018
	
	//+ Пилюгин В.Е. 20.09.2017
	ДатаНачала_Строка = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
	ДатаОкончания_Строка = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);
	
	имяВыходногоФайла = ПолучитьимяВременногоФайла("xml");
	Попытка
		//++OW Копачев А.С. 06.03.2019 ONEC-4368 
		HTTPОтвет = Неопределено;
		Если ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда
			ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
			АдресРесурса = "rest/entry/1.0/OneC2Jira/export-postings?from_date="+ДатаНачала_Строка+"&to_date="+ДатаОкончания_Строка;
			Если ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
				Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
				//++OW Копачев А.С. 20.02.2021 ONEC-6566
				//HTTPОтвет = Соединение.Получить(Запрос, имяВыходногоФайла);
				HTTPОтвет = Соединение.Получить(Запрос);
				//--OW Копачев А.С. 20.02.2021 ONEC-6566
			Иначе	
				//++OW Копачев А.С. 20.02.2021 ONEC-6566
				//HTTPОтвет = Соединение.Получить(АдресРесурса, имяВыходногоФайла);	
				HTTPОтвет = Соединение.Получить(АдресРесурса);
				//--OW Копачев А.С. 20.02.2021 ONEC-6566
			КонецЕсли;	
			
			//++OW Копачев А.С. 20.02.2021 ONEC-6566
			ОтветСтрока = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);	
			ОтветСтрока = УдалитьНедопустимыеСимволыXML(ОтветСтрока);

			Файл = Новый ЗаписьТекста(имяВыходногоФайла);
			Файл.Записать(ОтветСтрока);
			Файл.Закрыть();
			//--OW Копачев А.С. 20.02.2021 ONEC-6566

		Иначе	
		//--OW Копачев А.С. 06.03.2019 ONEC-4368	
		    //++OW Копачев А.С. 20.02.2021 ONEC-6566
			HTTPОтвет = Соединение.Получить("rest/timereport/1.1/export-postings?from_date="+ДатаНачала_Строка+"&to_date="+ДатаОкончания_Строка+UserGroup, имяВыходногоФайла);	 
			//HTTPОтвет = Соединение.Получить("rest/timereport/1.1/export-postings?from_date="+ДатаНачала_Строка+"&to_date="+ДатаОкончания_Строка+UserGroup);	 
			//--OW Копачев А.С. 20.02.2021 ONEC-6566
		КонецЕсли;	
		
		СтруктураВозврата.КодСостояния = HTTPОтвет.КодСостояния;
		        
	Исключение
	    ТекстОшибки = "Ошибка выполнения запроса в " + ИнстансJIRA + ": " + ОписаниеОшибки();
	    OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
		
		//++OW Копачев А.С. 18.04.2019  
		//Возврат тзДанные;
		
		Если HTTPОтвет <> Неопределено Тогда  
			СтруктураВозврата.КодСостояния = HTTPОтвет.КодСостояния; 
		КонецЕсли;
		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураВозврата;
		//--OW Копачев А.С. 18.04.2019	
	КонецПопытки; 
	
		
    //***OW @20202525042527  Start [БПВ]
    ОбщийМодульОбмена1С.ПодключениеСетевогоДискаДляОбмена();
    ПутьКфайлуДляКопии = ПолучитьПутьДляПостинга(ИнстансJIRA,ДатаНачала,ДатаОкончания,UserGroup);
	Попытка
		КопироватьФайл(имяВыходногоФайла,ПутьКфайлуДляКопии);
	Исключение
		ТекстОшибки = "Не удалось скопировать файл постинга по инстансу (" + ИнстансJIRA + "). Подробности: "+ОписаниеОшибки();
		OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
	КонецПопытки;
    //***OW @20202525042530  End [БПВ]    
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(имяВыходногоФайла);
	
	ЕстьБлокПостинга = Ложь;   //OW Копачев А.С. 06.02.2020 ONEC-5350
	Если СтруктураВозврата.КодСостояния  < 400 Тогда 
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "postings" Тогда
				ЕстьБлокПостинга = Истина; //OW Копачев А.С. 06.02.2020 ONEC-5350
				Прервать;			
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;	

	//++OW Копачев А.С. 06.02.2020 ONEC-5350 
	Если ЕстьБлокПостинга = Ложь Тогда 
		ТекстОшибки = "Ошибка выполнения запроса: данные не получены "+ сокрЛП(ИнстансJIRA)+ " с "+сокрЛП(ДатаНачала)+" по "+сокрЛП(ДатаОкончания);
	    OW.ЗаписатьОшибку(,Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);	
		
		Если HTTPОтвет <> Неопределено Тогда  
			СтруктураВозврата.КодСостояния = HTTPОтвет.КодСостояния; 
		КонецЕсли;
		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = ТекстОшибки;
	Иначе
	//--OW Копачев А.С. 06.02.2020 ONEC-5350	
		Имя = "";
		Значение = "";
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Имя = ЧтениеXML.Имя;
				Если Имя = "posting" Тогда
					нСтрока = тзДанные.Добавить();                                
				КонецЕсли;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				Значение = ЧтениеXML.Значение;
				Если Имя = "start_date" Тогда
					нСтрока.start_date = СокрЛП(Значение);
				ИначеЕсли Имя = "used_time_in_days" Тогда
					нСтрока.used_time_in_days = Число(Значение);	
				ИначеЕсли Имя = "user" Тогда
					нСтрока.user = СокрЛП(Значение);	
				ИначеЕсли Имя = "customer" Тогда
					нСтрока.customer = СокрЛП(Значение);	
				ИначеЕсли Имя = "crmProjectCode" Тогда
					нСтрока.crmProjectCode = СокрЛП(Значение);	
				ИначеЕсли Имя = "taskName" Тогда
					нСтрока.taskName = СокрЛП(Значение);	
				ИначеЕсли Имя = "taskId" Тогда
					нСтрока.taskId = СокрЛП(Значение);	
				ИначеЕсли Имя = "workType" Тогда
					нСтрока.issueType = СокрЛП(Значение);	
				ИначеЕсли нРег(Имя) = "id_sync" Тогда
					нСтрока.id_sync = СокрЛП(Значение);
				//++OW Копачев А.С. 11.04.2019  
				ИначеЕсли нРег(Имя) = "src_key" Тогда
					нСтрока.src_key = СокрЛП(Значение);	
				//--OW Копачев А.С. 11.04.2019 						
				ИначеЕсли нРег(Имя) = "requester" Тогда
					нСтрока.requester = СокрЛП(Значение);	
				ИначеЕсли нРег(Имя) = "instanceid" Тогда
					нСтрока.instanceId = СокрЛП(Значение);	
				КонецЕсли;
			Иначе
				//
			КонецЕсли; 			
		КонецЦикла; 
	КонецЕсли;	
	
	ЧтениеXML.Закрыть();
	УдалитьФайлы(имяВыходногоФайла); 
	
	//++OW Копачев А.С. 18.04.2019  
	//Возврат тзДанные;
	СтруктураВозврата.Данные = тзДанные;
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 18.04.2019 
КонецФункции

Функция ПолучитьПутьДляПостинга(Инстанс,ДатаНачала,ДатаОкончания,UserGroup="")
    ПутьКПостингу = Константы.СетевойПутьКФайлуПостинга.Получить()+"\"+OW_ОбщегоНазначенияПовтИсп.ИмяТекущейБазы();
    Попытка     
    	СоздатьКаталог(ПутьКПостингу);     
    Исключение     
    КонецПопытки;
    ПутьКПостингу= ПутьКПостингу+"\"+Инстанс;
    Попытка     
    	СоздатьКаталог(ПутьКПостингу);     
    Исключение     
    КонецПопытки;
    Возврат ПутьКПостингу+"\PostingsFile"+Формат(ДатаНачала,"ДФ=yyyyMMdd")+"-"+Формат(ДатаОкончания,"ДФ=yyyyMMdd")+СтрЗаменить(СтрЗаменить(UserGroup,"&",""),"%","")+".xml";

КонецФункции

Функция ПроверкаИФормированиеДанныхПостингаJIRA(тзСырыеДанные, ДатаНачала, ДатаОкончания, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 26.05.2017
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Период");
	тз.Колонки.Добавить("Партнер");
	тз.Колонки.Добавить("КонфигурацияЛицензий");
	тз.Колонки.Добавить("КодПроекта");
	тз.Колонки.Добавить("ID_Sync");
	тз.Колонки.Добавить("Проект");
	тз.Колонки.Добавить("Таск_ID");
	тз.Колонки.Добавить("Таск");
	тз.Колонки.Добавить("Таск_IDOWS");   //OW Копачев А.С. 11.04.2019  
	тз.Колонки.Добавить("КомандаСсылка");
	тз.Колонки.Добавить("КомандаСсылкаНовая");     //OW Копачев А.С. 06.11.2020 ONEC-6046
	тз.Колонки.Добавить("ПользовательСсылка");
	тз.Колонки.Добавить("Пользователь");
	тз.Колонки.Добавить("Подразделение");
	тз.Колонки.Добавить("ПартнерСтрокой");
	тз.Колонки.Добавить("Реквестер");
	тз.Колонки.Добавить("MD");
	
	//++OW Копачев А.С. 09.04.2019 ONEC-4361
	//Если ИнстансJIRA = JIRA.ПолучитьИнстансJIRA() Тогда
	//	ПостингJiraSpb = Ложь;
	//Иначе
	//	ПостингJiraSpb = Истина;
	//КонецЕсли;
	ПостингJiraSpb = ЭтоИнстансJiraSpb(ИнстансJIRA);
	//--OW Копачев А.С. 09.04.2019 ONEC-4361
			
	//сворачиваем таблицу
	тзСырыеДанные.Свернуть("start_date, user, customer, crmProjectCode, taskName, taskId, issueType, id_sync, requester, instanceId, src_key", "used_time_in_days"); 
	
	тзОшибки = Новый ТаблицаЗначений;
	тзОшибки.Колонки.Добавить("Объект");
	тзОшибки.Колонки.Добавить("РазделУчета");
	тзОшибки.Колонки.Добавить("ТипОшибки");
	тзОшибки.Колонки.Добавить("Ошибка");
	
	тзОшибокОпределенияФазПоПостингу = Новый ТаблицаЗначений;
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Дата");
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Партнер");
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("ТаскID");
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Ошибка");
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("MD");		
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Количество");
	//+ OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Таск_IDOWS");		
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("Пользователь");
	//- OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	//+ OW Курбатова А.А. 2020/04/28 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5595
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("ПользовательСсылка");
	//- OW Курбатова А.А. 2020/04/28 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5595
	//++OW Копачев А.С. 12.10.2021 ONEC-6569 
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("ГруппировкаОшибки", Новый ОписаниеТипов("Число"));
	тзОшибокОпределенияФазПоПостингу.Колонки.Добавить("КатегорияОшибки", Новый ОписаниеТипов("Число"));
	//--OW Копачев А.С. 12.10.2021 ONEC-6569
	
	//++OW Копачев А.С. 08.07.2021 ONEC-6864 
	тзОшибокОпределенияКомандПоПостингу = Новый ТаблицаЗначений;
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("Дата");
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("ТаскID");
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("Ошибка");
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("Количество");	
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("Пользователь");
	тзОшибокОпределенияКомандПоПостингу.Колонки.Добавить("Фаза");
	//--OW Копачев А.С. 08.07.2021 ONEC-6864
	
	//++OW Копачев А.С. 21.04.2022 ONEC-7464
	тзОшибокОпределенияКлиентаПоПостингу = Новый ТаблицаЗначений;
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("Дата");
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("ТаскID");
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("Ошибка");
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("Количество");	
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("Пользователь");
	тзОшибокОпределенияКлиентаПоПостингу.Колонки.Добавить("Фаза");
	//--OW Копачев А.С. 21.04.2022 ONEC-7464
	
	//перегружаем сырые данные в подготовленную таблицу
	Для Каждого ст Из тзСырыеДанные Цикл
		
		нСтрока = тз.Добавить();
		
		//Период
		Попытка                 
			нСтрока.Период = Дата(СтрЗаменить(ст.start_date, "-", ""));
		Исключение
			ТекстОшибки = "Не удалось преобразовать Дату при загрузке постинга (" + ИнстансJIRA + ")" + ст.start_date;
			OW.ЗаписатьОшибку(Неопределено, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
			Прервать;
		КонецПопытки;
		
		//Партнер
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Если НЕ ПустаяСтрока(ст.customer) Тогда
			Партнер = OW.ПолучитьПартнераПоКастомеруJIRA(ст.customer);
		КонецЕсли; 
		нСтрока.Партнер = Партнер;
		
		//***OW Start [БПВ]05.10.2017
		нСтрока.ПартнерСтрокой = СокрЛП(ст.customer);
		//***OW End [БПВ]05.10.2017 

		//MDs
		
		//+++ Брук Б 17.12.2019 ONEC-5185 	Если постинг в JIRA = 0, тогда загружаем минимальную цифру, 
		//									т.к. в дальнейшем при выгрузке в CRM из-за нулевого постинга могут быть ошибки
		MD = Число(ст.used_time_in_days);		
		MD = ?(MD = 0, 0.00001, MD);
		//--- Брук Б 17.12.2019 ONEC-5185
		
		нСтрока.MD = MD;		
		
		//Пользователь
		Если НЕ ПустаяСтрока(ст.user) Тогда
			ПользовательСсылка = OW.ПолучитьЮзераПоЛогину(ст.user); 
			
			Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
				нСтрока.ПользовательСсылка = ПользовательСсылка;
			Иначе
				ТекстОшибки = "Не найден Пользователь: " + ст.user  + " в " + ИнстансJIRA;
				нСтрокаОшибки = тзОшибки.Добавить();
				нСтрокаОшибки.Объект = Справочники.Пользователи.НеопределенныйПользователь;
				нСтрокаОшибки.РазделУчета = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
				нСтрокаОшибки.ТипОшибки = Справочники.OW_ТипыОшибок.Ошибка;
				нСтрокаОшибки.Ошибка = ТекстОшибки;
			КонецЕсли; 
			
			нСтрока.Пользователь = ст.user; 

		КонецЕсли; 
		
		//Команда
		//ищем команду внедрения для юзера
		КомандаСсылка = Справочники.OW_Team.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПользовательСсылка) Тогда
			КомандаСсылка = OW.ПолучитьКомандуВнедренияПоПользователю(ПользовательСсылка);	
			
			Если ЗначениеЗаполнено(КомандаСсылка) Тогда
				нСтрока.КомандаСсылка = КомандаСсылка;
			Иначе
				ТекстОшибки = "Не найдена Команда внедрения (Очередь) для пользователя: " + ПользовательСсылка.Наименование + " в " + ИнстансJIRA;
				нСтрокаОшибки = тзОшибки.Добавить();
				нСтрокаОшибки.Объект = Справочники.OW_Team.Неопределенная;
				нСтрокаОшибки.РазделУчета = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
				нСтрокаОшибки.ТипОшибки = Справочники.OW_ТипыОшибок.Информация;
				нСтрокаОшибки.Ошибка = ТекстОшибки;
			КонецЕсли; 

		КонецЕсли;
		
		//instanceId
		Если ПостингJiraSpb Тогда
			Если ЗначениеЗаполнено(ст.instanceId) Тогда
				
				//++OW Копачев А.С. 14.03.2023 ONEC-6185
				//нСтрока.КонфигурацияЛицензий = OW.ПолучитьКонфигурациюЛицензийДляКлиентаДляВыгрузкиCRM(Справочники.КлиентДляВыгрузкиВCRM.НайтиПоКоду(ст.instanceId));
				нСтрока.КонфигурацияЛицензий = Справочники.КонфигурацииЛицензий.ПолучитьКонфигурациюЛицензийПоКодуИнстансаКлиента(ст.instanceId);
				//--OW Копачев А.С. 14.03.2023 ONEC-6185
								
				Если НЕ ЗначениеЗаполнено(нСтрока.КонфигурацияЛицензий) Тогда
					ТекстОшибки = "Не найдена Конфигурация лицензий для кода клиента: " + ст.instanceId;
					нСтрокаОшибки 				= тзОшибки.Добавить();
					нСтрокаОшибки.Объект 		= Справочники.КонфигурацииЛицензий.ПустаяСсылка();
					нСтрокаОшибки.РазделУчета 	= Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
					нСтрокаОшибки.ТипОшибки 	= Справочники.OW_ТипыОшибок.Ошибка;
					нСтрокаОшибки.Ошибка 		= ТекстОшибки;
				Иначе
					нСтрока.Партнер = нСтрока.КонфигурацияЛицензий.Владелец;
				КонецЕсли;
				
			ИначеЕсли нСтрока.Партнер = Справочники.Партнеры.НайтиПоКоду("00000000827") Тогда //Openway
				
				нСтрока.КонфигурацияЛицензий = нСтрока.Партнер.ОсновнаяКонфигурацияЛицензий;
				
			ИначеЕсли ЗначениеЗаполнено(ст.customer) Тогда
				ТекстОшибки = "Отсутствует код конфигурации (instanceId) для клиента: " + ст.customer + " в " + ИнстансJIRA;
				нСтрокаОшибки 				= тзОшибки.Добавить();
				нСтрокаОшибки.Объект 		= Справочники.КонфигурацииЛицензий.ПустаяСсылка();
				нСтрокаОшибки.РазделУчета 	= Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
				нСтрокаОшибки.ТипОшибки 	= Справочники.OW_ТипыОшибок.Ошибка;
				нСтрокаОшибки.Ошибка 		= ТекстОшибки;
			КонецЕсли; //ЗначениеЗаполнено(ст.instanceId) 
		КонецЕсли; //ПостингJiraSpb 
		
		//Task    taskName, taskId, issueType
		Если ЗначениеЗаполнено(ст.taskId) Тогда
			TASK_NAME = ст.taskName;
			нСтрока.Таск_ID = ст.taskId;
			
			IssueType = Справочники.OW_IssueType.НайтиПоНаименованию(ст.issueType);
			Если НЕ ЗначениеЗаполнено(IssueType) Тогда
				нЭлемент = Справочники.OW_IssueType.СоздатьЭлемент();
				нЭлемент.Наименование = ст.issueType;
				нЭлемент.Записать();
				IssueType = нЭлемент.Ссылка;
				
				OW.ЗаписатьОшибку(Неопределено, Справочники.OW_РазделыУчета.JIRA_IssueTypeИлиWorkTypeПроблема, Справочники.OW_ТипыОшибок.Информация,
										"Issue type " + ст.issueType + " создан новый.");
			КонецЕсли;                   			
			
			WorkType = Jira.ОпределитьWorkTypeПоIssueType(IssueType); 
			
			Если НЕ ЗначениеЗаполнено(WorkType) Тогда
				ТекстОшибки = "Для Issue type " + IssueType + " НЕ НАЙДЕНО ни одного сопоставленного Work type" + " в " + ИнстансJIRA;
				нСтрокаОшибки 				= тзОшибки.Добавить();
				нСтрокаОшибки.Объект 		= IssueType;
				нСтрокаОшибки.РазделУчета 	= Справочники.OW_РазделыУчета.JIRA_IssueTypeИлиWorkTypeПроблема;
				нСтрокаОшибки.ТипОшибки 	= Справочники.OW_ТипыОшибок.Информация;
				нСтрокаОшибки.Ошибка 		= ТекстОшибки;				
			КонецЕсли; 
			
			Таск = НайтиСоздатьЗадачуJIRA_ЗагрузкаПостинга(нСтрока.Таск_ID, нСтрока.Партнер, ст.taskName, IssueType, WorkType, ИнстансJIRA);
			нСтрока.Таск = Таск;
		КонецЕсли; //ЗначениеЗаполнено(ст.taskId) 
		
		нСтрока.Таск_IDOWS = ст.src_key;	//OW Копачев А.С. 11.04.2019
		
		//requester
		Если ПостингJiraSpb И ЗначениеЗаполненоJIRA(ст.requester) Тогда
			//++OW Копачев А.С. 29.01.2021 ONEC-6449 
			Если ЗначениеЗаполнено(нСтрока.Таск) И нСтрока.Таск.Project = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_GSBOX) Тогда 
				// реквестера не заполняем	
			Иначе	
			//--OW Копачев А.С. 29.01.2021 ONEC-6449	
				нСтрока.Реквестер = Справочники.РеквестерПостингJIRA.ОпределитьРеквестераПоИмениJIRA(ст.requester);
				Если НЕ ЗначениеЗаполнено(нСтрока.Реквестер) Тогда
					ТекстОшибки = "Не найден ссылочный Реквестер: " + ст.requester + " в " + ИнстансJIRA;
					нСтрокаОшибки = тзОшибки.Добавить();
					нСтрокаОшибки.Объект = Справочники.РеквестерПостингJIRA.ПустаяСсылка();
					нСтрокаОшибки.РазделУчета = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
					нСтрокаОшибки.ТипОшибки = Справочники.OW_ТипыОшибок.Ошибка;
					нСтрокаОшибки.Ошибка = ТекстОшибки;
				КонецЕсли; 
			КонецЕсли;	
		ИначеЕсли ПостингJiraSpb = Ложь Тогда
			нСтрока.Реквестер = Справочники.РеквестерПостингJIRA.ОпределитьРеквестераПоИмениJIRA(ст.requester);
		КонецЕсли; 
		
		
		
		//код фазы  
		нСтрока.КодПроекта = ст.crmProjectCode;
				
		//************* Находим фазу по ID_Sync //*************
		
		Если ЗначениеЗаполнено(ст.id_sync) Тогда
			нСтрока.ID_Sync = Число(ст.id_sync);
			нСтрока.Проект 	= OW.НайтиПроектПоID_Sync(Число(ст.id_sync));
		КонецЕсли; 
		
		//******************************************************
		
		
		//++OW Копачев А.С. 27.05.2022 ONEC-7464
		СегментСтрокой = ?(ЭтоИнстансJiraOws_EMEAA(ИнстансJIRA) ИЛИ  ЭтоИнстансJiraSpb_EMEAA(ИнстансJIRA), "COM", "INC");
		//--OW Копачев А.С. 27.05.2022 ONEC-7464
		
		Если ПостингJiraSpb Тогда	
			//jira-spb
			//***********************************DECISION TREE****************************    			
							
			//++OW Копачев А.С. 09.04.2020 ONEC-5483 
			Если НЕ ЗначениеЗаполнено(нСтрока.Реквестер) Тогда 
				// проверка получения реквестера
				КодПроекта = ОпределитьПроектПоНомеруЗадачи(нСтрока.Таск_ID); 
				ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам) = Истина;										
				Если ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам Тогда		
					
					МассивКомпонентJIRA = Новый Массив;
					Если ЗначениеЗаполнено(нСтрока.Таск) Тогда 
						ТаскКомпонентыJIRA = нСтрока.Таск.Components;
						Для Каждого ТекСтрокаТаскКомпонентыJIRA Из ТаскКомпонентыJIRA Цикл 
							МассивКомпонентJIRA.Добавить(ТекСтрокаТаскКомпонентыJIRA.Component);	
						КонецЦикла;	
						 						
						//++OW Копачев А.С. 29.01.2021 ONEC-6449 
						// для определенного проекта в компоненты добавляется еще данные из поля "CustomerRequestType"  
						Если нСтрока.Таск.Project = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_GSBOX) Тогда 
							Если ЗначениеЗаполнено(нСтрока.Таск.RequestType) Тогда 
							    НазваниеКомпоненты = Строка(нСтрока.Таск.RequestType) + " (" + нСтрока.Таск.Project + ")";
								ComponentаСсылка = ПолучитьСоздатьЭлементСправочника("OW_Component", НазваниеКомпоненты);
								Если ЗначениеЗаполнено(ComponentаСсылка) Тогда 
									МассивКомпонентJIRA.Добавить(ComponentаСсылка);
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
						//--OW Копачев А.С. 29.01.2021 ONEC-6449
					КонецЕсли;
					
					//+++ Брук Б ONEC-7920
					Если МассивКомпонентJIRA.Количество() = 0 Тогда
						
						Если ЗначениеЗаполнено(нСтрока.Таск_IDOWS) Тогда
						
							КодПроекта_Таск_IDOWS = ОпределитьПроектПоНомеруЗадачи(нСтрока.Таск_IDOWS);
							ComponentаСсылкаТаск_IDOWS = ПолучитьСоздатьЭлементСправочника("OW_Component", КодПроекта_Таск_IDOWS);
							
							Если ЗначениеЗаполнено(ComponentаСсылкаТаск_IDOWS) Тогда 
								МассивКомпонентJIRA.Добавить(ComponentаСсылкаТаск_IDOWS);
							КонецЕсли;	
									
						КонецЕсли;
						
					КонецЕсли;
					//--- Брук Б ONEC-7920					
					
					// добавим для поиска пустую Component
					МассивКомпонентJIRA.Добавить(Справочники.OW_Component.ПустаяСсылка());
					
					нСтрока.Реквестер = ПолучитьРеквестераПроектаПоКомпонентамJIRA(КодПроекта, нСтрока.Период, МассивКомпонентJIRA);
					//--OW Копачев А.С. 10.11.2020 ONEC-6178
				КонецЕсли;
			КонецЕсли;
			//--OW Копачев А.С. 09.04.2020 ONEC-5483
			
			//+++ Брук Б 10.01.2020 ONEC-5188 - New Decision Tree
			нСтрока.Проект = ОпределениеФазыПоСтрокеПостингаRenovation(нСтрока, тзОшибокОпределенияФазПоПостингу, "JIRA.SPB(" +СегментСтрокой+")", ИнстансJIRA);
			//--- Брук Б 10.01.2020 ONEC-5188 - New Decision Tree
			
			//****************************************************************************	
		Иначе
			//ows-jira
			//основной механизм поиска проекта. По ID_sync
			Если НЕ ЗначениеЗаполнено(нСтрока.Проект) Тогда
				//пытаемся найти оценку (BA)
				Если НЕ ПустаяСтрока(ст.taskId) И НЕ ПостингJiraSpb Тогда
					нСтрока.Таск_ID = ст.taskId;
					КодПроекта = ОпределитьПроектПоНомеруЗадачи(нСтрока.Таск_ID); 
					Если КодПроекта = "BA" Тогда
						//++OW Копачев А.С. 08.04.2022 ONEC-7464
						//нСтрока.Проект = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", нСтрока.Таск_ID); 
						КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(нСтрока.Таск_ID, ИнстансJIRA);
						нСтрока.Проект = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
						//--OW Копачев А.С. 08.04.2022 ONEC-7464
						
						Если нСтрока.Партнер.БизнесРегион = Справочники.БизнесРегионы.OpenWay И ЗначениеЗаполнено(нСтрока.Проект) Тогда
							нСтрока.Партнер = нСтрока.Проект.Партнер;
						КонецЕсли; 
						//***********************************DECISION TREE FOR ESTIMATION****************************    
						ОпределениеМарингоИдПоСтрокеПостинга(нСтрока, тзОшибокОпределенияФазПоПостингу, "OWS-JIRA(" +СегментСтрокой+")");
						//*******************************************************************************************							
					Иначе
						//+ Пилюгин В.Е. 23.01.2019		ONEC-3768
						Если ПроектJiraВходитВСоответствиеФазИПроектовJIRA(КодПроекта) Тогда
							//***********************************DECISION TREE****************************    
							нСтрока.Проект = ОпределениеФазыПоСтрокеПостинга(нСтрока, тзОшибокОпределенияФазПоПостингу, "OWS-JIRA(" +СегментСтрокой+")", ИнстансJIRA);
							//****************************************************************************	
						КонецЕсли; 
						//- Пилюгин В.Е. 23.01.2019		
					КонецЕсли; 
				КонецЕсли; 
				//пытаемся найти проект по коду проекта CRM
				Если НЕ ЗначениеЗаполнено(нСтрока.Проект) И ЗначениеЗаполнено(ст.crmProjectCode) И НЕ СтрНачинаетсяС(ст.crmProjectCode, "Accumulative") Тогда
					нСтрока.Проект = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("КодПроектаCRM", ст.crmProjectCode);
				КонецЕсли;
				//пытаемся найти по маринго коду
				Если НЕ ЗначениеЗаполнено(нСтрока.Проект) И ЗначениеЗаполнено(ст.crmProjectCode) И СтрНайти(ст.crmProjectCode, "MaringoPhaseID") > 0 тогда
					КодФазыМарингоСтрока = СтрЗаменить(ст.crmProjectCode, "MaringoPhaseID", "");
					КодФазыМаринго = СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(КодФазыМарингоСтрока);
					Если КодФазыМаринго <> Неопределено Тогда
						нСтрока.Проект = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("CodeSAP", КодФазыМаринго);
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;  		
		
		//***OW Start [БПВ]05.10.2017
		//++ OW Курбатова А.А. 2020/01/29
		//пытаемся еще раз определить партнера из фазы /Лена, подтвердила, что делаем так (2020.01.29)
		//оставила только для Постинг НЕ из JiraSpb, для постинга из JiraSpb перенесла в  DecisionTree
		//Если нСтрока.Партнер = Справочники.Партнеры.ПустаяСсылка() ИЛИ ПостингJiraSpb Тогда   //+ Пилюгин В.Е. 05.04.2018 +постингJiraSpb 
		Если нСтрока.Партнер = Справочники.Партнеры.ПустаяСсылка() И НЕ ПостингJiraSpb Тогда   //+ Пилюгин В.Е. 05.04.2018 +постингJiraSpb 
		//-- OW Курбатова А.А. 2020/01/29
			Если ЗначениеЗаполнено(нСтрока.Проект) Тогда
				нСтрока.Партнер = нСтрока.Проект.Партнер;
				нСтрока.КонфигурацияЛицензий = нСтрока.Проект.КонфигурацияЛицензий;				
			КонецЕсли;	
		КонецЕсли;	
		//***OW End [БПВ]05.10.2017
				
		//+ Пилюгин В.Е. 19.11.2018  ONEC-4009
		Если НЕ ЗначениеЗаполнено(нСтрока.Партнер) Тогда
			нСтрока.Партнер = ПолучитьUnknownClientForPosting();
		КонецЕсли;	
		//- Пилюгин В.Е. 19.11.2018

		//++OW Копачев А.С. 21.04.2022 ONEC-7464
		// проверка вида инстанса клиента постинга
		ДатаРазделенияПостингаПоБизнесРегионам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПостингаПоБизнесРегионам);	

		Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьРазделениеПоБизнесРегионамJIRASPB()
			ИЛИ ЭтоИнстансJiraOws(ИнстансJIRA) И ИспользоватьРазделениеПоБизнесРегионамJIRAOWS() Тогда 
			
			Партнер = нСтрока.Партнер;
			Если НЕ ЗначениеЗаполнено(Партнер) ИЛИ Партнер = ПолучитьUnknownClientForPosting() Тогда					
				//++OW Копачев А.С. 14.06.2022 ONEC-7612 
				//ТекстОшибки = "The client was not found for task: " + нСтрока.Таск_ID + " and client's name: " + нСтрока.ПартнерСтрокой +". The posting record will be skipped.";				
				ТекстОшибки = "The client was not found for task: " + нСтрока.Таск_ID + " and client's name: " + нСтрока.ПартнерСтрокой +".";				
				//--OW Копачев А.С. 14.06.2022 ONEC-7612
				ДобавитьОшибкуОпределенияКлиентаПоПостингу(тзОшибокОпределенияКлиентаПоПостингу, ТекстОшибки, нСтрока.ПользовательСсылка, нСтрока.Период, нСтрока.Таск, нСтрока.Проект);
			Иначе
				Если ЗначениеЗаполнено(ДатаРазделенияПостингаПоБизнесРегионам)
					И ДатаРазделенияПостингаПоБизнесРегионам <= нСтрока.Период Тогда 
					
					ВидИнстансаJIRAПартнера = ПолучитьВидИнстансаJIRAОбъекта(Партнер);
					ВидИнстансаJIRA = ПолучитьВидИнстансаJIRA(ИнстансJIRA);

					Если ВидИнстансаJIRA <> ВидИнстансаJIRAПартнера Тогда 
						ТекстОшибки = "The client " + Партнер + " with segment: " + ВидИнстансаJIRAПартнера + " does not match instance segment: " + ВидИнстансаJIRA + ". The posting record will be skipped.";
						ДобавитьОшибкуОпределенияКлиентаПоПостингу(тзОшибокОпределенияКлиентаПоПостингу, ТекстОшибки, нСтрока.ПользовательСсылка, нСтрока.Период, нСтрока.Таск, нСтрока.Проект);				
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;		
        КонецЕсли;	
        
        //***OW @20230203030957  Start [БПВ] ++++ONEC-7549 +++++ Проверка на сегмент пользователя
        Если ЗначениеЗаполнено(ДатаРазделенияПостингаПоБизнесРегионам)
            И ДатаРазделенияПостингаПоБизнесРегионам <= нСтрока.Период Тогда 
            
            ПользовательПроверка=нСтрока.ПользовательСсылка ;
            
            Если ЗначениеЗаполнено(ПользовательПроверка) Тогда		
                ВидИнстансаJIRAПользователя = ПолучитьВидИнстансаJIRAОбъекта(ПользовательПроверка);
                ВидИнстансаJIRA = ПолучитьВидИнстансаJIRA(ИнстансJIRA);
                
                Если ВидИнстансаJIRA <> ВидИнстансаJIRAПользователя Тогда 
                    ТекстОшибки = "The user " + ПользовательПроверка + " with segment: " + ВидИнстансаJIRAПользователя + " does not match instance segment: " + ВидИнстансаJIRA + ". The posting record will be skipped.";
                    ДобавитьОшибкуОпределенияКлиентаПоПостингу(тзОшибокОпределенияКлиентаПоПостингу, ТекстОшибки, нСтрока.ПользовательСсылка, нСтрока.Период, нСтрока.Таск, нСтрока.Проект);				
                КонецЕсли;
            КонецЕсли;
        КонецЕсли;
        //***OW @20230203031000  End [БПВ] ++++ONEC-7549
		//--OW Копачев А.С. 21.04.2022 ONEC-7464	
		
		
		//++OW Копачев А.С. 06.11.2020 ONEC-6046
		//Команда Новая
		//Если ЗначениеЗаполнено(нСтрока.КомандаСсылка) Тогда	
		//	КомандаСсылкаНовая = OW_ИнтеграцияCRM.ПолучитьКомандуОчереди(нСтрока.КомандаСсылка);	
		//	Если НЕ ЗначениеЗаполнено(КомандаСсылкаНовая) Тогда 
		//		нСтрока.КомандаСсылкаНовая = КомандаСсылкаНовая;
		//	Иначе
		//		ТекстОшибки = "Не найдена Команда 1С для очереди: " + нСтрока.КомандаСсылка;
		//		нСтрокаОшибки = тзОшибки.Добавить();
		//		нСтрокаОшибки.РазделУчета = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
		//		нСтрокаОшибки.ТипОшибки = Справочники.OW_ТипыОшибок.Информация;
		//		нСтрокаОшибки.Ошибка = ТекстОшибки;
		//	КонецЕсли; 
		//КонецЕсли;
		Если ЗначениеЗаполнено(нСтрока.ПользовательСсылка) Тогда 
			КомандаСсылкаНовая = JIRA.ПолучитьКомандуПоПостингуПользователя(нСтрока.ПользовательСсылка, нСтрока.Период, нСтрока.Таск, нСтрока.Проект, тзОшибокОпределенияКомандПоПостингу);
			
			Если ЗначениеЗаполнено(КомандаСсылкаНовая) Тогда 
				нСтрока.КомандаСсылкаНовая = КомандаСсылкаНовая;
			Иначе
				ТекстОшибки = "Не найдена Команда 1С для пользователя: " + нСтрока.ПользовательСсылка + " по инстансу : " + ИнстансJIRA + " с датой постинга: " + нСтрока.Период + " по таску: " + нСтрока.Таск + " и фазе: " + нСтрока.Проект;
				нСтрокаОшибки = тзОшибки.Добавить();
				нСтрокаОшибки.РазделУчета = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
				нСтрокаОшибки.ТипОшибки = Справочники.OW_ТипыОшибок.Информация;
				нСтрокаОшибки.Ошибка = ТекстОшибки;
			КонецЕсли
		КонецЕсли;
		//--OW Копачев А.С. 06.11.2020 ONEC-6046
	КонецЦикла;	
	
	//таблица с ошибками
	тзОшибки.Свернуть("Объект, РазделУчета, ТипОшибки, Ошибка");
	тзОшибки.Сортировать("Объект");
	
	Для Каждого ст Из тзОшибки Цикл
		OW.ЗаписатьОшибку(ст.Объект, ст.РазделУчета, ст.ТипОшибки, ст.Ошибка);
	КонецЦикла;
		
	Если ПостингJiraSpb Тогда
		
		//++OW Копачев А.С. 31.05.2022 ONEC-7464		
	    ИмяСистемы = "JIRA Delivery";
	    Если ЭтоИнстансJiraOws_RU(ИнстансJIRA) ИЛИ ЭтоИнстансJiraSpb_RU(ИнстансJIRA) Тогда 	
			ИмяСистемы = "JORA Delivery";
	    КонецЕсли;          
	    //--OW Копачев А.С. 31.05.2022 ONEC-7464 

		ОтправитьНотификациюОшибкиОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, тзОшибокОпределенияКомандПоПостингу, тзОшибокОпределенияКлиентаПоПостингу, ДатаНачала, ДатаОкончания, ИмяСистемы);
		//--OW Копачев А.С. 21.04.2022 ONEC-7464

	Иначе //ows-jira
		//+++ Брук Б 03.10.2019 ONEC-4867 - отключаем рассылку
		//ОтправитьНотификациюОшибкиОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ДатаНачала, ДатаОкончания, "OWS-JIRA (Estimations)");
		//--- Брук Б 03.10.2019 ONEC-4867
	КонецЕсли; 
		
	Возврат тз;	
	//- Пилюгин В.Е. 26.05.2017
КонецФункции

Функция ПолучитьКомандуПоПостингуПользователя(Пользователь, НаДату, Таск, Фаза, тзОшибокОпределенияКомандПоПостингу = Неопределено) Экспорт
	//++OW Копачев А.С. 12.11.2020 ONEC-6046
	КомандаПоПостингу = Неопределено;
	
	ЛогОшибок = "";
	ЛогОшибокЗаголовок = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не найдена команда постинга по пользователю <" + Пользователь + "> на дату <" + НаДату + "> по таску <" + Таск + "> и фазе <" + Фаза +  ">. Подробности:", 
																		"The posting command was not found for the user < "+ Пользователь + "> on the date < "+ НаДату + "> for the task < "+ Таск + "> and the phase < " + Фаза +">. Details:", "en");

	
	//	1. Получение команды по плановой вовлеченности:
	//А. Если постирующий запостировал на проект,  и при разборе постинга фаза найдена, то:
	//то в плановой вовлеченности пользователя ищется запись, соответствующая коду проекта постинга (или коду фазы постинга),  
	//а также напраление деятельности, соответствующее направлению деятельности фазы - это приоритет 1
	//Б. Если постирующий запостировал на проект,  и при разборе постинга фаза НЕ найдена, то:
	//то в плановой вовлеченности пользователя ищется запись, соответствующая коду проекта постинга - это приоритет 2 
	//В. Ищется запись по направлению деятельности фазы - это приоритет 3 	
	//Г. Ищется запись коду проекта постинга (или коду фазы постинга) - это приоритет 4 	
	//Д. Ищется запись по команде фазы постинга - это приоритет 5
	//Е. Если постирующий запостировал на то, чего у него нет в плановой вовлеченности - это приоритет 6
	
	//	2. Выбор команды: 
	//А. Если по итогам пункта 1 найдена только одна команда - ее и используем
	//Б. Если команд несколько (с приортетом 1), то берем ту, у которой значение вовлеченности больше
	//В. Если  ни одна команда не подошла, то получаем руководителя пользователя. Находим команду руководителя,
	//где он является тимлидом и под этой командой руководителя находится команда плановой вовлеченности пользователя (на любом уровне иерархии)
	//Г. Если и в этом случае не нашли, используем команду по умлочанию для пользователя
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер КАК Пользователь,
		|	ВовлеченностьПоКомандамРассчитанная.Команда КАК Команда,
		|	МАКСИМУМ(ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности) КАК НаправлениеДеятельности,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК ЗначениеВовлеченности,
		|   1 КАК Приоритет,
		|   1 КАК Количество
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ 
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		//|	И ВовлеченностьПоКомандамРассчитанная.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		//++OW Копачев А.С. 14.12.2020 ONEC-6302		
		//|	И (&ФазаТаскКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA ИЛИ &ФазаТаскКод = """" ИЛИ &ProjectКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA ИЛИ &ProjectКод = """")
		//|	И (&ФазаНаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельностиДляКоманд.ПустаяСсылка)ИЛИ &ФазаНаправлениеДеятельности = ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности)
		|	И (&ФазаТаскКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA ИЛИ &ProjectКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA) 
		|	И (&ФазаНаправлениеДеятельности = ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности)
		//--OW Копачев А.С. 14.12.2020 ONEC-6302
		|
		|СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда
		
		//++OW Копачев А.С. 11.02.2021 ONEC-6302 
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер КАК Пользователь,
		|	ВовлеченностьПоКомандамРассчитанная.Команда КАК Команда,
		|	МАКСИМУМ(ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности) КАК НаправлениеДеятельности,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК ЗначениеВовлеченности,
		|   2 КАК Приоритет,
		|   1 КАК Количество
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ 
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		//|	И ВовлеченностьПоКомандамРассчитанная.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		|	И (&ParentProjectКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA) 
		|	И (&ФазаНаправлениеДеятельности = ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности)
		//--OW Копачев А.С. 14.12.2020 ONEC-6302
		|
		|СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда
		//--OW Копачев А.С. 11.02.2021 ONEC-6302
		
		//++OW Копачев А.С. 08.07.2021 ONEC-6864 
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер КАК Пользователь,
		|	ВовлеченностьПоКомандамРассчитанная.Команда КАК Команда,
		|	МАКСИМУМ(ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности) КАК НаправлениеДеятельности,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК ЗначениеВовлеченности,
		|   3 КАК Приоритет,
		|   1 КАК Количество
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ 
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		//|	И ВовлеченностьПоКомандамРассчитанная.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		|	И (&ФазаНаправлениеДеятельности = ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда
		
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер КАК Пользователь,
		|	ВовлеченностьПоКомандамРассчитанная.Команда КАК Команда,
		|	МАКСИМУМ(ВовлеченностьПоКомандамРассчитанная.НаправлениеДеятельности) КАК НаправлениеДеятельности,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК ЗначениеВовлеченности,
		|   4 КАК Приоритет,
		|   1 КАК Количество
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ 
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		//|	И ВовлеченностьПоКомандамРассчитанная.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		|	И (&ФазаТаскКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA ИЛИ &ProjectКод = ВовлеченностьПоКомандамРассчитанная.КодПроектаJIRA)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда
		//--OW Копачев А.С. 08.07.2021 ONEC-6864
		
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда,
		|	НЕОПРЕДЕЛЕНО,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение),
		|	5,
		|	1
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		|	И (&ФазаКоманда = ВовлеченностьПоКомандамРассчитанная.Команда)
	    |СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда
		
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВовлеченностьПоКомандамРассчитанная.Офицер КАК Пользователь,
		|	ВовлеченностьПоКомандамРассчитанная.Команда КАК Команда,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
		|	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК ЗначениеВовлеченности,
		|   6 КАК Приоритет,
		|   1 КАК Количество
		|ИЗ
		|	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
		|ГДЕ 
		|	ВовлеченностьПоКомандамРассчитанная.Офицер = &Пользователь
		//|	И ВовлеченностьПоКомандамРассчитанная.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
		|	И &НаДату МЕЖДУ ВовлеченностьПоКомандамРассчитанная.ДатаНачала И ВовлеченностьПоКомандамРассчитанная.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ВовлеченностьПоКомандамРассчитанная.Офицер,
		|	ВовлеченностьПоКомандамРассчитанная.Команда 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет ВОЗР,
		|	ЗначениеВовлеченности УБЫВ
		|
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	ProjectКод = "";
	ParentProjectКод = "";  //OW Копачев А.С. 11.02.2021 ONEC-6302 
	LeadSME = Неопределено;
	Если  ЗначениеЗаполнено(Таск) Тогда 
		Если ТипЗнч(Таск) = Тип("СправочникСсылка.ЗадачаJIRA") Тогда 
			ProjectКод = ?(ЗначениеЗаполнено(Таск.Project),Таск.Project.Код, ProjectКод);
			//++OW Копачев А.С. 11.02.2021 ONEC-6302 
			Если ЗначениеЗаполнено(Таск.PhaseTask) Тогда 
				Если ЗначениеЗаполнено(Таск.PhaseTask.Project) Тогда 
					ParentProjectКод = Таск.PhaseTask.Project.Код;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ParentProjectКод) Тогда 
					ParentProjectКод = ОпределитьПроектПоНомеруЗадачи(Таск.PhaseTask.Код);	
				КонецЕсли;
			КонецЕсли;	
			//--OW Копачев А.С. 11.02.2021 ONEC-6302
			
			LeadSME = Таск.LeadSME;
		ИначеЕсли ТипЗнч(Таск) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ProjectКод = ?(ЗначениеЗаполнено(Таск.ПроектJIRA),Таск.ПроектJIRA.Код,ProjectКод);	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ProjectКод) Тогда 
			ProjectКод = ОпределитьПроектПоНомеруЗадачи(Таск.Код);	
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ProjectКод) Тогда 
			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не найден проект по задаче: " + Таск, "The project for the task was not found: " + Таск, "en");			
			ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);
		КонецЕсли;	
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ProjectКод", ProjectКод);
	Запрос.УстановитьПараметр("ParentProjectКод", ParentProjectКод);  //OW Копачев А.С. 11.02.2021 ONEC-6302
	
	ФазаТаскКод = "";
	ФазаНаправлениеДеятельности  = Справочники.НаправленияДеятельностиДляКоманд.ПустаяСсылка();
	ФазаКоманда = Справочники.Команды.ПустаяСсылка();
 	
	ЭтоBA = ProjectКод = "BA";
	
	Если ЭтоBA = Истина Тогда 
		// для BA всегда используем направление деятельности SME
		ФазаНаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельностиДляКоманд.SME");	
	Иначе	
		Если ЗначениеЗаполнено(Фаза) Тогда 
			Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда  		
				ФазаТаскКод = Фаза.КодПроектаJIRA;
				ФазаНаправлениеДеятельности  = ?(ЗначениеЗаполнено(Фаза.ТипФазы),Фаза.ТипФазы.НаправлениеДеятельности, ФазаНаправлениеДеятельности);
				ФазаКоманда = ?(ЗначениеЗаполнено(Фаза.Команда),Фаза.Команда, ФазаКоманда);
			ИначеЕсли ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") Тогда
				ФазаТаскКод = Фаза.ЗадачаJIRA_BA;
				ФазаНаправлениеДеятельности  = ?(ЗначениеЗаполнено(Фаза.ТипФазы),Фаза.ТипФазы.НаправлениеДеятельности, ФазаНаправлениеДеятельности);	
				ФазаКоманда = ?(ЗначениеЗаполнено(Фаза.Команда),Фаза.Команда, ФазаКоманда);
			Иначе	
				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока( "В качестве фазы указа тип значения <" + ТипЗнч(Фаза) + ">",  "The value type is specified as the phase <" + ТипЗнч(Фаза) + ">", "en");
		
				ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок,ТекстОшибки, Символы.ПС);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ФазаТаскКод", ФазаТаскКод);
	Запрос.УстановитьПараметр("ФазаНаправлениеДеятельности", ФазаНаправлениеДеятельности);
	Запрос.УстановитьПараметр("ФазаКоманда", ФазаКоманда);

	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаПриоритет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		ВыборкаПриоритет.Следующий();
		
		Выборка = ВыборкаПриоритет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВсегоЗаписей = Выборка.Количество();
		
		Если ВыборкаПриоритет.Приоритет = 1 Тогда
			Если ЭтоBA = Ложь ИЛИ ВсегоЗаписей = 1 Тогда 
			    // выбираем первую команду с наибольшей вовлеченностью
				Выборка.Следующий();
				КомандаПоПостингу = Выборка.Команда;
			Иначе
				//для BA,если у пользователя вовлеченность SME сразу по нескольким командам, то команду нужно выбрать исходя из
				//Lead SME таска. Т.е. по Lead SME находим команды, в которых он является тим лидом, 
				//а далее смотрим под какой из команд  Lead SME есть команда из плана SME постирующего
				КомандыLeadSME = Новый Массив;
				Если ЗначениеЗаполнено(LeadSME) Тогда 
					КомандыLeadSME = Справочники.Команды.ПолучитьКомандыТимЛида(LeadSME, Истина, НаДату);
				КонецЕсли;
				
				// проверяем какая из команд есть у Lead SME
				Пока Выборка.Следующий() Цикл
					Если КомандыLeadSME.Найти(Выборка.Команда) <> Неопределено Тогда 
						// нашли команду
						КомандаПоПостингу = Выборка.Команда;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		Иначе
			// приоритет 2 или 3 или 4, 5, 6
			
			Выборка.Следующий();
			Если ВсегоЗаписей = 1 Тогда 
				// если команда не подошла по постингу, но при этом она единственная в плановой вовлеченности - используем ее
				КомандаПоПостингу = Выборка.Команда;
			ИначеЕсли ВсегоЗаписей > 1 Тогда	
				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Найдено более одной команды из плановой вовлеченности (" + ВсегоЗаписей + ") установленных на сотруднике", "More than one team was found from the planned involvement (" + ВсегоЗаписей + ") set on the officer", "en");
	
				ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);	
			ИначеЕсли ВсегоЗаписей = 0 Тогда	
				ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не установлены команды плановой вовлеченности по сотруднику",  "Planned involvement teams for an officer are not set", "en");
	
				ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	
	// Если  ни одна команда не подошла, то получаем руководителя пользователя. Находим команду руководителя	
	Если НЕ ЗначениеЗаполнено(КомандаПоПостингу) Тогда 
		
		// получаем сотрудника пользователя, действующего на дату
		// по сотруднику получаем руководиля
		// по руководителю получаем команду где он тим лид и под которой находится команда сотрудника
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень КАК ПериодДень,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер КАК Офицер,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда КАК Команда,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.НаправлениеДеятельности,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.КодПроектаJIRA КАК КодПроектаJIRA,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Значение КАК ПроцентВовлеченности,
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ЗначениеПлан КАК ПроцентВовлеченностиПлан
			|ПОМЕСТИТЬ ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам
			|ИЗ
			|	РегистрСведений.ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням КАК ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням
			|ГДЕ
			|	ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень = &НаДату
			|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда <> ЗНАЧЕНИЕ(Справочник.Команды.ПустаяСсылка)
			//|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|	И ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер = &Пользователь
			|;
			|////////////////////////////////////////////////////////////////////////////////			
			|ВЫБРАТЬ
			|	Команды.Ссылка КАК Команда,
			|	Команды.Ссылка КАК КомандаРодитель
			|ПОМЕСТИТЬ ВТ_ПодчиненныеКоманды
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель.Родитель.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель.Родитель.Родитель.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель.Родитель.Родитель.Родитель.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Команды.Ссылка,
			|	Команды.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
			|ИЗ
			|	Справочник.Команды КАК Команды
			//|ГДЕ
			//|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			|
			//|ОБЪЕДИНИТЬ
			//|
			//|ВЫБРАТЬ
			//|	Команды.Ссылка,
			//|	Команды.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
			//|ИЗ
			//|	Справочник.Команды КАК Команды
			////|ГДЕ
			////|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			//|
			//|ОБЪЕДИНИТЬ
			//|
			//|ВЫБРАТЬ
			//|	Команды.Ссылка,
			//|	Команды.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
			//|ИЗ
			//|	Справочник.Команды КАК Команды
			////|ГДЕ
			////|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)
			//|
			//|ОБЪЕДИНИТЬ
			//|
			//|ВЫБРАТЬ
			//|	Команды.Ссылка,
			//|	Команды.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель
			//|ИЗ
			//|	Справочник.Команды КАК Команды
			////|ГДЕ
			////|	Команды.КлассификаторКоманды = ЗНАЧЕНИЕ(Справочник.КлассификаторКоманд.Delivery)			
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.ОсновнойДокумент,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.ОсновнойДокумент.Дата КАК ОсновнойДокументДата,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаПриема,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.Организация,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.Сотрудник,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.Пользователь,
			|	СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаОкончания
			|ПОМЕСТИТЬ ВТ_СвязьСотрудникаПолныеДанные
			|ИЗ
			|	РегистрСведений.СвязьСотрудникаСКомпаниями.СрезПоследних(, Пользователь = &Пользователь И НеИспользовать = Ложь) КАК СвязьСотрудникаСКомпаниямиСрезПоследних
			//|	РегистрСведений.СвязьСотрудникаСКомпаниями.СрезПоследних(&НаДату, Пользователь = &Пользователь И НеИспользовать = Ложь) КАК СвязьСотрудникаСКомпаниямиСрезПоследних
			//|ГДЕ
			//|	&НаДату МЕЖДУ СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаПриема И СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаОкончания 
			//|	И СвязьСотрудникаСКомпаниямиСрезПоследних.Пользователь = &Пользователь
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_СвязьСотрудникаПолныеДанные.Пользователь,
			|	МАКСИМУМ(ВТ_СвязьСотрудникаПолныеДанные.ОсновнойДокументДата) КАК ОсновнойДокументДата
			|ПОМЕСТИТЬ ВТ_ДатаМаксДокумента
			|ИЗ
			|	ВТ_СвязьСотрудникаПолныеДанные КАК ВТ_СвязьСотрудникаПолныеДанные

			|СГРУППИРОВАТЬ ПО
			|	ВТ_СвязьСотрудникаПолныеДанные.Пользователь
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДатаМаксДокумента.Пользователь,
			|	ВТ_СвязьСотрудникаПолныеДанные.ДатаПриема КАК ДатаНачала,
			|	ВТ_СвязьСотрудникаПолныеДанные.Организация,
			|	ВТ_СвязьСотрудникаПолныеДанные.Сотрудник,
			|	ВТ_СвязьСотрудникаПолныеДанные.ДатаОкончания
			|ПОМЕСТИТЬ ВТ_СвязьПользователейИСотрудников
			|ИЗ
			|	ВТ_ДатаМаксДокумента КАК ВТ_ДатаМаксДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьСотрудникаПолныеДанные КАК ВТ_СвязьСотрудникаПолныеДанные
			|		ПО ВТ_ДатаМаксДокумента.ОсновнойДокументДата = ВТ_СвязьСотрудникаПолныеДанные.ОсновнойДокументДата
			|			И ВТ_ДатаМаксДокумента.Пользователь = ВТ_СвязьСотрудникаПолныеДанные.Пользователь
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеРуководителейПользователей.Пользователь КАК Пользователь,
			|	ДанныеРуководителейПользователей.КомандаОфицера КАК КомандаОфицера,
			|	МАКСИМУМ(ДанныеРуководителейПользователей.Руководитель) КАК Руководитель
			|ПОМЕСТИТЬ ВТ_РуководителиПользователей
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам.Офицер КАК Пользователь,
			|		ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам.Команда КАК КомандаОфицера,
			|		РуководителиПодразделений.Руководитель.Пользователь КАК Руководитель
			|	ИЗ
			|		ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам КАК ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвязьПользователейИСотрудников КАК ВТ_СвязьПользователейИСотрудников
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РуководителиПодразделений.СрезПоследних(&НаДату, ) КАК РуководителиПодразделений
			|				ПО ВТ_СвязьПользователейИСотрудников.Сотрудник = РуководителиПодразделений.Сотрудник
			|			ПО ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам.Офицер = ВТ_СвязьПользователейИСотрудников.Пользователь
			|				И (ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам.ПериодДень МЕЖДУ ВТ_СвязьПользователейИСотрудников.ДатаНачала И ВТ_СвязьПользователейИСотрудников.ДатаОкончания)
			|    ГДЕ 
			|       ВТ_ПлановаяВовлеченностьПоДнямПоСотрудникам.Офицер = &Пользователь) КАК ДанныеРуководителейПользователей
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРуководителейПользователей.Пользователь,
			|	ДанныеРуководителейПользователей.КомандаОфицера
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_РуководителиПользователей.Пользователь,
			|	ВТ_РуководителиПользователей.Руководитель КАК Руководитель,
			//++OW Копачев А.С. 12.08.2022
			//|	МАКСИМУМ(ВТ_ПодчиненныеКоманды.КомандаРодитель) КАК КомандаРуководителя,
			|	ВТ_ПодчиненныеКоманды.КомандаРодитель КАК КомандаРуководителя,
			|	СУММА(ЕСТЬNULL(ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Значение, 0)) КАК ЗначениеВовлеченности
			//--OW Копачев А.С. 12.08.2022
			|ИЗ
			|	ВТ_РуководителиПользователей КАК ВТ_РуководителиПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодчиненныеКоманды КАК ВТ_ПодчиненныеКоманды
			//++OW Копачев А.С. 12.08.2022  
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням КАК ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням
			|			ПО ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.ПериодДень = &НаДату
			|			И ВТ_ПодчиненныеКоманды.КомандаРодитель = ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Команда
			|			И ВТ_ПодчиненныеКоманды.КомандаРодитель.Тимлид = ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Офицер
			//--OW Копачев А.С. 12.08.2022 
			|		ПО ВТ_РуководителиПользователей.Руководитель = ВТ_ПодчиненныеКоманды.КомандаРодитель.Тимлид
			|			И ВТ_РуководителиПользователей.КомандаОфицера = ВТ_ПодчиненныеКоманды.Команда
			|ГДЕ
			|  НЕ ВТ_ПодчиненныеКоманды.КомандаРодитель ЕСТЬ NULL
			|
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_РуководителиПользователей.Пользователь,
			|	ВТ_РуководителиПользователей.Руководитель,
			//++OW Копачев А.С. 12.08.2022  
			|	ВТ_ПодчиненныеКоманды.КомандаРодитель
			|
			|УПОРЯДОЧИТЬ ПО 
			|
			|	СУММА(ЕСТЬNULL(ВовлеченностьПоКомандамСУчетомОтсутствийРассчитаннаяПоДням.Значение, 0)) УБЫВ
			//--OW Копачев А.С. 12.08.2022 
			|;
			|";

		Запрос.УстановитьПараметр("НаДату", НаДату);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);

		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			// выбираем первую команду
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			КомандаПоПостингу = Выборка.КомандаРуководителя;
		Иначе		
			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не найдена команда руководителя", "The line-manager's team was not found", "en");

			ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
	//++OW Копачев А.С. 08.07.2021 ONEC-6864
	// ищем команду по умолчанию
	Если НЕ ЗначениеЗаполнено(КомандаПоПостингу) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КомандыПоУмолчаниюДляВовлеченности.Команда
			|ИЗ
			|	РегистрСведений.КомандыПоУмолчаниюДляВовлеченности КАК КомандыПоУмолчаниюДляВовлеченности
			|ГДЕ
			|	КомандыПоУмолчаниюДляВовлеченности.Офицер = &Пользователь
			|	И &НаДату МЕЖДУ КомандыПоУмолчаниюДляВовлеченности.ДатаНачала И КомандыПоУмолчаниюДляВовлеченности.ДатаОкончания";
	
		
		Запрос.УстановитьПараметр("НаДату", НаДату);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			// выбираем команду
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			КомандаПоУмолчанию = Выборка.Команда;
			
			//Проверим команду по умолчанию
			Если ЗначениеЗаполнено(КомандаПоУмолчанию) Тогда 
				МассивКомандПользователя = Справочники.Команды.ПолучитьКомандыПользователя(Пользователь, НаДату);
				Если МассивКомандПользователя.Найти(КомандаПоУмолчанию) = Неопределено Тогда 
					// команда НЕ подходит - НЕ выбираем ее
					ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Найденная команда по умолчанию <" + КомандаПоУмолчанию + "> отсутствует в списке команд пользователя по вовлеченности", "The found default team < "+ КомандаПоУмолчанию + " > is not in the list of officer teams by involvement", "en");
					ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);	
				Иначе
					// команда подходит - выбираем ее
					КомандаПоПостингу = КомандаПоУмолчанию;
				КонецЕсли;	 
			КонецЕсли;	
		Иначе		
			ТекстОшибки = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Не найдена команда вовлеченности по умолчанию для пользователя", "The default involvement team for the officer was not found", "en");
			ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибок, ТекстОшибки, Символы.ПС);
		КонецЕсли;

	КонецЕсли;	
	//--OW Копачев А.С. 08.07.2021 ONEC-6864
	
	Если НЕ ЗначениеЗаполнено(КомандаПоПостингу) Тогда 
		//++OW Копачев А.С. 08.07.2021 ONEC-6864 
		ДобавитьОшибкуОпределенияКомандыПоПостингу(тзОшибокОпределенияКомандПоПостингу, ЛогОшибок, Пользователь, НаДату, Таск, Фаза);
		//--OW Копачев А.С. 08.07.2021 ONEC-6864
		
		ЛогОшибок = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛогОшибокЗаголовок, ЛогОшибок, Символы.ПС);

		OW.ЗаписатьОшибку(Таск, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Информация, ЛогОшибок);	
				
	КонецЕсли;
	
	Возврат КомандаПоПостингу;
	//--OW Копачев А.С. 12.11.2020 ONEC-6046
КонецФункции

Функция ПолучитьРеквестераПроектаПоКомпонентамJIRA(КодПроекта, Период, МассивКомпонентJIRA) 
	//++OW Копачев А.С. 10.11.2020 ONEC-6178 
	Реквестер = Неопределено;
	
	Для Каждого КомпонентаJIRA Из МассивКомпонентJIRA Цикл
		ДанныеРегистра = РегистрыСведений.СоответствиеФазИКомпонентJIRA.ПолучитьДанные(КодПроекта, Период, КомпонентаJIRA);			
		// получаем реквестера только если фаза не заполнена
		Если НЕ ЗначениеЗаполнено(ДанныеРегистра.Фаза) Тогда 
			Если ЗначениеЗаполнено(ДанныеРегистра.Реквестер) Тогда 
				Реквестер = ДанныеРегистра.Реквестер;
				Прервать; // нашли
			КонецЕсли;	
		Иначе
			// прерываем поиск
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Реквестер; 
	//--OW Копачев А.С. 10.11.2020 ONEC-6178
КонецФункции

Функция ПолучитьФазуПоContainerPickerTask(Таск, НаДату, КонфигурацияЛицензий,Таск_IDOWS="")
	//++OW Копачев А.С. 05.04.2021 ONEC-6677 
	// доопределение фазы по Container Link 
	ContainerPickerTaskФаза = Неопределено;
	Если ЗначениеЗаполнено(Таск) Тогда 
		ContainerPickerTask = Таск.ContainerPickerTask;
		Если ЗначениеЗаполнено(ContainerPickerTask) Тогда							
			
			Если ContainerPickerTask.Type = ПредопределенноеЗначение("Справочник.OW_IssueType.Phase") Тогда   
				// попробуем найти фазу
				//++OW Копачев А.С. 31.03.2022 ONEC-7464
				//ContainerPickerTaskФаза = ПолучитьФазуПоКодуПроектаJIRA(ContainerPickerTask.Код);
				ContainerPickerTaskФаза = ПолучитьФазуПоКодуИнтеграцииJIRA(ContainerPickerTask.КодИнтеграции_JIRA);
				//--OW Копачев А.С. 31.03.2022 ONEC-7464
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ContainerPickerTaskФаза) Тогда 
				ParentProjectКод = "";
				Если ЗначениеЗаполнено(ContainerPickerTask.Project) Тогда 
					ParentProjectКод = ContainerPickerTask.Project.Код;
				КонецЕсли;							
				Если НЕ ЗначениеЗаполнено(ParentProjectКод) Тогда 
					ParentProjectКод = ОпределитьПроектПоНомеруЗадачи(ContainerPickerTask.Код);	
				КонецЕсли;
				
				ContainerPickerTaskМассивКомпонентJIRA = Новый Массив;
				ContainerPickerTaskКомпонентыJIRA = ContainerPickerTask.Components;
				Для Каждого ТекСтрокаТаскКомпонентыJIRA Из ContainerPickerTaskКомпонентыJIRA Цикл 
					ContainerPickerTaskМассивКомпонентJIRA.Добавить(ТекСтрокаТаскКомпонентыJIRA.Component);	
				КонецЦикла;
				
				
				//+++ Брук Б ONEC-7920
				Если ContainerPickerTaskМассивКомпонентJIRA.Количество() = 0 Тогда
					
					Если ЗначениеЗаполнено(Таск_IDOWS) Тогда
					
						КодПроекта_Таск_IDOWS = ОпределитьПроектПоНомеруЗадачи(Таск_IDOWS);
						ComponentаСсылкаТаск_IDOWS = ПолучитьСоздатьЭлементСправочника("OW_Component", КодПроекта_Таск_IDOWS);
						
						Если ЗначениеЗаполнено(ComponentаСсылкаТаск_IDOWS) Тогда 
							ContainerPickerTaskМассивКомпонентJIRA.Добавить(ComponentаСсылкаТаск_IDOWS);
						КонецЕсли;		
						
					КонецЕсли;
					
				КонецЕсли;
				//--- Брук Б ONEC-7920
				
				
				// добавим для поиска пустую Component
				ContainerPickerTaskМассивКомпонентJIRA.Добавить(Справочники.OW_Component.ПустаяСсылка());
				
				// попытаемся найти сразу фазу по parent picker
				ContainerPickerTaskФаза = ПолучитьФазуПроектаПоКомпонентамJIRA(ParentProjectКод, НаДату, ContainerPickerTaskМассивКомпонентJIRA);
				Если НЕ ЗначениеЗаполнено(ContainerPickerTaskФаза) Тогда 
					// попытаемся получить по реквестеру parent picker
					ContainerPickerTaskРеквестер = ПолучитьРеквестераПроектаПоКомпонентамJIRA(ParentProjectКод, НаДату, ContainerPickerTaskМассивКомпонентJIRA);
					Если ЗначениеЗаполнено(ContainerPickerTaskРеквестер) Тогда 
						ContainerPickerTaskФаза = РегистрыСведений.СоответствиеКлиентовИСаппортныхФаз.ПолучитьСаппортнуюФазу(КонфигурацияЛицензий, НаДату, ContainerPickerTaskРеквестер);
					КонецЕсли;							
				КонецЕсли;
			КонецЕсли; //НЕ ЗначениеЗаполнено(ContainerPickerTaskФаза)	
		КонецЕсли //ЗначениеЗаполнено(ContainerPickerTask)
	КонецЕсли; //ЗначениеЗаполнено(Таск)	
	
	Возврат ContainerPickerTaskФаза;
	//--OW Копачев А.С. 05.04.2021 ONEC-6677
	
КонецФункции

Функция ПолучитьФазуПроектаПоКомпонентамJIRA(КодПроекта, Период, МассивКомпонентJIRA) 
	//++OW Копачев А.С. 10.11.2020 ONEC-6178 
	Фаза = Неопределено;
				
	Для Каждого КомпонентаJIRA Из МассивКомпонентJIRA Цикл
		ДанныеРегистра = РегистрыСведений.СоответствиеФазИКомпонентJIRA.ПолучитьДанные(КодПроекта, Период, КомпонентаJIRA);			
		// получаем фазу
		Если ЗначениеЗаполнено(ДанныеРегистра.Фаза) Тогда 
			Фаза = ДанныеРегистра.Фаза;
			Прервать; // нашли
		КонецЕсли;		
	КонецЦикла;	
		
	Возврат Фаза; 
	//--OW Копачев А.С. 10.11.2020 ONEC-6178
КонецФункции

Функция ПроектJiraВходитВСоответствиеФазИПроектовJIRA(КодПроектаJIRA) Экспорт
	//+ Пилюгин В.Е. 23.01.2019
	Входит = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Колво
	|ИЗ
	|	РегистрСведений.СоответствиеФазИПроектовJIRA КАК СоответствиеФазИПроектовJIRA
	|ГДЕ
	|	СоответствиеФазИПроектовJIRA.ПроектJIRA = &КодПроектаJIRA";
	Запрос.УстановитьПараметр("КодПроектаJIRA", КодПроектаJIRA);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Колво > 0 Тогда
			Входит = Истина;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Входит;		
	//- Пилюгин В.Е. 23.01.2019		
КонецФункции

Функция ПроектJiraСопоставленКомпонентамJIRA(КодПроектаJIRA) Экспорт
	//++OW Копачев А.С. 09.04.2020 ONEC-5483 
	Сопоставлен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Колво
	|ИЗ
	|	РегистрСведений.СоответствиеФазИКомпонентJIRA КАК СоответствиеФазИКомпонентJIRA
	|ГДЕ
	|	СоответствиеФазИКомпонентJIRA.ПроектJIRA = &КодПроектаJIRA
	|	И СоответствиеФазИКомпонентJIRA.КомпонентаJIRA <> ЗНАЧЕНИЕ(Справочник.OW_Component.Пустаяссылка)";
	Запрос.УстановитьПараметр("КодПроектаJIRA", КодПроектаJIRA);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Колво > 0 Тогда
			Сопоставлен = Истина;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Сопоставлен;		
	//--OW Копачев А.С. 09.04.2020 ONEC-5483	
КонецФункции

Процедура ОтправитьНотификациюОшибкиОпределенияФазПоПостингу(Знач тзОшибок, Знач тзОшибокОпределенияКомандПоПостингу, Знач тзОшибокОпределенияКлиентаПоПостингу, Знач ДатаНачала, ДатаОкончания, ИмяСистемы = "JIRA Delivery") Экспорт
	
	// + Брук Б. 03.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4867 - отключаем рассылку
	Если ИмяСистемы = "CRM" ИЛИ ИмяСистемы = "OWS-JIRA (Estimations)" Тогда 
		Возврат; 
	КонецЕсли; 
	// - Брук Б. 03.10.2019	
	
	//++OW Копачев А.С. 08.07.2021 ONEC-6864 
	тзОшибокОпределенияКомандПоПостингу.Свернуть("Дата, ТаскID, Пользователь, Фаза, Ошибка", "Количество");
	тзОшибокОпределенияКомандПоПостингу.Сортировать("Дата");
	//--OW Копачев А.С. 08.07.2021 ONEC-6864 

	//++OW Копачев А.С. 21.04.2022 ONEC-7464
	тзОшибокОпределенияКлиентаПоПостингу.Свернуть("Дата, ТаскID, Пользователь, Фаза, Ошибка", "Количество");
	тзОшибокОпределенияКлиентаПоПостингу.Сортировать("Дата");
	//--OW Копачев А.С. 21.04.2022 ONEC-7464

	//+ Пилюгин В.Е. 18.05.2018
	//таблица ошибок определения фаз по постингу (decision tree)
	
	//+ OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	//тзОшибок.Свернуть("Дата, Партнер, ТаскID, Ошибка", "Количество, MD");
	тзОшибок.Свернуть("Дата, Партнер, ТаскID, Таск_IDOWS, Пользователь, ПользовательСсылка, Ошибка, ГруппировкаОшибки, КатегорияОшибки", "Количество, MD");
	//- OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	
	//++OW Копачев А.С. 21.04.2022 ONEC-7464
	////++OW Копачев А.С. 08.07.2021 ONEC-6864 
	////Если тзОшибок.Количество() > 0 Тогда
	////	НужноОтправитьПисьмоОшибок = Истина;
	////Иначе
	////	НужноОтправитьПисьмоОшибок = Ложь;
	////КонецЕсли;	
	//НужноОтправитьПисьмоОшибок = тзОшибок.Количество() > 0 ИЛИ тзОшибокОпределенияКомандПоПостингу.Количество() > 0;
	////--OW Копачев А.С. 08.07.2021 ONEC-6864
	НужноОтправитьПисьмоОшибок = тзОшибок.Количество() > 0 ИЛИ тзОшибокОпределенияКомандПоПостингу.Количество() > 0 ИЛИ тзОшибокОпределенияКлиентаПоПостингу.Количество() > 0;
	//--OW Копачев А.С. 21.04.2022 ONEC-7464
	
	//заголовок
	ТекстСообщения = "[" +ИмяСистемы+ "] Decision tree warnings (" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") +")"; 
	
	Если НужноОтправитьПисьмоОшибок Тогда
				
		ТекстСообщенияОшибкиОпределенияФаз = "";
		Если тзОшибок.Количество() > 0 Тогда 
			
			тзОшибок.Сортировать("КатегорияОшибки Убыв, ГруппировкаОшибки, Дата, Партнер, ТаскID");

			ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + Символы.ПС + 
						"-----PHASE--------------------------------------------------------------------------------------------------------------------------------";

			//++OW Копачев А.С. 12.10.2021 ONEC-6569 
			// получим группировки ошибок
			тзОшибокГруппировки = тзОшибок.Скопировать(, "ГруппировкаОшибки");
			тзОшибокГруппировки.Свернуть("ГруппировкаОшибки");
			СписокГруппировокОшибок = Новый СписокЗначений;
			СписокГруппировокОшибок.ЗагрузитьЗначения(тзОшибокГруппировки.ВыгрузитьКолонку("ГруппировкаОшибки"));
			СписокГруппировокОшибок.СортироватьПоЗначению();
			//summary
			ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + "Summary" + Символы.ПС;
			Для Каждого ЭлементСписка Из СписокГруппировокОшибок Цикл
				ТекГруппировкаОшибки = ЭлементСписка.Значение; 
				
				//тзОшибокКратко = тзОшибок.Скопировать(, "Партнер, Ошибка, Количество, MD");

				тзОшибокКратко = тзОшибок.Скопировать(Новый Структура("ГруппировкаОшибки", ТекГруппировкаОшибки), "Партнер, Пользователь, Ошибка, ГруппировкаОшибки, КатегорияОшибки, Количество, MD");
				Если ТекГруппировкаОшибки = 1 Тогда
					// по пользователю
					тзОшибокКратко.Свернуть("Пользователь, КатегорияОшибки", "Количество, MD");
					//ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + "Summary" + Символы.ПС;
					Для Каждого ст Из тзОшибокКратко Цикл
						ПользовательСтрока = Строка(ст.Пользователь);
						ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + Строка(ст.Количество) + " records, " + ?(ст.КатегорияОшибки = 1, "Critical", "Warning") + ", " + ст.MD + " MD; "+ "User is filled (" +ПользовательСтрока+ ") -> No 1C employee" +"; " + Символы.ПС;   
					КонецЦикла;
				Иначе 
			//--OW Копачев А.С. 12.10.2021 ONEC-6569		
					// по партнеру
					тзОшибокКратко.Свернуть("Партнер, Ошибка, КатегорияОшибки", "Количество, MD");
					Для Каждого ст Из тзОшибокКратко Цикл
						ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + Строка(ст.Количество) + " records, " + ?(ст.КатегорияОшибки = 1, "Critical", "Warning") + ", " + ст.MD + " MD; "+ ст.Партнер +"; "+ ст.Ошибка + Символы.ПС;   
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;	
			
			//details
			тзОшибок.Сортировать("Дата, Партнер, ТаскID, КатегорияОшибки Убыв");

			ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + 
							"----PHASE---------------------------------------------------------------------------------------------------------------------------------" + 
							Символы.ПС + Символы.ПС + "Details" + Символы.ПС;
			Для Каждого ст Из тзОшибок Цикл
				//+ OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
				//ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + ст.Дата +"; "+ ст.Партнер +"; "+ ст.ТаскID +"; "+ ст.MD + " -- " +ст.Ошибка + Символы.ПС; 
				ТекстСообщенияОшибкиОпределенияФаз = ТекстСообщенияОшибкиОпределенияФаз + Символы.ПС + Формат(ст.Дата, "ДФ=dd.MM.yyyy") + "; " + ?(ст.КатегорияОшибки = 1, "Critical", "Warning") + "; "+ ст.Партнер +"; "+ ст.ТаскID +"; " + ст.Таск_IDOWS +"; " + ст.ПользовательСсылка +"; " + ст.MD + " -- " +ст.Ошибка + Символы.ПС; 
				//- OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
			КонецЦикла; 
		КонецЕсли;
		
		//++OW Копачев А.С. 08.07.2021 ONEC-6864 
		ТекстСообщенияОшибкиОпределенияКоманд = "";
		Если тзОшибокОпределенияКомандПоПостингу.Количество() > 0 Тогда 
			
			ТекстСообщенияОшибкиОпределенияКоманд = ТекстСообщенияОшибкиОпределенияКоманд + Символы.ПС + Символы.ПС +  
						"----TEAM----------------------------------------------------------------------------------------------------------------------------------";

			//summary
			тзОшибокКратко = тзОшибокОпределенияКомандПоПостингу.Скопировать(, "Пользователь, Ошибка, Количество");
			тзОшибокКратко.Свернуть("Пользователь, Ошибка", "Количество");
			ТекстСообщенияОшибкиОпределенияКоманд = ТекстСообщенияОшибкиОпределенияКоманд + Символы.ПС + "Summary" + Символы.ПС;
			Для Каждого ст Из тзОшибокКратко Цикл
				ТекстСообщенияОшибкиОпределенияКоманд = ТекстСообщенияОшибкиОпределенияКоманд + Символы.ПС + Строка(ст.Количество) + " records, " + ст.Пользователь +"; "+ ст.Ошибка + Символы.ПС;   
			КонецЦикла; 
			//details
			ТекстСообщенияОшибкиОпределенияКоманд = ТекстСообщенияОшибкиОпределенияКоманд + 
							"----TEAM----------------------------------------------------------------------------------------------------------------------------------" + 
							Символы.ПС + Символы.ПС + "Details" + Символы.ПС;
			Для Каждого ст Из тзОшибокОпределенияКомандПоПостингу Цикл
				ТекстСообщенияОшибкиОпределенияКоманд = ТекстСообщенияОшибкиОпределенияКоманд + Символы.ПС + Формат(ст.Дата, "ДФ=dd.MM.yyyy") +"; "+ ст.Пользователь +"; "+ ст.ТаскID +"; " + ?(ЗначениеЗаполнено(ст.Фаза),ст.Фаза,"") +"; "+ " -- " +ст.Ошибка + Символы.ПС; 
			КонецЦикла;
		КонецЕсли;
		//--OW Копачев А.С. 08.07.2021 ONEC-6864
		
		//++OW Копачев А.С. 21.04.2022 ONEC-7464		 
		ТекстСообщенияОшибкиОпределенияКлиента = "";
		Если тзОшибокОпределенияКлиентаПоПостингу.Количество() > 0 Тогда 
			
			ТекстСообщенияОшибкиОпределенияКлиента = ТекстСообщенияОшибкиОпределенияКлиента + Символы.ПС + 
						"----CLIENT--------------------------------------------------------------------------------------------------------------------------------";

			//summary
			тзОшибокКратко = тзОшибокОпределенияКлиентаПоПостингу.Скопировать(, "Пользователь, Ошибка, Количество");
			тзОшибокКратко.Свернуть("Пользователь, Ошибка", "Количество");
			ТекстСообщенияОшибкиОпределенияКлиента = ТекстСообщенияОшибкиОпределенияКлиента + Символы.ПС + "Summary" + Символы.ПС;
			Для Каждого ст Из тзОшибокКратко Цикл
				ТекстСообщенияОшибкиОпределенияКлиента = ТекстСообщенияОшибкиОпределенияКлиента + Символы.ПС + Строка(ст.Количество) + " records, " + ст.Пользователь +"; "+ ст.Ошибка + Символы.ПС;   
			КонецЦикла; 
			//details
			ТекстСообщенияОшибкиОпределенияКлиента = ТекстСообщенияОшибкиОпределенияКлиента + 
							"----CLIENT--------------------------------------------------------------------------------------------------------------------------------" + 
							Символы.ПС + Символы.ПС + "Details" + Символы.ПС;
			Для Каждого ст Из тзОшибокОпределенияКлиентаПоПостингу Цикл
				ТекстСообщенияОшибкиОпределенияКлиента = ТекстСообщенияОшибкиОпределенияКлиента + Символы.ПС + Формат(ст.Дата, "ДФ=dd.MM.yyyy") +"; "+ ст.Пользователь +"; "+ ст.ТаскID +"; " + ?(ЗначениеЗаполнено(ст.Фаза),ст.Фаза,"") +"; "+ " -- " +ст.Ошибка + Символы.ПС; 
			КонецЦикла;
		КонецЕсли;
		//--OW Копачев А.С. 21.04.2022 ONEC-7464
			
		ТекстСообщения = ТекстСообщения + ТекстСообщенияОшибкиОпределенияФаз + ТекстСообщенияОшибкиОпределенияКоманд + ТекстСообщенияОшибкиОпределенияКлиента;
	Иначе
		ТекстСообщения = ТекстСообщения + Символы.ПС +
						"--------------------------------------------------------------------------------" + Символы.ПС + "No warnings." ;
	КонецЕсли; 
		
	//++OW Копачев А.С. 15.08.2023 ONEC-8710  	
	//СписокПолучателей = OW_Нотификации.ПолучитьСписокАдресовEmailИзПараметров(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.Рассылка_DecisionTreeErrors);
	//
	//Если СписокПолучателей.Количество() = 0 Тогда      
	//	//++OW Копачев А.С. 20.04.2023 ONEC-6185
	//	//СписокПолучателей.Добавить(ow.ВернутьПочтуСДоменом("evanurina"));
	//	//СписокПолучателей.Добавить(ow.ВернутьПочтуСДоменом("edostov")); 
	//	СписокПолучателей.Добавить(ow.ВернутьПочтуСДоменом("akurbatova"));
	//	СписокПолучателей.Добавить(ow.ВернутьПочтуСДоменом("pbodnar"));
	//	//--OW Копачев А.С. 20.04.2023 ONEC-6185
	//КонецЕсли; 	         	                       	
	//
	//СписокПолучателей.Добавить(Константы.OW_СлужебныйEmail.Получить());

	// Определяем получателей
	ТипГруппыРассылок = Перечисления.ТипыДляГруппРассылок.РассылкаDecisionTreeErrors;		
	СписокПользователейРассылки = OW_Нотификации.ПолучитьСписокПользователейПоПараметруГруппыРассылки(ТипГруппыРассылок);						
	СписокПолучателей = OW_Нотификации.ПолучитьСписокДоступныхEmailПолучателей(СписокПользователейРассылки);
	
	СписокПолучателей.Добавить(Константы.OW_СлужебныйEmail.Получить());
	//--OW Копачев А.С. 15.08.2023 ONEC-8710
	
	
	ТемаПисьма = "[" +ИмяСистемы+ "] Decision tree warnings (" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") +")";
	
	//++OW Копачев А.С. 09.07.2021 ONEC-6864 
	//OW_Нотификации.ОтправитьПисьмо(СписокПолучателей, ТемаПисьма, ТекстСообщения); 
	
	РазделУчетаНотификации = Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга;
	
	OW_Нотификации.СформироватьДокументЭлектронноеПисьмоИсходящееПоНотификации(ТемаПисьма, ТекстСообщения, СписокПолучателей,,,,, ,,,РазделУчетаНотификации);	
	//--OW Копачев А.С. 09.07.2021 ONEC-6864	
КонецПроцедуры

//Подробное описание схемы Decision Tree см.:
//https://wiki/display/GDTSR/1A.I.01.04.02.+Work+Log+Export+from+JIRA+to+1C
Функция ОпределениеФазыПоСтрокеПостинга(ст, тзОшибокОпределенияФазПоПостингу, Источник, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 15.05.2018
	Фаза = Неопределено;
	Саппорт = ЭтоSupport(ст.Реквестер, Источник); 
	//***************************************************************   SUPPORT   ***************************************************************
	//1
	Если Саппорт Тогда
		//1C Sync ID заполнен И есть Фаза (ссылка)
		Если ЗначениеЗаполнено(ст.ID_Sync) И ЗначениеЗаполнено(ст.Проект) Тогда
			Фаза = ст.Проект;	
		//1C Sync ID заполнен И нет Фазы (ссылка)
		ИначеЕсли ЗначениеЗаполнено(ст.ID_Sync) И НЕ ЗначениеЗаполнено(ст.Проект) Тогда	
			ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					"[1C Team] "+Источник+" -> Support -> 1C PID filled (" +ст.ID_Sync+ ") -> No 1C phase");										
		//1C Sync ID НЕ заполнен
		Иначе
		    //++OW Копачев А.С. 07.03.2019 ONEC-4340
			// переопределение поиска МарингоID (сначала ищется фаза, а от нее уже МарингоID)
			//МарингоID_фаза = РегистрыСведений.СоответствиеКлиентовИСаппортныхФаз.ПолучитьКодСаппортнойФазыМаринго(ст.КонфигурацияЛицензий, ст.Период);		
			Фаза = РегистрыСведений.СоответствиеКлиентовИСаппортныхФаз.ПолучитьСаппортнуюФазу(ст.КонфигурацияЛицензий, ст.Период, ст.Реквестер);
			Если НЕ ЗначениеЗаполнено(Фаза) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									Источник+" -> Support -> NO 1C Phase");										
			КонецЕсли;
			МарингоID_фаза = ?(ЗначениеЗаполнено(Фаза), Фаза.CodeSAP, 0);			
			//--OW Копачев А.С. 07.03.2019 ONEC-4340
			
			//Маринго ID фазы заполнен
			//11
			Если ЗначениеЗаполнено(МарингоID_фаза) Тогда
				//++OW Копачев А.С. 07.03.2019 ONEC-4340
				// фаза получена ранее
				
				//Фаза = SAP_МодульНаСервере.ПолучитьФазуПоМарингоId(МарингоID_фаза);
				//Если НЕ ЗначениеЗаполнено(Фаза) Тогда
				//	ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
				//				Источник+" -> Support -> Mapped MPID (" +МарингоID_фаза+ ") -> NO 1C Phase");										
				//КонецЕсли; 
				//--OW Копачев А.С. 07.03.2019 ONEC-4340
				
				МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
				//Маринго ID юзера не заполнен	
				//110
				Если НЕ ЗначениеЗаполнено(МарингоID_юзер) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								"[1C Team] "+Источник+" -> Support -> Mapped MPID (" +МарингоID_фаза+ ") -> NO EMID for user (" + ст.ПользовательСсылка + ")");										
				КонецЕсли; 
			//Маринго ID фазы НЕ заполнен	
			//10
			Иначе
				//Партнер (ссылка) не заполнен
				Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								"[1C Team] "+Источник+" -> Support -> NOT Mapped MPID -> NO 1С customer");
				ИначеЕсли НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						Источник+" -> Support -> NOT Mapped MPID -> NO instance id");										
				Иначе 
					//Партнер в списке регионов
					//101
					Если ПартнерВСпискеБизнесРегионовOWI(ст.Партнер) Тогда
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									Источник+" -> Support -> NOT Mapped MPID -> Customer in list (ME, EU, Asia, Lost, Internal)");										
					//Партнер НЕ в списке регионов
					//100
					Иначе
						Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
						//Сотрудник НЕ найден
						Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									"[1C Team] "+Источник+" -> Support -> NOT Mapped MPID -> Customer not in list (ME, EU, Asia, Lost, Internal) -> No 1C Employee");										
						//Сотрудник найден
						Иначе
							Регион = OW.ПолучитьРегионПоСотруднику(Сотрудник);
							СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS(Истина);
							//Регион сотрудника НЕ Россия и НЕ пустой  
							//1000
							Если НЕ (СписокБизнесРегионовRUSCIS.НайтиПоЗначению(Регион) <> Неопределено ИЛИ НЕ ЗначениеЗаполнено(Регион))  Тогда
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										Источник+" -> Support -> NOT Mapped MPID -> Customer not in list (ME, EU, Asia, Lost, Internal) -> Employee region not Rus&CIS and not empty");										
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;			
			КонецЕсли; 
		КонецЕсли; 
		
	//***************************************************************   NOT SUPPORT   ***************************************************************
	//0
	Иначе	
		//Ugly Temp Kostyl'  ONEC-4009
		Если НЕ ЗначениеЗаполнено(ст.ID_Sync) И ЗначениеЗаполнено(ст.КодПроекта) Тогда
			Фаза = OW_ИнтеграцияCRM.ПолучитьФазуПоКодуПроектаCRM(ст.КодПроекта);
			Если ЗначениеЗаполнено(Фаза) Тогда
				ст.ID_Sync = Фаза.ID_Sync_CRM; 
				ст.Проект = Фаза;
				ст.Партнер = Фаза.Партнер;
				ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
			КонецЕсли; 
		КонецЕсли; 		
		//1C Sync ID заполнен И есть Фаза (ссылка)
		//01
		Если ЗначениеЗаполнено(ст.ID_Sync) И ЗначениеЗаполнено(ст.Проект) Тогда
			Фаза = ст.Проект;
			//Маринго ID у фазы заполнен
			//011
			Если ЗначениеЗаполнено(Фаза.CodeSAP) Тогда
				МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
				//Маринго ID юзера не заполнен	
				//0110
				Если НЕ ЗначениеЗаполнено(МарингоID_юзер) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								"[1C Team] "+Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID filled (" +Фаза.CodeSAP+
								") -> NO EMID for user (" + ст.ПользовательСсылка + ")");	
				//0111	
				Иначе
				КонецЕсли; 
			//Маринго ID у фазы НЕ заполнен
			//010
			Иначе
				//Партнер (ссылка) не заполнен
				Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								"[1C Team] "+Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID not filled -> NO 1С customer");
				ИначеЕсли НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID not filled -> NO instance ID");
				//Партнер (ссылка) заполнен
				Иначе
					//Партнер в списке регионов
					//0101
					Если ПартнерВСпискеБизнесРегионовOWI(ст.Партнер) 
						//+костыль #todo который нужно будет убрать. По задаче ONEC-3711
						И  ст.Партнер.Код <> "00000000472" //НЕ Romcard
						И  ст.ID_Sync <> 20531
						//- костыль #todo
					Тогда
						//Это оценочный проект
						//01011
						Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") Тогда
								
						//Это НЕ оценочный проект
						//01010
						Иначе
							//Наименование Фазы НЕ содержит "correspondence"
							Если НЕ СодержитCorrespondence(Фаза.Наименование) Тогда
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID not filled -> Customer in list (ME, EU, Asia, Lost, Internal)");
							КонецЕсли; 
						КонецЕсли; 
					//Партнер НЕ в списке регионов
					//0100
					Иначе
						Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
						//Сотрудник НЕ найден
						Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								"[1C Team] "+Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID not filled -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
								" -> No 1C Employee");										
						//Сотрудник найден
						Иначе
							Регион = OW.ПолучитьРегионПоСотруднику(Сотрудник);
							СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS(Истина);
							//Регион сотрудника НЕ Россия и НЕ пустой
							//01000
							Если НЕ (СписокБизнесРегионовRUSCIS.НайтиПоЗначению(Регион) <> Неопределено ИЛИ НЕ ЗначениеЗаполнено(Регион))  Тогда
								//Партнер Openway
								//010001
								Если ст.Партнер.БизнесРегион = Справочники.БизнесРегионы.OpenWay Тогда
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ") -> MPID not filled -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
									" -> Employee region not Rus&CIS and not empty -> Customer is Openway");
								//Партнер не Openway
								//010000
								Иначе
									МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
									//Маринго ID юзера заполнен	
									//0100001
									Если ЗначениеЗаполнено(МарингоID_юзер) Тогда
										//мусорная фаза
										Фаза = SAP_МодульНаСервере.ПолучитьМусорнуюФазуДляПостинга();
									//Маринго ID юзера не заполнен	
									//0100000
									Иначе	
										ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ")-> MPID not filled -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
										" -> Employee region not Rus&CIS and not empty -> Customer is not Openway -> NO EMID for user (" + ст.ПользовательСсылка + ")");
									КонецЕсли; 
								КонецЕсли; 
							//01001	
							Иначе
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		//1C Sync ID заполнен И нет Фазы (ссылка)
		ИначеЕсли ЗначениеЗаполнено(ст.ID_Sync) И НЕ ЗначениеЗаполнено(ст.Проект) Тогда
			ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					"[1C Team] "+Источник+" -> NOT Support -> 1C PID filled (" +ст.ID_Sync+ ") -> No 1C phase");										
			
		//1C Sync ID не заполнен
		//00
		Иначе			
			//++OW Копачев А.С. 07.05.2019 ONEC-4425
			
			Если НЕ ПустаяСтрока(ст.Таск_IDOWS) И НЕ ЗначениеЗаполнено(ст.Проект) Тогда 
				// Это постинг JIRA OWS через JIRA SPB  
			
				// разбор только задач BA
				КодПроектаOWS = ОпределитьПроектПоНомеруЗадачи(ст.Таск_IDOWS); 
				Если КодПроектаOWS = "BA" Тогда
					//++OW Копачев А.С. 08.04.2022 ONEC-7464
					//Фаза = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_IDOWS); 
					КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_IDOWS, ИнстансJIRA);
					Фаза = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
					//--OW Копачев А.С. 08.04.2022 ONEC-7464
					Если ЗначениеЗаполнено(Фаза) Тогда
						ст.Проект = Фаза;
						ст.Партнер = Фаза.Партнер;
						ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
					КонецЕсли;
					//***********************************DECISION TREE FOR ESTIMATION****************************    
					ОпределениеМарингоИдПоСтрокеПостинга(ст, тзОшибокОпределенияФазПоПостингу, Источник);
					//*******************************************************************************************							
				КонецЕсли; 	
				
				//+ OW Курбатова А.А. 2020/01/03 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5233	 
				КодТаскиOWS= ОпределитьПроектПоНомеруЗадачи(ст.Таск_ID); 
				BusinessAnalysis  = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РеквестерJIRA_BusinessAnalysis);
				Если КодТаскиOWS = "BA" И ст.Реквестер=BusinessAnalysis Тогда
					//++OW Копачев А.С. 08.04.2022 ONEC-7464
					//Фаза = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_ID); 
					КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_ID, ИнстансJIRA);
					Фаза = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
					//--OW Копачев А.С. 08.04.2022 ONEC-7464
					Если ЗначениеЗаполнено(Фаза) Тогда
						ст.Проект = Фаза;
						ст.Партнер = Фаза.Партнер;
						ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
					КонецЕсли;
					//***********************************DECISION TREE FOR ESTIMATION****************************    
					ОпределениеМарингоИдПоСтрокеПостинга(ст, тзОшибокОпределенияФазПоПостингу, Источник);
					//*******************************************************************************************							
				КонецЕсли; 
				//- OW Курбатова А.А. 2020/01/03 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5233	

				///////////////////////////////////
				// блок из OWS - не используем
				
				////пытаемся найти проект по коду проекта CRM
				//crmProjectCode = ст.КодПроекта;
				
				//Если НЕ ЗначениеЗаполнено(нСтрока.Проект) И ЗначениеЗаполнено(crmProjectCode) И НЕ СтрНачинаетсяС(crmProjectCode, "Accumulative") Тогда
				//	нСтрока.Проект = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("КодПроектаCRM", crmProjectCode);
				//КонецЕсли;
				////пытаемся найти по маринго коду
				//Если НЕ ЗначениеЗаполнено(нСтрока.Проект) И ЗначениеЗаполнено(crmProjectCode) И СтрНайти(crmProjectCode, "MaringoPhaseID") > 0 тогда
				//	КодФазыМарингоСтрока = СтрЗаменить(crmProjectCode, "MaringoPhaseID", "");
				//	КодФазыМаринго = СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(КодФазыМарингоСтрока);
				//	Если КодФазыМаринго <> Неопределено Тогда
				//		нСтрока.Проект = Справочники.ЗадачиПроектов.НайтиПоРеквизиту("CodeSAP", КодФазыМаринго);
				//	КонецЕсли; 
				//КонецЕсли;

				
				// блок из OWS - не используем
				///////////////////////////////////
				
			Иначе				
			//--OW Копачев А.С. 07.05.2019 ONEC-4425			
			
				//++OW Копачев А.С. 29.11.2019 ONEC-4099
				МассивПроектов_BA_SSA = ПроектыJIRA_BA_SSA(); 
				МассивПроектов_BA_SSAСтрокой = Новый Массив;
				Для Каждого Проект_BA_SSA Из МассивПроектов_BA_SSA Цикл
					МассивПроектов_BA_SSAСтрокой.Добавить(Проект_BA_SSA.Код); 	
				КонецЦикла;
	            //--OW Копачев А.С. 29.11.2019 ONEC-4099
				
				//есть соответствие JIRA проекта для фазы
				ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(ст.Таск_ID);
				
				//++OW Копачев А.С. 03.06.2019 ONEC-4639 
				// проекты "BA" через Жиру СПБ 
				//++OW Копачев А.С. 29.11.2019 ONEC-4099 
				//Если ПроектJIRA = "BA" Тогда
				Если МассивПроектов_BA_SSAСтрокой.Найти(ПроектJIRA) <> Неопределено Тогда
				//--OW Копачев А.С. 29.11.2019 ONEC-4099 
					//++OW Копачев А.С. 08.04.2022 ONEC-7464
					//Фаза = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_ID);  
					КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_ID, ИнстансJIRA);
					Фаза = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
					//--OW Копачев А.С. 08.04.2022 ONEC-7464
					Если ЗначениеЗаполнено(Фаза) Тогда
						ст.Проект = Фаза;
						ст.Партнер = Фаза.Партнер;
						ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
					КонецЕсли;
					//***********************************DECISION TREE FOR ESTIMATION****************************    
					ОпределениеМарингоИдПоСтрокеПостинга(ст, тзОшибокОпределенияФазПоПостингу, Источник);
					//*******************************************************************************************							
				Иначе 
				//--OW Копачев А.С. 03.06.2019 ONEC-4639
				
					//ФазаПоПроектуJIRA = РегистрыСведений.СоответствиеФазИПроектовJIRA.НайтиФазуДляПроектаJIRA(ПроектJIRA, ст.Период);
					Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
					ОрганизацияСотрудника = Сотрудник.OW_Организация;
					ФазаПоПроектуJIRA = РегистрыСведений.СоответствиеФазИПроектовJIRA.НайтиФазуДляПроектаJIRA_ДополнительныеПараметры(ПроектJIRA, ст.Период, Источник, ОрганизацияСотрудника);
					//001
					Если ЗначениеЗаполнено(ФазаПоПроектуJIRA) Тогда
						Фаза = ФазаПоПроектуJIRA;
						Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
							ст.Партнер = Фаза.Партнер;
							ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
						КонецЕсли; 
						//Партнер (ссылка) не заполнен
						Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> No 1С customer");
						ИначеЕсли НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> NO instance ID");
						//Партнер (ссылка) заполнен
						Иначе
							//Партнер в списке регионов
							//0011
							Если ПартнерВСпискеБизнесРегионовOWI(ст.Партнер) Тогда
								//Маринго ID у фазы НЕ заполнен
								//00110
								Если НЕ ЗначениеЗаполнено(Фаза.CodeSAP) Тогда
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
											Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> Customer in list (ME, EU, Asia, Lost, Internal) -> MPID not filled for (" +Строка(Фаза)+") ->");
								//00111			
								Иначе			
								КонецЕсли;
							//Партнер НЕ в списке регионов owi
							//0010
							Иначе
								
								Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
								//Сотрудник НЕ найден
								Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
										" -> NO 1C Employee");										
								//Сотрудник найден
								Иначе
									Регион = OW.ПолучитьРегионПоСотруднику(Сотрудник);
									СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS(Истина);
									//Регион сотрудника НЕ Россия и НЕ пустой
									//00100
									Если НЕ (СписокБизнесРегионовRUSCIS.НайтиПоЗначению(Регион) <> Неопределено ИЛИ НЕ ЗначениеЗаполнено(Регион))  Тогда
										//Партнер Openway
										//001001
										Если ст.Партнер.БизнесРегион = Справочники.БизнесРегионы.OpenWay Тогда
											//Маринго ID у фазы НЕ заполнен
											//0010010
											Если НЕ ЗначениеЗаполнено(Фаза.CodeSAP) Тогда
												ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
													Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
													" -> Employee region not Rus&CIS and not empty -> Customer is Openway -> MPID not filled for (" +Строка(Фаза)+")");									
											//0010011
											Иначе		
											КонецЕсли;																																
										//Партнер не Openway
										//001000
										Иначе
											МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
											//Маринго ID юзера заполнен	
											//0010001
											Если ЗначениеЗаполнено(МарингоID_юзер) Тогда
												//мусорная фаза
												Фаза = SAP_МодульНаСервере.ПолучитьМусорнуюФазуДляПостинга();
											//Маринго ID юзера не заполнен	
											//0010000
											Иначе	
												ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
												"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
												" -> Employee region not Rus&CIS and not empty -> Customer is not Openway -> NO EMID for user (" + ст.ПользовательСсылка + ")");
											КонецЕсли; 
										КонецЕсли; 	
									//00101	
									Иначе	
									КонецЕсли; 
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли;	
						
					//нет соответствия JIRA проекта для фазы
					//000
					Иначе
						//Партнер (ссылка) не заполнен
						Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> NO 1С customer");
						ИначеЕсли НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> NO instance ID");
						//Партнер (ссылка) заполнен
						Иначе
							//Партнер в списке регионов
							//0001
							Если ПартнерВСпискеБизнесРегионовOWI(ст.Партнер) Тогда
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> Customer in list (ME, EU, Asia, Lost, Internal)");
							//Партнер НЕ в списке регионов
							//0000
							Иначе
								Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
								//Сотрудник НЕ найден
								Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
										" -> No 1C Employee");										
								//Сотрудник найден
								Иначе
									Регион = OW.ПолучитьРегионПоСотруднику(Сотрудник);
									СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS(Истина);
									//Регион сотрудника НЕ Россия и НЕ пустой
									//00000
									Если НЕ (СписокБизнесРегионовRUSCIS.НайтиПоЗначению(Регион) <> Неопределено ИЛИ НЕ ЗначениеЗаполнено(Регион))  Тогда
										//Партнер Openway
										//000001
										Если ст.Партнер.БизнесРегион = Справочники.БизнесРегионы.OpenWay Тогда
											ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
											Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
											" -> Employee region not Rus&CIS and not empty -> Customer is Openway");
										//Партнер не Openway
										//000000
										Иначе
											МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
											//Маринго ID юзера заполнен	
											//0000001
											Если ЗначениеЗаполнено(МарингоID_юзер) Тогда
												//мусорная фаза
												Фаза = SAP_МодульНаСервере.ПолучитьМусорнуюФазуДляПостинга();
											//Маринго ID юзера не заполнен	
											//0000000
											Иначе	
												ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
												"[1C Team] "+Источник+" -> NOT Support -> 1C PID not filled -> Jira space not mapped to 1C phase -> Customer not in list (ME, EU, Asia, Lost, Internal)" +
												" -> Employee region not Rus&CIS and not empty -> Customer is not Openway -> NO EMID for user (" + ст.ПользовательСсылка + ")");
											КонецЕсли; 
										КонецЕсли; 	
									КонецЕсли; 
								КонецЕсли; 
							КонецЕсли;
						КонецЕсли;					
					КонецЕсли; 
				//++OW Копачев А.С. 03.06.2019 ONEC-4639 
				КонецЕсли; // Если ПроектJIRA = "BA" Тогда	
				//--OW Копачев А.С. 03.06.2019 ONEC-4639
				
			//++OW Копачев А.С. 07.05.2019 ONEC-4425
			КонецЕсли // Если ЗначениеЗаполнено(нСтрока.Таск_IDOWS) Тогда
			//--OW Копачев А.С. 07.05.2019 ONEC-4425
		КонецЕсли; 
	КонецЕсли; 
	//адище какое-то...
	
	//++OW Курбатова А.А. 2020/01/29 ONEC-5188 	
	//пытаемся еще раз определить партнера  //Лена, подтвердила, что делаем так (2020.01.29)
	Если ЗначениеЗаполнено(Фаза) Тогда
		ст.Партнер = Фаза.Партнер;
		ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
	КонецЕсли;		
	//--OW Курбатова А.А. 2020/01/29 ONEC-5188 	
	
	Возврат Фаза;
	//- Пилюгин В.Е. 15.05.2018
КонецФункции

//Новая схема Decision Tree Renovation:
//https://wiki/display/GDTSR/Work+log+export+jira.spb+-%3E+1C+starting+from+2019-Jan-01
Функция ОпределениеФазыПоСтрокеПостингаRenovation(ст, тзОшибокОпределенияФазПоПостингу, Источник, ИнстансJIRA) Экспорт
		
	Фаза = Неопределено;		
		
//*************************************************************** NO ID_Sync + ст.КодПроекта  ***************************************************************	
		//Ugly Temp Kostyl'  ONEC-4009
		Если НЕ ЗначениеЗаполнено(ст.ID_Sync) И ЗначениеЗаполнено(ст.КодПроекта) Тогда
			Фаза = OW_ИнтеграцияCRM.ПолучитьФазуПоКодуПроектаCRM(ст.КодПроекта);
			Если ЗначениеЗаполнено(Фаза) Тогда
				ст.ID_Sync = Фаза.ID_Sync_CRM; 
				ст.Проект  = Фаза;
				ст.Партнер = Фаза.Партнер;
				ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
			КонецЕсли; 
		КонецЕсли; 		
//***************************************************************   ID_Sync  *********************************************************************************		
		//1C Sync ID заполнен
		Если ЗначениеЗаполнено(ст.ID_Sync) Тогда  //если ID_Sync заполнено
			
			ТекстШаблона = Источник+" -> 1C Sync ID filled (" +ст.ID_Sync+ ")";

			//1C Sync ID заполнен И есть Фаза (ссылка)
			Если ЗначениеЗаполнено(ст.Проект) Тогда
				Фаза = ст.Проект;	
				//пытаемся еще раз определить партнера  //Лена, подтвердила, что делаем так (2020.01.29)
				//Если ЗначениеЗаполнено(Фаза) Тогда - лишняя проверка, проверено на две строки кода выше
					ст.Партнер = Фаза.Партнер;
					ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
				//КонецЕсли;		
			//1C Sync ID заполнен И нет Фазы (ссылка)
			ИначеЕсли НЕ ЗначениеЗаполнено(ст.Проект) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					"[1C Team] "+ТекстШаблона + " -> NO 1C phase", 0, 1);										
			КонецЕсли;
	//---------------------- + проверки на заполненность полей (начало) ----------------------			
	
	
		//---------------------- + проверим что заполнен клиент (начало) ----------------------			
	 
			Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда //клиент не заполнен
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						"[1C Team] "+ТекстШаблона + " -> NO 1С customer", 0);
				//Проверяем что инстанс заполнен				
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						"[1C Team] "+ТекстШаблона + " -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
			Иначе	//клиент заполнен		
				//Проверяем что инстанс заполнен				
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						"[1C Team] "+ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
			КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда	
			
		//---------------------- - проверим что заполнен клиент (конец) ----------------------			
		
			// Employee is found in 1C
			Сотрудник = ПолучитьСотрудникаПоПользователюНаПериод(ст.ПользовательСсылка, ст.Период);	
			
			Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					ТекстШаблона + " -> User is filled (" +ст.Пользователь+ ") -> NO 1C employee", 1);
			КонецЕсли;
			
			//проверяем удалена ли фаза
			Если ЗначениеЗаполнено(Фаза) Тогда			
				
				Если Фаза.ПометкаУдаления Тогда //Phase is found and deleted
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						 ТекстШаблона + " -> 1C phase is deleted", 0);
				КонецЕсли;	
				
				//Contract/s linked with phase via budget record is not closed 
				Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
					Если ПостингПоЗакрытымКонтрактам(Фаза, ст.Период) Тогда
		   				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Contract/s linked with phase via budget record is closed", 0);
					КонецЕсли;
				КонецЕсли;
				
				//++OW Копачев А.С. 21.04.2021 ONEC-6650 
				Если ЗначениеЗаполнено(ст.Таск) Тогда 		
					ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(ст.Таск_ID); //определяем проект по номеру Таск_ID

					ContainerPickerTask = ст.Таск.ContainerPickerTask;	
					Если ЗначениеЗаполнено(ContainerPickerTask) Тогда 
						
						// если это оценка, то проверим, что она уже есть в 1С (слинкована) и соответственно нужно убрать ContainerPickerTask
						ПроектОценка = Неопределено;
						
						МассивПроектов_BA_SSA = ПроектыJIRA_BA_SSA(); 
						МассивПроектов_BA_SSAСтрокой = Новый Массив;
						
						Для Каждого Проект_BA_SSA Из МассивПроектов_BA_SSA Цикл
							МассивПроектов_BA_SSAСтрокой.Добавить(Проект_BA_SSA.Код); 	
						КонецЦикла;
						
						// проекты "BA" через Жиру СПБ 
						//Если ПроектJIRA = "BA" Тогда
						Если МассивПроектов_BA_SSAСтрокой.Найти(ПроектJIRA) <> Неопределено Тогда
							//++OW Копачев А.С. 08.04.2022 ONEC-7464
							//ПроектОценка = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_ID);   
							КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_ID, ИнстансJIRA);
							ПроектОценка = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
							//--OW Копачев А.С. 08.04.2022 ONEC-7464
						КонецЕсли; 
						
						Если ЗначениеЗаполнено(ПроектОценка) Тогда 							
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								ТекстШаблона+" -> The phase ("+Фаза+") from Container Picker is specified, but there is already Estimation project ("+ПроектОценка+") with Task ID (" +ст.Таск_ID+ ")", 0);									
								
						// если заполнен ContainerPickerTask, то необходимо проверить соответствует ли рассчитанная фаза, фазе из ContainerPickerTask 		
						Иначе
							Если ЗначениеЗаполнено(ContainerPickerTask.Instance)   
								И ContainerPickerTask.Instance <>  ст.Таск.Instance Тогда  
								
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									ТекстШаблона+" -> Task Instance ("+ст.Таск.Instance+") is not equal to the Container Picker task instance ("+ContainerPickerTask.Instance+")", 0);
							Иначе
								ContainerPickerTaskФаза = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий,ст.Таск_IDOWS);	
								
								Если ЗначениеЗаполнено(ContainerPickerTaskФаза)
									И ContainerPickerTaskФаза <> Фаза Тогда 
									
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									ТекстШаблона+" -> Phase Task ("+Фаза+") is not equal to the Phase of Container Picker task ("+ContainerPickerTaskФаза+")", 0);
								КонецЕсли;	
							КонецЕсли; //ЗначениеЗаполнено(ContainerPickerTask.Instance)
						КонецЕсли; //ЗначениеЗаполнено(ПроектОценка)	
					КонецЕсли; //Если ЗначениеЗаполнено(ContainerPickerTask)	
				КонецЕсли; //Если ЗначениеЗаполнено(ст.Таск)
				//--OW Копачев А.С. 21.04.2021 ONEC-6650
			КонецЕсли; //Если ЗначениеЗаполнено(Фаза)			
						
			
	//---------------------- - проверки на заполненность полей (конец) ----------------------			

//***************************************************************   Requester + NO ID_Sync  ***************************************************************				
		//1C Sync ID НЕ заполнен
		ИначеЕсли ЗначениеЗаполнено(ст.Реквестер) Тогда
			//есть ли мэппинг фазы по реквестеру
			Фаза = РегистрыСведений.СоответствиеКлиентовИСаппортныхФаз.ПолучитьСаппортнуюФазу(ст.КонфигурацияЛицензий, ст.Период, ст.Реквестер);
			//пытаемся еще раз определить партнера  //Лена, подтвердила, что делаем так (2020.01.29)
			Если ЗначениеЗаполнено(Фаза) Тогда
				ст.Партнер = Фаза.Партнер;
				ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
			КонецЕсли;		

			//Is there mapping to phase per requester?
			ТекстШаблона = Источник + " -> 1C Sync ID not filled -> Task ID (" +ст.Таск_ID+ ") -> Requester (" +ст.Реквестер+ ")";
			
			//+ OW Курбатова А.А. 2020/01/27 временная вставка для доопределения BA, пока из JIRA не возвращается ID_Sync по BA 
			Если НЕ ЗначениеЗаполнено(Фаза) Тогда					
				ИспользоватьДоопределениеBA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьДоопределениеBA);
				Если ИспользоватьДоопределениеBA = Истина Тогда 
					Если НЕ ПустаяСтрока(ст.Таск_ID) И НЕ ЗначениеЗаполнено(ст.Проект) Тогда 					
						//+ OW Курбатова А.А. 2020/01/03 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5233	 
						КодТаски = ОпределитьПроектПоНомеруЗадачи(ст.Таск_ID); 
						BusinessAnalysis = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.РеквестерJIRA_BusinessAnalysis);
						Если КодТаски = "BA" И ст.Реквестер = BusinessAnalysis Тогда 	
							//++OW Копачев А.С. 08.04.2022 ONEC-7464
							//Фаза = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_ID);   
							КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_ID, ИнстансJIRA);
							Фаза = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
							//--OW Копачев А.С. 08.04.2022 ONEC-7464
						КонецЕсли; 
						//- OW Курбатова А.А. 2020/01/03 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5233		
					КонецЕсли;
				КонецЕсли; //ИспользоватьДоопределениеBA	
			КонецЕсли; //НЕ ЗначениеЗаполнено(Фаза)	
			//- OW Курбатова А.А. 2020/01/27 временная вставка для доопределения BA, пока из JIRA не возвращается ID_Sync по BA
			
			//++OW Копачев А.С. 04.10.2021 ONEC-7049
			// фаза по ContainerPicker более приоритетная перед фазой, найденной по дереву
			
			////++OW Копачев А.С. 05.04.2021 ONEC-6677 
			//Если НЕ ЗначениеЗаполнено(Фаза) Тогда
			//	// доопределение фазы по Container picker 
			//	Фаза = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий);										
			//КонецЕсли;
			////--OW Копачев А.С. 05.04.2021 ONEC-6677
			
			ContainerPickerTask = ст.Таск.ContainerPickerTask;	
			Если ЗначениеЗаполнено(ContainerPickerTask) Тогда
				ФазаContainerPicker = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий,ст.Таск_IDOWS);
				Если ЗначениеЗаполнено(ФазаContainerPicker) Тогда 
					ТекстШаблона = ТекстШаблона + " -> Container picker (" + ContainerPickerTask + ")"; 
					
					Фаза = ФазаContainerPicker; 	
				КонецЕсли;	
			КонецЕсли;	
			//--OW Копачев А.С. 04.10.2021 ONEC-7049
			
			
			Если ЗначениеЗаполнено(Фаза) Тогда
				ст.Партнер = Фаза.Партнер;
				ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;	
			Иначе	
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					ТекстШаблона + " -> NO 1C Phase", 0, 1);										
			КонецЕсли;		
//---------------------- + проверки на заполненность полей ----------------------				
			//Проверяем что партнер (ссылка) заполнен
			Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда //клиент не заполнен
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						ТекстШаблона + " -> NO 1С customer", 0);
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						ТекстШаблона + " -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда	
			Иначе // клиент заполнен			
				//Проверяем что инстанс заполнен				
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						"[1C Team] "+ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
			КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда						
			// Employee is found in 1C
			Сотрудник = ПолучитьСотрудникаПоПользователюНаПериод(ст.ПользовательСсылка, ст.Период);	
			Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					ТекстШаблона + " -> User is filled (" +ст.Пользователь+ ") -> No 1C employee", 1);
			КонецЕсли;
			//проверяем удалена ли фаза
			Если ЗначениеЗаполнено(Фаза) Тогда			
				Если Фаза.ПометкаУдаления Тогда //Phase is found and deleted
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						 ТекстШаблона + " -> 1C phase is deleted", 0);
				КонецЕсли;	
				//Contract/s linked with phase via budget record is not closed 
				Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
					Если ПостингПоЗакрытымКонтрактам(Фаза, ст.Период) Тогда
		   				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Contract/s linked with phase via budget record is closed", 0);
					КонецЕсли;
				КонецЕсли;
							
				//++OW Копачев А.С. 21.04.2021 ONEC-6650 
				// если заполнен ContainerPickerTask, то необходимо проверить соответствует ли рассчитанная фаза, фазе из ContainerPickerTask 
				Если ЗначениеЗаполнено(ст.Таск) Тогда 
					ContainerPickerTask = ст.Таск.ContainerPickerTask;	
					Если ЗначениеЗаполнено(ContainerPickerTask) Тогда 
						Если ЗначениеЗаполнено(ContainerPickerTask.Instance)   
							И ContainerPickerTask.Instance <>  ст.Таск.Instance Тогда  
							
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								ТекстШаблона+" -> Task Instance ("+ст.Таск.Instance+") is not equal to the Container Picker task instance ("+ContainerPickerTask.Instance+")", 0);
						Иначе
							ContainerPickerTaskФаза = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий,ст.Таск_IDOWS);	
							
							Если ЗначениеЗаполнено(ContainerPickerTaskФаза)
								И ContainerPickerTaskФаза <> Фаза Тогда 
								
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								ТекстШаблона+" -> Phase Task ("+Фаза+") is not equal to the Phase of Container Picker task ("+ContainerPickerTaskФаза+")", 0);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
				//--OW Копачев А.С. 21.04.2021 ONEC-6650
				
			КонецЕсли; //Если ЗначениеЗаполнено(Фаза) Тогда	
//---------------------- - проверки на заполненность полей ----------------------

//***************************************************************   NO ID_Sync + NO ст.Реквестер  ***************************************************************				
		Иначе //1C Sync ID и Реквестер не заполнен	
			
			ТекстШаблона = Источник+" -> 1C Sync ID not filled -> Task ID (" +ст.Таск_ID+ ")";
				
			ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(ст.Таск_ID); //определяем проект по номеру Таск_ID

			//проверяем есть ли соответствие JIRA проекта для фазы
			
			//+ OW Курбатова А.А. 2020/01/27 временная вставка для доопределения BA, пока из JIRA не возвращается ID_Sync по BA 
			ИспользоватьДоопределениеBA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьДоопределениеBA);
			//- OW Курбатова А.А. 2020/01/27 временная вставка для доопределения BA, пока из JIRA не возвращается ID_Sync по BA 

			//+++ Брук Б 22.01.2020 ONEC-5188
			//Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
			Сотрудник = ПолучитьСотрудникаПоПользователюНаПериод(ст.ПользовательСсылка, ст.Период);
			//--- Брук Б 22.01.2020 ONEC-5188
			ОрганизацияСотрудника = Сотрудник.OW_Организация;
			
			//++OW Копачев А.С. 09.04.2020 ONEC-5483 
			ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам) = Истина;										
			Если ИспользоватьНовыйМеханизмРазложенияПостингаПоКомпонентам Тогда				
				
				МассивКомпонентJIRA = Новый Массив;
				
				Если ЗначениеЗаполнено(ст.Таск) Тогда 
					
					ТаскКомпонентыJIRA = ст.Таск.Components;
					Для Каждого ТекСтрокаТаскКомпонентыJIRA Из ТаскКомпонентыJIRA Цикл 
						МассивКомпонентJIRA.Добавить(ТекСтрокаТаскКомпонентыJIRA.Component);	
					КонецЦикла;	
					
					//++OW Копачев А.С. 29.01.2021 ONEC-6449 
					// для определенного проекта в компоненты добавляется еще данные из поля "CustomerRequestType"  
					Если ст.Таск.Project = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_GSBOX) Тогда 
						Если ЗначениеЗаполнено(ст.Таск.RequestType) Тогда 
						    НазваниеКомпоненты = Строка(ст.Таск.RequestType) + " (" + ст.Таск.Project + ")";
							ComponentаСсылка = ПолучитьСоздатьЭлементСправочника("OW_Component", НазваниеКомпоненты);
							Если ЗначениеЗаполнено(ComponentаСсылка) Тогда 
								МассивКомпонентJIRA.Добавить(ComponentаСсылка);
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
					//--OW Копачев А.С. 29.01.2021 ONEC-6449
				КонецЕсли; //ЗначениеЗаполнено(ст.Таск)
				// добавим для поиска пустую Component
				МассивКомпонентJIRA.Добавить(Справочники.OW_Component.ПустаяСсылка());
				
				ФазаПоПроектуJIRA = ПолучитьФазуПроектаПоКомпонентамJIRA(ПроектJIRA, ст.Период, МассивКомпонентJIRA);
				//--OW Копачев А.С. 10.11.2020 ONEC-6178
			Иначе 
			//--OW Копачев А.С. 09.04.2020 ONEC-5483			
				ФазаПоПроектуJIRA = РегистрыСведений.СоответствиеФазИПроектовJIRA.НайтиФазуДляПроектаJIRA_ДополнительныеПараметры(ПроектJIRA, ст.Период, Источник, ОрганизацияСотрудника);                          
			КонецЕсли;
			
			//is there Mapping Project to Phase? (YES)
			Если ЗначениеЗаполнено(ФазаПоПроектуJIRA) Тогда
				Фаза = ФазаПоПроектуJIRA;
			Иначе					
				//is there Mapping Project to Phase? (NO)
				//нет соответствия JIRA проекта для фазы
				//+ OW Курбатова А.А. 2020/01/27 временная вставка для доопределения BA, пока из JIRA не возвращается ID_Sync по BA 
				Если  ИспользоватьДоопределениеBA = Истина Тогда 
					//++OW Копачев А.С. 29.11.2019 ONEC-4099
					МассивПроектов_BA_SSA = ПроектыJIRA_BA_SSA(); 
					МассивПроектов_BA_SSAСтрокой = Новый Массив;
					Для Каждого Проект_BA_SSA Из МассивПроектов_BA_SSA Цикл
						МассивПроектов_BA_SSAСтрокой.Добавить(Проект_BA_SSA.Код); 	
					КонецЦикла;
					// проекты "BA" через Жиру СПБ 
					//Если ПроектJIRA = "BA" Тогда
					Если МассивПроектов_BA_SSAСтрокой.Найти(ПроектJIRA) <> Неопределено Тогда 
						//++OW Копачев А.С. 08.04.2022 ONEC-7464
						//Фаза = Справочники.ЗадачиМаркетинговыхПроектов.НайтиПоРеквизиту("ЗадачаJIRA_BA", ст.Таск_ID); 
						КодИнтеграцииJIRA = JIRA.ПолучитьКодИнтеграции_JIRA(ст.Таск_ID, ИнстансJIRA);
						Фаза = JIRA.ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA);
						//--OW Копачев А.С. 08.04.2022 ONEC-7464
					КонецЕсли; 
					//--OW Копачев А.С. 29.11.2019 ONEC-4099
				КонецЕсли; //Если  ИспользоватьДоопределениеBA = Истина Тогда 
				
			//++OW Копачев А.С. 04.10.2021 ONEC-7049
			КонецЕсли; //ЗначениеЗаполнено(ФазаПоПроектуJIRA)
		
			// фаза по ContainerPicker более приоритетная перед фазой, найденной по дереву
			
			////++OW Копачев А.С. 05.04.2021 ONEC-6677 
			//Если НЕ ЗначениеЗаполнено(Фаза) Тогда
			// доопределение фазы по Container picker 
			//	Фаза = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий);										
			//КонецЕсли;
			//////--OW Копачев А.С. 05.04.2021 ONEC-6677
			
			ContainerPickerTask = ст.Таск.ContainerPickerTask;	
			Если ЗначениеЗаполнено(ContainerPickerTask) Тогда
				ФазаContainerPicker = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий,ст.Таск_IDOWS);
				Если ЗначениеЗаполнено(ФазаContainerPicker) Тогда 
					ТекстШаблона = ТекстШаблона + " -> Container picker (" + ContainerPickerTask + ")"; 
					
					Фаза = ФазаContainerPicker; 	
				КонецЕсли;	
			КонецЕсли;	
			//--OW Копачев А.С. 04.10.2021 ONEC-7049
			
			//++OW Копачев А.С. 05.04.2021 ONEC-6677 		
			//пытаемся еще раз определить партнера  //Лена, подтвердила, что делаем так (2020.01.29)
			Если ЗначениеЗаполнено(Фаза) Тогда
				ст.Партнер = Фаза.Партнер;
				ст.КонфигурацияЛицензий = Фаза.КонфигурацияЛицензий;
			Иначе
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					Источник+" -> Jira space not mapped to 1C phase -> NO 1C phase", 0, 1);	
			КонецЕсли;		
			//--OW Копачев А.С. 05.04.2021 ONEC-6677
					
//---------------------- + проверки на заполненность полей ----------------------				
			//Проверяем что партнер (ссылка) заполнен
			Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда //клиент не заполнен
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					ТекстШаблона + " -> NO 1С customer", 0);	
				//Проверяем что инстанс заполнен				
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						ТекстШаблона + " -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
			Иначе	//клиент заполнен		
				//Проверяем что инстанс заполнен				
				Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						"[1C Team] "+ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> NO instance ID", 0);										
				Иначе  //проверяем что инстанс не помечен на удаление
					Если ст.КонфигурацияЛицензий.ПометкаУдаления Тогда //Instance is found and not deleted
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Client is filled (" +ст.Партнер+ ") -> Instance (" +ст.КонфигурацияЛицензий+ ") -> 1C instance is deleted", 0);
					КонецЕсли;	
				КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.КонфигурацияЛицензий) Тогда
			КонецЕсли; //Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда			
			
			// Employee is found in 1C
			Сотрудник = ПолучитьСотрудникаПоПользователюНаПериод(ст.ПользовательСсылка, ст.Период);	
			Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
					ТекстШаблона + " -> User is filled (" +ст.Пользователь+ ") -> NO 1C employee", 1);
			КонецЕсли;
			
			//проверяем удалена ли фаза
			Если ЗначениеЗаполнено(Фаза) Тогда			
				Если Фаза.ПометкаУдаления Тогда //Phase is found and deleted
					ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
						ТекстШаблона + " -> 1C phase is deleted", 0);
				КонецЕсли;	
				//Contract/s linked with phase via budget record is not closed 
				Если ТипЗнч(Фаза) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
					Если ПостингПоЗакрытымКонтрактам(Фаза, ст.Период) Тогда
		   				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							ТекстШаблона + " -> Contract/s linked with phase via budget record is closed", 0);
					КонецЕсли;
				КонецЕсли;
				
				//++OW Копачев А.С. 21.04.2021 ONEC-6650 
				// если заполнен ContainerPickerTask, то необходимо проверить соответствует ли рассчитанная фаза, фазе из ContainerPickerTask 
				Если ЗначениеЗаполнено(ст.Таск) Тогда 
					ContainerPickerTask = ст.Таск.ContainerPickerTask;	
					Если ЗначениеЗаполнено(ContainerPickerTask) Тогда 
						Если ЗначениеЗаполнено(ContainerPickerTask.Instance)   
							И ContainerPickerTask.Instance <>  ст.Таск.Instance Тогда  
							
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								ТекстШаблона+" -> Task Instance ("+ст.Таск.Instance+") is not equal to the Container Picker task instance ("+ContainerPickerTask.Instance+")", 0);
						Иначе
							ContainerPickerTaskФаза = ПолучитьФазуПоContainerPickerTask(ст.Таск, ст.Период, ст.КонфигурацияЛицензий,ст.Таск_IDOWS);	
							
							Если ЗначениеЗаполнено(ContainerPickerTaskФаза)
								И ContainerPickerTaskФаза <> Фаза Тогда 
								
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
								ТекстШаблона+" -> Phase Task ("+Фаза+") is not equal to the Phase of Container Picker task ("+ContainerPickerTaskФаза+")", 0);
							КонецЕсли;	
						КонецЕсли;	//ЗначениеЗаполнено(ContainerPickerTask.Instance)	
					КонецЕсли;	//Если ЗначениеЗаполнено(ContainerPickerTask)	
				КонецЕсли;	//Если ЗначениеЗаполнено(ст.Таск)
				//--OW Копачев А.С. 21.04.2021 ONEC-6650
			КонецЕсли;	//Если ЗначениеЗаполнено(Фаза) Тогда	
//---------------------- - проверки на заполненность полей ----------------------
			
		КонецЕсли;	//Если ЗначениеЗаполнено(ст.ID_Sync) 
							
	Возврат Фаза;

КонецФункции

//+++ 22.01.2020 ONEC-5188
Функция ПолучитьСотрудникаПоПользователюНаПериод(Пользователь, Период)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.ОсновнойДокумент КАК ОсновнойДокумент,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаПриема КАК ДатаПриема,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.Организация КАК Организация,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.Сотрудник КАК Сотрудник,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.Пользователь КАК Пользователь,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	                      |	СвязьСотрудникаСКомпаниямиСрезПоследних.Процент КАК Процент
	                      |ПОМЕСТИТЬ ВТ_СотрудникиПолныеДанные
	                      |ИЗ
	                      |	РегистрСведений.СвязьСотрудникаСКомпаниями.СрезПоследних(&ТекущаяДата, ) КАК СвязьСотрудникаСКомпаниямиСрезПоследних
	                      |ГДЕ
	                      |	НЕ СвязьСотрудникаСКомпаниямиСрезПоследних.НеИспользовать
	                      |	И СвязьСотрудникаСКомпаниямиСрезПоследних.Пользователь = &Пользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_СотрудникиПолныеДанные.Пользователь,
	                      |	МАКСИМУМ(ВТ_СотрудникиПолныеДанные.ОсновнойДокумент.Дата) КАК ОсновнойДокументДата
	                      |ПОМЕСТИТЬ ВТ_ДатаМакcДокумента
	                      |ИЗ
	                      |	ВТ_СотрудникиПолныеДанные КАК ВТ_СотрудникиПолныеДанные
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_СотрудникиПолныеДанные.Пользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ДатаМакcДокумента.Пользователь,
	                      |	ВТ_СотрудникиПолныеДанные.ДатаПриема,
	                      |	ВТ_СотрудникиПолныеДанные.Организация,
	                      |	ВТ_СотрудникиПолныеДанные.Сотрудник,
	                      |	ВТ_СотрудникиПолныеДанные.ДатаОкончания
	                      |ПОМЕСТИТЬ ВТ_Сотрудники
	                      |ИЗ
	                      |	ВТ_ДатаМакcДокумента КАК ВТ_ДатаМакcДокумента
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СотрудникиПолныеДанные КАК ВТ_СотрудникиПолныеДанные
	                      |		ПО ВТ_ДатаМакcДокумента.ОсновнойДокументДата = ВТ_СотрудникиПолныеДанные.ОсновнойДокумент.Дата
	                      |			И ВТ_ДатаМакcДокумента.Пользователь = ВТ_СотрудникиПолныеДанные.Пользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_Сотрудники.Сотрудник
	                      |ИЗ
	                      |	ВТ_Сотрудники КАК ВТ_Сотрудники
	                      |ГДЕ
	                      |	&ДатаОтчета МЕЖДУ ВТ_Сотрудники.ДатаПриема И ВТ_Сотрудники.ДатаОкончания");
								
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаОтчета", Период);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции	

Функция ПостингПоЗакрытымКонтрактам(Фаза, ДатаПостинга) 
		
	Результат = Истина;

	ПроектВерхнегоУровня = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза, "ПроектВерхнегоУровня");
	
	//+ OW Курбатова А.А 2020/01/25 ONEC-5188
	//Если ЗначениеЗаполнено(ПроектВерхнегоУровня) Тогда 
	//	 		
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	БюджетнаяЗапись.СоглашениеИсточник
	//		|ИЗ
	//		|	Документ.БюджетнаяЗапись КАК БюджетнаяЗапись
	//		|ГДЕ
	//		|	БюджетнаяЗапись.ПроектПолучатель = &ПроектПолучатель
	//		| 	И НЕ БюджетнаяЗапись.СоглашениеИсточник.СтатусСоглашения = Значение(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)";
	//	
	//	Запрос.УстановитьПараметр("ПроектПолучатель", ПроектВерхнегоУровня);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если РезультатЗапроса.Пустой() Тогда
	//		//Нет соглашений с клиентом в статусе не "Закрыто"
	//		Результат = Истина;
	//	Иначе
	//		//Есть хотя бы одно соглашение в статусе не "Закрыто"
	//		Результат = Ложь;
	//	КонецЕсли;
	//			
	//КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПроектВерхнегоУровня) Тогда 
		 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА БюджетнаяЗапись.СоглашениеИсточник = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.пустаяссылка)
			|			ТОГДА БюджетнаяЗапись.ЗаказИсточник.Соглашение
			|		ИНАЧЕ БюджетнаяЗапись.СоглашениеИсточник
			|	КОНЕЦ КАК СоглашениеИсточник
			|ПОМЕСТИТЬ ВТ_1
			|ИЗ
			|	Документ.БюджетнаяЗапись КАК БюджетнаяЗапись
			|ГДЕ
			|	БюджетнаяЗапись.ПроектПолучатель = &ПроектПолучатель
			|	И БюджетнаяЗапись.Проведен
			|	И БюджетнаяЗапись.ЗаказИсточник ССЫЛКА Документ.ЗаказКлиента
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА БюджетнаяЗапись.СоглашениеИсточник = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.пустаяссылка)
			|			ТОГДА БюджетнаяЗапись.ЗаказИсточник.Соглашение
			|		ИНАЧЕ БюджетнаяЗапись.СоглашениеИсточник
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_1.СоглашениеИсточник
			|ПОМЕСТИТЬ ВТ_2
			|ИЗ
			|	ВТ_1 КАК ВТ_1
			|ГДЕ
			|	(НЕ ВТ_1.СоглашениеИсточник.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
			|			ИЛИ ВЫБОР
			|					КОГДА ЕСТЬNULL(ВТ_1.СоглашениеИсточник.ДатаЗакрытияДляВзаиморасчетов, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ВТ_1.СоглашениеИсточник.ДатаЗакрытияДляВзаиморасчетов >= &ДатаПостинга
			|				КОНЕЦ
			|				И ВТ_1.СоглашениеИсточник.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_2.СоглашениеИсточник
			|ИЗ
			|	ВТ_2 КАК ВТ_2
			|ГДЕ
			|	НЕ ВТ_2.СоглашениеИсточник ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_1.СоглашениеИсточник
			|ИЗ
			|	ВТ_1 КАК ВТ_1
			|ГДЕ
			|	НЕ ВТ_1.СоглашениеИсточник ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ПроектПолучатель", ПроектВерхнегоУровня);
		Запрос.УстановитьПараметр("ДатаПостинга", ДатаПостинга);
		ПакетыЗапроса = Запрос.ВыполнитьПакет();
		
		РезультатЗапроса = ПакетыЗапроса[2].Пустой();
		ПроверкаНаКонтракты =  ПакетыЗапроса[3].Пустой();
		
		Если РезультатЗапроса Тогда
			Если ПроверкаНаКонтракты Тогда   //нет соглашения или нет бюджетной записи
				Результат = Ложь;
			Иначе
				//Соглашения с клиентом в статусе "Закрыто"
				Результат = Истина; //дата закрытия фазы меньше даты постинга, постирование по закрытому контракту	
			КонецЕсли;	
		Иначе
			//Есть бюджетные записи, в них есть соглашения и хотя бы одно соглашение в статусе не "Закрыто"
			// или хотя бы у одного соглашения дата закрытия в будущем
			Результат = Ложь;
		КонецЕсли;			
	КонецЕсли;
	//- OW Курбатова А.А 2020/01/25 ONEC-5188
	
	Возврат Результат;
	
КонецФункции
//--- 22.01.2020 ONEC-5188

Процедура ОпределениеМарингоИдПоСтрокеПостинга(ст, тзОшибокОпределенияФазПоПостингу, Источник) Экспорт
	//+ Пилюгин В.Е. 28.06.2018
	Если ЗначениеЗаполнено(ст.Проект) Тогда
		Фаза = ст.Проект;
		//Маринго ID у фазы НЕ заполнен
		Если Фаза.CodeSAP = 0 Тогда			
			//Партнер (ссылка) не заполнен
			Если НЕ ЗначениеЗаполнено(ст.Партнер) Тогда
				ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
							"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> NO 1С customer");
			Иначе 
				//Партнер в списке регионов
				Если ПартнерВСпискеБизнесРегионовOWI(ст.Партнер) Тогда
					КодФазыМаринго = SAP_МодульНаСервере.ПолучитьКодФазыBAДляМарингоПоКлиенту(ст.Партнер, ст.Период);
					//Есть маппинг BA фазы для клиента
					Если ЗначениеЗаполнено(КодФазыМаринго) Тогда
						МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
						//Маринго ID юзера заполнен	
						Если ЗначениеЗаполнено(МарингоID_юзер) Тогда
							//в фазу записываем Маринго ID
							ФазаОбъект = Фаза.ПолучитьОбъект();
							ФазаОбъект.CodeSAP = Число(КодФазыМаринго);
							ФазаОбъект.Записать();
						//Маринго ID юзера не заполнен	
						Иначе	
							ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> Customer in list (ME, EU, Asia, Lost, Internal) -> " +
									" Customer mapped to MPID in BA table -> NO EMID for user (" + ст.ПользовательСсылка + ")");										
						КонецЕсли;
					//Нет маппинга BA фазы для клиента
					Иначе
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									Источник+" -> BA -> Found Phase reference -> MPID not filled -> Customer in list (ME, EU, Asia, Lost, Internal) -> Customer NOT mapped to MPID in BA table");
					КонецЕсли; 
				//Партнер НЕ в списке регионов
				Иначе
					Сотрудник = OW.ПолучитьСотрудникаПоПользователю(ст.ПользовательСсылка);
					//Сотрудник НЕ найден
					Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
						ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
									"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> Customer not in list (ME, EU, Asia, Lost, Internal) -> " +
									" No 1C Employee");										
					//Сотрудник найден
					Иначе
						
						Регион = OW.ПолучитьРегионПоСотруднику(Сотрудник);
						СписокБизнесРегионовRUSCIS = OW.ПолучитьСписокБизнесРегионов_RUSCIS(Истина);
						//Регион сотрудника НЕ Россия и НЕ пустой  
						Если НЕ (СписокБизнесРегионовRUSCIS.НайтиПоЗначению(Регион) <> Неопределено ИЛИ НЕ ЗначениеЗаполнено(Регион))  Тогда
							Если ст.Партнер.БизнесРегион = Справочники.БизнесРегионы.OpenWay Тогда
								ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
										"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> " +
										"Customer not in list (ME, EU, Asia, Lost, Internal) -> Employee region not Rus&CIS and not empty -> Customer is Openway");	
							Иначе
								МарингоID_юзер = SAP_МодульНаСервере.ПолучитьМарингоIdПользователя(ст.ПользовательСсылка);
								//Маринго ID юзера заполнен	
								Если ЗначениеЗаполнено(МарингоID_юзер) Тогда
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
											"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> " +
											"Customer not in list (ME, EU, Asia, Lost, Internal) -> Employee region not Rus&CIS and not empty -> EMID for user (" +
											ст.ПользовательСсылка + ")=" + Строка(МарингоID_юзер));	
								//Маринго ID юзера НЕ заполнен	
								Иначе
									ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
											"[1C Team] "+Источник+" -> BA -> Found Phase reference -> MPID not filled -> " +
											"Customer not in list (ME, EU, Asia, Lost, Internal) -> Employee region not Rus&CIS and not empty -> NO EMID for user (" + ст.ПользовательСсылка + ")");	
								КонецЕсли;
							КонецЕсли;
						Иначе
							//Регион сотрудника RUS/CIS или пустой  
							//ничего не делаем			
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;			
		//Маринго ID у фазы заполнен
		Иначе
			//ничего не делаем	
		КонецЕсли; 
	Иначе
		ДобавитьОшибкуОпределенияФазПоПостингу(тзОшибокОпределенияФазПоПостингу, ст,
			Источник+" -> BA -> NOT found Phase reference");										
	КонецЕсли; 
	
	//- Пилюгин В.Е. 28.06.2018
КонецПроцедуры

Функция СодержитCorrespondence(с)
	//+ Пилюгин В.Е. 23.05.2018		отвратительный костыль по требованиям пользователей
	Содержит = Ложь;
	с1="";
	с1 = нРег(с); 	
	Если СтрНайти(с1, "correspondence") > 0 ИЛИ СтрНайти(с1, "сorrespondence") > 0 ИЛИ СтрНайти(с1, "соrrespondence") > 0 Тогда
		Содержит = Истина;
	ИначеЕсли СтрНайти(с1, "correspondense") > 0 ИЛИ СтрНайти(с1, "сorrespondense") > 0 ИЛИ СтрНайти(с1, "соrrespondense") > 0 Тогда
		Содержит = Истина;
	ИначеЕсли СтрНайти(с1, "correpsondance") > 0 ИЛИ СтрНайти(с1, "сorrepsondance") > 0 ИЛИ СтрНайти(с1, "соrrepsondance") > 0 Тогда
		Содержит = Истина;
	ИначеЕсли СтрНайти(с1, "corespondence") > 0 ИЛИ СтрНайти(с1, "сorespondence") > 0 ИЛИ СтрНайти(с1, "соrespondence") > 0 Тогда
		Содержит = Истина;
	ИначеЕсли СтрНайти(с1, "correspondance") > 0 ИЛИ СтрНайти(с1, "сorrespondance") > 0 ИЛИ СтрНайти(с1, "соrrespondance") > 0 Тогда
		Содержит = Истина;
	КонецЕсли;  
	Возврат Содержит;
	//- Пилюгин В.Е. 23.05.2018		
КонецФункции

Функция ЭтоSupport(Реквестер, Источник) 
	//+ Пилюгин В.Е. 18.05.2018
	//Если Источник = "JIRA.SPB" ИЛИ Источник = "OWS-JIRA" Тогда
		//++OW Копачев А.С. 06.03.2019 ONEC-4340
		//Саппорт = Реквестер = Справочники.РеквестерПостингJIRA.НайтиПоНаименованию("Support");
		ЭлементыSupportJIRA = Справочники.РеквестерПостингJIRA.ПолучитьЭлементыSupportJIRA();
		Саппорт = OW_ОбщегоНазначенияКлиентСервер.НайтиВСписке(ЭлементыSupportJIRA, Реквестер) <> Неопределено;
		//--OW Копачев А.С. 06.03.2019 ONEC-4340	
	//ИначеЕсли Источник = "CRM" Тогда
	//	Если 
	//		 Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Maintenance") ИЛИ 
	//		 Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Support Consulting") ИЛИ
	//		 Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Internal CDT Support") ИЛИ
	//		 //Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Internal Support") ИЛИ
	//		 Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Upgrade") ИЛИ
	//		 Реквестер = Справочники.WorkTypeCRM.НайтиПоНаименованию("Support SM") Тогда
	//		
	//		Саппорт = Истина;
	//	Иначе
	//		Саппорт = Ложь;	
	//	КонецЕсли; 	
	//КонецЕсли;
	Возврат Саппорт;
	//- Пилюгин В.Е. 18.05.2018
КонецФункции

// Параметры:
//ГруппировкаОшибки: 0 - по партнерам, 1 - по пользователям
//КатегорияОшибки: 0 - оповещения, 1 - критическая
Процедура ДобавитьОшибкуОпределенияФазПоПостингу(тз, ст, Ошибка, ГруппировкаОшибки = 0, КатегорияОшибки = 0)
	//+ Пилюгин В.Е. 16.05.2018
	нОшибка 			= тз.Добавить();
	нОшибка.Дата 		= ст.Период;
	нОшибка.Партнер 	= ст.ПартнерСтрокой;
	нОшибка.ТаскID 		= ст.Таск_ID;
	нОшибка.MD 			= ст.MD;
	нОшибка.Количество 	= 1;
	нОшибка.Ошибка 		= Ошибка;
	//+ OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	нОшибка.Таск_IDOWS=ст.Таск_IDOWS;
	//Попытка
	//	нОшибка.Таск_IDOWS=ст.Таск_IDOWS;
	//Исключение
	//КонецПопытки;
	нОшибка.Пользователь=ст.Пользователь;
	//- OW Курбатова А.А. 2020/02/10  https://ows-jira.spb.openwaygroup.com/browse/ONEC-5349
	//+ OW Курбатова А.А. 2020/04/28 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5595
	нОшибка.ПользовательСсылка=ст.ПользовательСсылка;
	//- OW Курбатова А.А. 2020/04/28 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5595
	
	//++OW Копачев А.С. 12.10.2021 ONEC-6569 
	нОшибка.ГруппировкаОшибки = ГруппировкаОшибки; 	// 0 - по партнерам, 1 - по пользователям
	нОшибка.КатегорияОшибки = КатегорияОшибки;		// 0 - оповещения, 1 - критическая
	//--OW Копачев А.С. 12.10.2021 ONEC-6569

	//- Пилюгин В.Е. 16.05.2018
КонецПроцедуры

Процедура ДобавитьОшибкуОпределенияКомандыПоПостингу(тз, Ошибка, Пользователь, НаДату, Таск, Фаза)
	//++OW Копачев А.С. 08.07.2021 ONEC-6864 
	Если тз = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	нОшибка 			= тз.Добавить();
	нОшибка.Дата 		= НаДату;
	нОшибка.ТаскID 		= Таск.Код;
	нОшибка.Количество 	= 1;
	нОшибка.Ошибка 		= Ошибка;
	нОшибка.Пользователь=Пользователь;
	нОшибка.Фаза=Фаза;
	//--OW Копачев А.С. 08.07.2021 ONEC-6864
КонецПроцедуры

Процедура ДобавитьОшибкуОпределенияКлиентаПоПостингу(тз, Ошибка, Пользователь, НаДату, Таск, Фаза)
	//++OW Копачев А.С. 21.04.2022 ONEC-7464 
	Если тз = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	нОшибка 			= тз.Добавить();
	нОшибка.Дата 		= НаДату;
	нОшибка.ТаскID 		= Таск.Код;
	нОшибка.Количество 	= 1;
	нОшибка.Ошибка 		= Ошибка;
	нОшибка.Пользователь=Пользователь;
	нОшибка.Фаза=Фаза;
	//--OW Копачев А.С. 21.04.2022 ONEC-7464
КонецПроцедуры

Функция ПартнерВСпискеБизнесРегионовOWI(Партнер)
	//+ Пилюгин В.Е. 16.05.2018
	Возврат Партнер.БизнесРегион = Справочники.БизнесРегионы.MiddleEast ИЛИ
			Партнер.БизнесРегион = Справочники.БизнесРегионы.Europe ИЛИ
			Партнер.БизнесРегион = Справочники.БизнесРегионы.Asia ИЛИ
			Партнер.БизнесРегион = Справочники.БизнесРегионы.Lost ИЛИ
			Партнер.БизнесРегион = Справочники.БизнесРегионы.Internal;
	//- Пилюгин В.Е. 16.05.2018		
КонецФункции
         
Процедура ЗаписьДанныхПостингаJIRAВРегистр(Знач тз, ДатаНачала, ДатаОкончания, ИнстансJIRA) 
	//+ Пилюгин В.Е. 15.05.2018	
	ИмяРегистаПостинга = ИмяРегистаПостингаПоИнстансуJIRA(ИнстансJIRA);	 
	РегистрПостинг = РегистрыСведений[ИмяРегистаПостинга];	 	
	
	//++OW Копачев А.С. 06.02.2020 ONEC-5350 
	// Перед записью в регистр свернем загружаемые данные в таблице, чтобы задублированные
	Попытка
		КолонкиГруппировки = "Период";
		КолонкиСуммирования = "";
		
		// измерения регистра используем группировки
		ИзмеренияРегистра = Метаданные.РегистрыСведений[ИмяРегистаПостинга].Измерения;
		Для Каждого ТекИзмерение Из ИзмеренияРегистра Цикл
			ИмяИзмерения = ТекИзмерение.Имя;
			Если тз.Колонки.Найти(ИмяИзмерения) <> Неопределено Тогда 
				КолонкиГруппировки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(КолонкиГруппировки, ИмяИзмерения, ",");	
			КонецЕсли;					
		КонецЦикла;
		
		// ресурсы регистра используем как колонки суммирования
		РесурсыРегистра = Метаданные.РегистрыСведений[ИмяРегистаПостинга].Ресурсы;
		Для Каждого ТекРесурс Из РесурсыРегистра Цикл
			ИмяРесурса = ТекРесурс.Имя;
			Если тз.Колонки.Найти(ИмяРесурса) <> Неопределено Тогда 
				КолонкиСуммирования = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(КолонкиСуммирования, ИмяРесурса, ",");	
			КонецЕсли;						
		КонецЦикла;
		
		тз.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	Исключение
		OW_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка группироваки таблицы. Подробности: " + ОписаниеОшибки());	
	КонецПопытки;	
	//--OW Копачев А.С. 06.02.2020 ONEC-5350
	
	//++OW Копачев А.С. 29.03.2022 ONEC-7464
	СписокЗначенийКонфигурацийЛицензийИсключенийДляЗагрузкиПостинга = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.КонфигурацииЛицензийБезЗагрузкиПостингаJIRASPB);
	
	ЭтоПостингаИнстансаJiraSpb = ЭтоИнстансJiraSpb(ИнстансJIRA);
	ИспользоватьРазделениеПоБизнесРегионамJIRASPB = JIRA.ИспользоватьРазделениеПоБизнесРегионамJIRASPB();
	ЭтоПостингаИнстансаJiraOWS = ЭтоИнстансJiraOws(ИнстансJIRA);
	ИспользоватьРазделениеПоБизнесРегионамJIRAOWS = JIRA.ИспользоватьРазделениеПоБизнесРегионамJIRAOWS();
	ВидИнстансаJIRA = ПолучитьВидИнстансаJIRA(ИнстансJIRA);
	
	ДатаРазделенияПостингаПоБизнесРегионам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПостингаПоБизнесРегионам);	
	//--OW Копачев А.С. 29.03.2022 ONEC-7464
	
	//записываем данные в регистр
	Для каждого ст Из тз Цикл
		
		//++OW Копачев А.С. 29.03.2022 ONEC-7464
		// провека необходимости загрузки постинга JIRA.SPB
		Если ЭтоПостингаИнстансаJiraSpb
			И ИспользоватьРазделениеПоБизнесРегионамJIRASPB Тогда 
			КонфигурацияЛицензий = ст.КонфигурацияЛицензий;
			Если СписокЗначенийКонфигурацийЛицензийИсключенийДляЗагрузкиПостинга.НайтиПоЗначению(КонфигурацияЛицензий) <> Неопределено Тогда 
				Продолжить;				
			КонецЕсли;	
		КонецЕсли;		
		
		//++OW Копачев А.С. 21.04.2022 ONEC-7464
		// проверка вида инстанса клиента постинга
		Если ЭтоПостингаИнстансаJiraSpb И ИспользоватьРазделениеПоБизнесРегионамJIRASPB
			ИЛИ ЭтоПостингаИнстансаJiraOWS И ИспользоватьРазделениеПоБизнесРегионамJIRAOWS Тогда 
			
			Партнер = ст.Партнер;
			Если НЕ ЗначениеЗаполнено(Партнер) ИЛИ Партнер = ПолучитьUnknownClientForPosting() Тогда	
				
				//++OW Копачев А.С. 14.06.2022 ONEC-7612 
				//ТекстОшибки = "Не найден клиент постинга по инстансу " + ИнстансJIRA + " на дату: " + Формат(ст.Период,"ДФ=dd.MM.yyyy") + " по задаче: " + ст.Таск_ID + " и наименованию клиента: " + ст.ПартнерСтрокой +". Строка постинга пропущена";
				ТекстОшибки = "Не найден клиент постинга по инстансу " + ИнстансJIRA + " на дату: " + Формат(ст.Период,"ДФ=dd.MM.yyyy") + " по задаче: " + ст.Таск_ID + " и наименованию клиента: " + ст.ПартнерСтрокой +".";
				//--OW Копачев А.С. 14.06.2022 ONEC-7612
				OW.ЗаписатьОшибку(ПолучитьUnknownClientForPosting(), Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);
				
				//++OW Копачев А.С. 14.06.2022 ONEC-7612 
				//Продолжить;
				//--OW Копачев А.С. 14.06.2022 ONEC-7612			
			Иначе
				
				Если ЗначениеЗаполнено(ДатаРазделенияПостингаПоБизнесРегионам) 
					И ДатаРазделенияПостингаПоБизнесРегионам <=  ст.Период Тогда 
				
					ВидИнстансаJIRAПартнера = ПолучитьВидИнстансаJIRAОбъекта(Партнер);
					Если ВидИнстансаJIRA <> ВидИнстансаJIRAПартнера Тогда 
						ТекстОшибки = "По инстансу " + ИнстансJIRA + " Клиент " + Партнер + " с сегментом: " + ВидИнстансаJIRAПартнера + " не соотвестствует сегменту инстанса: " + ВидИнстансаJIRA + "> (на дату: " + ст.Период + " по задаче: " + ст.Таск_ID + "). Строка постинга пропущена";
						OW.ЗаписатьОшибку(Партнер, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаПостинга, Справочники.OW_ТипыОшибок.Ошибка, ТекстОшибки);				
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		//--OW Копачев А.С. 21.04.2022 ONEC-7464
				
		нЗапись = РегистрПостинг.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(нЗапись, ст);
		нЗапись.ВидИнстансJIRA = ПолучитьВидИнстансаJIRA(ИнстансJIRA);//OW Копачев А.С. 29.03.2022 ONEC-7464 
		
		нЗапись.ДатаЗагрузки = ТекущаяДата();
		нЗапись.Записать(Истина);
	КонецЦикла; 

	//- Пилюгин В.Е. 15.05.2018		
КонецПроцедуры


Процедура ОчиститьРегистрПостингаЗаПериод(ДатаНачала, ДатаОкончания, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 15.05.2018
	ИмяРегистаПостинга = ИмяРегистаПостингаПоИнстансуJIRA(ИнстансJIRA);	 
	РегистрПостинг = РегистрыСведений[ИмяРегистаПостинга];
	//очищаем регистр в диапазоне дат
	нДата = ДатаНачала;
	
	//++OW Копачев А.С. 19.05.2022 ONEC-7464
	ВидИнстансаJIRA = ПолучитьВидИнстансаJIRA(ИнстансJIRA); //OW Копачев А.С. 08.04.2022 ONEC-7464 
	ДатаРазделенияПостингаПоБизнесРегионам = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаРазделенияПостингаПоБизнесРегионам);	
	//--OW Копачев А.С. 19.05.2022 ONEC-7464
	
	Пока нДата <= ДатаОкончания Цикл
		наборЗаписей = РегистрПостинг.СоздатьНаборЗаписей();
		наборЗаписей.Отбор.Период.Установить(нДата);
		
		//++OW Копачев А.С. 29.03.2022 ONEC-7464
		Если ЗначениеЗаполнено(ДатаРазделенияПостингаПоБизнесРегионам) И 
			ДатаРазделенияПостингаПоБизнесРегионам <= нДата Тогда 
			
			наборЗаписей.Отбор.ВидИнстансJIRA.Установить(ВидИнстансаJIRA);
		КонецЕсли;	
		//--OW Копачев А.С. 29.03.2022 ONEC-7464
		
		наборЗаписей.Записать(Истина);
		нДата = нДата + OW.СуткиВСекундах();
	КонецЦикла;
	//- Пилюгин В.Е. 15.05.2018		
КонецПроцедуры

Функция ИмяРегистаПостингаПоИнстансуJIRA(ИнстансJIRA)
	//определяем регистр с постингом
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
		ИмяРегистаПостинга = "OW_ПостингИзJIRA";
	Иначе
		ИмяРегистаПостинга = "ПостингИзJIRA_2";
	КонецЕсли; 
	Возврат ИмяРегистаПостинга;
КонецФункции

Функция НайтиСоздатьЗадачуJIRA_ЗагрузкаПостинга(КодТаска, Партнер, Наименование, IssueType, WorkType = Неопределено, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 11.10.2017
	Если НЕ ЗначениеЗаполнено(WorkType) Тогда
		WorkType = Jira.ОпределитьWorkTypeПоIssueType(IssueType);
	КонецЕсли; 	
	
	Таск = Справочники.ЗадачаJIRA.ПустаяСсылка();
	
	//++OW Копачев А.С. 09.04.2019 ONEC-4361
	Таск = НайтиЗадачуJIRA(КодТаска, ИнстансJIRA);
	Если ЗначениеЗаполнено(Таск) Тогда 
	//--OW Копачев А.С. 09.04.2019 ONEC-4361
		Если Таск.Type <> IssueType Тогда
			ТаскОбъект = Таск.ПолучитьОбъект();
			ТаскОбъект.Type = IssueType;
			ТаскОбъект.WorkType = WorkType;
			ТаскОбъект.Записать();
		КонецЕсли; 
	Иначе
		НовыйТаск = Справочники.ЗадачаJIRA.СоздатьЭлемент();
		НовыйТаск.Customer = Партнер;
		НовыйТаск.Summary = Наименование;
		НовыйТаск.Код = КодТаска;       
		НовыйТаск.Type = IssueType;
		НовыйТаск.WorkType = WorkType;		
		НовыйТаск.ИнстансJIRA = ИнстансJIRA; // Копачев А.С. 09.04.2019 ONEC-4361
		//++OW Копачев А.С. 05.04.2022 ONEC-7463
		НовыйТаск.КодИнтеграции_JIRA = ПолучитьКодИнтеграции_JIRA(КодТаска, ИнстансJIRA);
		//--OW Копачев А.С. 05.04.2022 ONEC-7463
		
		НовыйТаск.Записать();
		
		Таск = НовыйТаск.Ссылка;
	КонецЕсли; 
	
	Возврат Таск;
	//- Пилюгин В.Е. 11.10.2017
КонецФункции

Функция ПолучитьUnknownClientForPosting() Экспорт
		
	КлиентUnknownClientForPosting = ПредопределенноеЗначение("Справочник.Партнеры.UnknownClientForPosting");
	
	ОсновнойВидИнстансаJIRA = Константы.ОсновнойВидИнстансаJIRA.Получить();
	Если НЕ ЗначениеЗаполнено(ОсновнойВидИнстансаJIRA) Тогда 
		ОсновнойВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA");	
	КонецЕсли;	
	
	Если ОсновнойВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.EUMEA") Тогда 
		
		КлиентUnknownClientForPosting = ПредопределенноеЗначение("Справочник.Партнеры.UnknownClientForPostingCOM"); 
		
	КонецЕсли;	
	
	Возврат КлиентUnknownClientForPosting;
	
КонецФункции
	
//-------------------------------------------------------- ЗАГРУЗКА ПОСТИНГА ИЗ JIRA --------------------------------------------------------


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ЗАГРУЗКА ИСТОРИИ ЗАДАЧ ИЗ JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Процедура ЗагрузкаИсторииЗадач(ДатаНачала, ДатаОкончания, ПроектJIRA = "", ИсключитьМассивID = Неопределено, АвтоматическаяЗагрузка = Истина, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 12.10.2017
	
	ЛогСообщение = "Начало обработки " + ТекущаяДата();
	ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение);	
	
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	
	Если ИсключитьМассивID = Неопределено Тогда
		ИсключитьМассивID = Новый Массив;
	КонецЕсли; 
	
	СтруктураВозврата = ПолучитьДанныеИзJIRA(ДатаНачала, ДатаОкончания, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA);
	ЛогСообщение = "Сырые данные получены " + ТекущаяДата();
	ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, АвтоматическаяЗагрузка);

	Если СтруктураВозврата.ЕстьОшибки Тогда
		
		ВывестиЛогОшибка_ЗагрузкаЗадач(СтруктураВозврата.ТекстОшибки, АвтоматическаяЗагрузка)
		
	Иначе				
		
 		ТаблицаДанных = ПолучитьТаблицуДанных(СтруктураВозврата.МассивДанных, ИнстансJIRA);
		ЛогСообщение = "Данные обработаны " + ТекущаяДата();
		ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, АвтоматическаяЗагрузка);
		
		ЗаписьИсторииЗадач(ТаблицаДанных,,ИнстансJIRA); 
		ЛогСообщение = "Данные записаны в БД " + ТекущаяДата() + " (" + ТаблицаДанных.Количество() + " записей)";
		//+++ Брук Б 29.11.2019 Не пишем запись в лог, если количество загруженных данных = 0
		Если ТаблицаДанных.Количество()>0 Тогда
			ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, АвтоматическаяЗагрузка);
		КонецЕсли;
		//--- Брук Б 29.11.2019		
	КонецЕсли; 	
		
	Если АвтоматическаяЗагрузка Тогда
		
		КоличествоНеЗагруженныхЗадач = ПолучитьКоличествоНеЗагруженныхЗадачJIRA();
		
		Если КоличествоНеЗагруженныхЗадач > 0 Тогда
			//+++ Брук 27.11.2019 Пишем этот лог один раз в час, а не каждую минуту, иначе лог пухнет от этих ежеминутных сообщений - больше тысячи в день
			Если Минута(ТекущаяДата()) = 0 Тогда
			//--- Брук 27.11.2019
				ЛогСообщение = "Количество НЕ загруженных JIRA задач на данный момент: " + Строка(КоличествоНеЗагруженныхЗадач);
				ВывестиЛогОшибка_ЗагрузкаЗадач(ЛогСообщение);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли; 	
	
	//- Пилюгин В.Е. 12.10.2017

КонецПроцедуры

Функция ПолучитьКоличествоНеЗагруженныхЗадачJIRA()
	//+ Пилюгин В.Е. 10.11.2017
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаJIRA.Ссылка) КАК КоличествоЗадач
	|ИЗ
	|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
	|ГДЕ
	|	НЕ ЗадачаJIRA.ДанныеЗагружены
	//++OW Копачев А.С. 28.01.2021 ONEC-4737
	|	И ЗадачаJIRA.ЗадачаУдалена = Ложь
	//--OW Копачев А.С. 28.01.2021 ONEC-4737
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗадач;
	Иначе
		Возврат 0;
	КонецЕсли; 	
	//- Пилюгин В.Е. 10.11.2017		
КонецФункции

Функция ПолучитьДанныеИзJIRA(ДатаНачала, ДатаОкончания, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA)
	//+ Пилюгин В.Е. 19.10.2017
	
	СтруктураВозврата = Новый Структура("ЕстьОшибки, ТекстОшибки, Данные");
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
	
	//++OW Копачев А.С. 14.05.2019 
	//ДатаНачала_Строка = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
	//ДатаОкончания_Строка = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd"); 
	ДатаНачала_Строка 		= НормализоватьДатуВремя(ДатаНачала);
	ДатаОкончания_Строка 	= НормализоватьДатуВремя(ДатаОкончания); 	
	//--OW Копачев А.С. 14.05.2019
	
//todo 0 на проде!!
	startAt = 0;
	
	received = 0;
	total = 1;
	maxResults = 1000;
	ТекстОшибки = "";
		
	МассивДанных = Новый Массив;
	
	//Пока received < 5000 Цикл
	Пока received < total Цикл
		                                  
		Данные = Неопределено;
		Данные = ПолучитьДанныеИзJIRAПостранично(Соединение, ДатаНачала_Строка, ДатаОкончания_Строка, startAt, maxResults, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA);
		
		ЕстьОшибки = Ложь;
		
		Если ТипЗнч(Данные) = Тип("Соответствие") Тогда
			errorMessages = Данные.Получить("errorMessages");
			Если  errorMessages <> Неопределено Тогда
				ТекстОшибки = "НЕ получены данные в результате парсинга JSON формата!" + Символы.ПС + ОбщегоНазначения.ПреобразоватьМассивВСтроку(errorMessages, ", ");
				ЕстьОшибки = Истина;
			Иначе		
				Если total = 1 Тогда
					total = Данные.Получить("total"); 
				КонецЕсли; 
				received = received + maxResults;
				МассивДанных.Добавить(Данные);
				startAt = startAt + maxResults;
			КонецЕсли;
		Иначе
			ЕстьОшибки = Истина;
			ТекстОшибки  = "НЕ получены данные в результате парсинга JSON формата!";
		КонецЕсли; 
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли; 
				
	КонецЦикла;                                  
	
	Сообщить(total);
	
	СтруктураВозврата.Вставить("ЕстьОшибки", ЕстьОшибки);
	СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	СтруктураВозврата.Вставить("МассивДанных", МассивДанных);	
	
	Возврат СтруктураВозврата;
	
	//- Пилюгин В.Е. 19.10.2017
КонецФункции

Функция ПрочитатьJSON_ПарсингЗадач(Значение, ИнстансJIRA)  
    //+ Пилюгин В.Е. 01.11.2017
	СтруктураВозврата = Новый Структура("Данные, Успех, ПроблемнаяЗадача", "", Ложь, "");
	
	Попытка
		//++OW Копачев А.С. 25.04.2019 ONEC-4484
		////универсальная функция
		//Результат = OW.ПрочитатьJSONИзСтроки(Значение);
		Результат = OW.ПрочитатьJSONИзСтрокиПереопределяемый(Значение);		
		//--OW Копачев А.С. 25.04.2019 ONEC-4484
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		//если JSON "сломан", применим "индивидуальный подход" :)
	    ЧтениеJSON = Новый ЧтениеJSON;
	    ЧтениеJSON.УстановитьСтроку(Значение);
		
		ЕстьДанные = Истина;
	    СформироватьДерево_ПарсингЗадач(ЧтениеJSON, Результат, ЕстьДанные);
		
		ПроблемнаяЗадача = ОпределитьIDПроблемойЗадачиВДереве(Результат);
		Если ПроблемнаяЗадача = Неопределено Тогда 
			ВывестиЛогОшибка_ЗагрузкаЗадач("Не найдена проблемная задача при попытке разобрать сломанный JSON. ",Ложь);	
		Иначе
			ТекстОшибки = "Найдена проблемная задача при попытке разобрать сломанный JSON." + Символы.ПС +
							"ID=" + ПроблемнаяЗадача.id + ", KEY=" + ПроблемнаяЗадача.key;
			УстановитьПризнакДанныеЗагружены(ПроблемнаяЗадача.key, Ложь, ИнстансJIRA);
			ВывестиЛогОшибка_ЗагрузкаЗадач(ТекстОшибки,Ложь);	
			СтруктураВозврата.ПроблемнаяЗадача = ПроблемнаяЗадача;
			НайтиСоздатьЗадачуJIRA(ПроблемнаяЗадача.key, ИнстансJIRA);
		КонецЕсли; 
	
	    ЧтениеJSON.Закрыть();
	Иначе
		СтруктураВозврата.Данные = Результат;
		СтруктураВозврата.Успех = Истина;	    
	КонецЕсли; 
		
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 01.11.2017    
КонецФункции 

Функция ПолучитьДанныеИзJIRAПостранично(Соединение, ДатаНачала_Строка, ДатаОкончания_Строка, startAt, maxResults, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA)
	//+ Пилюгин В.Е. 01.11.2017
	ТекстЗапроса = ПолучитьТекстЗапросаИсторияЗадачJIRA(ДатаНачала_Строка, ДатаОкончания_Строка, startAt, maxResults, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA);
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979
	АдресРесурса = "/rest/api/2/search";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");
	
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	ОтветСтрока = Соединение.ОтправитьДляОбработки(Запрос).ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);	
			
	СтруктураПарсинга = ПрочитатьJSON_ПарсингЗадач(ОтветСтрока, ИнстансJIRA);
	Если СтруктураПарсинга.Успех Тогда
		Возврат СтруктураПарсинга.Данные;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураПарсинга.ПроблемнаяЗадача) Тогда
		ИсключитьМассивID.Добавить(СтруктураПарсинга.ПроблемнаяЗадача.id);
		Возврат ПолучитьДанныеИзJIRAПостранично(Соединение, ДатаНачала_Строка, ДатаОкончания_Строка, startAt, maxResults, ПроектJIRA, ИсключитьМассивID, ИнстансJIRA);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	//- Пилюгин В.Е. 01.11.2017
КонецФункции

Процедура СформироватьДерево_ПарсингЗадач(ЧтениеJSON, Дерево, ЕстьДанные)
    //+ Пилюгин В.Е. 17.10.2017
	OW.СформироватьДерево_ДоПервойОшибки(ЧтениеJSON, Дерево, ЕстьДанные);
   	//- Пилюгин В.Е. 17.10.2017    
КонецПроцедуры

Функция ОпределитьIDПроблемойЗадачиВДереве(Результат)
	//+ Пилюгин В.Е. 01.11.2017 
	СтруктураВозврата = Неопределено;
	Попытка
		СтрокаЗадача = Результат.Получить("issues")[Результат.Получить("issues").Количество()-1];
		СтруктураВозврата = Новый Структура("id, key", СтрокаЗадача.Получить("id"), СтрокаЗадача.Получить("key"))
	Исключение
	КонецПопытки;
	
	Возврат СтруктураВозврата;	
	//- Пилюгин В.Е. 01.11.2017	
КонецФункции

Функция ПолучитьТаблицуДанных(МассивДанных, ИнстансJIRA)
	//+ Пилюгин В.Е. 17.10.2017
	ТЗ = СоздатьСтруктуруТаблицыДанных(ИнстансJIRA);
	
	Для каждого Данные Из МассивДанных Цикл
		МассивЗадач = Данные.Получить("issues");
		Если ТипЗнч(МассивЗадач) <> Тип("Массив") Тогда
			OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка, "Не найден массив тасков в структуре данных!");
			Продолжить;
		КонецЕсли; 
		
		Для каждого эл Из МассивЗадач Цикл		
			нЗадача = ТЗ.Добавить();
			ПолучитьИнфоПоЗадачеИзСтрокиМассиваСырыхДанных(нЗадача, эл, ИнстансJIRA);
		КонецЦикла; 
	КонецЦикла; 	
	
	Возврат ТЗ;
	//- Пилюгин В.Е. 17.10.2017
КонецФункции

Процедура ПолучитьИнфоПоЗадачеИзСтрокиМассиваСырыхДанных(нЗадача, эл, ИнстансJIRA)
	//+ Пилюгин В.Е. 27.07.2018
	Поля 			= эл.Получить("fields");	
	//JIRA-OWS
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
		//значения
		нЗадача.Code 					= ПолучитьПолеСтрока(эл, "key");
		нЗадача.Summary 				= ПолучитьПолеСтрока(Поля, "summary");
		нЗадача.Type 					= ПолучитьПолеСтрока(Поля, "issuetype", "name");
		нЗадача.Priority 				= ПолучитьПолеСтрока(Поля, "priority", "name");
		нЗадача.Product 				= ПолучитьПолеСтрока(Поля, "customfield_11501", "value");
		нЗадача.ProductArea 			= ПолучитьПолеСтрока(Поля, "customfield_13001", "value");
		нЗадача.Description 			= ПолучитьПолеСтрока(Поля, "description");
		нЗадача.ResultDetails 			= ПолучитьПолеСтрока(Поля, "customfield_11700");
		нЗадача.ProjectName 			= ПолучитьПолеСтрока(Поля, "project", "name");
		нЗадача.ProjectKey 				= ПолучитьПолеСтрока(Поля, "project", "key");
		нЗадача.ProjectCategory 		= ПолучитьПолеСтрока(Поля, "project", "projectCategory", "name");
		нЗадача.Estimation 				= ПолучитьПолеСтрока(Поля, "timetracking", "originalEstimateSeconds");
		нЗадача.Posting 				= ПолучитьПолеСтрока(Поля, "timetracking", "timeSpentSeconds");
		нЗадача.Status 					= ПолучитьПолеСтрока(Поля, "status", "name");
		нЗадача.Resolution				= ПолучитьПолеСтрока(Поля, "resolution", "name");
		нЗадача.CreatedDate 			= ПолучитьПолеСтрока(Поля, "created");
		нЗадача.UpdatedDate 			= ПолучитьПолеСтрока(Поля, "updated");
		нЗадача.ResolvedDate 			= ПолучитьПолеСтрока(Поля, "resolutiondate");
		нЗадача.DueDate 				= ПолучитьПолеСтрока(Поля, "duedate");
		нЗадача.Assignee 				= ПолучитьПолеСтрока(Поля, "assignee", "name");
		нЗадача.Reporter 				= ПолучитьПолеСтрока(Поля, "reporter", "name");
		нЗадача.Developer 				= ПолучитьПолеСтрока(Поля, "customfield_12002", "name");
		нЗадача.Techwriter 				= ПолучитьПолеСтрока(Поля, "customfield_12100", "name");
		нЗадача.ChangeApprovedBy 		= ПолучитьПолеСтрока(Поля, "customfield_14100", "name");
		нЗадача.CodeReviewPerformedBy	= ПолучитьПолеСтрока(Поля, "customfield_14101", "name");
	 нЗадача.CodeReviewResultApprovedBy = ПолучитьПолеСтрока(Поля, "customfield_14105", "name");
		нЗадача.Tester					= ПолучитьПолеСтрока(Поля, "customfield_12003", "name");
		нЗадача.CRMProjectCode			= ПолучитьПолеСтрока(Поля, "customfield_10814");
		нЗадача.Expert					= ПолучитьПолеСтрока(Поля, "customfield_13402", "name");
		нЗадача.LeadSME					= ПолучитьПолеСтрока(Поля, "customfield_13403", "name");
		
		//массивы значений
		нЗадача.Customers	 	= ПолучитьМассивПолейСтроки(Поля, "customfield_11000", "value");
		нЗадача.Components 		= ПолучитьМассивПолейСтроки(Поля, "components", "name"); 			
		нЗадача.FixVersions 	= ПолучитьМассивПолейСтроки(Поля, "fixVersions", "name");
		нЗадача.AttachedFiles	= ПолучитьМассивПолейСтроки(Поля, "attachment", "filename");
		//***OW @20202219102229  Start [БПВ] ONEC-5953
        нЗадача.КраткоеОписаниеФункционала			                    = ПолучитьПолеСтрока(Поля, "customfield_11412");
        нЗадача.КраткоеОписаниеРазрабатываемойФункциональности			= ПолучитьПолеСтрока(Поля, "customfield_13903");
        //***OW @20202219102231  End [БПВ] ONEC-5953        
		СсылкиНаДругиеЗадачи1 	=  ПолучитьМассивПолейСтроки(Поля, "issuelinks", "outwardIssue", "key");
		СсылкиНаДругиеЗадачи2 	=  ПолучитьМассивПолейСтроки(Поля, "issuelinks", "inwardIssue", "key");
		нЗадача.LinksToOther	= OW.СоединитьДваМассива(СсылкиНаДругиеЗадачи1, СсылкиНаДругиеЗадачи2);
        
		
	//JIRA-SPB	
	Иначе
	
		//значения
		нЗадача.Code 					= ПолучитьПолеСтрока(эл, "key");
		нЗадача.Summary 				= ПолучитьПолеСтрока(Поля, "summary");
		нЗадача.Type 					= ПолучитьПолеСтрока(Поля, "issuetype", "name");
		нЗадача.Priority 				= ПолучитьПолеСтрока(Поля, "priority", "name");
		нЗадача.Description 			= ПолучитьПолеСтрока(Поля, "description");
		нЗадача.ResultDetails 			= ПолучитьПолеСтрока(Поля, "customfield_11301"); //
		нЗадача.ResultDetailsExternal 	= ПолучитьПолеСтрока(Поля, "customfield_11001"); //
		нЗадача.ProjectName 			= ПолучитьПолеСтрока(Поля, "project", "name");
		нЗадача.ProjectKey 				= ПолучитьПолеСтрока(Поля, "project", "key");
		нЗадача.ProjectCategory 		= ПолучитьПолеСтрока(Поля, "project", "projectCategory", "name");
		нЗадача.Estimation 				= ПолучитьПолеСтрока(Поля, "timetracking", "originalEstimateSeconds");
		нЗадача.Posting 				= ПолучитьПолеСтрока(Поля, "timetracking", "timeSpentSeconds");
		нЗадача.Status 					= ПолучитьПолеСтрока(Поля, "status", "name");
		нЗадача.Resolution				= ПолучитьПолеСтрока(Поля, "resolution", "name");
		//++OW Копачев А.С. 13.02.2019 ONEC-4137 
		нЗадача.InternalPhaseStatus		= ПолучитьПолеСтрока(Поля, "customfield_15200");
		//--OW Копачев А.С. 13.02.2019 ONEC-4137
		нЗадача.CreatedDate 			= ПолучитьПолеСтрока(Поля, "created");
		нЗадача.UpdatedDate 			= ПолучитьПолеСтрока(Поля, "updated");
		нЗадача.ResolvedDate 			= ПолучитьПолеСтрока(Поля, "resolutiondate");
		нЗадача.DueDate 				= ПолучитьПолеСтрока(Поля, "duedate");
		нЗадача.Assignee 				= ПолучитьПолеСтрока(Поля, "assignee", "name");
		//+++ Брук Б 26.11.2019 ONEC-4789
		нЗадача.Expert 					= ПолучитьПолеСтрока(Поля, "customfield_16700", "name");
		нЗадача.LeadSME					= ПолучитьПолеСтрока(Поля, "customfield_16701", "name");
		//--- Брук Б 26.11.2019 ONEC-4789
		нЗадача.Reporter 				= ПолучитьПолеСтрока(Поля, "reporter", "name");
		нЗадача.CRMProjectCode			= ПолучитьПолеСтрока(Поля, "customfield_12100");
		нЗадача.StartDate				= ПолучитьПолеСтрока(Поля, "customfield_11400");
		//++OW Копачев А.С. 19.02.2019 ONEC-4272 
		//нЗадача.PhaseTask				= ПолучитьПолеСтрока(Поля, "customfield_13900");
		//нЗадача.ParentTask			= ПолучитьПолеСтрока(Поля, "parent", "key");
		//--OW Копачев А.С. 19.02.2019 ONEC-4272
		//++OW Копачев А.С. 14.02.2019 ONEC-4236 
		нЗадача.ExternalIssueKey		= ПолучитьПолеСтрока(Поля, "customfield_14800");
		//--OW Копачев А.С. 14.02.2019 ONEC-4236
		нЗадача.RequestType 			= ПолучитьПолеСтрока(Поля, "customfield_10001", "requestType", "name");    //OW Копачев А.С. 11.03.2020 ONEC-5399                                       
		//***OW @20202219102229  Start [БПВ] ONEC-5953
        нЗадача.КраткоеОписаниеФункционала			                    = "";
        нЗадача.КраткоеОписаниеРазрабатываемойФункциональности			= "";
        //***OW @20202219102231  End [БПВ] ONEC-5953        

		//массивы значений
		м = Новый Массив;
		м.Добавить(ПолучитьПолеСтрока(Поля, "customfield_11701"));  //
		нЗадача.Customers	 	= м;
		
		//++OW Копачев А.С. 02.07.2020 ONEC-5790 
		//нЗадача.Components 		= ПолучитьМассивПолейСтроки(Поля, "components", "name"); 
		нЗадача.Components		= ПолучитьПоле(Поля, "components");
		//--OW Копачев А.С. 02.07.2020 ONEC-5790

		нЗадача.FixVersions 	= ПолучитьМассивПолейСтроки(Поля, "fixVersions", "name");
		нЗадача.AttachedFiles	= ПолучитьМассивПолейСтроки(Поля, "attachment", "filename");
		
		СсылкиНаДругиеЗадачи1 	= ПолучитьМассивПолейСтроки(Поля, "issuelinks", "outwardIssue", "key");
		СсылкиНаДругиеЗадачи2 	= ПолучитьМассивПолейСтроки(Поля, "issuelinks", "inwardIssue", "key");
		нЗадача.LinksToOther	= OW.СоединитьДваМассива(СсылкиНаДругиеЗадачи1, СсылкиНаДругиеЗадачи2);
		
	КонецЕсли; 
	//- Пилюгин В.Е. 27.07.2018
	
	//++OW Копачев А.С. 10.04.2019 ONEC-4361
	// дополнительно добавим идентификаторы из справочника в таблицу	
	ИдентификаторыПолейИнстанса = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторыПолейИнстанса(ИнстансJIRA);
	Для Каждого ТекЭлемент ИЗ ИдентификаторыПолейИнстанса Цикл
		ИмяКолонки 			= ТекЭлемент.Ключ;
		ЭлементСоответствия = ТекЭлемент.Значение;
		Попытка
			Значение = нЗадача[ИмяКолонки];
			Если ЗначениеЗаполнено(Значение) Тогда
				Продолжить; // уже обработано поле, пропускаем	
			КонецЕсли;		
			Если ИмяКолонки = "id" Тогда 
				нЗадача[ИмяКолонки] = ПолучитьПоле(Эл, ИмяКолонки);
			Иначе
				нЗадача[ИмяКолонки] = ПолучитьПоле(Поля, ИмяКолонки);
			КонецЕсли;	
		Исключение
			// попали в исключение
		КонецПопытки;	
	КонецЦикла;		
	
	// запишем текст пакета
	Попытка
		//++OW Копачев А.С. 29.11.2021 ONEC-4262 
		//нЗадача.Пакет = OW.ЗаписатьДанныеВJSON(эл);
		ПакетJSON = OW.ЗаписатьДанныеВJSON(эл);
		нЗадача.ПакетХранилище = Новый ХранилищеЗначения(ПакетJSON, Новый СжатиеДанных(9));
		//--OW Копачев А.С. 29.11.2021 ONEC-4262			
	Исключение
		// попали в исключение	
	КонецПопытки;	
	//--OW Копачев А.С. 10.04.2019 ONEC-4361
КонецПроцедуры

//++OW Копачев А.С. 12.04.2021 ONEC-6508
//Процедура ЗаписьИсторииЗадач(ТаблицаДанных, НомерЗадачи = "", ИнстансJIRA = Неопределено)
Процедура ЗаписьИсторииЗадач(ТаблицаДанных, НомерЗадачи = "", ИнстансJIRA, Автор = Неопределено, ДействиеИнициатор = Неопределено)
//--OW Копачев А.С. 12.04.2021 ONEC-6508

	//+ Пилюгин В.Е. 18.10.2017
	УстановитьПривилегированныйРежим(Истина);
		
	СекундВЧасе = 60 * 60;
	МассивПроверкиЮзеров = Новый Массив;
	
	Счетчик = 0;
	СчетчикВсего = 0;
	
	ЭтоИнстансJiraSpb = ЭтоИнстансJiraSpb(ИнстансJIRA);
	//НомерЗадачиНачинаяСКоторогоЗагружаютсяЗадачиBAЧерезJIRASPB = НомерЗадачиНачинаяСКоторогоЗагружаютсяЗадачиBAЧерезJIRASPB();  //OW Копачев А.С. 10.06.2019 ONEC-4531

	МассивПроектовДляФормированияДокументов = ПроектыJIRAДляФормированияДокументов(); 	//OW Копачев А.С. 14.05.2019
	МассивПроектов_BA_SSA = ПроектыJIRA_BA_SSA(); 										//OW Копачев А.С. ONEC-4531 14.05.2019

	Для Каждого ст Из ТаблицаДанных Цикл
		
		////++OW Копачев А.С. 10.06.2019 ONEC-4531
		//// проекты BA должны загружаться по Жире СПБ с 8000 номера (включительно)
		//// по Жире ОВС до 8000 номера (исключая)
		//Если ЗначениеЗаполнено(ст.ProjectKey) Тогда
		//	КодПроекта = ст.ProjectKey; 
		//	Если КодПроекта = "BA" Тогда				
		//		НомерЗадачиСтрокой = Сред(ст.Code, стрДлина(КодПроекта + "-") + 1);				
		//		НомерЗадачиЧислом = СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(НомерЗадачиСтрокой);				
		//		Если ЭтоИнстансJiraSpb Тогда 
		//			Если НомерЗадачиЧислом < НомерЗадачиНачинаяСКоторогоЗагружаютсяЗадачиBAЧерезJIRASPB Тогда 
		//				Продолжить; // не загружаем такие задачи
		//			КонецЕсли;	
		//		Иначе
		//			Если НомерЗадачиЧислом >= НомерЗадачиНачинаяСКоторогоЗагружаютсяЗадачиBAЧерезJIRASPB Тогда 
		//				Продолжить; // не загружаем такие задачи
		//			КонецЕсли;
		//		КонецЕсли;						
		//	КонецЕсли;
		//КонецЕсли;	
		////--OW Копачев А.С. 10.06.2019 ONEC-4531
		
		СтруктураПолей = Новый Структура;
		
		Задача = JIRA.НайтиСоздатьЗадачуJIRA(ст.Code, ИнстансJIRA);
		
		ТЗ_НеразобранныеПоляПакета = Задача.НеразобранныеПоляПакета.ВыгрузитьКолонки();
						
		//поля для проверки необходимости сделать запись в Историю
		СтруктураПолей.Вставить("Задача", 			Задача);
		СтруктураПолей.Вставить("CreatedDate", 		ПреобразоватьДату(ст.CreatedDate));
		СтруктураПолей.Вставить("ResolvedDate", 	ПреобразоватьДату(ст.ResolvedDate));
		СтруктураПолей.Вставить("DueDate", 			ПреобразоватьДату(ст.DueDate));
		СтруктураПолей.Вставить("Status", 			ПолучитьСоздать_Status(ст.Status));
		СтруктураПолей.Вставить("Resolution", 		ПолучитьСоздать_Resolution(ст.Resolution));
		//++OW Копачев А.С. 13.02.2019 ONEC-4137 
		СтруктураПолей.Вставить("InternalPhaseStatus", Строка(ст.InternalPhaseStatus));
		//--OW Копачев А.С. 13.02.2019 ONEC-4137
		СтруктураПолей.Вставить("FixVersions", 		ОбщегоНазначения.ПреобразоватьМассивВСтроку(ст.FixVersions, ", "));
		СтруктураПолей.Вставить("Customer", 		Получить_Customer_ИзСтроки(ст.Customers));
		СтруктураПолей.Вставить("EstimationTime", 	Число(?(ПустаяСтрока(ст.Estimation),"0", ст.Estimation)) / СекундВЧасе);
		СтруктураПолей.Вставить("LoggedTime", 		Число(?(ПустаяСтрока(ст.Posting),"0", ст.Posting)) / СекундВЧасе);
		СтруктураПолей.Вставить("Product", 			ПолучитьСоздать_Product(ст.Product));
 		СтруктураПолей.Вставить("Assignee", 		OW.ПолучитьЮзераПоЛогину(ст.Assignee));
		СтруктураПолей.Вставить("Expert", 			OW.ПолучитьЮзераПоЛогину(ст.Expert));
		
		//остальные поля
		СтруктураПолей.Вставить("ProductArea", 		ПолучитьСоздать_ProductArea(ст.ProductArea, СтруктураПолей.Product));
		СтруктураПолей.Вставить("UpdatedDate", 		ПреобразоватьДату(ст.UpdatedDate));
		СтруктураПолей.Вставить("Summary", 			Строка(ст.Summary));
		СтруктураПолей.Вставить("Type", 			ПолучитьСоздать_Type(ст.Type));
		СтруктураПолей.Вставить("Priority", 		ПолучитьСоздать_Priority(ст.Priority));
		СтруктураПолей.Вставить("Components", 		ПолучитьСоздать_Components(ст.Components));
		СтруктураПолей.Вставить("Descript", 		OW.УдалитьСистемныеСимволыИзСтроки(Строка(ст.Description)));
		СтруктураПолей.Вставить("ResultDetails", 	Строка(ст.ResultDetails));
        //***OW @20202419102410  Start [БПВ]
        СтруктураПолей.Вставить("КраткоеОписаниеФункционала", 			                    Строка(ст.КраткоеОписаниеФункционала));
        СтруктураПолей.Вставить("КраткоеОписаниеРазрабатываемойФункциональности", 			Строка(ст.КраткоеОписаниеРазрабатываемойФункциональности));
        //***OW @20202419102413  End [БПВ]
        
         
		СтруктураПолей.Вставить("Project", 			ПолучитьСоздать_Project(ст.ProjectKey, ст.ProjectName));
		СтруктураПолей.Вставить("ProjectCategory", 	ПолучитьСоздать_ProjectCategory(ст.ProjectCategory, СтруктураПолей.Project));
		СтруктураПолей.Вставить("Resolution", 		ПолучитьСоздать_Resolution(ст.Resolution));
		СтруктураПолей.Вставить("Reporter", 		OW.ПолучитьЮзераПоЛогину(ст.Reporter));
		СтруктураПолей.Вставить("Developer", 		OW.ПолучитьЮзераПоЛогину(ст.Developer));
		СтруктураПолей.Вставить("Techwriter", 		OW.ПолучитьЮзераПоЛогину(ст.Techwriter));
		СтруктураПолей.Вставить("ChangeApprovedBy", OW.ПолучитьЮзераПоЛогину(ст.ChangeApprovedBy));
		СтруктураПолей.Вставить("CodeReviewPerformedBy", 		OW.ПолучитьЮзераПоЛогину(ст.CodeReviewPerformedBy));
		СтруктураПолей.Вставить("CodeReviewResultApprovedBy", 	OW.ПолучитьЮзераПоЛогину(ст.CodeReviewResultApprovedBy));
		СтруктураПолей.Вставить("Tester", 			OW.ПолучитьЮзераПоЛогину(ст.Tester));
		СтруктураПолей.Вставить("LeadSME", 			OW.ПолучитьЮзераПоЛогину(ст.LeadSME));
		СтруктураПолей.Вставить("CRMProjectCode", 	OW.УдалитьСистемныеСимволыИзСтроки(Строка(ст.CRMProjectCode)));
		СтруктураПолей.Вставить("AttachedFiles", 	?(ст.AttachedFiles.Количество() > 0, Истина, Ложь));
		СтруктураПолей.Вставить("LinksToOtherTasks", ПолучитьСоздать_LinksToOtherTasks(ст.LinksToOther, ИнстансJIRA));
		СтруктураПолей.Вставить("StartDate", 		ПреобразоватьДату(ст.StartDate));
		СтруктураПолей.Вставить("Project", 			ПолучитьСоздать_Project(ст.ProjectKey, ст.ProjectName));

		//++OW Копачев А.С. 19.02.2019 ONEC-4272 
		//СтруктураПолей.Вставить("PhaseTask", JIRA.НайтиСоздатьЗадачуJIRA(ст.PhaseTask, ИнстансJIRA));
		//СтруктураПолей.Вставить("ParentTask", JIRA.НайтиСоздатьЗадачуJIRA(ст.ParentTask, ИнстансJIRA));
		//--OW Копачев А.С. 19.02.2019 ONEC-4272
		
		//++OW Копачев А.С. 14.02.2019 ONEC-4236 
		СтруктураПолей.Вставить("ExternalIssueKey", Строка(ст.ExternalIssueKey));
		//--OW Копачев А.С. 14.02.2019 ONEC-4236
		
		СтруктураПолей.Вставить("RequestType", 		ПолучитьСоздать_RequestType(ст.RequestType)); //OW Копачев А.С. 11.03.2020 ONEC-5399
				
		//СтруктураПолей.Вставить("Commits", ""); //задел на будущее
		//СтруктураПолей.Вставить("LinkToRoadmap", ""); //задел на будущее				
		
		//++OW Копачев А.С. 10.04.2019 ONEC-4361       
		// JSON пакет
		СтруктураПолей.Вставить("ПакетХранилище", ст.ПакетХранилище);
		
		//залогируем незаполненность полей с юзерами (если не найден юзер по логину)
		МассивПроверкиЮзеров = ЗафиксироватьНезаполненностьПолейЮзеров(ст, СтруктураПолей, МассивПроверкиЮзеров);		
			
		// дополнительно добавим собранные данные в структуру	
		ИменаРеквизитовЗадачиСИдентификаторами = Справочники.СоответствиеПолейJIRA.ПолучитьИменаРеквизитовЗадачиСИдентификаторамиИнстанса(ИнстансJIRA);
		Для Каждого ТекЭлемент Из ИменаРеквизитовЗадачиСИдентификаторами Цикл
			ИмяРеквизита = ТекЭлемент.Ключ;
			Идентификатор = ТекЭлемент.Значение;
			Попытка
				Если СтруктураПолей.Свойство(ИмяРеквизита) = Ложь Тогда
					ЗначениеПоляПакета = ПолучитьЗначениеПоляПакета(ИнстансJIRA, ст[Идентификатор], Идентификатор, ИмяРеквизита, МассивПроверкиЮзеров, ТЗ_НеразобранныеПоляПакета);
					СтруктураПолей.Вставить(ИмяРеквизита, ЗначениеПоляПакета);	
				КонецЕсли;	
			Исключение	
				// попали в исключение
			КонецПопытки;	
		КонецЦикла;		
		//--OW Копачев А.С. 10.04.2019 ONEC-4361
		
		//++OW Копачев А.С. 11.12.2019 ONEC-5154 
		// проверим наличие необходимых полей для анализов (для разных Жир могут отсутствовать)
		Если СтруктураПолей.Свойство("PhaseType") = Ложь ИЛИ СтруктураПолей.PhaseType = Неопределено Тогда 
			СтруктураПолей.Вставить("PhaseType", Справочники.ТипыФаз.ПустаяСсылка());	
		КонецЕсли;		
		Если СтруктураПолей.Свойство("IssueReason") = Ложь ИЛИ СтруктураПолей.IssueReason = Неопределено Тогда 
			СтруктураПолей.Вставить("IssueReason", Справочники.ПричиныОбращенийJIRA.ПустаяСсылка());	
		КонецЕсли;
		Если СтруктураПолей.Свойство("StatusDetails") = Ложь ИЛИ СтруктураПолей.StatusDetails = Неопределено Тогда 
			СтруктураПолей.Вставить("StatusDetails", "");	
		КонецЕсли;
		//--OW Копачев А.С. 11.12.2019 ONEC-5154
		//++OW Копачев А.С. 12.04.2021 ONEC-6508
		Если СтруктураПолей.Свойство("StartDate") = Ложь ИЛИ СтруктураПолей.StartDate = Неопределено Тогда 
			СтруктураПолей.Вставить("StartDate", Дата(1,1,1));	
		КонецЕсли;
		//--OW Копачев А.С. 12.04.2021 ONEC-6508
		//+++ Брук Б 26.08.2020 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5803
		Если СтруктураПолей.Свойство("PMAudit") = Ложь ИЛИ СтруктураПолей.PMAudit = Неопределено Тогда 
			СтруктураПолей.Вставить("PMAudit", 0);	
		КонецЕсли;
		//--- Брук Б 26.08.2020 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5803
		//++OW Копачев А.С. 10.08.2021 ONEC-6903
		Если СтруктураПолей.Свойство("ProjectPortfolioOverallRAGStatus") = Ложь ИЛИ СтруктураПолей.ProjectPortfolioOverallRAGStatus = Неопределено Тогда 
			СтруктураПолей.Вставить("ProjectPortfolioOverallRAGStatus", Перечисления.ЗначенияПоказателейПортфеляПроектов.NotDefined);	
		КонецЕсли;
		//--OW Копачев А.С. 10.08.2021 ONEC-6903    
		//++OW Копачев А.С. 21.04.2023 ONEC-8496 
		Если СтруктураПолей.Свойство("ToBeClosedInTheCurrentQuarter") = Ложь ИЛИ СтруктураПолей.ToBeClosedInTheCurrentQuarter = Неопределено Тогда 
			СтруктураПолей.Вставить("ToBeClosedInTheCurrentQuarter", Перечисления.ЗначенияЗаполненностиДанных.НеЗаполнено);	
		КонецЕсли;
		//--OW Копачев А.С. 21.04.2023 ONEC-8496
		//++OW Копачев А.С. 12.11.2019 ONEC-4099
		// проверка перемещения задачи
		Если НЕ ПустаяСтрока(НомерЗадачи) И ст.Code <> НомерЗадачи Тогда
			СтараяЗадача = JIRA.НайтиСоздатьЗадачуJIRA(НомерЗадачи, ИнстансJIRA);
			Если ПереместитьЗадачуJIRA(СтараяЗадача, Задача) = Ложь Тогда 
				Продолжить;	
			КонецЕсли;
		КонецЕсли; 

		// проверка перемещения задачи по MOVE 
        //***OW @20230220035826  Start [БПВ] 
        Попытка
    		Если НЕ ПустаяСтрока(ст.id) Тогда
    			ЗадачиJIRA = ПолучитьЗадачиJIRAПоID(ст.id, ИнстансJIRA);	
    			Для Каждого ЗадачаJIRAПоID Из ЗадачиJIRA Цикл 
    				Если ЗадачаJIRAПоID <> Задача Тогда 
    					Если ПереместитьЗадачуJIRA(ЗадачаJIRAПоID, Задача) = Ложь Тогда 
    						Продолжить;	
    					КонецЕсли
    				КонецЕсли
    			КонецЦикла;	
    		КонецЕсли;
        Исключение
        КонецПопытки;
        //***OW @20230220035820  End [БПВ] 
		// проверка перемещения задачи по специальной кнопке (в ExternalTicketID содержиться старый код задачи)
		Если СтруктураПолей.Свойство("ExternalTicketID") = Истина Тогда 
			КодСтаройЗадачиJIRA = СтруктураПолей.ExternalTicketID;
			ПроектJIRA			= СтруктураПолей.Project;
			Если НЕ ПустаяСтрока(КодСтаройЗадачиJIRA) И ВРег(КодСтаройЗадачиJIRA) <> ВРег("n/a") И ЗначениеЗаполнено(ПроектJIRA) Тогда 
				Если МассивПроектов_BA_SSA.Найти(ПроектJIRA) <> Неопределено Тогда 
					//++OW Копачев А.С. 31.03.2022 ONEC-7464
					//ЗадачаJIRAСтарая = НайтиЗадачуJIRA(КодСтаройЗадачиJIRA, ИнстансJIRA);
					//Если ЗначениеЗаполнено(ЗадачаJIRAСтарая) Тогда 
					//	Если ПереместитьЗадачуJIRA(ЗадачаJIRAСтарая, Задача) = Ложь Тогда 
					//		Продолжить;	
					//	КонецЕсли
					//Иначе 
					//	Если ПереместитьОбъектыЗадачиJIRA(КодСтаройЗадачиJIRA, Задача) = Ложь Тогда		
					//		Продолжить;
					//	КонецЕсли;	
					//КонецЕсли;
					
					ЗадачаJIRAСтарая = НайтиСоздатьЗадачуJIRA(КодСтаройЗадачиJIRA, ИнстансJIRA);
					Если ПереместитьЗадачуJIRA(ЗадачаJIRAСтарая, Задача) = Ложь Тогда 
						Продолжить;	
					КонецЕсли
					//--OW Копачев А.С. 31.03.2022 ONEC-7464	
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;	
		//--OW Копачев А.С. 12.11.2019 ONEC-4099
			
		
		//если одно из ключевых полей изменилось, то нужно будет сделать запись в регистр истории
		НужнаЗаписьВРегистре = Ложь;
		
		Если Задача.CreatedDate <> СтруктураПолей.CreatedDate 	ИЛИ 
			Задача.ResolvedDate <> СтруктураПолей.ResolvedDate 	ИЛИ 
			Задача.StartDate 	<> СтруктураПолей.StartDate 	ИЛИ  //OW Копачев А.С. 12.04.2021 ONEC-6508
			Задача.DueDate 		<> СтруктураПолей.DueDate 		ИЛИ 
			Задача.Status 		<> СтруктураПолей.Status 		ИЛИ 
			Задача.Resolution 	<> СтруктураПолей.Resolution 	ИЛИ 
			Задача.FixVersions 	<> СтруктураПолей.FixVersions 	ИЛИ
			Задача.Customer 	<> СтруктураПолей.Customer 		ИЛИ 
			Задача.Product 		<> СтруктураПолей.Product 		ИЛИ 
			Задача.Assignee 	<> СтруктураПолей.Assignee 		ИЛИ
			//+++ Брук Б 26.11.2019 ONEC-4789
			Задача.Expert 		<> СтруктураПолей.Expert		ИЛИ
			Задача.LeadSME      <> СтруктураПолей.LeadSME		ИЛИ
			//--- Брук Б 26.11.2019 ONEC-4789
			//++OW Копачев А.С. 13.06.2019 ONEC-4531
			Задача.Type 		<> СтруктураПолей.Type 			ИЛИ
			Задача.Reporter 	<> СтруктураПолей.Reporter      ИЛИ
			Задача.LoggedTime 	<> Окр(СтруктураПолей.LoggedTime, 5) ИЛИ
			//--OW Копачев А.С. 13.06.2019 ONEC-4531
			Задача.EstimationTime <> Окр(СтруктураПолей.EstimationTime, 5) ИЛИ 
			//++OW Копачев А.С. 13.02.2019 ONEC-4137 
			Задача.InternalPhaseStatus <> СтруктураПолей.InternalPhaseStatus ИЛИ
			//--OW Копачев А.С. 13.02.2019 ONEC-4137 
			//++OW Копачев А.С. 11.03.2020 ONEC-5399 
			Задача.RequestType <> СтруктураПолей.RequestType ИЛИ
			Задача.IssueReason <> СтруктураПолей.IssueReason ИЛИ
			//--OW Копачев А.С. 11.03.2020 ONEC-5399
			//Задача.PhaseType <> СтруктураПолей.PhaseType ИЛИ //OW Копачев А.С. 11.12.2019 ONEC-5154 
			Лев(Задача.StatusDetails,500) <> Лев(СтруктураПолей.StatusDetails,500) ИЛИ //OW Копачев А.С. 11.12.2019 ONEC-5154
			Задача.PMAudit <> СтруктураПолей.PMAudit //+++ Брук Б 26.08.2020 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5803
			
			Тогда
						
			Если Задача.IsTransferred = Ложь Тогда  //OW Копачев А.С. 10.12.2019 ONEC-5182 
				НужнаЗаписьВРегистре = Истина;
			КонецЕсли; //OW Копачев А.С. 10.12.2019 ONEC-5182	   
				
		КонецЕсли; 
		
		
		//при этом перезаписываем все поля задачи, без проверок
		ЗадачаОбъект = Задача.ПолучитьОбъект();		
		//заполним поля задачи
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, СтруктураПолей,,"Components, LinksToOtherTasks");
		//заполним табличные части задачи
		ЗадачаОбъект.Components.Очистить();
		
		Для Каждого эл Из СтруктураПолей.Components Цикл
			нСтрока = ЗадачаОбъект.Components.Добавить();
			нСтрока.Component = эл;
		КонецЦикла; 
				
		ЗадачаОбъект.LinksToOtherTasks.Очистить();
		
		Для Каждого эл Из СтруктураПолей.LinksToOtherTasks Цикл
			нСтрока = ЗадачаОбъект.LinksToOtherTasks.Добавить();
			нСтрока.Task = эл;
		КонецЦикла; 
		
		//++OW Копачев А.С. 13.08.2020 ONEC-5859 
		ЗадачаОбъект.ПоказателиSLA.Очистить();
		Если СтруктураПолей.Свойство("ПоказателиSLA_EsimationAnalysis") = Истина
			И ТипЗнч(СтруктураПолей.ПоказателиSLA_EsimationAnalysis) = Тип("ТаблицаЗначений") Тогда 
			
			Для Каждого ТекСтрокаПоказателиSLA Из СтруктураПолей.ПоказателиSLA_EsimationAnalysis Цикл
				НовСтрока = ЗадачаОбъект.ПоказателиSLA.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрокаПоказателиSLA)	
			КонецЦикла;	
		КонецЕсли;	
		Если СтруктураПолей.Свойство("ПоказателиSLA_TimeToResolution") = Истина
			И ТипЗнч(СтруктураПолей.ПоказателиSLA_TimeToResolution) = Тип("ТаблицаЗначений") Тогда 
			
			Для Каждого ТекСтрокаПоказателиSLA Из СтруктураПолей.ПоказателиSLA_TimeToResolution Цикл
				НовСтрока = ЗадачаОбъект.ПоказателиSLA.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрокаПоказателиSLA)	
			КонецЦикла;	
		КонецЕсли;
		//--OW Копачев А.С. 13.08.2020 ONEC-5859
		
		//++OW Копачев А.С. 05.08.2021 ONEC-6903 
		ЗагрузитьТаблицуИзСтруктуруПолейВЗадачу(ЗадачаОбъект, СтруктураПолей, "ProjectPortfolioMonitoredMetrics");
		//Если ЗначениеЗаполнено(ЗадачаОбъект.ProjectPortfolioOverallRAGStatus) Тогда 
		//	НовСтрока = ЗадачаОбъект.ProjectPortfolioMonitoredMetrics.Добавить();
		//	НовСтрока.Metric = "OverallRAGStatus";
		//	НовСтрока.Value = ЗадачаОбъект.ProjectPortfolioOverallRAGStatus; 
		//КонецЕсли;	
		//--OW Копачев А.С. 05.08.2021 ONEC-6903
		
		//++OW Копачев А.С. 12.04.2019 ONEC-4361
		ЗагрузитьТаблицуИзСтруктуруПолейВЗадачу(ЗадачаОбъект, СтруктураПолей, "AvailableFor");
		ЗагрузитьТаблицуИзСтруктуруПолейВЗадачу(ЗадачаОбъект, СтруктураПолей, "AvailableVia");
		
		//++OW Копачев А.С. 02.02.2021 ONEC-6489 
		ЗагрузитьТаблицуИзСтруктуруПолейВЗадачу(ЗадачаОбъект, СтруктураПолей, "Labels");
		//--OW Копачев А.С. 02.02.2021 ONEC-6489

		ЗадачаОбъект.НеразобранныеПоляПакета.Загрузить(ТЗ_НеразобранныеПоляПакета); 
		//--OW Копачев А.С. 12.04.2019 ONEC-4361
		
		ЗадачаОбъект.ДанныеЗагружены = Истина;
		
		ДатаФактическихИзмененийJIRA = ДатаФактическихИзмененийJIRA(Задача.Project);
		
		Попытка		
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("JIRA_ДействиеИнициатор", ДействиеИнициатор); //OW Копачев А.С. 10.08.2021 ONEC-6903 
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("JIRA_Автор", Автор); //OW Копачев А.С. 10.08.2021 ONEC-6903 
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("JIRA_ДатаФактическихИзменений", ДатаФактическихИзмененийJIRA); //OW Копачев А.С. 10.08.2021 ONEC-6903 

			ЗадачаОбъект.Записать();	
		Исключение
			OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка,
									"Ошибка при записи объекта Задача JIRA: " + ОписаниеОшибки());	
		КонецПопытки;				
				
		//++OW Копачев А.С. 14.05.2019 
		// постановка в очередь на формировние документа
		Если ЗначениеЗаполнено(Задача.Project) Тогда 
			Если МассивПроектовДляФормированияДокументов.Найти(Задача.Project) <> Неопределено Тогда 
			
				OW_ОтложеннаяОбработкаОбъектов.ДобавитьОбъектДляОтложеннойОбработки(Задача, 
												ПредопределенноеЗначение("Перечисление.ВидыДействийОтложеннойОбработки.СформироватьДокументПоЗадачеJIRA"));
												
			КонецЕсли;
											
			Если МассивПроектов_BA_SSA.Найти(Задача.Project) <> Неопределено Тогда 
			
				OW_ОтложеннаяОбработкаОбъектов.ДобавитьОбъектДляОтложеннойОбработки(Задача, 
												ПредопределенноеЗначение("Перечисление.ВидыДействийОтложеннойОбработки.ОбновитьОценочныйПроектПоЗадачеJIRA"));
												
			КонецЕсли;											
		КонецЕсли;									
		//--OW Копачев А.С. 14.05.2019 

		//делаем запись в регистр истории, если нужно
		Если НужнаЗаписьВРегистре Тогда
			нЗапись = РегистрыСведений.ИсторияИзмененийЗадачJIRA.СоздатьМенеджерЗаписи();
			
			//++OW Копачев А.С. 09.12.2019 ONEC-5182 
			//нЗапись.Период = ТекущаяДата();
			
			// Пра заливке истории изменений до 6 утра переность данные на период 23:59 предыдущего дня
			// Кроме задач CLDR (по которым формируются документы), эти задачи перезаливаются отдельным рег заданием гораздо чаще,
			// поэтому историю по ним не переносим на другую дату
			//ТекДата = ТекущаяДата();
			//++OW Копачев А.С. 12.04.2021 ONEC-6508
			////Если Час(ТекДата) >= 5 И Час(ТекДата) <=6 И МассивПроектовДляФормированияДокументов.Найти(Задача.Project) = Неопределено Тогда 
			//Если Час(ТекДата) <=6 И МассивПроектовДляФормированияДокументов.Найти(Задача.Project) = Неопределено Тогда 
			////--OW Копачев А.С. 12.04.2021 ONEC-6508
			//	нЗапись.Период = НачалоДня(OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ТекДата, -1)) + 23 * 3600 + 59 * 60;
			//Иначе
			//	нЗапись.Период = ТекДата;	
			//КонецЕсли;	
			нЗапись.Период = ДатаФактическихИзмененийJIRA;
			//--OW Копачев А.С. 09.12.2019 ONEC-5182
			
			ЗаполнитьЗначенияСвойств(нЗапись,СтруктураПолей, "Задача, Status, Resolution, FixVersions, Customer, Product, Assignee, Expert, Reporter, EstimationTime, LoggedTime, CreatedDate, ResolvedDate, StartDate, DueDate, InternalPhaseStatus, Type, LeadSME, RequestType, IssueReason, StatusDetails, PMAudit");
						
			нЗапись.ТипФазы = СтруктураПолей.PhaseType; //OW Копачев А.С. 11.12.2019 ONEC-5154
			
			нЗапись.Автор = Автор;  //OW Копачев А.С. 12.04.2021 ONEC-6508
		
			Попытка
				нЗапись.Записать(Истина);	
			Исключение
				OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка,
										"Ошибка при записи в регистр История изменения задач JIRA: " + ОписаниеОшибки());	
			КонецПопытки;			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		
		Если Счетчик = 500 Тогда
			СчетчикВсего = СчетчикВсего + Счетчик;
			Счетчик = 0;
			ВывестиЛогСообщение_ЗагрузкаЗадач("Обновлена информация по: " + СчетчикВсего + " задач");	
		КонецЕсли; 
		
	КонецЦикла; 
	
	//запишем ошибки в лог
	МассивПроверкиЮзеров = OW.СвернутьМассив(МассивПроверкиЮзеров);
	Для Каждого НеНайденныйЛогин Из МассивПроверкиЮзеров Цикл
		OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Ошибка, "Не найден пользователь (по мылу): " + НеНайденныйЛогин);	
	КонецЦикла; 
	
	//+++ Брук Б отключаем сообщение для 0 задач
	Если  ТаблицаДанных.Количество()>0 Тогда
		ВывестиЛогСообщение_ЗагрузкаЗадач("Обновление информации ЗАВЕРШЕНО для: " + ТаблицаДанных.Количество() + " задач.");	
	КонецЕсли;	
	//--- Брук Б
	//- Пилюгин В.Е. 18.10.2017		
КонецПроцедуры

Функция ДатаФактическихИзмененийJIRA(Project) Экспорт
	// Пра заливке истории изменений до 6 утра переность данные на период 23:59 предыдущего дня
	// Кроме задач CLDR (по которым формируются документы), эти задачи перезаливаются отдельным рег заданием гораздо чаще,
	// поэтому историю по ним не переносим на другую дату
	ФактическаяДата = ТекущаяДата();
	
	МассивПроектовДляФормированияДокументов = ПроектыJIRAДляФормированияДокументов();
	
	Если Час(ФактическаяДата) <=6 И МассивПроектовДляФормированияДокументов.Найти(Project) = Неопределено Тогда 
		ФактическаяДата = НачалоДня(OW_ОбщегоНазначенияКлиентСервер.ДобавитьДень(ФактическаяДата, -1)) + 23 * 3600 + 59 * 60;	
	КонецЕсли;	
	
	Возврат  ФактическаяДата;
	//--OW Копачев А.С. 09.12.2019 ONEC-5182
КонецФункции

Функция ПолучитьЗначениеПоляПакета(ИнстансJIRA, ЗначениеПоляJIRA, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи, МассивПроверкиЮзеров, ТЗ_НеразобранныеПоляПакета)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПоляJIRA) Тогда 
		Возврат	ЗначениеПоляJIRA;
	КонецЕсли;		
	
	Значение = ЗначениеПоляJIRA;	
	
	// Строка
	Если ИмяРеквизитаЗадачи = "PurposeOfTrip" 
		ИЛИ ИмяРеквизитаЗадачи = "DocumentNumber" 
        ИЛИ ИмяРеквизитаЗадачи = "PurposeOfTrip_Memo" 
		ИЛИ ИмяРеквизитаЗадачи = "ID"
        ИЛИ ИмяРеквизитаЗадачи = "SIM"
        ИЛИ ИмяРеквизитаЗадачи = "Transport"
        ИЛИ ИмяРеквизитаЗадачи = "Hotel"
        ИЛИ ИмяРеквизитаЗадачи = "PersonalNumber"
  		ИЛИ ИмяРеквизитаЗадачи = "ExternalTicketID"
		ИЛИ ИмяРеквизитаЗадачи = "CDTClientCode"  
		ИЛИ ИмяРеквизитаЗадачи = "CommentsToPhasesClosure" //OW Копачев А.С. 03.04.2023 ONEC-8496 
		ИЛИ ИмяРеквизитаЗадачи = "StatusDetails" Тогда  //Копачев А.С. 01.09.2021 ONEC-6986 

		// без преобразования
		
	//++OW Копачев А.С. 01.09.2021 ONEC-6986 
	//// Ограниченная строка	
	//ИначеЕсли ИмяРеквизитаЗадачи = "StatusDetails" Тогда
	//	Значение = Лев(Значение, 500);
	//--OW Копачев А.С. 01.09.2021 ONEC-6986	
	
	// Строка из соответствия
	ИначеЕсли ИмяРеквизитаЗадачи = "CustomerRequestType" Тогда
		//++OW Копачев А.С. 29.01.2021 ONEC-6449 
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			ЗначениеRequestType = Значение.Получить("requestType");
			Если ТипЗнч(ЗначениеRequestType) = Тип("Соответствие") Тогда
				Значение = ЗначениеRequestType.Получить("name");
			КонецЕсли;	
		КонецЕсли;	
		//--OW Копачев А.С. 29.01.2021 ONEC-6449
	// Число
	ИначеЕсли ИмяРеквизитаЗадачи = "ID_Sync" 
		ИЛИ ИмяРеквизитаЗадачи = "RemainingDays"
		ИЛИ ИмяРеквизитаЗадачи = "SingleGross" 
		ИЛИ ИмяРеквизитаЗадачи = "Quantity" 
		ИЛИ ИмяРеквизитаЗадачи = "TotalAmountInEmployeeCurrency" 
		ИЛИ ИмяРеквизитаЗадачи = "ApprovedBudget"
		ИЛИ ИмяРеквизитаЗадачи = "PMAudit" Тогда // Брук Б 26.08.2020 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5803

		Если ТипЗнч(Значение) <> Тип("Число") Тогда  
			Значение = СтроковыеФункцииКлиентСервер.ПреобразоватьСтрокуВЧисло(Значение);		
		КонецЕсли;	
		
	// Число из соответствия
	ИначеЕсли ИмяРеквизитаЗадачи = "TotalComments" Тогда
	   	//++OW Копачев А.С. 17.02.2021 ONEC-6030
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("total");
		КонецЕсли;	
		//--OW Копачев А.С. 17.02.2021 ONEC-6030
		
	// Дата
	ИначеЕсли ИмяРеквизитаЗадачи = "LeaveFromDate"
		ИЛИ ИмяРеквизитаЗадачи = "LeaveToDate"
		ИЛИ ИмяРеквизитаЗадачи = "DepartureDate"
		ИЛИ ИмяРеквизитаЗадачи = "ReturnDate"  
		ИЛИ ИмяРеквизитаЗадачи = "LeaveFromDateForApplication"
		ИЛИ ИмяРеквизитаЗадачи = "LeaveToDateForApplication"
		ИЛИ ИмяРеквизитаЗадачи = "ExpenseDate" Тогда 
		
		Значение = ПреобразоватьДату(ЗначениеПоляJIRA);
		
	// Булево
    ИначеЕсли ИмяРеквизитаЗадачи = "Billable" 
        ИЛИ ИмяРеквизитаЗадачи = "SIMReturned" 
        ИЛИ ИмяРеквизитаЗадачи = "PaperReceived" 
        ИЛИ ИмяРеквизитаЗадачи = "Visa" Тогда
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда  					
			Значение = ПреобразоватьБулево(Значение);		
		КонецЕсли;
		
	// Email Пользователи	
	ИначеЕсли ИмяРеквизитаЗадачи = "ApprovedByEmployeeEmail"
	    ИЛИ ИмяРеквизитаЗадачи = "ApprovedByRequesterEmail" 
		ИЛИ ИмяРеквизитаЗадачи = "ApprovedByFinanceEmail" 
		ИЛИ ИмяРеквизитаЗадачи = "EmployeeEmail" 
		ИЛИ ИмяРеквизитаЗадачи = "LineManagerEmail" 
		ИЛИ ИмяРеквизитаЗадачи = "ApprovalsReceivedEmail"
		ИЛИ ИмяРеквизитаЗадачи = "InformedEmail" Тогда 

		Если ТипЗнч(Значение) = Тип("Массив") И Значение.Количество() > 0 Тогда 
			Значение = Значение[0]; // берем первое значение
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("name");
		КонецЕсли;
	
	// СправочникСсылка.Пользователи	
	ИначеЕсли ИмяРеквизитаЗадачи = "ApprovedByEmployee"
	    ИЛИ ИмяРеквизитаЗадачи = "ApprovedByRequester"
		ИЛИ ИмяРеквизитаЗадачи = "ApprovedByFinance"
		ИЛИ ИмяРеквизитаЗадачи = "Employee"
		ИЛИ ИмяРеквизитаЗадачи = "LineManager"
		ИЛИ ИмяРеквизитаЗадачи = "ApprovalsReceived"
		ИЛИ ИмяРеквизитаЗадачи = "Informed"
        ИЛИ ИмяРеквизитаЗадачи = "SIMApprovedBy"
		ИЛИ ИмяРеквизитаЗадачи = "TaxiApprovedBy" Тогда 
		
		Если ТипЗнч(Значение) = Тип("Массив") И Значение.Количество() > 0 Тогда 
			Значение = Значение[0]; // берем первое значение
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("name");
		КонецЕсли;
		Ссылка = OW.ПолучитьЮзераПоЛогину(Значение);
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			Значение = Ссылка;
		Иначе	
			МассивПроверкиЮзеров.Добавить(Значение);
			ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеПоляJIRA, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи);
		КонецЕсли;
		
	// Валюты	
	ИначеЕсли ИмяРеквизитаЗадачи = "Currency" 
		ИЛИ ИмяРеквизитаЗадачи = "EmployeeCurrency" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		
		// валюта передается строкой, но в виде <Наименование валюты> - <НаименованиеПолноеАнгл валюты> (пример, IDR - Rupee)
		НаименованиеВалюты = Лев(Значение,3);
		Значение = НайтиПоНаименованиюЭлементСправочника("Валюты", НаименованиеВалюты);
	
	// Фазы	
	ИначеЕсли ИмяРеквизитаЗадачи = "Phase" Тогда  
		
		//++OW Копачев А.С. 13.07.2020 ONEC-5832 
		ИспользоватьНовыйМеханизмПолученияФазыРодителя = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовыйМеханизмПолученияФазыРодителя) = Истина;
		Если ИспользоватьНовыйМеханизмПолученияФазыРодителя Тогда 
			Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
				ЗначениеKey = Значение.Получить("key");
				Если ЗначениеЗаполнено(ЗначениеKey) Тогда 
					//++OW Копачев А.С. 31.03.2022 ONEC-7464
					//Значение = ПолучитьФазуПоКодуПроектаJIRA(ЗначениеKey);				
					Значение = ПолучитьФазуПоКодуИнтеграцииJIRA(ПолучитьКодИнтеграции_JIRA(ЗначениеKey, ИнстансJIRA));
					//--OW Копачев А.С. 31.03.2022 ONEC-7464			
				КонецЕсли;	
			КонецЕсли;		
		Иначе
			//++OW Копачев А.С. 31.03.2022 ONEC-7464
			//Значение = ПолучитьФазуПоКодуПроектаJIRA(Значение);				
			Значение = ПолучитьФазуПоКодуИнтеграцииJIRA(ПолучитьКодИнтеграции_JIRA(Значение, ИнстансJIRA));
			//--OW Копачев А.С. 31.03.2022 ONEC-7464
		КонецЕсли;	
		//--OW Копачев А.С. 13.07.2020 ONEC-5832
				
	// Задачи JIRA Фазы	
	ИначеЕсли ИмяРеквизитаЗадачи = "PhaseTask" Тогда  
		
		//++OW Копачев А.С. 13.07.2020 ONEC-5832 
		//Значение = JIRA.НайтиСоздатьЗадачуJIRA(Значение, ИнстансJIRA);
		ИспользоватьНовыйМеханизмПолученияФазыРодителя = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовыйМеханизмПолученияФазыРодителя) = Истина;
		Если ИспользоватьНовыйМеханизмПолученияФазыРодителя Тогда 
			Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
				ЗначениеKey = Значение.Получить("key");
				Если ЗначениеЗаполнено(ЗначениеKey) Тогда 
					Значение = JIRA.НайтиСоздатьЗадачуJIRA(ЗначениеKey, ИнстансJIRA);
				КонецЕсли;	
			КонецЕсли;		
		Иначе
			Значение = JIRA.НайтиСоздатьЗадачуJIRA(Значение, ИнстансJIRA);	
		КонецЕсли;	
		//--OW Копачев А.С. 13.07.2020 ONEC-5832
		
	// Задачи JIRA ContainerPickerTask	
	ИначеЕсли ИмяРеквизитаЗадачи = "ContainerPickerTask" Тогда  
		
		//++OW Копачев А.С. 22.04.2021 ONEC-6650
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("key");
		КонецЕсли;
		
		Значение = JIRA.НайтиСоздатьЗадачуJIRA(Значение, ИнстансJIRA)	
		//--OW Копачев А.С. 22.04.2021 ONEC-6650	
		
	// Задачи JIRA Родителя	
	ИначеЕсли ИмяРеквизитаЗадачи = "ParentTask" Тогда  
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("key");
		КонецЕсли;
		
		Значение = JIRA.НайтиСоздатьЗадачуJIRA(Значение, ИнстансJIRA);
		
	// Страны	
	ИначеЕсли ИмяРеквизитаЗадачи = "DestinationCountry" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		// если нашли по наименованию - ссылка, нет - строка 
		ИмяРеквизита = ИмяРеквизитаЭлементаСправочникаДляПоиска("СтраныМира");
		Ссылка = НайтиПоРеквизитуЭлементСправочника("СтраныМира", ИмяРеквизита, Значение);
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			Значение = Ссылка;	
		КонецЕсли;
		
	// Города	
	ИначеЕсли ИмяРеквизитаЗадачи = "DestinationCity" Тогда
		
		ИмяРеквизита = ИмяРеквизитаЭлементаСправочникаДляПоиска("ГородаСтранМира");
		Ссылка = НайтиПоРеквизитуЭлементСправочника("ГородаСтранМира", ИмяРеквизита, Значение);
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			Значение = Ссылка;	
		КонецЕсли;	
		
	// Списки: 
	//	СпособыСвязиССотрудникамиПриОтсутствииJIRA	
	//	НаправленияДеятельностиДляКоманд
	ИначеЕсли ИмяРеквизитаЗадачи = "AvailableVia" 
		ИЛИ ИмяРеквизитаЗадачи = "AvailableFor" Тогда
		ТЗЗначений = Новый ТаблицаЗначений;
		ТЗЗначений.Колонки.Добавить(ИмяРеквизитаЗадачи);
		
		Если ТипЗнч(ЗначениеПоляJIRA) = Тип("Массив") Тогда 
			Для Каждого ТекЭлемент Из ЗначениеПоляJIRA Цикл 
				Если ТипЗнч(ТекЭлемент) = Тип("Соответствие") Тогда 
					ЗначениеЭлемента = ТекЭлемент.Получить("value");
					
					ЗначениеСсылки = Неопределено;
					Если ИмяРеквизитаЗадачи = "AvailableVia" Тогда 
						ЗначениеСсылки = НайтиПоНаименованиюЭлементСправочника("СпособыСвязиССотрудникамиПриОтсутствииJIRA", ЗначениеЭлемента);
					ИначеЕсли ИмяРеквизитаЗадачи = "AvailableFor" Тогда
						ЗначениеСсылки = НайтиПоНаименованиюЭлементСправочника("НаправленияДеятельностиДляКоманд", ЗначениеЭлемента);
					КонецЕсли;
								
					Если ЗначениеЗаполнено(ЗначениеСсылки) Тогда 
						НовСтрокаТЗ = ТЗЗначений.Добавить();
						НовСтрокаТЗ[ИмяРеквизитаЗадачи] = ЗначениеСсылки; 
					Иначе
						ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеЭлемента, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи, ИмяРеквизитаЗадачи);
					КонецЕсли;	
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;		
		Значение = ТЗЗначений;
		
	//++OW Копачев А.С. 02.02.2021 ONEC-6489 	
	ИначеЕсли ИмяРеквизитаЗадачи = "Labels" Тогда
		
		ТЗЗначений = Новый ТаблицаЗначений;
		ТЗЗначений.Колонки.Добавить("Label");
		
		Если ТипЗнч(ЗначениеПоляJIRA) = Тип("Массив") Тогда 
			Для Каждого ЗначениеЭлемента Из ЗначениеПоляJIRA Цикл 
				Если ТипЗнч(ЗначениеЭлемента) = Тип("Строка") Тогда 		
					ЗначениеСсылки = Неопределено;
					Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда 
						ЗначениеСсылки = ПолучитьСоздатьЭлементСправочника("Labels", ЗначениеЭлемента);
					КонецЕсли;
												
					Если ЗначениеЗаполнено(ЗначениеСсылки) Тогда 
						НовСтрокаТЗ = ТЗЗначений.Добавить();
						НовСтрокаТЗ["Label"] = ЗначениеСсылки; 
					Иначе
						ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеЭлемента, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи, ИмяРеквизитаЗадачи);
					КонецЕсли;	
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;		
		Значение = ТЗЗначений;
		
	//--OW Копачев А.С. 02.02.2021 ONEC-6489
	
	//++OW Копачев А.С. 14.08.2020 ONEC-5859 
	//ПоказателиSLA			 						 
	ИначеЕсли ИмяРеквизитаЗадачи = "ПоказателиSLA_EsimationAnalysis" 
			ИЛИ ИмяРеквизитаЗадачи = "ПоказателиSLA_TimeToResolution" Тогда
			
		ТЗЗначений = Новый ТаблицаЗначений;
		ТЗЗначений.Колонки.Добавить("ПоказательSLA", 	Новый ОписаниеТипов("СправочникСсылка.ПоказателиSlaJIRA"));
		ТЗЗначений.Колонки.Добавить("ДатаНачала", 		Новый ОписаниеТипов("Дата"));
		ТЗЗначений.Колонки.Добавить("ДатаОкончания", 	Новый ОписаниеТипов("Дата"));
		ТЗЗначений.Колонки.Добавить("ЦельСекунд", 		Новый ОписаниеТипов("Число"));
		ТЗЗначений.Колонки.Добавить("ОстатокСекунд", 	Новый ОписаниеТипов("Число"));
		ТЗЗначений.Колонки.Добавить("СрокиНарушены", 	Новый ОписаниеТипов("Булево"));
		ТЗЗначений.Колонки.Добавить("СрокиПриостановлены", Новый ОписаниеТипов("Булево"));
		ТЗЗначений.Колонки.Добавить("ДатаПолученияДанных", Новый ОписаниеТипов("Дата"));
		ТЗЗначений.Колонки.Добавить("ДатаОкончанияДоНарушения", Новый ОписаниеТипов("Дата"));

		ВидПоказателяSLA = Неопределено;
		Если ИмяРеквизитаЗадачи = "ПоказателиSLA_EsimationAnalysis" тогда
			ВидПоказателяSLA = ПредопределенноеЗначение("Справочник.ПоказателиSlaJIRA.EstimationAnalysis");
		ИначеЕсли ИмяРеквизитаЗадачи = "ПоказателиSLA_TimeToResolution" тогда
			ВидПоказателяSLA = ПредопределенноеЗначение("Справочник.ПоказателиSlaJIRA.TimeToResolution");
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоляJIRA) = Тип("Соответствие") Тогда 
			
			//++OW Копачев А.С. 10.06.2021 ONEC-6813		
			//ДанныеДляРазбора = Неопределено;
			//
			//ДанныеcompletedCycles = ЗначениеПоляJIRA.Получить("completedCycles");	
			//ДанныеongoingCycle = ЗначениеПоляJIRA.Получить("ongoingCycle");	
			//Если ТипЗнч(ДанныеcompletedCycles) = Тип("Массив")
			//	И ДанныеcompletedCycles.Количество() > 0  Тогда 
			//	
			//	ДанныеДляРазбора = ДанныеcompletedCycles[0];
			//ИначеЕсли ТипЗнч(ДанныеongoingCycle) = Тип("Соответствие")  Тогда 
			//	ДанныеДляРазбора = ДанныеongoingCycle;
			//КонецЕсли;	
			//
			//Если ДанныеДляРазбора <> Неопределено Тогда 
								
			МассивДанныхДляРазбора = Новый Массив;
			
			ДанныеcompletedCycles = ЗначениеПоляJIRA.Получить("completedCycles");	
			ДанныеongoingCycle = ЗначениеПоляJIRA.Получить("ongoingCycle");	
			
			// для EstimationAnalysis оставим старую логику разбора (пока)
			Если ВидПоказателяSLA = ПредопределенноеЗначение("Справочник.ПоказателиSlaJIRA.EstimationAnalysis") Тогда 
				Если ТипЗнч(ДанныеcompletedCycles) = Тип("Массив")
					И ДанныеcompletedCycles.Количество() > 0  Тогда 
					
					ДанныеДляРазбора = ДанныеcompletedCycles[0];
				ИначеЕсли ТипЗнч(ДанныеongoingCycle) = Тип("Соответствие")  Тогда 
					ДанныеДляРазбора = ДанныеongoingCycle;
				КонецЕсли;	
			Иначе
				
				Если ТипЗнч(ДанныеcompletedCycles) = Тип("Массив") Тогда 
					Для Каждого ТекДанныеcompletedCycles Из ДанныеcompletedCycles Цикл 
						МассивДанныхДляРазбора.Добавить(ТекДанныеcompletedCycles);
					КонецЦикла;	
				КонецЕсли;
				
				Если ТипЗнч(ДанныеongoingCycle) = Тип("Соответствие")  Тогда 
					МассивДанныхДляРазбора.Добавить(ДанныеongoingCycle);
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого ДанныеДляРазбора Из МассивДанныхДляРазбора Цикл 	
			//--OW Копачев А.С. 10.06.2021 ONEC-6813	
				
				НовСтрока = ТЗЗначений.Добавить();
				НовСтрока.ПоказательSLA = ВидПоказателяSLA;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("startTime");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.ДатаНачала = ПреобразоватьДату(ЗначениеЭлемента.Получить("jira"));
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("stopTime");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.ДатаОкончания = ПреобразоватьДату(ЗначениеЭлемента.Получить("jira"));
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("breachTime");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.ДатаОкончанияДоНарушения = ПреобразоватьДату(ЗначениеЭлемента.Получить("jira"));
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("goalDuration");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.ЦельСекунд = ЗначениеЭлемента.Получить("millis")/1000;
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("remainingTime");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.ОстатокСекунд = ЗначениеЭлемента.Получить("millis")/1000;
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("breached");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.СрокиНарушены = ЗначениеЭлемента;
				КонецЕсли;
				ЗначениеЭлемента  =  ДанныеДляРазбора.Получить("paused");
				Если ЗначениеЭлемента <> Неопределено Тогда 
					НовСтрока.СрокиПриостановлены = ЗначениеЭлемента;
				КонецЕсли;
				НовСтрока.ДатаПолученияДанных = ТекущаяДата();
			
			КонецЦикла;
		КонецЕсли;	
		
		Значение = ТЗЗначений;
	//--OW Копачев А.С. 14.08.2020 ONEC-5859
	//++OW Копачев А.С. 03.04.2023 ONEC-8496
	ИначеЕсли ИмяРеквизитаЗадачи = "ToBeClosedInTheCurrentQuarter" Тогда  
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		
		Попытка
			Значение = Перечисления.ЗначенияЗаполненностиДанных.ОпределитьЗначение(СокрЛП(Значение));
		Исключение
			Значение = Неопределено;	
		КонецПопытки;		
	//--OW Копачев А.С. 03.04.2023 ONEC-8496	
	//++OW Копачев А.С. 05.08.2021 ONEC-6903 
	//Показатели ProjectPortfolioMonitored		 						 
	ИначеЕсли ИмяРеквизитаЗадачи = "ProjectPortfolioOverallRAGStatus" Тогда  
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		
		Попытка
			Значение = Перечисления.ЗначенияПоказателейПортфеляПроектов[СтрЗаменить(Значение, " ", "")];
		Исключение
			Значение = Неопределено;	
		КонецПопытки;
	
	ИначеЕсли ИмяРеквизитаЗадачи = "ProjectPortfolioMonitoredMetrics" Тогда
			
		ТЗЗначений = Новый ТаблицаЗначений;
		ТЗЗначений.Колонки.Добавить("Metric", Новый ОписаниеТипов("Строка"));
		ТЗЗначений.Колонки.Добавить("Value", Новый ОписаниеТипов("ПеречислениеСсылка.ЗначенияПоказателейПортфеляПроектов"));
		
		Если ТипЗнч(ЗначениеПоляJIRA) = Тип("Массив") Тогда 
			Для Каждого ЗначениеЭлемента Из ЗначениеПоляJIRA Цикл 
				Если ТипЗнч(ЗначениеЭлемента) = Тип("Соответствие") Тогда 
					ЗначениеValue = ЗначениеЭлемента.Получить("value");					
					ЗначениеDisabled = ЗначениеЭлемента.Получить("disabled");
					ЗначениеDisabledСсылка = ?(ЗначениеDisabled = Ложь, Перечисления.ЗначенияПоказателейПортфеляПроектов.NOK, Перечисления.ЗначенияПоказателейПортфеляПроектов.OK);
					
					Если НЕ ПустаяСтрока(ЗначениеValue) Тогда 
						НовСтрокаТЗ = ТЗЗначений.Добавить();
						НовСтрокаТЗ["Metric"] = ЗначениеValue;
						
						НовСтрокаТЗ["Value"] = ЗначениеDisabledСсылка;
					Иначе
						ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеЭлемента, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи, ИмяРеквизитаЗадачи);
					КонецЕсли;
				КонецЕсли;			
			КонецЦикла;
		КонецЕсли;		
		Значение = ТЗЗначений;
		
	//--OW Копачев А.С. 05.08.2021 ONEC-6903

	//////////////////////////////////////////////////////////////////////////////////	
	// Справочники с поиском по наименованию 	
	
	// Организации	
	ИначеЕсли ИмяРеквизитаЗадачи = "EmployeeLegalEntity" 
		ИЛИ ИмяРеквизитаЗадачи = "CostCenterLegalEntity"  Тогда 
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		
		ИмяРеквизита = ИмяРеквизитаЭлементаСправочникаДляПоиска("Организации");
		Значение = НайтиПоРеквизитуЭлементСправочника("Организации", ИмяРеквизита, Значение);
		
	// КонфигурацииЛицензий
	ИначеЕсли ИмяРеквизитаЗадачи = "Instance" Тогда 
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("КонфигурацииЛицензий", Значение);
		
	// ЦентрыЗатратJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "CostCenter" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ЦентрыЗатратJIRA", Значение);
    // Office	
	ИначеЕсли ИмяРеквизитаЗадачи = "Office" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("Офисы", Значение);
    // TripReason	
	ИначеЕсли ИмяРеквизитаЗадачи = "TripReason" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ПричиныПоездки", Значение); 
		
	// ВидыОтсутствийСотрудниковПолдняJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "HalfDay" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ВидыОтсутствийСотрудниковПолдняJIRA", Значение);
		
	// ПричиныОтсутствияСотрудниковJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "AbsenceReason" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		//++ УДАЛИТЬ (для теста)
		Если НРег(Значение) = НРег("Paid leave") Тогда 
			Значение = "Paid leave/Vacation";		
		КонецЕсли;	
		//-- УДАЛИТЬ
		
		Значение = НайтиПоНаименованиюЭлементСправочника("ПричиныОтсутствияСотрудниковJIRA", Значение);
		
	// КатегорииРасходовJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "ExpenseCategory" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("КатегорииРасходовJIRA", Значение);
		
	// ЦентрыЗатратJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "CostCenter" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ЦентрыЗатратJIRA", Значение);
		
	// БизнесРегионы	
	ИначеЕсли ИмяРеквизитаЗадачи = "CostCenterReportingRegion" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("БизнесРегионы", Значение);
		
	// СпособыОплатJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "PaymentMeans" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("СпособыОплатJIRA", Значение);
	
	// ОбластиКомпаний	
	ИначеЕсли ИмяРеквизитаЗадачи = "CostCenterArea" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ОбластиКомпаний", Значение);
		
	//++OW Копачев А.С. 11.12.2019 ONEC-5154 	
	// ТипыФаз	
	ИначеЕсли ИмяРеквизитаЗадачи = "PhaseType" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		Значение = НайтиПоНаименованиюЭлементСправочника("ТипыФаз", Значение);
	//--OW Копачев А.С. 11.12.2019 ONEC-5154
	
	//++OW Копачев А.С. 11.03.2020 ONEC-5399 
	// ПричиныОбращенийJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "IssueReason" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;   
		ЗначениеПоУмолчанию = Справочники.ПричиныОбращенийJIRA.ПустаяСсылка();
		Если ЗначениеЗаполнено(Значение) Тогда 
			Значение = ПолучитьСоздатьЭлементСправочника("ПричиныОбращенийJIRA", Значение, ЗначениеПоУмолчанию);
		Иначе
			Значение = ЗначениеПоУмолчанию;	
		КонецЕсли;	
	//--OW Копачев А.С. 11.03.2020 ONEC-5399
	//++OW Копачев А.С. 17.02.2021 ONEC-6030
	// УровниВоздействияJIRA	
	ИначеЕсли ИмяРеквизитаЗадачи = "ImpactLevel" Тогда
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;   
		ЗначениеПоУмолчанию = Справочники.УровниВоздействияJIRA.ПустаяСсылка();
		Если ЗначениеЗаполнено(Значение) Тогда 
			Значение = ПолучитьСоздатьЭлементСправочника("УровниВоздействияJIRA", Значение, ЗначениеПоУмолчанию);
		Иначе
			Значение = ЗначениеПоУмолчанию;	
		КонецЕсли;
	//--OW Копачев А.С. 17.02.2021 ONEC-6030
	
	//+++ 11.03.2021 Брук Б https://ows-jira.spb.openwaygroup.com/browse/ONEC-6608
	ИначеЕсли ИмяРеквизитаЗадачи = "EpicLink" Тогда  
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("key");
		КонецЕсли;
		
		Значение = JIRA.НайтиСоздатьЗадачуJIRA(Значение, ИнстансJIRA);
	//--- 11.03.2021 Брук Б https://ows-jira.spb.openwaygroup.com/browse/ONEC-6608
	
	
	//+++ 11.03.2021 Брук Б https://ows-jira.spb.openwaygroup.com/browse/ONEC-6610
	ИначеЕсли ИмяРеквизитаЗадачи = "GroupForSupportTasks" Тогда  
		
		ЗначениеПоУмолчанию = Справочники.GroupsForSupportTasks.ПустаяСсылка();
		
		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда 
			Значение = Значение.Получить("value");
		КонецЕсли;
		
		Значение = ПолучитьСоздатьЭлементСправочника("GroupsForSupportTasks", Значение, ЗначениеПоУмолчанию);
	//--- 11.03.2021 Брук Б https://ows-jira.spb.openwaygroup.com/browse/ONEC-6610
	
	//////////////////////////////////////////////////////////////////////////////////	
	// ВСЕ остальное - без преобразования	
	Иначе
		ВывестиЛогСообщение_ЗагрузкаЗадач("Нет преобразования строки пакета для поля (" + ИмяРеквизитаЗадачи + ").");	
		ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеПоляJIRA, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Значение) 
		И ТипЗнч(Значение) <> Тип("ТаблицаЗначений") 
		И ТипЗнч(Значение) <> Тип("Число")
		И ТипЗнч(Значение) <> Тип("Строка")
		И ТипЗнч(Значение) <> Тип("Булево") Тогда 
		
		//Если ИмяРеквизитаЗадачи <> "Labels"
		//	И  ИмяРеквизитаЗадачи <> "Participants" Тогда 
		
			ДобавитьВНеразобранныеПоляПакетаЗадачи(ТЗ_НеразобранныеПоляПакета, ЗначениеПоляJIRA, ИдентификаторПоляJIRA, ИмяРеквизитаЗадачи);
		//КонецЕсли;	
	КонецЕсли;
	
	Возврат Значение;	
КонецФункции	

Процедура ЗагрузитьТаблицуИзСтруктуруПолейВЗадачу(ЗадачаОбъект, СтруктураПолей, ИмяТаблицы)
	ЗадачаОбъект[ИмяТаблицы].Очистить();
	Если СтруктураПолей.Свойство(ИмяТаблицы) И ТипЗнч(СтруктураПолей[ИмяТаблицы]) = Тип("ТаблицаЗначений") Тогда 
		ЗадачаОбъект[ИмяТаблицы].Загрузить(СтруктураПолей[ИмяТаблицы]);	
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьВНеразобранныеПоляПакетаЗадачи(НеразобранныеПоляПакета, Значение, Идентификатор, ИмяРеквизита, ИмяТабличнойЧасти = "")
	
	НовСтрока = НеразобранныеПоляПакета.Добавить();	
	НовСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	НовСтрока.ИмяРеквизита 		= ИмяРеквизита;
	НовСтрока.Идентификатор 	= Идентификатор;
	НовСтрока.Значение 			= OW.ЗаписатьДанныеВJSON(Значение);
	
КонецПроцедуры

Функция СоздатьСтруктуруТаблицыДанных(ИнстансJIRA)
	//+ Пилюгин В.Е. 18.10.2017
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Code");
	ТЗ.Колонки.Добавить("Summary");
	ТЗ.Колонки.Добавить("Type");
	ТЗ.Колонки.Добавить("Priority");
	ТЗ.Колонки.Добавить("Product");
	ТЗ.Колонки.Добавить("ProductArea");
	ТЗ.Колонки.Добавить("Description");
	ТЗ.Колонки.Добавить("ResultDetails");
	ТЗ.Колонки.Добавить("ResultDetailsExternal");
	ТЗ.Колонки.Добавить("ProjectName");
	ТЗ.Колонки.Добавить("ProjectKey");
	ТЗ.Колонки.Добавить("ProjectCategory");
	ТЗ.Колонки.Добавить("Estimation");
	ТЗ.Колонки.Добавить("Posting");
	ТЗ.Колонки.Добавить("Status");
	ТЗ.Колонки.Добавить("Resolution");
	ТЗ.Колонки.Добавить("InternalPhaseStatus");     //OW Копачев А.С. 13.02.2019 ONEC-4137 										   
	ТЗ.Колонки.Добавить("CreatedDate");
	ТЗ.Колонки.Добавить("UpdatedDate");
	ТЗ.Колонки.Добавить("ResolvedDate");
	ТЗ.Колонки.Добавить("DueDate");
	ТЗ.Колонки.Добавить("Assignee");
	ТЗ.Колонки.Добавить("Reporter");
	ТЗ.Колонки.Добавить("Developer");
	ТЗ.Колонки.Добавить("Techwriter");
	ТЗ.Колонки.Добавить("ChangeApprovedBy");
	ТЗ.Колонки.Добавить("CodeReviewPerformedBy");
	ТЗ.Колонки.Добавить("CodeReviewResultApprovedBy");
	ТЗ.Колонки.Добавить("Tester");
	ТЗ.Колонки.Добавить("CRMProjectCode");
	ТЗ.Колонки.Добавить("Expert");
	ТЗ.Колонки.Добавить("LeadSME");
	
	ТЗ.Колонки.Добавить("Customers");
	ТЗ.Колонки.Добавить("Components");
	ТЗ.Колонки.Добавить("FixVersions");
	ТЗ.Колонки.Добавить("AttachedFiles");
	ТЗ.Колонки.Добавить("LinksToOther");
	ТЗ.Колонки.Добавить("StartDate");
	//ТЗ.Колонки.Добавить("PhaseTask");            //OW Копачев А.С. 19.02.2019 ONEC-4272
	//ТЗ.Колонки.Добавить("ParentTask");	 
	ТЗ.Колонки.Добавить("ExternalIssueKey");     //OW Копачев А.С. 13.02.2019 ONEC-4236	
	ТЗ.Колонки.Добавить("RequestType");     	 //OW Копачев А.С. 11.03.2020 ONEC-5399
    //***OW @20204219114204  Start [БПВ]
    ТЗ.Колонки.Добавить("КраткоеОписаниеФункционала");
	ТЗ.Колонки.Добавить("КраткоеОписаниеРазрабатываемойФункциональности");
    //***OW @20204219114206  End [БПВ]
    
     

	ТЗ.Колонки.Добавить("ПакетХранилище");                //OW Копачев А.С. 11.04.2019  
	
	//++OW Копачев А.С. 10.04.2019 ONEC-4361
	// дополнительно добавим идентификаторы из справочника в таблицу	
	ИдентификаторыПолейИнстанса = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторыПолейИнстанса(ИнстансJIRA);
	Для Каждого ТекЭлемент Из ИдентификаторыПолейИнстанса Цикл
		ИмяКолонки = ТекЭлемент.Ключ;
		Попытка
			Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда 
				ТЗ.Колонки.Добавить(ИмяКолонки);	
			КонецЕсли;	
		Исключение			
		КонецПопытки;	
	КонецЦикла;		
	//--OW Копачев А.С. 10.04.2019 ONEC-4361
	
	Возврат ТЗ;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

//Получить текст запроса. Поля запроса:
//  =NAME=           =JIRA-OWS=						=JIRA-SPB=
//
//– Summary			- summary                          same
//– Code			- key                              same
//– Type			- issuetype/name                   same
//– Priority		- priority/name                    same
//– Component's 	- components/[name]                same
//– Product			- customfield_11501/value			-
//– Fix Version/s 	- fixVersions/[name]               same
//– Product Area	- customfield_13001/value          	-
//– Description		- description		               same
//– Result Details	- customfield_11700            	customfield_11301
//– Result Details(external)	-            		customfield_11001
//– Customer		- customfield_11000/[value]     customfield_11701 (Instance)
//– Commits			- -                                 -
//– Project			- project/key, project/name        same
//– Project Category- project/projectCategory/name (загружается в Project) same
//– Estimation		- timetracking/originalEstimateSeconds                 same
//– Posting			- timetracking/timeSpentSeconds            same
//– Status          - status/name                              same
//– Resolution		- resolution/name                          same
//– CreatedDate		- created                                  same
//– UpdatedDate		- updated                                  same
//– ResolvedDate	- resolutiondate                           same
//– DueDate			- duedate (without hours and mins)         same
//– Assignee		- assignee                                 same
//– Reporter		- reporter/name                            same
//– Developer		- customfield_12002/name                    -
//– Techwriter		- customfield_12100/name                    -
//– Change Approved by				- customfield_14100/name    -
//– Code Review Performed by		- customfield_14101/name    -
//– Code Review Result Approved by	- customfield_14105/name    -
//– Tester			- customfield_12003/name                    -
//– CRM Project Code- customfield_10814                       customfield_12100
//– Link to Roadmap	- -                                         -
//– Attached files	- attachment[]                             same
//– Links to other	- issuelinks[0]/outwardIssue/key           same
//– Expert			- customfield_13402                         -
//– LeadSME			- customfield_13403                         -
//	
Функция ПолучитьТекстЗапросаИсторияЗадачJIRA(ДатаНачала_Строка, ДатаОкончания_Строка, НачатьС = 0, maxResults = 1000, ПроектJIRA = "", ИсключитьМассивID = "", ИнстансJIRA) 
	//+ Пилюгин В.Е. 17.10.2017
	ЧастьЗапроса_ПроектJIRA = ?(ПустаяСтрока(ПроектJIRA), "", " and project = "+ ПроектJIRA +"");
	
	//+++ Брук Б 12.11.2019 Отключаем синхронизацию BA для OWS-JIRA
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда
		//***OW @20195803125809  Start [БПВ]  //Исключаем BA До миграции
		ЧастьЗапроса_ПроектJIRA = ЧастьЗапроса_ПроектJIRA + " and project != BA ";
		//***OW @20195803125812  End [БПВ]
	КонецЕсли;
	//--- Брук Б 12.11.2019 Отключаем синхронизацию BA
	 	
	ЧастьЗапроса_ИсключитьID = "";
	Для Каждого эл Из ИсключитьМассивID Цикл
		ЧастьЗапроса_ИсключитьID = ЧастьЗапроса_ИсключитьID + ?(ПустаяСтрока(эл), "", " and id != "+ эл +"");   //" and id = 82231"
	КонецЦикла; 
	
	////исключаем список проектов, не участвующих в загрузке данных 
	//ЧастьЗапроса_ИсключитьПроекты = "";
	//СписокПроектовИсключений = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.ПроектJIRAНеУчаствующийВЗагрузкеДанныхЗадач, ТекущаяДата());	
	//Для каждого эл Из СписокПроектовИсключений Цикл
	//	ЧастьЗапроса_ИсключитьПроекты = ЧастьЗапроса_ИсключитьПроекты +  " and project != "+ эл.Значение +"";
	//	Прервать;
	//КонецЦикла; 
	
	НачатьС_Строка 		= СтрЗаменить(Строка(НачатьС),		Символы.НПП, "");
	maxResults_Строка 	= СтрЗаменить(Строка(maxResults),	Символы.НПП, "");                  
	
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
		ТекстЗапроса = "{
		 |  ""jql"": "" updatedDate >='" + ДатаНачала_Строка + "' and updatedDate <='"+ ДатаОкончания_Строка + "'" + ЧастьЗапроса_ПроектJIRA + ЧастьЗапроса_ИсключитьID + """,
		 |  ""startAt"": "+ НачатьС_Строка +",
		 |   ""maxResults"": "+ maxResults_Строка +",
		 //++OW Копачев А.С. 13.02.2019 ONEC-4137 
		 // вынесем поля в отдельную функцию
		 |" + ПолучитьПоляТекстаЗапросаИсторияЗадачJIRA(Ложь, ИнстансJIRA) + "
		 //--OW Копачев А.С. 13.02.2019 ONEC-4137		 
		 |}"; 
	Иначе	//jira-spb	
		
		ТекстЗапроса = "{
		 |  ""jql"": "" updatedDate >='" + ДатаНачала_Строка + "' and updatedDate <='"+ ДатаОкончания_Строка + "'" + ЧастьЗапроса_ПроектJIRA + ЧастьЗапроса_ИсключитьID + """,
		 |  ""startAt"": " + НачатьС_Строка + ",
		 |   ""maxResults"": " + maxResults_Строка + ",
		 //++OW Копачев А.С. 13.02.2019 ONEC-4137 
		 // вынесем поля в отдельную функцию
		 |" + ПолучитьПоляТекстаЗапросаИсторияЗадачJIRA(Ложь, ИнстансJIRA) + "
		 //--OW Копачев А.С. 13.02.2019 ONEC-4137
		 |}"; 
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	//- Пилюгин В.Е. 17.10.2017
КонецФункции

Функция ЗафиксироватьНезаполненностьПолейЮзеров(ст, СтруктураПолей, МассивПроверкиЮзеров)
	//+ Пилюгин В.Е. 19.10.2017
	Если НЕ ПустаяСтрока(ст.Assignee) И НЕ ЗначениеЗаполнено(СтруктураПолей.Assignee)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Assignee);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.Reporter) И НЕ ЗначениеЗаполнено(СтруктураПолей.Reporter)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Reporter);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.Developer) И НЕ ЗначениеЗаполнено(СтруктураПолей.Developer)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Developer);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.Techwriter) И НЕ ЗначениеЗаполнено(СтруктураПолей.Techwriter)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Techwriter);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.ChangeApprovedBy) И НЕ ЗначениеЗаполнено(СтруктураПолей.ChangeApprovedBy)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.ChangeApprovedBy);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.CodeReviewPerformedBy) И НЕ ЗначениеЗаполнено(СтруктураПолей.CodeReviewPerformedBy)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.CodeReviewPerformedBy);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.CodeReviewResultApprovedBy) И НЕ ЗначениеЗаполнено(СтруктураПолей.CodeReviewResultApprovedBy)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.CodeReviewResultApprovedBy);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.Tester) И НЕ ЗначениеЗаполнено(СтруктураПолей.Tester)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Tester);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.Expert) И НЕ ЗначениеЗаполнено(СтруктураПолей.Expert)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.Expert);	
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ст.LeadSME) И НЕ ЗначениеЗаполнено(СтруктураПолей.LeadSME)  Тогда
		МассивПроверкиЮзеров.Добавить(ст.LeadSME);	
	КонецЕсли; 
	
	Возврат МассивПроверкиЮзеров;
	//- Пилюгин В.Е. 19.10.2017
КонецФункции

Процедура УстановитьПризнакДанныеЗагруженыПоЗадачамПроектовИсключений(ИнстансJIRA) Экспорт
		
	СписокПроектовИсключений = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.ПроектJIRAНеУчаствующийВЗагрузкеДанныхЗадач, ТекущаяДата());	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаJIRA.Ссылка,
	|	ЗадачаJIRA.Код КАК НомерЗадачи
	|ИЗ
	|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
	|ГДЕ
	|	НЕ ЗадачаJIRA.ДанныеЗагружены
	//++OW Копачев А.С. 28.01.2021 ONEC-4737 
	|	И НЕ ЗадачаJIRA.ЗадачаУдалена
	|	И ЗадачаJIRA.ИнстансJIRA = &ИнстансJIRA
	//--OW Копачев А.С. 28.01.2021 ONEC-4737
	|";
	
	//++OW Копачев А.С. 28.01.2021 ONEC-4737
	Запрос.УстановитьПараметр("ИнстансJIRA", ИнстансJIRA); 
	//--OW Копачев А.С. 28.01.2021 ONEC-4737
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Проект = ОпределитьПроектПоНомеруЗадачи(Выборка.НомерЗадачи);
		Если СписокПроектовИсключений.НайтиПоЗначению(Проект) <> Неопределено Тогда
			УстановитьПризнакДанныеЗагружены(Выборка.НомерЗадачи,,ИнстансJIRA);	
		КонецЕсли; 	
	КонецЦикла; 
КонецПроцедуры

Функция ПроектыJIRA_BA_SSA() Экспорт
	мПроектов = Новый Массив;
	мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_BA));
	мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_SSAA));
	мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_SSAEME));
	мПроектов.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_SSARCIS));
	Возврат мПроектов;
КонецФункции

Функция ОбновитьДанныеОценочныхПроектовПоДаннымЗадачJIRA(ЗадачиJIRAДляОтбора = Неопределено) Экспорт
	
	//++OW Копачев А.С. 13.06.2019 ONEC-4531	
	СтруктураВозврата = Новый Структура("МассивОбработанныхЗадачJIRA, МассивНеОбработанныхЗадачJIRA", Новый Массив, Новый Массив);
	
	МассивОбработанныхЗадачJIRA 	= Новый Массив;
	МассивНеОбработанныхЗадачJIRA 	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиМаркетинговыхПроектов.Ссылка КАК Ссылка,
	               |	ЗадачиМаркетинговыхПроектов.ЗадачаJIRA_BA КАК ЗадачаВ_JIRA,
				   |	ЗадачиМаркетинговыхПроектов.КодИнтеграции_JIRA КАК КодИнтеграции_JIRA,
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Задача КАК ЗадачаJIRA,
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.Код КАК ЗадачаJIRAКод,
	               |	ИсторияИзмененийЗадачJIRAСрезПоследних.Status.Наименование КАК StatusНаименование,
	               |	ИсторияИзмененийЗадачJIRAСрезПоследних.ТипФазы КАК ТипФазы,
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee КАК Assignee,
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.Project КАК ЗадачаProject,
				   //+++ Брук Б 26.11.2019 ONEC-4789
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Expert КАК Expert,
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.LeadSME КАК LeadSME,
				   //--- Брук Б 26.11.2019 ONEC-4789
				   |	ИсторияИзмененийЗадачJIRAСрезПоследних.Reporter КАК Reporter
	               |ИЗ
	               |	РегистрСведений.ИсторияИзмененийЗадачJIRA.СрезПоследних(&Период, ) КАК ИсторияИзмененийЗадачJIRAСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
				   //++OW Копачев А.С. 07.04.2022 ONEC-7464
				   //|		ПО (ЗадачиМаркетинговыхПроектов.ЗадачаJIRA_BA = ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.Код)
				   |		ПО (ЗадачиМаркетинговыхПроектов.КодИнтеграции_JIRA = ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.КодИнтеграции_JIRA)
				   //--OW Копачев А.С. 07.04.2022 ONEC-7464
	               |ГДЕ
	               |	ЗадачиМаркетинговыхПроектов.ПометкаУдаления = ЛОЖЬ
	               |	И ЗадачиМаркетинговыхПроектов.ЗадачаJIRA_BA <> """"
	               |	И (ЗадачиМаркетинговыхПроектов.СтатусВJIRA <> ИсторияИзмененийЗадачJIRAСрезПоследних.Status.Наименование
	               |			ИЛИ ЗадачиМаркетинговыхПроектов.ТипФазы <> ИсторияИзмененийЗадачJIRAСрезПоследних.ТипФазы
	               |				И ИсторияИзмененийЗадачJIRAСрезПоследних.ТипФазы <> ЗНАЧЕНИЕ(Справочник.ТипыФаз.ПустаяСсылка)
				   //++OW Копачев А.С. 21.01.2020 ONEC-5278 	 
				   //+++ Брук Б 26.11.2019 ONEC-4789
				   ////|			ИЛИ ЗадачиМаркетинговыхПроектов.Assignee <> ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee
				   ////|				И ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   //|			ИЛИ ЗадачиМаркетинговыхПроектов.Assignee <> ИсторияИзмененийЗадачJIRAСрезПоследних.Expert
				   //|				И ИсторияИзмененийЗадачJIRAСрезПоследних.Expert <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   //--- Брук Б 26.11.2019 ONEC-4789
				   |			ИЛИ ЗадачиМаркетинговыхПроектов.Assignee <> ИсторияИзмененийЗадачJIRAСрезПоследних.Expert
	               |				И ИсторияИзмененийЗадачJIRAСрезПоследних.Expert <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   |				И ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.Project = &ProjectBA
				   |			ИЛИ ЗадачиМаркетинговыхПроектов.Assignee <> ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee
	               |				И ИсторияИзмененийЗадачJIRAСрезПоследних.Assignee <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   |				И ИсторияИзмененийЗадачJIRAСрезПоследних.Задача.Project <> &ProjectBA
				   |			ИЛИ ЗадачиМаркетинговыхПроектов.LeadSME <> ИсторияИзмененийЗадачJIRAСрезПоследних.LeadSME
	               |				И ИсторияИзмененийЗадачJIRAСрезПоследних.LeadSME <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				   //--OW Копачев А.С. 21.01.2020 ONEC-5278
				   |			ИЛИ ЗадачиМаркетинговыхПроектов.Reporter <> ИсторияИзмененийЗадачJIRAСрезПоследних.Reporter
	               |				И ИсторияИзмененийЗадачJIRAСрезПоследних.Reporter <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
				   |//#ОтборПоЗадачамJIRA#
				   |";
	
	Запрос.УстановитьПараметр("Период",		ТекущаяДата());
	Запрос.УстановитьПараметр("ProjectBA",	OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_BA));

	Если ЗадачиJIRAДляОтбора <> Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//#ОтборПоЗадачамJIRA#", "	И ИсторияИзмененийЗадачJIRAСрезПоследних.Задача В(&ЗадачиJIRAДляОтбора)");
		Запрос.УстановитьПараметр("ЗадачиJIRAДляОтбора",	ЗадачиJIRAДляОтбора);
	КонецЕсли;	
		
	РезультатЗапроса = Запрос.Выполнить(); 
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОценкаСсылка 				= Выборка.Ссылка;
		
		ОценкаОбъект 				= ОценкаСсылка.ПолучитьОбъект(); 		
		ОценкаОбъект.СтатусВJIRA 	= Выборка.StatusНаименование;
		ОценкаОбъект.ТипФазы 		= Выборка.ТипФазы;
		КлассПроекта 				= ПредопределенноеЗначение("Справочник.КлассыПроектов.ClientNonBillable");
		ОценкаОбъект.ТипПроекта 	= Справочники.ЗадачиПроектов.ПолучитьСтарыйТипФазыПоНовому(ОценкаОбъект.ТипФазы, КлассПроекта);
		//++OW Копачев А.С. 21.01.2020 ONEC-5278 
		////+++ Брук Б 06.12.2019 ONEC-4789
		////ОценкаОбъект.Assignee 	= Выборка.Assignee;
		//ОценкаОбъект.Assignee 	= Выборка.Expert;
		//ОценкаОбъект.Команда 		= ПолучитьКомандуAssignee(Выборка.Expert,Выборка.LeadSME);
		////--- Брук Б 06.12.2019 ONEC-4789
		ОценкаОбъект.LeadSME		= Выборка.LeadSME;	//OW Копачев А.С. 28.01.2020 ONEC-5304
		
		КодПроектаJIRA = ОпределитьПроектПоНомеруЗадачи(Выборка.ЗадачаВ_JIRA);
		Если КодПроектаJIRA = "BA" Тогда
 	    	ОценкаОбъект.Assignee 		= Выборка.Expert;                               
			ОценкаОбъект.Команда 		= ПолучитьКомандуBA(Выборка.Expert,Выборка.LeadSME); 	
		Иначе 
			// для SSA* проектов
			ОценкаОбъект.Assignee 		= Выборка.Assignee;
			ОценкаОбъект.Команда 		= ПолучитьКомандуSSA(Выборка.Assignee);
		КонецЕсли;	
		//--OW Копачев А.С. 21.01.2020 ONEC-5278		
		
		ОценкаОбъект.Reporter 		= Выборка.Reporter;
		                           				
		Попытка
			ОценкаОбъект.Записать();
			МассивОбработанныхЗадачJIRA.Добавить(Выборка.ЗадачаJIRA);
		Исключение
			//ТекстСообщения = "Ошибка при записи оценочного проекта (" + ОценкаСсылка + ") по задаче JIRA (" + Выборка.ЗадачаJIRAКод + "). Подробности: " + ОписаниеОшибки();
			ТекстСообщения = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Ошибка при записи оценочного проекта (" + ОценкаСсылка + ") по задаче JIRA (" + Выборка.ЗадачаJIRAКод + "). Подробности: " + ОписаниеОшибки(), "Error writing evaluation project ("+ ОценкаСсылка +") for the JIRA task ("+ Выборка.ЗадачаJIRAКод +"). Details: "+ ОписаниеОшибки());
			OW.ЗаписатьОшибку(ОценкаСсылка, Справочники.OW_РазделыУчета.JIRA_ОбновлениеОценочногоПроекта, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);	
			
			OW_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МассивНеОбработанныхЗадачJIRA.Добавить(Выборка.ЗадачаJIRA);		
		КонецПопытки;	
	КонецЦикла;
		
	СтруктураВозврата.МассивОбработанныхЗадачJIRA 	= МассивОбработанныхЗадачJIRA;
	СтруктураВозврата.МассивНеОбработанныхЗадачJIRA = МассивНеОбработанныхЗадачJIRA;
	
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 13.06.2019 ONEC-4531
	
КонецФункции

Функция ПолучитьКомандуBA(Assignee,LeadSME)
	//+++ Брук Б 06.12.2019		
	Команда = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Assignee) Тогда 
		Возврат Команда;
	КонецЕсли;
	
	//Сначала ищем команду SME с тимлидом LeadSME, затем любую SME, с большей вовлеченностью.
	//если нет SME - ищем IT (эта команда должна быть у любого сотрудника delivery)	
	Команда = ПолучитьКомандуОфицераИзВовлеченности(Assignee, ТекущаяДата(), Справочники.ТипыКоманд.SME, LeadSME);
		
	Если НЕ ЗначениеЗаполнено(Команда) Тогда
		
		Команда = ПолучитьКомандуОфицераИзВовлеченности(Assignee, ТекущаяДата(), Справочники.ТипыКоманд.SME);
		
		Если НЕ ЗначениеЗаполнено(Команда) Тогда
			
			Команда = ПолучитьКомандуОфицераИзВовлеченности(Assignee, ТекущаяДата(), Справочники.ТипыКоманд.IT);

		КонецЕсли;	
	КонецЕсли;
		
	Возврат Команда;
	//--- Брук Б 06.12.2019
КонецФункции

Функция ПолучитьКомандуSSA(Assignee)
	//++OW Копачев А.С. 21.01.2020 ONEC-5278	
	Команда = Неопределено;

	Если НЕ ЗначениеЗаполнено(Assignee) Тогда 
		Возврат Команда;
	КонецЕсли;
	
	Команда = ПолучитьКомандуОфицераИзВовлеченности(Assignee, ТекущаяДата(), Справочники.ТипыКоманд.IT);
	Возврат Команда;
	//--OW Копачев А.С. 21.01.2020 ONEC-5278
КонецФункции


Функция ПолучитьКомандуОфицераИзВовлеченности(Офицер, НаДату, ТипКоманды, Тимлид = Неопределено) Экспорт
	//++OW Копачев А.С. 21.01.2020 ONEC-5278 
	
	Команда = Неопределено;

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВовлеченностьПоКомандамРассчитанная.Команда,
				   //++OW Копачев А.С. 04.02.2021 ONEC-6494
	               //|	ВовлеченностьПоКомандамРассчитанная.Значение КАК Значение
				   |	СУММА(ВовлеченностьПоКомандамРассчитанная.Значение) КАК Значение
				   //--OW Копачев А.С. 04.02.2021 ONEC-6494
	               |ИЗ
	               |	РегистрСведений.ВовлеченностьПоКомандамРассчитанная КАК ВовлеченностьПоКомандамРассчитанная
	               |ГДЕ
	               |	ВовлеченностьПоКомандамРассчитанная.Офицер = &Офицер
	               |	И КОНЕЦПЕРИОДА(ВовлеченностьПоКомандамРассчитанная.ДатаОкончания, День) >= &НаДату
	               |	И ВовлеченностьПоКомандамРассчитанная.ДатаНачала <= &НаДату
	               |	И ВовлеченностьПоКомандамРассчитанная.Команда.ТипКоманды = &ТипКоманды
	               |	//#ОтборПоТимлиду#	
				   //++OW Копачев А.С. 04.02.2021 ONEC-6494
				   |СГРУППИРОВАТЬ ПО
				   |	ВовлеченностьПоКомандамРассчитанная.Команда
				   //--OW Копачев А.С. 04.02.2021 ONEC-6494
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Значение УБЫВ";
	
	Если ЗначениеЗаполнено(Тимлид) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//#ОтборПоТимлиду#", "И ВовлеченностьПоКомандамРассчитанная.Команда.Тимлид = &Тимлид");	
		Запрос.УстановитьПараметр("Тимлид", Тимлид);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТипКоманды", 	ТипКоманды);
	Запрос.УстановитьПараметр("НаДату", 		НаДату);
	Запрос.УстановитьПараметр("Офицер", 		Офицер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Команда = Выборка.Команда; 
	КонецЕсли;	
	
	Возврат Команда;
	//--OW Копачев А.С. 21.01.2020 ONEC-5278
КонецФункции

// ФОРМИРОВАНИЕ СПРАВОЧНИКОВ ПРИ ЗАГРУЗКЕ 

Функция ПолучитьСоздать_Status(Наименование) Экспорт
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.OW_СтатусыЗадачJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("OW_СтатусыЗадачJIRA", Наименование, Ссылка);
	КонецЕсли;	
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция ПолучитьСоздать_Type(Наименование)
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.OW_IssueType.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда
		Ссылка = ПолучитьСоздатьЭлементСправочника("OW_IssueType", Наименование, Ссылка);
	КонецЕсли;
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция ПолучитьСоздать_Priority(Наименование)
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.OW_ПриоритетыJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("OW_ПриоритетыJIRA", Наименование, Ссылка);
	КонецЕсли;	
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция ПолучитьСоздать_Resolution(Наименование)
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.OW_ResolutionЗадачJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("OW_ResolutionЗадачJIRA", Наименование, Ссылка);
	КонецЕсли;	
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция ПолучитьСоздать_Product(Наименование)
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.OW_ПродуктыJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("OW_ПродуктыJIRA", Наименование, Ссылка);
	КонецЕсли;	
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция ПолучитьСоздать_ProductArea(Наименование, Product = Неопределено)
	//+ Пилюгин В.Е. 18.10.2017
	Ссылка = Справочники.ProductArea.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("ProductArea", Наименование, Ссылка);
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			Если ЗначениеЗаполнено(Product) И ТипЗнч(Product) = Тип("СправочникСсылка.OW_ПродуктыJIRA") Тогда
				Если Product.ProductArea <> Ссылка Тогда
					СпрОбъект = Product.ПолучитьОбъект();
					СпрОбъект.ProductArea = Ссылка;
					СпрОбъект.Записать();
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ссылка;
	//- Пилюгин В.Е. 18.10.2017		
КонецФункции

Функция Получить_Customer_ИзСтроки(Customers)
	//+ Пилюгин В.Е. 18.10.2017
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	
	Если ТипЗнч(Customers) <> Тип("Массив") Тогда
		Возврат Партнер;
	КонецЕсли; 
	
	ПартнерыСтрока = ОбщегоНазначения.ПреобразоватьМассивВСтроку(Customers, ",");
		
	Партнер = OW.ПолучитьПартнераПоКастомеруJIRA(ПартнерыСтрока);
	
	Возврат Партнер;
	//- Пилюгин В.Е. 18.10.2017
КонецФункции

Функция ПолучитьСоздать_Components(Компоненты)
	//+ Пилюгин В.Е. 19.10.2017
	МассивКомпонентов = Новый Массив;
	Для каждого эл Из Компоненты Цикл
		Если ТипЗнч(эл) = Тип("Строка") Тогда 	
			Если НЕ ПустаяСтрока(эл) Тогда 
				Ссылка = ПолучитьСоздатьЭлементСправочника("OW_Component", эл);
				Если ЗначениеЗаполнено(Ссылка) Тогда 
					МассивКомпонентов.Добавить(Ссылка);
				КонецЕсли;	
			КонецЕсли;
		//++OW Копачев А.С. 02.07.2020 ONEC-5790 		
		ИначеЕсли ТипЗнч(эл) = Тип("Соответствие") Тогда 
			Идентифкатор = эл.Получить("id");
			Наименование = СокрЛП(эл.Получить("name"));
			Ссылка = ПолучитьСоздатьЭлементСправочника("OW_Component", Наименование,, Идентифкатор);
			Если ЗначениеЗаполнено(Ссылка) Тогда 
				МассивКомпонентов.Добавить(Ссылка);
			КонецЕсли;
		КонецЕсли;	
		//--OW Копачев А.С. 02.07.2020 ONEC-5790
	КонецЦикла; 
	
	Возврат МассивКомпонентов;
	//- Пилюгин В.Е. 19.10.2017		
КонецФункции

Функция ПолучитьСоздать_LinksToOtherTasks(ЛинкиНаЗадачи, ИнстансJIRA)
	//+ Пилюгин В.Е. 19.10.2017
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws(); 
	КонецЕсли; 
	МассивЛинков = Новый Массив;
	Для каждого эл Из ЛинкиНаЗадачи Цикл
		Если НЕ ПустаяСтрока(эл) Тогда 
			Ссылка = JIRA.НайтиСоздатьЗадачуJIRA(эл, ИнстансJIRA);
			МассивЛинков.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивЛинков;
	//- Пилюгин В.Е. 19.10.2017		
КонецФункции

Функция ПолучитьСоздать_Project(Код, Наименование)
	//+ Пилюгин В.Е. 19.10.2017
	Ссылка = Справочники.OW_ПроектыJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = Справочники.OW_ПроектыJIRA.НайтиПоКоду(Код);
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			СпрОбъект = Справочники.OW_ПроектыJIRA.СоздатьЭлемент();
			СпрОбъект.Код = Код;
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.Записать();
			Ссылка = СпрОбъект.Ссылка;
		ИначеЕсли ПустаяСтрока(Ссылка.Наименование) Тогда 
			СпрОбъект = Ссылка.ПолучитьОбъект();
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.Записать();
			Ссылка = СпрОбъект.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	Возврат Ссылка;
	//- Пилюгин В.Е. 19.10.2017		
КонецФункции

Функция ПолучитьСоздать_ProjectCategory(Наименование, Project = Неопределено)
	//+ Пилюгин В.Е. 19.10.2017
	СсылкаProjectCategory = Справочники.КатегорииПроектовJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		СсылкаProjectCategory = ПолучитьСоздатьЭлементСправочника("КатегорииПроектовJIRA", Наименование, СсылкаProjectCategory);
		Если ЗначениеЗаполнено(СсылкаProjectCategory) Тогда 
			Если ЗначениеЗаполнено(Project) И ТипЗнч(Project) = Тип("СправочникСсылка.OW_ПроектыJIRA") Тогда
				Если Project.Категория <> СсылкаProjectCategory Тогда
					СпрОбъект = Project.ПолучитьОбъект();
					СпрОбъект.Категория = СсылкаProjectCategory;
					СпрОбъект.Записать();
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли;	
	Возврат СсылкаProjectCategory;
	//- Пилюгин В.Е. 19.10.2017		
КонецФункции

Функция ПолучитьСоздать_RequestType(Наименование)
	//++OW Копачев А.С. 11.03.2020 ONEC-5399 
	Ссылка = Справочники.ТипыОбращенийJIRA.ПустаяСсылка();
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Ссылка = ПолучитьСоздатьЭлементСправочника("ТипыОбращенийJIRA", Наименование, Ссылка);
	КонецЕсли;	
	Возврат Ссылка;
	//--OW Копачев А.С. 11.03.2020 ONEC-5399
КонецФункции

Функция ПолучитьСоздатьЭлементСправочника(ИмяСправочника, Наименование, ЗначениеПоУмолчанию = Неопределено, ИдентификаторJIRA = Неопределено) 
	//++OW Копачев А.С. 11.04.2019 ONEC-4361
	Ссылка = ЗначениеПоУмолчанию;
	
	//++OW Копачев А.С. 02.07.2020 ONEC-5790 
	Если ЗначениеЗаполнено(ИдентификаторJIRA) Тогда 
		Попытка
			Ссылка = НайтиПоРеквизитуЭлементСправочника(ИмяСправочника, "КодПроектаJIRA", ИдентификаторJIRA); 
			Если ЗначениеЗаполнено(Ссылка) Тогда			
				Если НЕ ПустаяСтрока(Наименование) И Ссылка.Наименование <> Наименование Тогда 
					СпрОбъект = Ссылка.ПолучитьОбъект();
					СпрОбъект.Наименование = Наименование;
					СпрОбъект.Записать();
				КонецЕсли;	
				
				Возврат Ссылка;
			КонецЕсли; 
		Исключение
			ВывестиЛогОшибка_ЗагрузкаЗадач("Не удалось создать элемент справочника (" + ИмяСправочника + "). Подробности: " + ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
	//--OW Копачев А.С. 02.07.2020 ONEC-5790
	
	Если НЕ ПустаяСтрока(Наименование) Тогда 
		Попытка
			Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, Истина);
			Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
				СпрОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
				СпрОбъект.Наименование = Наименование;
				//++OW Копачев А.С. 02.07.2020 ONEC-5790
				Если ЗначениеЗаполнено(ИдентификаторJIRA) Тогда 
					СпрОбъект.КодПроектаJIRA = ИдентификаторJIRA;	
				КонецЕсли;	
				//--OW Копачев А.С. 02.07.2020 ONEC-5790
				СпрОбъект.Записать();
				Ссылка = СпрОбъект.Ссылка;
			Иначе	
				//++OW Копачев А.С. 02.07.2020 ONEC-5790
				// проверка заполнения идентикатора
				Если ЗначениеЗаполнено(ИдентификаторJIRA) И 
					Ссылка.КодПроектаJIRA <> ИдентификаторJIRA Тогда 
					
					СпрОбъект = Ссылка.ПолучитьОбъект();
					СпрОбъект.КодПроектаJIRA = ИдентификаторJIRA;
					СпрОбъект.Записать();						
				КонецЕсли;
				//--OW Копачев А.С. 02.07.2020 ONEC-5790
			КонецЕсли; 
		Исключение
			ВывестиЛогОшибка_ЗагрузкаЗадач("Не удалось создать элемент справочника (" + ИмяСправочника + "). Подробности: " + ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;	
	
	Возврат Ссылка;
	//--OW Копачев А.С. 11.04.2019 ONEC-4361	
КонецФункции

Функция НайтиПоНаименованиюЭлементСправочника(ИмяСправочника, Наименование) Экспорт
	Возврат OW_ОбщегоНазначения.ПолучитьСсылкуПоНаименованию("Справочник." + ИмяСправочника, Наименование);			
КонецФункции

Функция НайтиПоКодуЭлементСправочника(ИмяСправочника, Код)
	Возврат OW_ОбщегоНазначения.ПолучитьСсылкуПоКоду("Справочник." + ИмяСправочника, Код);			
КонецФункции

Функция НайтиПоРеквизитуЭлементСправочника(ИмяСправочника, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	Возврат OW_ОбщегоНазначения.ПолучитьСсылкуПоРеквизиту("Справочник." + ИмяСправочника, ИмяРеквизита, ЗначениеРеквизита);			
КонецФункции

Функция ИмяРеквизитаЭлементаСправочникаДляПоиска(ИмяСправочника)
	
	// получаем реквизит по которому идет синхронизация с JIRA (наименование на английском)
	ИмяРеквизита = "";
	
	ПустаяСсылка = ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка");
	СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(ПустаяСсылка);
	Для Каждого ТекЭлемент Из СписокКонтролируемыхРеквизитов Цикл
		Если НРег(ТекЭлемент.Значение) = НРег("name") Тогда 
			ИмяРеквизита = ТекЭлемент.Ключ;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	ИмяРеквизита = ?(ПустаяСтрока(ИмяРеквизита), "Наименование",ИмяРеквизита);
	
	Возврат ИмяРеквизита;
	
КонецФункции	

// ЛОГИРОВАНИЕ ПРИ ЗАГРУЗКЕ

Процедура ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, АвтоматическаяЗагрузка = Истина)
	//+ Пилюгин В.Е. 30.10.2017
	OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Информация, ЛогСообщение);		
	Если НЕ АвтоматическаяЗагрузка Тогда
		Сообщить(ЛогСообщение);
	КонецЕсли; 
	//- Пилюгин В.Е. 30.10.2017
КонецПроцедуры

Процедура ВывестиЛогОшибка_ЗагрузкаЗадач(ЛогСообщение, АвтоматическаяЗагрузка = Истина)
	//+ Пилюгин В.Е. 30.10.2017
	OW.ЗаписатьОшибку(, Справочники.OW_РазделыУчета.JIRA_ЗагрузкаЗадач, Справочники.OW_ТипыОшибок.Информация, ЛогСообщение);		
	Если НЕ АвтоматическаяЗагрузка Тогда
		Сообщить(ЛогСообщение);
	КонецЕсли; 
	//- Пилюгин В.Е. 30.10.2017
КонецПроцедуры

//-------------------------------------------------------- ЗАГРУЗКА ИСТОРИИ ЗАДАЧ ИЗ JIRA --------------------------------------------------------


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ПОЛУЧЕНИЕ ДАННЫХ ПО ОДНОЙ ЗАДАЧЕ ИЗ JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Процедура ОбновитьЗадачиJIRAНеОбновленные(РегламентноеЗадание = Ложь, ИнстансJIRA) Экспорт
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws(); 
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаJIRA.Код
	|ИЗ
	|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
	|ГДЕ
	|	НЕ ЗадачаJIRA.ДанныеЗагружены
	//++OW Копачев А.С. 28.01.2021 ONEC-4737 
	|	И НЕ ЗадачаJIRA.ЗадачаУдалена
	//--OW Копачев А.С. 28.01.2021 ONEC-4737
	//++OW Копачев А.С. 17.06.2019 ONEC-4531
	|	И ИнстансJIRA = &ИнстансJIRA
	//--OW Копачев А.С. 17.06.2019 ONEC-4531
	|";
	
	//++OW Копачев А.С. 17.06.2019 ONEC-4531
	Запрос.УстановитьПараметр("ИнстансJIRA", ИнстансJIRA); 
	//--OW Копачев А.С. 17.06.2019 ONEC-4531		
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		JIRA.ОбновитьИсториюПоЗадачеJIRA(Выборка.Код, Ложь, РегламентноеЗадание, ИнстансJIRA);
	КонецЦикла; 
КонецПроцедуры

//++OW Копачев А.С. 12.04.2021 ONEC-6508
//Функция ОбновитьИсториюПоЗадачеJIRA(НомерЗадачи, Автоматически = Истина, РегламентноеЗадание = Ложь, ИнстансJIRA = Неопределено) Экспорт
Функция ОбновитьИсториюПоЗадачеJIRA(НомерЗадачи, Автоматически = Истина, РегламентноеЗадание = Ложь, ИнстансJIRA, Автор = Неопределено, ДействиеИнициатор = Неопределено) Экспорт
//--OW Копачев А.С. 12.04.2021 ONEC-6508
	
	ЗадачаОбновлена = Ложь;
		
	Если ПроектJIRAНеУчаствуетВЗагрузкеДанныхЗадач(НомерЗадачи) Тогда
		ЛогСообщение = "НЕ обновлена инфа по JIRA задаче " + НомерЗадачи +". Данный проект ИСКЛЮЧЕН из синхронизации!";
		ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, Автоматически);
		Возврат ЗадачаОбновлена;
	КонецЕсли; 
	
	ИсключилиДескрипшн = Ложь;  
	
	СтруктураВозврата = ПолучитьДанныеИзJIRA_ПоЗадаче(НомерЗадачи,,ИнстансJIRA);
	
	Если СтруктураВозврата.ЕстьОшибки Тогда
		СтруктураВозврата = ПолучитьДанныеИзJIRA_ПоЗадаче(НомерЗадачи, Истина,ИнстансJIRA);
	КонецЕсли;
		
	Если СтруктураВозврата.ЕстьОшибки Тогда	
		Если НЕ РегламентноеЗадание Тогда
			ВывестиЛогОшибка_ЗагрузкаЗадач(СтруктураВозврата.ТекстОшибки, Автоматически);
		КонецЕсли; 
		
	Иначе				
		ТаблицаДанных = ПолучитьТаблицуДанных(СтруктураВозврата.МассивДанных, ИнстансJIRA);	
		
		Если ТаблицаДанных.Количество() > 0 Тогда
			Если ТаблицаДанных.Колонки.Найти("Description") = Неопределено Тогда
				ТаблицаДанных.Колонки.Добавить("Description");
				ТаблицаДанных[0].Description = " ------- Description из JIRA НЕ загружен, так как содержит некорректные символы! -------"; 
				ИсключилиДескрипшн = Истина;
			КонецЕсли; 
			
			//++OW Копачев А.С. 12.04.2021 ONEC-6508
			//ЗаписьИсторииЗадач(ТаблицаДанных, НомерЗадачи, ИнстансJIRA); 
			ЗаписьИсторииЗадач(ТаблицаДанных, НомерЗадачи, ИнстансJIRA, Автор, ДействиеИнициатор);
			//--OW Копачев А.С. 12.04.2021 ONEC-6508
						
			ЗадачаОбновлена = Истина;
			
			Если НЕ РегламентноеЗадание Тогда
				Если ИсключилиДескрипшн Тогда
					ЛогСообщение = "Обновлена инфа по ПРОБЛЕМНОЙ JIRA задаче " + НомерЗадачи + ". Description отсутствует!";
				Иначе
					ЛогСообщение = "Обновлена инфа по JIRA задаче " + НомерЗадачи;
				КонецЕсли; 
				ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, Автоматически);
			КонецЕсли; 
			
		Иначе //таблица данных пустая
			Если НЕ РегламентноеЗадание Тогда
				ЛогСообщение = "НЕ обновлена инфа по JIRA задаче " + НомерЗадачи +". Таблица данных по ней пустая :(";
				ВывестиЛогСообщение_ЗагрузкаЗадач(ЛогСообщение, Автоматически);
			КонецЕсли; 
		КонецЕсли;  
		
	КонецЕсли; 
	
	Если НЕ ЗадачаОбновлена Тогда
		УстановитьПризнакДанныеЗагружены(НомерЗадачи, Ложь, ИнстансJIRA);
	КонецЕсли; 
	
	Возврат ЗадачаОбновлена;
	
КонецФункции

Функция ПолучитьДанныеИзJIRA_ПоЗадаче(НомерЗадачи, ИсключитьDescription = Ложь, ИнстансJIRA)
	//+ Пилюгин В.Е. 19.10.2017
	
	СтруктураВозврата = Новый Структура("ЕстьОшибки, ТекстОшибки, Данные");
	
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
			
	Данные = Неопределено;
	
	ТекстЗапроса = ПолучитьТекстЗапросаИсторияЗадачJIRA_ПоЗадаче(НомерЗадачи, ИсключитьDescription, ИнстансJIRA);
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979
	АдресРесурса = "/rest/api/2/search";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979	
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");	
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	ОтветHTTP 	= Соединение.ОтправитьДляОбработки(Запрос);
	ОтветСтрока = ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);	
	
	СтруктураПарсинга = ПрочитатьJSON_ПарсингЗадач(ОтветСтрока, ИнстансJIRA);
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Если СтруктураПарсинга.Успех Тогда
		Данные = СтруктураПарсинга.Данные;		
	ИначеЕсли ЗначениеЗаполнено(СтруктураПарсинга.ПроблемнаяЗадача) Тогда		
		Данные = Неопределено;		
		ЕстьОшибки = Истина;
		ТекстОшибки = "Данные по задаче " + НомерЗадачи + " не удалось распарсить! Возможны недопустимые символы!";
	Иначе
		ЕстьОшибки = Истина;
		ТекстОшибки  = "НЕ получены данные в результате парсинга JSON формата!";
		Данные = Неопределено;
	КонецЕсли; 

	Если ТипЗнч(Данные) = Тип("Соответствие") Тогда
		errorMessages = Данные.Получить("errorMessages");
		Если  errorMessages <> Неопределено Тогда
			ТекстОшибки = "НЕ получены данные в результате парсинга JSON формата!" + Символы.ПС + ОбщегоНазначения.ПреобразоватьМассивВСтроку(errorMessages, ", ");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли; 		
		
	СтруктураВозврата.Вставить("ЕстьОшибки", ЕстьОшибки);
	СтруктураВозврата.Вставить("ТекстОшибки", ТекстОшибки);
	
	МассивДанных = Новый Массив;
	МассивДанных.Добавить(Данные);
	СтруктураВозврата.Вставить("МассивДанных", МассивДанных);	
	
	Возврат СтруктураВозврата;	
	//- Пилюгин В.Е. 19.10.2017
КонецФункции

//Получить текст запроса. Поля запроса:
//  =NAME=           =JIRA-OWS=						=JIRA-SPB=
//
//– Summary			- summary                          same
//– Code			- key                              same
//– Type			- issuetype/name                   same
//– Priority		- priority/name                    same
//– Component's 	- components/[name]                same
//– Product			- customfield_11501/value			-
//– Fix Version/s 	- fixVersions/[name]               same
//– Product Area	- customfield_13001/value          	-
//– Description		- description		               same
//– Result Details	- customfield_11700            	customfield_11301
//– Result Details(external)	-            		customfield_11001
//– Customer		- customfield_11000/[value]     customfield_11701 (Instance)
//– Commits			- -                                 -
//– Project			- project/key, project/name        same
//– Project Category- project/projectCategory/name (загружается в Project) same
//– Estimation		- timetracking/originalEstimateSeconds                 same
//– Posting			- timetracking/timeSpentSeconds            same
//– Status          - status/name                              same
//– Resolution		- resolution/name                          same
//– CreatedDate		- created                                  same
//– UpdatedDate		- updated                                  same
//– ResolvedDate	- resolutiondate                           same
//– DueDate			- duedate (without hours and mins)         same
//– Assignee		- assignee                                 same
//– Reporter		- reporter/name                            same
//– Developer		- customfield_12002/name                    -
//– Techwriter		- customfield_12100/name                    -
//– Change Approved by				- customfield_14100/name    -
//– Code Review Performed by		- customfield_14101/name    -
//– Code Review Result Approved by	- customfield_14105/name    -
//– Tester			- customfield_12003/name                    -
//– CRM Project Code- customfield_10814                       customfield_12100
//– Link to Roadmap	- -                                         -
//– Attached files	- attachment[]                             same
//– Links to other	- issuelinks[0]/outwardIssue/key           same
//– Expert			- customfield_13402                         -
//– LeadSME			- customfield_13403                         -
//	
Функция ПолучитьТекстЗапросаИсторияЗадачJIRA_ПоЗадаче(НомерЗадачи, ИсключитьDescription = Ложь, ИнстансJIRA) 
	//+ Пилюгин В.Е. 09.11.2017	
	//JIRA-OWS
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
		ТекстЗапроса =  "{
			 |  ""jql"": "" key ='"+ НомерЗадачи + "'" + """,
			 //++OW Копачев А.С. 13.02.2019 ONEC-4137 
			 // вынесем поля в отдельную функцию
			 |" + ПолучитьПоляТекстаЗапросаИсторияЗадачJIRA(ИсключитьDescription, ИнстансJIRA) + "
			 //--OW Копачев А.С. 13.02.2019 ONEC-4137
			 |}"; 
	//JIRA-SPB	
	Иначе		
		ТекстЗапроса =  "{
			 |  ""jql"": "" key ='"+ НомерЗадачи + "'" + """,
			 //++OW Копачев А.С. 13.02.2019 ONEC-4137 
			 // вынесем поля в отдельную функцию
			 |" + ПолучитьПоляТекстаЗапросаИсторияЗадачJIRA(ИсключитьDescription, ИнстансJIRA) + "
			 //--OW Копачев А.С. 13.02.2019 ONEC-4137
			 |}"; 
	КонецЕсли; 
	Возврат ТекстЗапроса;
	//- Пилюгин В.Е. 09.11.2017
КонецФункции

//Получить текст запроса по полям
//  =NAME=           =JIRA-OWS=						=JIRA-SPB=
//
//– Summary			- summary                          same
//– Code			- key                              same
//– Type			- issuetype/name                   same
//– Priority		- priority/name                    same
//– Component's 	- components/[name]                same
//– Product			- customfield_11501/value			-
//– Fix Version/s 	- fixVersions/[name]               same
//– Product Area	- customfield_13001/value          	-
//– Description		- description		               same
//– Result Details	- customfield_11700            	customfield_11301
//– Result Details(external)	-            		customfield_11001
//– Customer		- customfield_11000/[value]     customfield_11701 (Instance)
//– Commits			- -                                 -
//– Project			- project/key, project/name        same
//– Project Category- project/projectCategory/name (загружается в Project) same
//– Estimation		- timetracking/originalEstimateSeconds                 same
//– Posting			- timetracking/timeSpentSeconds            same
//– Status          - status/name                              same
//– Resolution		- resolution/name                          same
//– CreatedDate		- created                                  same
//– UpdatedDate		- updated                                  same
//– ResolvedDate	- resolutiondate                           same
//– DueDate			- duedate (without hours and mins)         same
//– Assignee		- assignee                                 same
//– Reporter		- reporter/name                            same
//– Developer		- customfield_12002/name                    -
//– Techwriter		- customfield_12100/name                    -
//– Change Approved by				- customfield_14100/name    -
//– Code Review Performed by		- customfield_14101/name    -
//– Code Review Result Approved by	- customfield_14105/name    -
//– Tester			- customfield_12003/name                    -
//– CRM Project Code- customfield_10814                       customfield_12100
//– Link to Roadmap	- -                                         -
//– Attached files	- attachment[]                             same
//– Links to other	- issuelinks[0]/outwardIssue/key           same
//– Expert			- customfield_13402                         -
//– LeadSME			- customfield_13403                         -
//- Internal Phase status - -								  customfield_15200
Функция ПолучитьПоляТекстаЗапросаИсторияЗадачJIRA(ИсключитьDescription = Ложь, ИнстансJIRA)
	//++OW Копачев А.С. 13.02.2019 ONEC-4137 

	//++OW Копачев А.С. 09.04.2019 ONEC-4361	
	////JIRA-OWS
	//Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда
	//	ТекстЗапроса_Поля =  
	//		 "   ""fields"": [
	//		 |       ""summary"", ""key"", ""issuetype"", ""priority"", ""components"", ""customfield_11501"", ""fixVersions"", ""customfield_13001"",
	//		 |		 "+ ?(ИсключитьDescription, "", """description"", ") + """customfield_11700"", ""customfield_11000"", ""project"", ""timetracking"", ""status"", ""resolution"",
	//		 |		 ""created"", ""updated"", ""resolutiondate"", ""duedate"", ""assignee"", ""reporter"", ""customfield_12002"", ""customfield_12100"",
	//		 |		 ""customfield_14100"", ""customfield_14101"", ""customfield_14105"", ""customfield_12003"", ""customfield_10814"", ""attachment"",
	//		 | 		 ""issuelinks"", ""customfield_13402"", ""customfield_13403""       
	//		 |   ]
	//		 |"; 
	////JIRA-SPB	
	//Иначе		
	//	ТекстЗапроса_Поля =  
	//		 "   ""fields"": [
	//		 |       ""summary"", ""key"", ""issuetype"", ""priority"", ""components"", ""fixVersions"", "+ ?(ИсключитьDescription, "", """description"", ") + "
	//		 |		 ""customfield_11301"", ""customfield_11001"", ""customfield_11701"", ""project"", ""timetracking"", ""status"", ""resolution"",
	//		 |		 ""created"", ""updated"", ""resolutiondate"", ""duedate"", ""assignee"", ""reporter"",
	//		 |		 ""customfield_12100"", ""attachment"", ""issuelinks"", ""customfield_11400"", ""customfield_13900"",
	//		 |		 ""customfield_15200"", ""customfield_14800"", ""parent"" 
	//		 |   ]
	//		 |}"; 
	//КонецЕсли; 
	//
	
	ПоляЗапроса = ПолучитьПоляЗапросаИсторияЗадачJIRA(ИнстансJIRA, ИсключитьDescription);
	ТекстЗапроса_Поля = "   ""fields"": [ " + СформироватьТекстПолейЗапроса(ПоляЗапроса) + " ]";  
	//--OW Копачев А.С. 09.04.2019 ONEC-4361
		
	Возврат ТекстЗапроса_Поля;
	//--OW Копачев А.С. 13.02.2019 ONEC-4137	
КонецФункции	

Функция ПолучитьПоляЗапросаИсторияЗадачJIRA(ИнстансJIRA, ИсключитьDescription = Ложь)
	
	//++OW Копачев А.С. 09.04.2019 ONEC-4361	
	ПоляЗапроса = Новый Структура;
	
	//JIRA-OWS
	Если ЭтоИнстансJiraOws(ИнстансJIRA) Тогда 
		
		ПоляЗапроса.Вставить("summary"); 		ПоляЗапроса.Вставить("key"); 				ПоляЗапроса.Вставить("issuetype");
		ПоляЗапроса.Вставить("priority"); 		ПоляЗапроса.Вставить("components"); 		ПоляЗапроса.Вставить("customfield_11501");
		ПоляЗапроса.Вставить("fixVersions"); 	ПоляЗапроса.Вставить("customfield_13001"); 	
		
		Если ИсключитьDescription <> Истина Тогда 
			ПоляЗапроса.Вставить("description");
		КонецЕсли;
		
		ПоляЗапроса.Вставить("customfield_11700"); 	ПоляЗапроса.Вставить("customfield_11000"); 	ПоляЗапроса.Вставить("project");
		ПоляЗапроса.Вставить("timetracking"); 		ПоляЗапроса.Вставить("status"); 			ПоляЗапроса.Вставить("resolution");
		ПоляЗапроса.Вставить("created"); 			ПоляЗапроса.Вставить("updated"); 			ПоляЗапроса.Вставить("resolutiondate");
		ПоляЗапроса.Вставить("duedate"); 			ПоляЗапроса.Вставить("assignee"); 			ПоляЗапроса.Вставить("reporter");
		ПоляЗапроса.Вставить("customfield_12002"); 	ПоляЗапроса.Вставить("customfield_12100"); 	ПоляЗапроса.Вставить("customfield_14100");
		ПоляЗапроса.Вставить("customfield_14101"); 	ПоляЗапроса.Вставить("customfield_14105"); 	ПоляЗапроса.Вставить("customfield_12003");
		ПоляЗапроса.Вставить("customfield_10814"); 	ПоляЗапроса.Вставить("attachment"); 		ПоляЗапроса.Вставить("issuelinks");
		ПоляЗапроса.Вставить("customfield_13402"); 	ПоляЗапроса.Вставить("customfield_13403"); 
		
	//JIRA-SPB	
	Иначе
		
	 	ПоляЗапроса.Вставить("summary"); 		ПоляЗапроса.Вставить("key"); 				ПоляЗапроса.Вставить("issuetype");
		ПоляЗапроса.Вставить("priority"); 		ПоляЗапроса.Вставить("components"); 		ПоляЗапроса.Вставить("fixVersions");

		Если ИсключитьDescription <> Истина Тогда 
			ПоляЗапроса.Вставить("description");
		КонецЕсли;
		
		ПоляЗапроса.Вставить("customfield_11301");	ПоляЗапроса.Вставить("customfield_11001");	ПоляЗапроса.Вставить("customfield_11701");
		ПоляЗапроса.Вставить("project");			ПоляЗапроса.Вставить("timetracking");		ПоляЗапроса.Вставить("status");
        ПоляЗапроса.Вставить("resolution");			ПоляЗапроса.Вставить("created");			ПоляЗапроса.Вставить("updated");
		ПоляЗапроса.Вставить("resolutiondate");		ПоляЗапроса.Вставить("duedate");			ПоляЗапроса.Вставить("assignee");
		ПоляЗапроса.Вставить("reporter");			ПоляЗапроса.Вставить("customfield_12100");	ПоляЗапроса.Вставить("attachment");
		ПоляЗапроса.Вставить("issuelinks");			ПоляЗапроса.Вставить("customfield_11400");	ПоляЗапроса.Вставить("customfield_13900");
		ПоляЗапроса.Вставить("customfield_15200");	ПоляЗапроса.Вставить("customfield_14800");	ПоляЗапроса.Вставить("parent");		
		//+++Брук 09.12.2019
		ПоляЗапроса.Вставить("customfield_16700");	ПоляЗапроса.Вставить("customfield_16701");				
		//---Брук 09.12.2019
		ПоляЗапроса.Вставить("customfield_10001");	//OW Копачев А.С. 11.03.2020 ONEC-5399 
	КонецЕсли;
	
	ДобавитьПоляЗапросаИзСправочникаСоответствияПолей(ПоляЗапроса, ИнстансJIRA);
	
	Возврат ПоляЗапроса;
	//--OW Копачев А.С. 09.04.2019 ONEC-4361
КонецФункции	

Процедура ДобавитьПоляЗапросаИзСправочникаСоответствияПолей(ПоляЗапроса, ИнстансJIRA) 
	
	ИдентификаторыПолейИнстанса = Справочники.СоответствиеПолейJIRA.ПолучитьИдентификаторыПолейИнстанса(ИнстансJIRA);
	Для Каждого ТекЭлемент Из ИдентификаторыПолейИнстанса Цикл
		ПоляЗапроса.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);	
	КонецЦикла;	
	
КонецПроцедуры	

Функция СформироватьТекстПолейЗапроса(ПоляЗапроса)
	
	ТекстПолейЗапроса = "";
	
	Для Каждого ТекДанные Из ПоляЗапроса Цикл
		ИмяПоля = ТекДанные.Ключ;
		ТекстПолейЗапроса = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстПолейЗапроса, """" + ИмяПоля + """", ", ");		
	КонецЦикла;
	
	Возврат ТекстПолейЗапроса;
	
КонецФункции

Процедура УстановитьПризнакДанныеЗагружены(НомерЗадачи, ДанныеЗагружены = Истина, ИнстансJIRA)
	Задача = НайтиСоздатьЗадачуJIRA(НомерЗадачи, ИнстансJIRA);
	Если ЗначениеЗаполнено(Задача) И Задача.ДанныеЗагружены <> ДанныеЗагружены Тогда
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.ДанныеЗагружены = ДанныеЗагружены;
		//++OW Копачев А.С. 28.01.2021 ONEC-4737
		Если ДанныеЗагружены = Истина Тогда 
			ЗадачаОбъект.ЗадачаУдалена = Ложь;
		КонецЕсли;
		//--OW Копачев А.С. 28.01.2021 ONEC-4737
		ЗадачаОбъект.Записать();
	КонецЕсли; 
КонецПроцедуры
//-------------------------------------------------------- ПОЛУЧЕНИЕ ДАННЫХ ПО ОДНОЙ ЗАДАЧЕ ИЗ JIRA --------------------------------------------------------


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ВЫГРУЗКА ПРОЕКТОВ В JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Функция ПолучитьПроектJIRA(Объект)
	//+ Пилюгин В.Е. 22.01.2018
	ПроектJIRA = Неопределено;
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда	
		//++OW Копачев А.С. 18.01.2021 ONEC-6046 
		// неправильный тип реквизита передавался
		//ПроектJIRA = ОпределитьПроектJIRAПоСоответствию(Объект.КонфигурацияЛицензий, Объект.ТипПроекта);
		ПроектJIRA = ОпределитьПроектJIRAПоСоответствию(Объект.КонфигурацияЛицензий, Объект.ТипФазы);
		//--OW Копачев А.С. 18.01.2021 ONEC-6046
			
	//++OW Копачев А.С. 05.06.2019 ONEC-4531	
	ИначеЕсли  ТипЗнч(Объект) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") Тогда 
				
		//+++ Брук Б 24.12.2019 ONEC-5159 
		
		Если ЗначениеЗаполнено(Объект.ПроектJIRA) Тогда
			ПроектJIRA = Объект.ПроектJIRA;
		Иначе  			
			//++OW Копачев А.С. 31.08.2020 ONEC-5995 		
			//ПроектJIRA = ПолучитьПроектJiraПоДаннымКлиента(Объект.Партнер);		
			ПроектJira = JIRA.ПолучитьПроектJiraОценочногоПроекта(Объект.Партнер, Объект.ЗадачаJIRA_BA);
			//--OW Копачев А.С. 31.08.2020 ONEC-5995
		КонецЕсли;
		
		//ПроектJIRA = "BA";  // проект по умолчанию
		 	
		//--- Брук Б 24.12.2019 ONEC-5159 
		
	//--OW Копачев А.С. 05.06.2019 ONEC-4531		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПроектJIRA) Тогда
		ПроектJIRA = ОпределитьПроектJIRAПоСоответствию(Объект.КонфигурацияЛицензий);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)
		//++OW Копачев А.С. 05.06.2019 ONEC-4531
		И ТипЗнч(Объект) <> Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов")
		//--OW Копачев А.С. 05.06.2019 ONEC-4531
		Тогда
		
		ПроектJIRA = Объект.ПроектJIRA;
	КонецЕсли; 
	//++OW Копачев А.С. 20.02.2019 ONEC-4280
	Если НЕ ЗначениеЗаполнено(ПроектJIRA) Тогда 
		//++OW Копачев А.С. 05.06.2019 ONEC-4531
		КодПроектаJIRA = ?(ТипЗнч(Объект) = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов"), Объект.ЗадачаJIRA_BA, Объект.КодПроектаJIRA);
		//--OW Копачев А.С. 05.06.2019 ONEC-4531
		
		Если НЕ ПустаяСтрока(КодПроектаJIRA) Тогда		
			// выделим проект из кода задачи JIRA  
			ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(Объект.КодПроектаJIRA); 
		КонецЕсли;	
	КонецЕсли;	
	//--OW Копачев А.С. 20.02.2019 ONEC-4280
	
	Возврат ПроектJIRA;
	//- Пилюгин В.Е. 22.01.2018
КонецФункции


//******************** внутренние фазы
Функция ПолучитьПараметрыВыгрузкиВнутреннейФазы(Проект)
	//+ Пилюгин В.Е. 28.12.2017
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров = Новый Структура;
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Проект.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации
	ТиповаяУчеткаJIRA = НЕ OW.ПолучитьПроверкуНаСменуПароля();
	Если ТиповаяУчеткаJIRA Тогда
		//логин и пароль для авторизации			
		Логин = ИнстансJIRA.Логин;
		Пароль = ИнстансJIRA.Пароль;
	Иначе
		Логин = ПараметрыСеанса.ТекущийПользователь.Login; 
		Пароль = ow.ПолучитьДанныеПоПользователюП(ПараметрыСеанса.ТекущийПользователь.Ссылка); 
	КонецЕсли;
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);

	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НомерЗадачи", Проект.КодПроектаJIRA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Проект.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	ПроектJIRA = ПолучитьПроектJIRA(Проект);
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Выгрузка фаз с типом " + Проект.ТипПроекта + " НЕ РЕГЛАМЕНТИРОВАНА и запрещена.";
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Найдено более одного JIRA проекта для данного типа фазы: " + Проект.ТипПроекта;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("ИмяЭпика", Проект.Наименование);
	
	СтруктураПараметров.Вставить("ТипЗадачи", "Epic");
	
	//++OW Копачев А.С. 14.03.2023 ONEC-6185
	//Клиент = ?(ЗначениеЗаполнено(Проект.КонфигурацияЛицензий.КлиентДляВыгрузкиВCRM.Наименование), Проект.КонфигурацияЛицензий.КлиентДляВыгрузкиВCRM.Наименование, ""); 
	Клиент = Проект.КонфигурацияЛицензий.Наименование;
	//--OW Копачев А.С. 14.03.2023 ONEC-6185

	Клиент = ?(СтрНайти(нРег(Клиент),"openway") > 0, "OpenWay", Клиент);
	СтруктураПараметров.Вставить("Клиент", Клиент);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", Проект.Наименование);
	
	ОписаниеЗадачи = "Project type: " + Проект.ТипПроекта;
	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);	
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
	СтруктураПараметров.Вставить("БюджетПлановый", Проект.БюджетПлановый);
	
	СтруктураПараметров.Вставить("Приоритет", "low");
	
	//Исполнитель
	
	Исполнитель = "";
	
	//++OW Копачев А.С. 20.08.2019 ONEC-4788 
	//СтруктураПользователь = ПолучитьПользователяJIRA(Проект.Officer, "Officer");
	ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA) = Истина; 
	Если ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Проект.Офицер, "Офицер");
	Иначе
		СтруктураПользователь = ПолучитьПользователяJIRA(Проект.Officer, "Officer");
	КонецЕсли;	
	//--OW Копачев А.С. 20.08.2019 ONEC-4788	
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли;					
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);
	
	СтруктураПараметров.Вставить("КодПроектаCRM", Проект.КодПроектаCRM);
	
	СтруктураПараметров.Вставить("КодПроектаMaringo", Проект.CodeSAP);
	
	//СтруктураПараметров.Вставить("КодПроекта1С", Проект.ID_Sync_CRM); //OW Копачев А.С. 10.06.2020 ONEC-5696
	//++OW Копачев А.С. 10.06.2020 ONEC-5696 
	СтруктураПараметров.Вставить("ID_Sync", Проект.ID_Sync);
	//--OW Копачев А.С. 10.06.2020 ONEC-5696
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 28.12.2017
КонецФункции

Функция СинхронизироватьВнутреннююФазу(Проект) Экспорт
	//+ Пилюгин В.Е. 27.12.2017
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	Если ЗначениеЗаполнено(Проект.КодПроектаJIRA) Тогда
		СтруктураВозврата.ТекстВозврата = "JIRA already exists (" + Проект.КодПроектаJIRA + "). Update function is not allowed yet." 	
		
	Иначе
		Параметры = ПолучитьПараметрыВыгрузкиВнутреннейФазы(Проект);
		
		Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
			ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
			СтруктураВозврата.ТекстВозврата = ТекстВозврата;
		Иначе
			
			СтруктураВозврата = СоздатьЗадачу(Параметры);		             
			
		КонецЕсли; 
	КонецЕсли; 
	
	ПроектОбъект = Проект.ПолучитьОбъект();
	
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Internal phase exported to JIRA, task #" + СтруктураВозврата.НомерЗадачи; 
		ПроектОбъект.КодПроектаJIRA = СтруктураВозврата.НомерЗадачи;
		//++OW Копачев А.С. 05.04.2022 ONEC-7463
		ПроектОбъект.КодИнтеграции_JIRA = СтруктураВозврата.КодИнтеграции_JIRA;
		//--OW Копачев А.С. 05.04.2022 ONEC-7463
		ПроектОбъект.ВыгруженВJIRA = Истина;
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Информация, СтрокаСообщения);		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Internal phase has been synchronized but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
	Иначе
		СтрокаСообщения = "Internal phase cannot be exported to JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
	КонецЕсли; 
	
	ПроектОбъект.ИсторияИзмененияПроекта = ПроектОбъект.ИсторияИзмененияПроекта + Символы.ПС + ТекущаяДата() + ": " + ПараметрыСеанса.ТекущийПользователь
								+ " -> " + СтрокаСообщения + Символы.ПС + Символы.Таб;
	ПроектОбъект.Записать();
	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 27.12.2017
КонецФункции



//******************** проекты верхнего уровня
Функция ПолучитьПараметрыВыгрузкиПроекта(Проект)
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
			
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Проект.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НомерЗадачи", Проект.КодПроектаJIRA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Проект.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Проект.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload project <" + Проект +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	ПроектJIRA = ПолучитьПроектJIRA(Проект);
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"For license configuration " + Проект.КонфигурацияЛицензий + " there is no mapping with Jira space in 1C.";
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Found more than one mapped Jira spaces for license configuration: " + Проект.КонфигурацияЛицензий;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", Проект.Наименование);
	
	СтруктураПараметров.Вставить("ТипЗадачи", "Project");
	
	ОписаниеЗадачи = СформироватьОписаниеЗадачи(Проект, Проект.Описание);
	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);	
	
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыПроектов.ПолучитьПриоритетJIRA(Проект.Приоритет));
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
	СтруктураСумм = Новый Структура;
	Справочники.ПроектыВерхнегоУровня.РассчетВсехСуммПроектаВерхнегоУровня(Проект, СтруктураСумм);
	СтруктураПараметров.Вставить("НераспределенныйПлановыйБюджетПроекта", СтруктураСумм.НеРаспределенныйБюджет);
	
	СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(Проект.ПланируемаяДатаНачала));
		
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(Проект.ПланируемаяДатаОкончания));    

	Исполнитель = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Проект.ПроджектМенеджер, "Project manager");
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
	Репортер = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Проект.Репортер, "Reporter");
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
	Иначе
		Репортер = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Репортер", Репортер);	
	
	МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(Проект);
	МассивПутейАттачей = ПолучитьВременныеФайлыИзФазПодПроектом(Проект, МассивПутейАттачей);
	СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);
	
	
	//СтруктураПараметров.Вставить("КодПроекта1С", Проект.ID_Sync); //OW Копачев А.С. 10.06.2020 ONEC-5696 
	//++OW Копачев А.С. 10.06.2020 ONEC-5696 
	СтруктураПараметров.Вставить("ID_Sync", Проект.ID_Sync);
	//--OW Копачев А.С. 10.06.2020 ONEC-5696
	Если НЕ ЗначениеЗаполнено(Проект.ID_Sync)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Not filled ID_sync for project (" + Строка(Проект.ID_Sync) + "). Re-save the project.";
	КонецЕсли; 
		
	СтруктураПараметров.Вставить("СтатусПроекта", Перечисления.СтатусыПроектовВерхнегоУровня.ПолучитьСтатус1СдляJIRA(Проект.Статус));	
	
	//++OW Копачев А.С. 03.07.2020 ONEC-5698 
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(Проект));
	СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(Проект));
	//--OW Копачев А.С. 03.07.2020 ONEC-5698

	СтруктураПараметров.Вставить("ОбъектСинхронизации", Проект);
		
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 21.03.2018
КонецФункции

Функция ПолучитьПараметрыВыгрузкиПроектаПовторнаяСинхронизация(Проект) Экспорт
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
		
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Проект.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
		
	СтруктураПараметров.Вставить("НомерЗадачи", Проект.КодПроектаJIRA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Проект.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", Проект.Наименование);
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Проект.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload project <" + Проект +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	ПроектJIRA = ПолучитьПроектJIRA(Проект);
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Выгрузка проектов с лиц. конфигурацией " + Проект.КонфигурацияЛицензий + " НЕ РЕГЛАМЕНТИРОВАНА и запрещена.";
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Найдено более одного JIRA проекта для данной лиц.конфиграции: " + Проект.КонфигурацияЛицензий;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыПроектов.ПолучитьПриоритетJIRA(Проект.Приоритет));
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	//
	
	СтруктураПараметров.Вставить("СтатусПроекта", Перечисления.СтатусыПроектовВерхнегоУровня.ПолучитьСтатус1СдляJIRA(Проект.Статус));	
	
	СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(Проект.ПланируемаяДатаНачала));
	
	Исполнитель = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Проект.ПроджектМенеджер, "Project manager");
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
	Репортер = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Проект.Репортер, "Reporter");
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
	Иначе
		Репортер = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Репортер", Репортер);	
	
	МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(Проект);
	МассивПутейАттачей = ПолучитьВременныеФайлыИзФазПодПроектом(Проект, МассивПутейАттачей);
	СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);
		
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(Проект));
	СтруктураСумм = Новый Структура;
	Справочники.ПроектыВерхнегоУровня.РассчетВсехСуммПроектаВерхнегоУровня(Проект, СтруктураСумм);
	СтруктураПараметров.Вставить("ОбщийБюджет", СтруктураСумм.ОбщийПлановыйБюджет + СтруктураСумм.РаспределенныйРисковыйБюджет);
	СтруктураПараметров.Вставить("РаспределенныйРисковыйБюджет", СтруктураСумм.РаспределенныйРисковыйБюджет);
	СтруктураПараметров.Вставить("НераспределенныйРисковыйБюджет", СтруктураСумм.ОставшийсяРисковыйБюджет);
	СтруктураПараметров.Вставить("НераспределенныйПлановыйБюджетПроекта", СтруктураСумм.НеРаспределенныйБюджет);
	
	СтруктураПараметров.Вставить("ОбъектСинхронизации", Проект);
	
	СтруктураПараметров.Вставить("НомерТранзишена", 91);

	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
			
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 21.03.2018
	
КонецФункции

Функция ПолучитьВременныеФайлыИзФазПодПроектом(Проект, МассивПутейАттачей)
	//+ Пилюгин В.Е. 10.08.2018
	МассивФаз = Справочники.ПроектыВерхнегоУровня.ПолучитьФазыПодПроектом(Проект);
	Для каждого фаза Из МассивФаз Цикл
		МассивПутейАттачейФазы = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(фаза);
		Для каждого эл Из МассивПутейАттачейФазы Цикл
			МассивПутейАттачей.Добавить(эл);
		КонецЦикла; 
	КонецЦикла; 
	Возврат МассивПутейАттачей;
	//- Пилюгин В.Е. 10.08.2018		
КонецФункции

Функция СформироватьОписаниеЗадачи(Проект, ОписаниеПроекта)
	//+ Пилюгин В.Е. 10.08.2018
	МассивФаз = Справочники.ПроектыВерхнегоУровня.ПолучитьФазыПодПроектом(Проект);	
	Если ПустаяСтрока(ОписаниеПроекта) Тогда
		Описание = "";
	Иначе
		Описание = ОписаниеПроекта + Символы.ПС +
					"--------------------------------------------------" + Символы.ПС;
	КонецЕсли; 
	Для каждого фаза Из МассивФаз Цикл
			
		КонтактноеЛицоКлиента = фаза.КонтактноеЛицоКлиента;		
		КонтактноеЛицоКлиентаEMAIL = ?(НЕ ЗначениеЗаполнено(КонтактноеЛицоКлиента), "", OW_ИнтеграцияCRM.ПолучитьМылоКонтактногоЛицаКлиента(КонтактноеЛицоКлиента));
				
		ЛицензииСтрокой = ПолучитьЛицензииСтрокойПоФазеДляПроекта(Фаза);
		Описание = Описание +"*"+ фаза.Наименование +"*"+ Символы.ПС + 
				"*Contact person:* " + КонтактноеЛицоКлиента + ?(ПустаяСтрока(КонтактноеЛицоКлиентаEMAIL), "", " (" + КонтактноеЛицоКлиентаEMAIL + ")") + Символы.ПС + 
				?(ЗначениеЗаполнено(фаза.ОписаниеЗадачи), фаза.ОписаниеЗадачи, "-") + Символы.ПС +
				ЛицензииСтрокой + Символы.ПС +
				"--------------------------------------------------" + Символы.ПС;
	КонецЦикла; 					
	Возврат Описание;
	//- Пилюгин В.Е. 10.08.2018
КонецФункции

Функция СинхронизироватьПроект(Проект, ПовторнаяСинхронизация = Ложь) Экспорт
	//+ Пилюгин В.Е. 27.12.2017
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
		
	Если ПовторнаяСинхронизация Тогда
		Параметры = ПолучитьПараметрыВыгрузкиПроектаПовторнаяСинхронизация(Проект);
	Иначе
		Параметры = ПолучитьПараметрыВыгрузкиПроекта(Проект);		
	КонецЕсли; 
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе			
		ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
		Если ПовторнаяСинхронизация И ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 
			//JIRA-SPB
			СтруктураВозврата = ОбновитьЗадачу(Параметры);	
		Иначе
			//OWS-JIRA
			СтруктураВозврата = СоздатьЗадачу(Параметры);	
		КонецЕсли; 
	КонецЕсли; 
	
	ПроектОбъект = Проект.ПолучитьОбъект();	
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Project exported to JIRA, task #" + СтруктураВозврата.НомерЗадачи; 
		ПроектОбъект.КодПроектаJIRA = СтруктураВозврата.НомерЗадачи;
		//++OW Копачев А.С. 05.04.2022 ONEC-7463
		ПроектОбъект.КодИнтеграции_JIRA = СтруктураВозврата.КодИнтеграции_JIRA;
		//--OW Копачев А.С. 05.04.2022 ONEC-7463
		ПроектОбъект.ВыгруженВJIRA = Истина;   
		
		//обновляем рисковые бюджеты с помощью транзишена
		Если НЕ ПовторнаяСинхронизация Тогда
			СтруктураВозвратаРисковыеБюджеты = ОбновитьРисковыеБюджеты(СтруктураВозврата.НомерЗадачи, Проект, ИнстансJIRA);
			Если СтруктураВозвратаРисковыеБюджеты.Успех Тогда
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + "  - budgets successfully uploaded.";	
			Иначе
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + СтруктураВозвратаРисковыеБюджеты.СообщениеОбОшибке;	
			КонецЕсли; 
		КонецЕсли; 
				
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Информация, СтрокаСообщения);	
		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Project has been synchronized but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
		
	Иначе
		СтрокаСообщения = "Project cannot be exported to JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(Проект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
	КонецЕсли; 
		
	ПроектОбъект.ИсторияИзмененияПроекта = ПроектОбъект.ИсторияИзмененияПроекта + Символы.ПС + ТекущаяДата() + ": " + ПараметрыСеанса.ТекущийПользователь
								+ " -> " + СтрокаСообщения + Символы.ПС + Символы.Таб;
	ПроектОбъект.Записать();	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 27.12.2017
КонецФункции

Функция ПолучитьПараметрыВыгрузкиРисковыхБюджетов(Проект)
	//+ Пилюгин В.Е. 07.09.2018
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = Новый Структура;
	
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураСумм = Новый Структура;
	Справочники.ПроектыВерхнегоУровня.РассчетВсехСуммПроектаВерхнегоУровня(Проект, СтруктураСумм);
	СтруктураПараметров.Вставить("ОбщийБюджет", СтруктураСумм.ОбщийПлановыйБюджет + СтруктураСумм.РаспределенныйРисковыйБюджет);
	СтруктураПараметров.Вставить("РаспределенныйРисковыйБюджет", СтруктураСумм.РаспределенныйРисковыйБюджет);
	СтруктураПараметров.Вставить("НераспределенныйРисковыйБюджет", СтруктураСумм.ОставшийсяРисковыйБюджет);
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Проект.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload project <" + Проект +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464
	
	Возврат СтруктураПараметров;
	//- Пилюгин В.Е. 07.09.2018		
КонецФункции

Функция ПолучитьПараметрыВыгрузкиФоркаста(Фаза)
	//+ Пилюгин В.Е. 07.09.2018
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = Новый Структура;
	
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров.Вставить("ПрогнозБюджета", НормализоватьЧисло(Окр(Фаза.ПодтвержденныйПрогнозБюджета / 8, 2)));
	
	КтоУтвердил = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Фаза.КтоУтвердилПрогнозБюджета, "Кто утвердил прогноз бюджета");
	Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", СтруктураПользователь.ТекстОшибки);
	Иначе
		КтоУтвердил = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("КтоУтвердил", КтоУтвердил);	

	СтруктураПараметров.Вставить("ДатаУтверждения", НормализоватьДату(Фаза.ДатаУтвержденияПрогнозаБюджета));
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Фаза.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload phase <" + Фаза +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	Возврат СтруктураПараметров;
	//- Пилюгин В.Е. 07.09.2018		
КонецФункции

Функция ПолучитьПараметрыЛицензийФазы(Фаза)
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураПараметров = Новый Структура;
	
	ТекстОшибкиЗаполненияПараметров = "";
	
	ЛицензииСтрокой = ПолучитьЛицензииСтрокойПоФазе(Фаза);
	Если ЛицензииСтрокойПоФазеМожноВыгрузитьВJIRA(ЛицензииСтрокой) = Истина Тогда 
		СтруктураПараметров.Вставить("ЛицензииСтрокой", ЛицензииСтрокой);	
	Иначе
		СтруктураПараметров.Вставить("ЗапрещеноВыгружатьЛицензииСтрокой", Истина);
	
		ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Фаза, "Наименование, КодПроектаJIRA");
		
		ТекстДополнительнойИнформацииДляПользователя = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Число символов в списке лицензий фазы <%1> с кодом JIRA <%2> больше допустимого. Список лицензий фазы не выгружен в JIRA.",
		"The number of characters in the list of phase licenses <%1>  with JIRA-code <%2> is greater than the allowed number. The list of phase licenses have not been uploaded to JIRA.", "en");
				
		ТекстДополнительнойИнформацииДляПользователя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДополнительнойИнформацииДляПользователя, ДанныеФазы.Наименование, ДанныеФазы.КодПроектаJIRA);
		
		OW_Нотификации.НотификацияОНевыгруженныхЛицензияхФазыСтрокой(ТекстДополнительнойИнформацииДляПользователя);
		ТекстОшибкиЗаполненияПараметров = ТекстДополнительнойИнформацииДляПользователя; 		
	КонецЕсли;	
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Фаза.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload phase <" + Фаза +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464
	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции


Функция ОбновитьРисковыеБюджеты(НомерЗадачи, Проект, ИнстансJIRA)
	//+ Пилюгин В.Е. 07.09.2018
	Параметры = ПолучитьПараметрыВыгрузкиРисковыхБюджетов(Проект);
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе

		ТекстТранзишена = "{
		| ""fields"": {
		|    ""customfield_11501"": "+JIRA.НормализоватьЧисло(Параметры.ОбщийБюджет)+",
		|    ""customfield_13100"": "+JIRA.НормализоватьЧисло(Параметры.РаспределенныйРисковыйБюджет)+",
		|    ""customfield_13101"": "+JIRA.НормализоватьЧисло(Параметры.НераспределенныйРисковыйБюджет)+"
		| },
		| ""transition"": {
		|   ""id"": ""91""
		| }
		|}";
		
		СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление рисковых бюджетов", "91", ТекстТранзишена, ИнстансJira);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СменаСтатусаЗадачиJIRA(НомерЗадачи,ID_ДляСтатуса, ИнстансJIRA)  Экспорт
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//Возврат ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление стаутса здачи", ID_ДляСтатуса, , ПолучитьИнстансДляJiraSpb()); 
	Возврат ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление статуса задачи", ID_ДляСтатуса, , ИнстансJira);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	    
КонецФункции

Функция ОбновитьФоркаст(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 10.09.2018
	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьПараметрыВыгрузкиФоркаста(Фаза);
	КонецЕсли; 
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе
		
		НомерТранзишена = "231"; //OW Копачев А.С. 01.12.2020 ONEC-6205

		ТекстТранзишена = "{
		| ""fields"": {
		|    ""customfield_13003"": "+НормализоватьЧисло(Параметры.ПрогнозБюджета)+",
		|    ""customfield_13005"": {""name"": """+Параметры.КтоУтвердил+"""}"
		+?(НЕ ЗначениеЗаполнено(Параметры.ДатаУтверждения), "","
		|    ,""customfield_13004"": """+Параметры.ДатаУтверждения+"""")+"
		| },
		| ""transition"": {
		//++OW Копачев А.С. 26.11.2020 ONEC-6205 	
		//|   ""id"": ""61""
		|   ""id"": """+НомерТранзишена+"""
		//--OW Копачев А.С. 26.11.2020 ONEC-6205
		| }
		|}";
		
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление прогноза бюджета (форкаст)", НомерТранзишена, ТекстТранзишена, ПолучитьИнстансДляJiraSpb()); 
		СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление прогноза бюджета (форкаст)", НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 10.09.2018
КонецФункции

Функция ОбновитьЛицензииФазы(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 12.08.2020 ONEC-5882 	
	Если Параметры = Неопределено Тогда
		Параметры = ПолучитьПараметрыЛицензийФазы(Фаза);
	КонецЕсли; 
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//ИнстансJIRA =  ПолучитьИнстансДляJiraSpb();
	    //--OW Копачев А.С. 05.04.2022 ONEC-7464
		
		НомерТранзишена = ?(Параметры.Свойство("НомерТранзишена"), Строка(Параметры.НомерТранзишена), "61");
			
		СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь, Истина);	
		СтруктураПолей = СтруктураПолей.Структура;
		ТекстЗапроса = СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
		
		ТекстТранзишена = "{
		| ""fields"": "+ ТекстЗапроса +",
		| ""transition"": {
		|   ""id"": """+НомерТранзишена+"""
		| }
		|}";
		
		СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, "Обновление лицензий фазы", НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
	КонецЕсли;	
			
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 12.08.2020 ONEC-5882
КонецФункции

Функция ОбновитьНомерСоглашенияФазы(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 21.01.2021 ONEC-6379  
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("НомерДокумента");

	СтруктураВозврата = ОбновитьПараметрыФазыВТихомРежиме(НомерЗадачи, Фаза, МассивИменПараметров, Параметры, ИнстансJIRA, "Обновление номера соглашения фазы");

	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 21.01.2021 ONEC-6379
КонецФункции

Функция ОбновитьСтатусЭтапаФазы(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 28.03.2022 ONEC-7498   
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("СтатусФазы");
	//МассивИменПараметров.Добавить("НомерТранзишена");

	СтруктураВозврата = ОбновитьПараметрыФазыВТихомРежиме(НомерЗадачи, Фаза, МассивИменПараметров, Параметры, ИнстансJIRA, "Обновление статуса этапа фазы");

	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 28.03.2022 ONEC-7498
КонецФункции

Функция ОбновитьКомандыФазы(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 17.03.2021 ONEC-6561  	
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("МассивГруппAD");
	МассивИменПараметров.Добавить("Исполнитель");
	СтруктураВозврата = ОбновитьПараметрыФазыВТихомРежиме(НомерЗадачи, Фаза, МассивИменПараметров, Параметры, ИнстансJIRA, "Обновление команды фазы"); 	
		
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 17.03.2021 ONEC-6561
КонецФункции

Функция ОбновитьПлановуюДатуНачалаФазы(НомерЗадачи, Фаза, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 13.04.2021 ONEC-6508  
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("ПлановаяДатаНачала");

	Если Параметры = Неопределено Тогда 
		Параметры = Новый Структура;
		Параметры.Вставить("ЕстьТаймТрекинг", Истина);
		Параметры.Вставить("ДатаНачала2", НормализоватьДату(Фаза.ПлановаяДатаНачала));	
	КонецЕсли;	
	
	СтруктураВозврата = ОбновитьПараметрыФазыВТихомРежиме(НомерЗадачи, Фаза, МассивИменПараметров, Параметры, ИнстансJIRA, "Обновление номера соглашения фазы");

	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 13.04.2021 ONEC-6508
КонецФункции

Функция ОбновитьПараметрыФазыВТихомРежиме(НомерЗадачи, Фаза, МассивИменПараметров, Параметры = Неопределено, ИнстансJIRA, ТекстПояснения = "Обновление параметра фазы") Экспорт
	//++OW Копачев А.С. 17.03.2021 ONEC-6561 	
	Если Параметры = Неопределено Тогда
		ПараметрыВсе = ПолучитьПараметрыВыгрузкифазыПовторнаяСинхронизация(Фаза);
		
		Параметры = Новый Структура;
		
		Для Каждого ИмяПараметра Из МассивИменПараметров Цикл
			ЗначениеПараметра = Неопределено;
			ПараметрыВсе.Свойство(ИмяПараметра, ЗначениеПараметра);
			Если ЗначениеПараметра <> Неопределено Тогда
				Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВсе.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда 
			Параметры.Вставить("ТекстОшибкиЗаполненияПараметров", ПараметрыВсе.ТекстОшибкиЗаполненияПараметров);
		КонецЕсли;
	КонецЕсли; 
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе
		
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//ИнстансJIRA =  ПолучитьИнстансДляJiraSpb();
	    //--OW Копачев А.С. 05.04.2022 ONEC-7464
		
		НомерТранзишена = ?(Параметры.Свойство("НомерТранзишена"), Строка(Параметры.НомерТранзишена), "231");
			
		СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь, Истина);	
		СтруктураПолей = СтруктураПолей.Структура;
		ТекстЗапроса = СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
		
		ТекстТранзишена = "{
		| ""fields"": "+ ТекстЗапроса +",
		| ""transition"": {
		|   ""id"": """+НомерТранзишена+"""
		| }
		|}";
		
		СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, ТекстПояснения, НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
	КонецЕсли;	
			
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 17.03.2021 ONEC-6561
КонецФункции

Функция ОбновитьСтатусЭтапаОценки(НомерЗадачи, Оценка, Параметры = Неопределено, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 28.03.2022 ONEC-7498   
	МассивИменПараметров = Новый Массив;
	МассивИменПараметров.Добавить("СтатусФазы");
	МассивИменПараметров.Добавить("НомерТранзишена");

	СтруктураВозврата = ОбновитьПараметрыОценкиВТихомРежиме(НомерЗадачи, Оценка, МассивИменПараметров, Параметры, ИнстансJIRA, "Обновление статуса этапа оценки");

	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 28.03.2022 ONEC-7498
КонецФункции

Функция ОбновитьПараметрыОценкиВТихомРежиме(НомерЗадачи, Оценка, МассивИменПараметров, Параметры = Неопределено, ИнстансJIRA, ТекстПояснения = "Обновление параметра оценки") Экспорт
	//++OW Копачев А.С. 28.03.2022 ONEC-7498 	
	Если Параметры = Неопределено Тогда
		ПараметрыВсе = ПолучитьПараметрыВыгрузкиОценочногоПроектаПовторнаяСинхронизация(Оценка);
		
		Параметры = Новый Структура;
		
		Для Каждого ИмяПараметра Из МассивИменПараметров Цикл
			ЗначениеПараметра = Неопределено;
			ПараметрыВсе.Свойство(ИмяПараметра, ЗначениеПараметра);
			Если ЗначениеПараметра <> Неопределено Тогда
				Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВсе.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда 
			Параметры.Вставить("ТекстОшибкиЗаполненияПараметров", ПараметрыВсе.ТекстОшибкиЗаполненияПараметров);
		КонецЕсли;
	КонецЕсли; 
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе
		
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//ИнстансJIRA =  ПолучитьИнстансДляJiraSpb();
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
			
		НомерТранзишена = ?(Параметры.Свойство("НомерТранзишена"), Строка(Параметры.НомерТранзишена), "61");
			
		СтруктураПолей = ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь, Истина);	
		СтруктураПолей = СтруктураПолей.Структура;
		ТекстЗапроса = СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда 
			ТекстТранзишена = "{
			| ""fields"": "+ ТекстЗапроса +",
			| ""transition"": {
			|   ""id"": """+НомерТранзишена+"""
			| }
			|}";
			
			СтруктураВозврата = ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, ТекстПояснения, НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
			
		Иначе
			СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Истина, "");
		КонецЕсли;	
	КонецЕсли;	
			
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 28.03.2022 ONEC-7498
КонецФункции

//++OW Копачев А.С. 31.03.2022 ONEC-7464
//Функция ПолучитьПроектПоКодуПроектаJIRA(КодПроектаJIRA) Экспорт 
Функция ПолучитьПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA) Экспорт
//--OW Копачев А.С. 31.03.2022 ONEC-7464

	Проект = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроектыВерхнегоУровня.Ссылка КАК Ссылка 
		|ИЗ
		|	Справочник.ПроектыВерхнегоУровня КАК ПроектыВерхнегоУровня
		|ГДЕ
		|	ПроектыВерхнегоУровня.ПометкаУдаления = ЛОЖЬ
	//++OW Копачев А.С. 31.03.2022 ONEC-7464
		//|	И ПроектыВерхнегоУровня.КодПроектаJIRA = &КодПроектаJIRA";
		//Запрос.УстановитьПараметр("КодПроектаJIRA", КодПроектаJIRA);
		|	И ПроектыВерхнегоУровня.КодИнтеграции_JIRA = &КодИнтеграцииJIRA";
		
	Запрос.УстановитьПараметр("КодИнтеграцииJIRA", КодИнтеграцииJIRA);
	//--OW Копачев А.С. 31.03.2022 ONEC-7464
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
	    Выборка.Следующий();
		
		Проект = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Проект;
			
КонецФункции	

Функция ОбновитьПараметрыПоектаВТихомРежиме(НомерЗадачи, Проект, МассивИменПараметров, Параметры = Неопределено, ИнстансJIRA, ТекстПояснения = "Обновление параметра проекта") Экспорт
	
	Если Параметры = Неопределено Тогда
		ПараметрыВсе = JIRA.ПолучитьПараметрыВыгрузкиПроектаПовторнаяСинхронизация(Проект);
		
		Параметры = Новый Структура;
		
		Для Каждого ИмяПараметра Из МассивИменПараметров Цикл
			ЗначениеПараметра = Неопределено;
			ПараметрыВсе.Свойство(ИмяПараметра, ЗначениеПараметра);
			Если ЗначениеПараметра <> Неопределено Тогда
				Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВсе.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда 
			Параметры.Вставить("ТекстОшибкиЗаполненияПараметров", ПараметрыВсе.ТекстОшибкиЗаполненияПараметров);
		КонецЕсли;
	КонецЕсли; 
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, Параметры.ТекстОшибкиЗаполненияПараметров);
	Иначе
				
		НомерТранзишена = ?(Параметры.Свойство("НомерТранзишена"), Строка(Параметры.НомерТранзишена), "201");
			
		СтруктураПолей = JIRA.ПолучитьСтруктуруПолейЗапросаСозданиеЗадачи(Параметры, ИнстансJIRA, Ложь, Истина);	
		СтруктураПолей = СтруктураПолей.Структура;
		ТекстЗапроса = JIRA.СформироватьТекстЗапросаОбновленияЗадачиJIRA(СтруктураПолей);	
		
		ТекстТранзишена = "{
		| ""fields"": "+ ТекстЗапроса +",
		| ""transition"": {
		|   ""id"": """+НомерТранзишена+"""
		| }
		|}";
		
		СтруктураВозврата = JIRA.ЗапуститьТранзишнСПроверкойПоId(НомерЗадачи, ТекстПояснения, НомерТранзишена, ТекстТранзишена, ИнстансJIRA); 
	КонецЕсли;	
			
	Возврат СтруктураВозврата;	
КонецФункции


//******************** фазы
Функция ПолучитьПараметрыВыгрузкиФазы(Фаза) Экспорт
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);	
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Фаза.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин	= ИнстансJIRA.Логин;
	Пароль	= ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
		
	СтруктураПараметров.Вставить("НомерЗадачи", Фаза.КодПроектаJIRA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Фаза.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Фаза.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload phase <" + Фаза +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	ПроектJIRA = ПолучитьПроектJIRA(Фаза);		
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда	
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Выгрузка фаз с лиц. конфигурацией " + Фаза.КонфигурацияЛицензий + " невозможна, так как не определен Проект JIRA!",
															"For license configuration " + Фаза.КонфигурацияЛицензий + " there is no mapping with Jira space in 1C.");
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Найдено более одного JIRA проекта для данного типа фазы и лиц.конфиграции: " + Фаза.КонфигурацияЛицензий,
															"Found more than one mapped Jira spaces for license configuration: " + Фаза.КонфигурацияЛицензий);		
	КонецЕсли; 	
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", Фаза.Наименование);
	
	СтруктураПараметров.Вставить("ТипЗадачи", "Phase");
	
	//++OW Копачев А.С. 24.12.2020 ONEC-6379 
	СтруктураПараметров.Вставить("ОписаниеЗадачи", Фаза.Наименование);  //ONEC-3616
	
	//СоглашениеВнедренияНомер = "";
	//Если ЗначениеЗаполнено(Фаза.СоглашениеВнедрения) Тогда 
	//	СоглашениеВнедренияНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза.СоглашениеВнедрения, "Номер");
	//КонецЕсли;	
	//ОписаниеЗадачи = Фаза.Наименование;
	//ОписаниеЗадачи = ОписаниеЗадачи + "
	//                |
	//				|Contract - " + ?(ПустаяСтрока(СоглашениеВнедренияНомер), "", "*" + СоглашениеВнедренияНомер + "*");
	//СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);
	
	СоглашениеВнедренияНомер = "";
	Если ЗначениеЗаполнено(Фаза.СоглашениеВнедрения) Тогда 
		СоглашениеВнедренияНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза.СоглашениеВнедрения, "Номер");
	ИначеЕсли ЗначениеЗаполнено(Фаза. Владелец) Тогда 
		// если контракта нет, то записываем бизнес-проект
		СоглашениеВнедренияНомер = Строка(Фаза. Владелец);
	КонецЕсли;	
	СтруктураПараметров.Вставить("НомерДокумента", СоглашениеВнедренияНомер); 
	//--OW Копачев А.С. 24.12.2020 ONEC-6379
	
	//++OW Копачев А.С. 14.05.2020 ONEC-5647 
	ЛицензииСтрокой = ПолучитьЛицензииСтрокойПоФазе(Фаза);
	Если ЛицензииСтрокойПоФазеМожноВыгрузитьВJIRA(ЛицензииСтрокой) = Истина Тогда 
		СтруктураПараметров.Вставить("ЛицензииСтрокой", ЛицензииСтрокой);	
	Иначе
		СтруктураПараметров.Вставить("ЗапрещеноВыгружатьЛицензииСтрокой", Истина);
	КонецЕсли;	
	//--OW Копачев А.С. 14.05.2020 ONEC-5647

	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
	ОбщийБюджет = Фаза.БюджетПлановый/8 + Фаза.РисковыйБюджет/8; //MD
	СтруктураПараметров.Вставить("ОбщийБюджет", Окр(ОбщийБюджет, 2)); 

	СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(Фаза.ПлановаяДатаНачала));
		
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(Фаза.ПлановаяДатаОкончания));    
	
	//++OW Копачев А.С. 16.04.2021 ONEC-6634 
	//приоритет
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(Фаза.Приоритет));
	//--OW Копачев А.С. 16.04.2021 ONEC-6634
	
	Исполнитель = "";
	//++OW Копачев А.С. 20.08.2019 ONEC-4788 
	//СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA) = Истина; 
	Если ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Офицер, "Офицер");
	Иначе
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	КонецЕсли;	
	//--OW Копачев А.С. 20.08.2019 ONEC-4788
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
	Репортер = "";
	СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.ПроджектМенеджер, "Project manager");
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Репортер = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Репортер", Репортер);	
	
	//++OW Копачев А.С. 29.06.2020 ONEC-5758 
	СтруктураПараметров.Вставить("ПрогнозБюджета", Окр(Фаза.ПодтвержденныйПрогнозБюджета / 8, 2));
	
	КтоУтвердил = "";
	СтруктураПользователь = ПолучитьПользователяJIRA(Фаза.КтоУтвердилПрогнозБюджета, "Кто утвердил прогноз бюджета");
	Если НЕ ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
		КтоУтвердил = СтруктураПользователь.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("КтоУтвердил", КтоУтвердил);	

	СтруктураПараметров.Вставить("ДатаУтверждения", НормализоватьДату(Фаза.ДатаУтвержденияПрогнозаБюджета));
	//--OW Копачев А.С. 29.06.2020 ONEC-5758

	
	СтруктураПараметров.Вставить("ВиднаКлиенту", Фаза.ВиднаКлиенту);	
		
	//СтруктураПараметров.Вставить("КодПроекта1С", Фаза.ID_Sync_CRM); //OW Копачев А.С. 10.06.2020 ONEC-5696
	//++OW Копачев А.С. 10.06.2020 ONEC-5696 
	СтруктураПараметров.Вставить("ID_Sync", Фаза.ID_Sync_CRM);
	//--OW Копачев А.С. 10.06.2020 ONEC-5696
	Если НЕ ЗначениеЗаполнено(Фаза.ID_Sync_CRM)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"У проекта НЕ ЗАПОЛНЕН " + Строка(Фаза.ID_Sync_CRM) + ". Перезапишите проект.";
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("КодПроектаCRM", Фаза.КодПроектаCRM);
	
	СтруктураПараметров.Вставить("СтатусФазы", Строка(Фаза.СтатусЭтапа));
	
	//МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(Фаза);     //ONEC-3616
	//СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);
	
	//++OW Копачев А.С. 03.07.2020 ONEC-5698 
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(Фаза));
	СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(Фаза));
	//--OW Копачев А.С. 03.07.2020 ONEC-5698
	
	ТипФазы = "";
	Если ЗначениеЗаполнено(Фаза.ТипФазы) Тогда
		ТипФазы = Фаза.ТипФазы.Наименование;		
	КонецЕсли; 
	СтруктураПараметров.Вставить("ТипФазы", ТипФазы);	
	
	//++OW Копачев А.С. 16.03.2021 ONEC-6561 
	МассивГруппAD = Новый Массив;
	ФазаКоманда = Фаза.Команда;
	Если ЗначениеЗаполнено(ФазаКоманда) Тогда
		МассивКоманд = Справочники.Команды.ПолучитьВышестоящиеКомандыДляВыгрузкиВJIRA(ФазаКоманда);
		МассивКоманд.Добавить(ФазаКоманда);
		
		Для Каждого ТекКоманда Из МассивКоманд Цикл
			ГруппаAD = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекКоманда, "ГруппаAD");
			Если НЕ ПустаяСтрока(ГруппаAD) Тогда
				МассивГруппAD.Добавить(ГруппаAD);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	СтруктураПараметров.Вставить("МассивГруппAD", МассивГруппAD);
	//--OW Копачев А.С. 16.03.2021 ONEC-6561
	
	СтруктураПараметров.Вставить("ОбъектСинхронизации", Фаза);

		
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
	//+++ Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937
	// ContactPerson
	КонтактноеЛицоКлиента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза,"КонтактноеЛицоКлиента");
	
	Если ЗначениеЗаполнено(КонтактноеЛицоКлиента) Тогда
		
		EmailКонтактногоЛица		= Справочники.КонтактныеЛицаПартнеров.ПолучитьEmailКонтактногоЛица(КонтактноеЛицоКлиента);
		ФамилияИмяКонтактногоЛица 	= ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонтактноеЛицоКлиента,"Фамилия, Имя");
		СтруктураПараметров.Вставить("ContactPerson", ФамилияИмяКонтактногоЛица.Фамилия+", "+ФамилияИмяКонтактногоЛица.Имя+" ("+EmailКонтактногоЛица+")");
		
	КонецЕсли;
	//--- Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937	
	
	//++OW Копачев А.С. 27.01.2021 ONEC-6197 
	// labels
	массивlabels = Новый Массив;                  
	
	Если Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииОценочногоПроекта") Тогда 
		массивlabels.Добавить("est_ba");
	ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииПрайсЛиста") Тогда 
		массивlabels.Добавить("est_pl");
	ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииДругихДанных") Тогда 
		массивlabels.Добавить("est_etc");
	КонецЕсли;		
		
	Если массивlabels.Количество() > 0 Тогда 
		СтруктураПараметров.Вставить("labels", массивlabels);
	КонецЕсли;	
	//--OW Копачев А.С. 27.01.2021 ONEC-6197
	
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 21.03.2018
КонецФункции



//******************** SubTasks
Функция ПолучитьПараметрыВыгрузкиФазы_SubTusks(Фаза,SubTask) Экспорт
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);	
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров = Новый Структура;
	
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Фаза.КонфигурацияЛицензий, Истина);
	
	//логин и пароль для авторизации			
	Логин	= ИнстансJIRA.Логин;
	Пароль	= ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	
	СтруктураПараметров.Вставить("НомерЗадачи", SubTask.КодПроектаJIRA);
	
 	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", SubTask.КодИнтеграции_JIRA);
 	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Фаза.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload phase <" + Фаза +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	ПроектJIRA = ПолучитьПроектJIRA(Фаза);		
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда	
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Выгрузка фаз с лиц. конфигурацией " + Фаза.КонфигурацияЛицензий + " невозможна, так как не определен Проект JIRA!",
															"For license configuration " + Фаза.КонфигурацияЛицензий + " there is no mapping with Jira space in 1C.");
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Найдено более одного JIRA проекта для данного типа фазы и лиц.конфиграции: " + Фаза.КонфигурацияЛицензий,
															"Found more than one mapped Jira spaces for license configuration: " + Фаза.КонфигурацияЛицензий);		
	КонецЕсли; 	
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", ""+Фаза.Наименование+"-"+СокрЛП(SubTask.Label));
	
	СтруктураПараметров.Вставить("ТипЗадачи", "Internal Task");
	
 
	СтруктураПараметров.Вставить("ОписаниеЗадачи", Фаза.Наименование);   	
 	
 //   СоглашениеВнедренияНомер = "";
 //   Если ЗначениеЗаполнено(Фаза.СоглашениеВнедрения) Тогда 
 //   	СоглашениеВнедренияНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза.СоглашениеВнедрения, "Номер");
 //   ИначеЕсли ЗначениеЗаполнено(Фаза. Владелец) Тогда 
 //   	// если контракта нет, то записываем бизнес-проект
 //   	СоглашениеВнедренияНомер = Строка(Фаза. Владелец);
 //   КонецЕсли;	
 //   СтруктураПараметров.Вставить("НомерДокумента", СоглашениеВнедренияНомер); 
 //
 //   ЛицензииСтрокой = ПолучитьЛицензииСтрокойПоФазе(Фаза);
 //   Если ЛицензииСтрокойПоФазеМожноВыгрузитьВJIRA(ЛицензииСтрокой) = Истина Тогда 
 //   	СтруктураПараметров.Вставить("ЛицензииСтрокой", ЛицензииСтрокой);	
 //   Иначе
 //   	СтруктураПараметров.Вставить("ЗапрещеноВыгружатьЛицензииСтрокой", Истина);
 //   КонецЕсли;	
 //   //--OW Копачев А.С. 14.05.2020 ONEC-5647

	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
    //ОбщийБюджет = Фаза.БюджетПлановый/8 + Фаза.РисковыйБюджет/8; //MD
    //СтруктураПараметров.Вставить("ОбщийБюджет", Окр(ОбщийБюджет, 2)); 

	СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(Фаза.ПлановаяДатаНачала));
		
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(Фаза.ПлановаяДатаОкончания));    
	
	//++OW Копачев А.С. 16.04.2021 ONEC-6634 
	//приоритет
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(Фаза.Приоритет));
	//--OW Копачев А.С. 16.04.2021 ONEC-6634
	
	Исполнитель = "";
	//++OW Копачев А.С. 20.08.2019 ONEC-4788 
	//СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA) = Истина; 
	Если ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Офицер, "Офицер");
	Иначе
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	КонецЕсли;	
	//--OW Копачев А.С. 20.08.2019 ONEC-4788
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
    //Репортер = "";
    //СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.ПроджектМенеджер, "Project manager");
    //Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
    //	ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
    //Иначе
    //	Репортер = СтруктураИсполнитель.ПользовательJIRA;
    //КонецЕсли; 
    //СтруктураПараметров.Вставить("Репортер", Репортер);	
	СтруктураПараметров.Вставить("ContainerLink", Число(Справочники.ЗадачаJIRA.НайтиПоРеквизиту("КодИнтеграции_JIRA",Фаза.КодИнтеграции_JIRA).ID));
    СтруктураПараметров.Вставить("ContainerLinkCode", Фаза.КодПроектаJIRA);

     ////++OW Копачев А.С. 29.06.2020 ONEC-5758 
    //СтруктураПараметров.Вставить("ПрогнозБюджета", Окр(Фаза.ПодтвержденныйПрогнозБюджета / 8, 2));
    //
    //КтоУтвердил = "";
    //СтруктураПользователь = ПолучитьПользователяJIRA(Фаза.КтоУтвердилПрогнозБюджета, "Кто утвердил прогноз бюджета");
    //Если НЕ ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
    //	КтоУтвердил = СтруктураПользователь.ПользовательJIRA;
    //КонецЕсли; 
    //СтруктураПараметров.Вставить("КтоУтвердил", КтоУтвердил);	

    //СтруктураПараметров.Вставить("ДатаУтверждения", НормализоватьДату(Фаза.ДатаУтвержденияПрогнозаБюджета));
    ////--OW Копачев А.С. 29.06.2020 ONEC-5758

    //
    //СтруктураПараметров.Вставить("ВиднаКлиенту", Фаза.ВиднаКлиенту);	
    //	
    ////СтруктураПараметров.Вставить("КодПроекта1С", Фаза.ID_Sync_CRM); //OW Копачев А.С. 10.06.2020 ONEC-5696
    ////++OW Копачев А.С. 10.06.2020 ONEC-5696 
    //СтруктураПараметров.Вставить("ID_Sync", Фаза.ID_Sync_CRM);
    ////--OW Копачев А.С. 10.06.2020 ONEC-5696
    //Если НЕ ЗначениеЗаполнено(Фаза.ID_Sync_CRM)  Тогда
    //	ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
    //	"У проекта НЕ ЗАПОЛНЕН " + Строка(Фаза.ID_Sync_CRM) + ". Перезапишите проект.";
    //КонецЕсли; 
	
    //СтруктураПараметров.Вставить("КодПроектаCRM", Фаза.КодПроектаCRM);
	
    //СтруктураПараметров.Вставить("СтатусФазы", Строка(Фаза.СтатусЭтапа));
	
	//МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(Фаза);     //ONEC-3616
	//СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);
	
	//++OW Копачев А.С. 03.07.2020 ONEC-5698 
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(Фаза));
	СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(Фаза));
	//--OW Копачев А.С. 03.07.2020 ONEC-5698
	
	ТипФазы = "";
	Если ЗначениеЗаполнено(Фаза.ТипФазы) Тогда
		ТипФазы = Фаза.ТипФазы.Наименование;		
	КонецЕсли; 
 
	
	 	
	СтруктураПараметров.Вставить("ОбъектСинхронизации", SubTask);

		
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
 	// labels
	массивlabels = Новый Массив;                  
	
	//Если Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииОценочногоПроекта") Тогда 
	массивlabels.Добавить(СокрЛП(SubTask.Label));
    //ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииПрайсЛиста") Тогда 
    //	массивlabels.Добавить("est_pl");
    //ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииДругихДанных") Тогда 
    //	массивlabels.Добавить("est_etc");
    //КонецЕсли;		
		
	Если массивlabels.Количество() > 0 Тогда 
		СтруктураПараметров.Вставить("labels", массивlabels);
	КонецЕсли;	
	//--OW Копачев А.С. 27.01.2021 ONEC-6197
	
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 21.03.2018
КонецФункции


Функция ПолучитьПараметрыВыгрузкиФазыПовторнаяСинхронизация(Фаза)  Экспорт
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
		
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Фаза.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
		
	СтруктураПараметров.Вставить("НомерЗадачи", Фаза.КодПроектаJIRA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", Фаза.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(Фаза.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload phase <" + Фаза +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464
	
	ПроектJIRA = ПолучитьПроектJIRA(Фаза);
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Выгрузка фаз с лиц. конфигурацией " + Фаза.КонфигурацияЛицензий + " НЕ РЕГЛАМЕНТИРОВАНА и запрещена.";
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		"Найдено более одного JIRA проекта для данного типа фазы и лиц.конфиграции: " + Фаза.КонфигурацияЛицензий;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", Фаза.Наименование);
	
	//++OW Копачев А.С. 24.12.2020 ONEC-6379 		
	СоглашениеВнедренияНомер = "";
	Если ЗначениеЗаполнено(Фаза.СоглашениеВнедрения) Тогда 
		СоглашениеВнедренияНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза.СоглашениеВнедрения, "Номер");
	ИначеЕсли ЗначениеЗаполнено(Фаза. Владелец) Тогда 
		// если контракта нет, то записываем бизнес-проект
		СоглашениеВнедренияНомер = Строка(Фаза. Владелец);	
	КонецЕсли;	
	СтруктураПараметров.Вставить("НомерДокумента", СоглашениеВнедренияНомер);
	//--OW Копачев А.С. 24.12.2020 ONEC-6379

	//++OW Копачев А.С. 14.05.2020 ONEC-5647 
	ЛицензииСтрокой = ПолучитьЛицензииСтрокойПоФазе(Фаза);
	Если ЛицензииСтрокойПоФазеМожноВыгрузитьВJIRA(ЛицензииСтрокой) = Истина Тогда 
		СтруктураПараметров.Вставить("ЛицензииСтрокой", ЛицензииСтрокой);
	Иначе
		СтруктураПараметров.Вставить("ЗапрещеноВыгружатьЛицензииСтрокой", Истина);
	КонецЕсли;	
	//--OW Копачев А.С. 14.05.2020 ONEC-5647

	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
	ОбщийБюджет = Фаза.БюджетПлановый/8 + Фаза.РисковыйБюджет/8; //MD
	СтруктураПараметров.Вставить("ОбщийБюджет", Окр(ОбщийБюджет, 2)); 
	
	//++OW Копачев А.С. 13.04.2021 ONEC-6508
	// Дата начала повторно выгружается отдельным рестом (при фактическом изменении)
	
	// ПОКА ТАК
	////
	//////++OW Копачев А.С. 22.03.2019 ONEC-4331 
	//СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(Фаза.ПлановаяДатаНачала));
	//////--OW Копачев А.С. 22.03.2019 ONEC-4331
	//--OW Копачев А.С. 13.04.2021 ONEC-6508
	
	//++OW Копачев А.С. 06.07.2020 ONEC-5802 	
	СтруктураПараметров.Вставить("КодПроектаCRM", Фаза.КодПроектаCRM);
	//--OW Копачев А.С. 06.07.2020 ONEC-5802
	
	СтруктураПараметров.Вставить("СтатусФазы", Строка(Фаза.СтатусЭтапа));
	
	Исполнитель = "";
	//++OW Копачев А.С. 20.08.2019 ONEC-4788 
	//СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA) = Истина; 
	Если ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Офицер, "Офицер"); 
	Иначе
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	КонецЕсли;	
	//--OW Копачев А.С. 20.08.2019 ONEC-4788	
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Исполнитель = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
	Репортер = "";
	СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.ПроджектМенеджер, "Project manager");
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Репортер = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Репортер", Репортер);	
	
	//МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(Фаза);
	//СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);
	
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(Фаза));
		
	//++OW Копачев А.С. 29.06.2020 ONEC-5758 
	Если Справочники.ЗадачиПроектов.ПоследнийПрогнозБюджетаФазыОбновленСлужебнымПользователем(Фаза) Тогда
		
		СтруктураПараметровПрогнозаБюджета = Новый Структура;  //OW Копачев А.С. 26.11.2020 ONEC-6205 
		
		СтруктураПараметровПрогнозаБюджета.Вставить("ПрогнозБюджета", Окр(Фаза.ПодтвержденныйПрогнозБюджета / 8, 2));
		
		КтоУтвердил = "";
		СтруктураПользователь = ПолучитьПользователяJIRA(Фаза.КтоУтвердилПрогнозБюджета, "Кто утвердил прогноз бюджета");
		Если НЕ ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
			КтоУтвердил = СтруктураПользователь.ПользовательJIRA;
		КонецЕсли; 
		СтруктураПараметровПрогнозаБюджета.Вставить("КтоУтвердил", КтоУтвердил);	

		СтруктураПараметровПрогнозаБюджета.Вставить("ДатаУтверждения", НормализоватьДату(Фаза.ДатаУтвержденияПрогнозаБюджета));
		
		СтруктураПараметров.Вставить("СтруктураПараметровПрогнозаБюджета", СтруктураПараметровПрогнозаБюджета);
	КонецЕсли;	
	//--OW Копачев А.С. 29.06.2020 ONEC-5758
	
	//++OW Копачев А.С. 16.04.2021 ONEC-6634 
	//приоритет
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(Фаза.Приоритет));
	//--OW Копачев А.С. 16.04.2021 ONEC-6634
	
	ТипФазы = "";
	Если ЗначениеЗаполнено(Фаза.ТипФазы) Тогда
		ТипФазы = Фаза.ТипФазы.Наименование;		
	КонецЕсли; 
	СтруктураПараметров.Вставить("ТипФазы", ТипФазы);	
	
	//++OW Копачев А.С. 16.03.2021 ONEC-6561 
	МассивГруппAD = Новый Массив;
	ФазаКоманда = Фаза.Команда;
	Если ЗначениеЗаполнено(ФазаКоманда) Тогда
		МассивКоманд = Справочники.Команды.ПолучитьВышестоящиеКомандыДляВыгрузкиВJIRA(ФазаКоманда);
		МассивКоманд.Добавить(ФазаКоманда);
		
		Для Каждого ТекКоманда Из МассивКоманд Цикл
			ГруппаAD = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекКоманда, "ГруппаAD");
			Если НЕ ПустаяСтрока(ГруппаAD) Тогда
				МассивГруппAD.Добавить(ГруппаAD);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	СтруктураПараметров.Вставить("МассивГруппAD", МассивГруппAD);
	//--OW Копачев А.С. 16.03.2021 ONEC-6561
	
	СтруктураПараметров.Вставить("ОбъектСинхронизации", Фаза);
	
	СтруктураПараметров.Вставить("НомерТранзишена", 61);
		
	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
	//+++ Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937
	// ContactPerson
	КонтактноеЛицоКлиента 		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза,"КонтактноеЛицоКлиента");
	
	Если ЗначениеЗаполнено(КонтактноеЛицоКлиента) Тогда
		
		EmailКонтактногоЛица 		= Справочники.КонтактныеЛицаПартнеров.ПолучитьEmailКонтактногоЛица(КонтактноеЛицоКлиента);
		ФамилияИмяКонтактногоЛица 	= ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонтактноеЛицоКлиента,"Фамилия, Имя");
		СтруктураПараметров.Вставить("ContactPerson", ФамилияИмяКонтактногоЛица.Фамилия+", "+ФамилияИмяКонтактногоЛица.Имя+" ("+EmailКонтактногоЛица+")");
		
	КонецЕсли;
	//--- Брук Б 15.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-4937
	                                                
	//++OW Копачев А.С. 27.01.2021 ONEC-6197 
	// labels
	массивlabels = Новый Массив;
	Если Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииОценочногоПроекта") Тогда 
		массивlabels.Добавить("est_ba");
	ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииПрайсЛиста") Тогда 
		массивlabels.Добавить("est_pl");
	ИначеЕсли Фаза.ОснованиеОценкиРабот = ПредопределенноеЗначение("Перечисление.ВариантыОценкиРаботПоФазе.НаОснованииДругихДанных") Тогда 
		массивlabels.Добавить("est_etc");
	КонецЕсли;		
	
	массивlabelsДляОбновления = Новый Массив;
	Для Каждого Текlabel Из массивlabels Цикл 
		массивlabelsДляОбновления.Добавить(Новый Структура("add",Текlabel));
	КонецЦикла;	
	
	// удаляем не нужные лейблы
	Если массивlabels.Найти("est_ba") = Неопределено Тогда 
		массивlabelsДляОбновления.Добавить(Новый Структура("remove","est_ba"));	
	КонецЕсли;
	Если массивlabels.Найти("est_pl") = Неопределено Тогда 
		массивlabelsДляОбновления.Добавить(Новый Структура("remove","est_pl"));	
	КонецЕсли;
	Если массивlabels.Найти("est_etc") = Неопределено Тогда 
		массивlabelsДляОбновления.Добавить(Новый Структура("remove","est_etc"));	
	КонецЕсли;
			
	ДанныеUpdate = Новый Структура; 
	ДанныеUpdate.Вставить("labels", массивlabelsДляОбновления);	
	СтруктураПараметров.Вставить("update", ДанныеUpdate);
	//--OW Копачев А.С. 27.01.2021 ONEC-6197
		
	Возврат СтруктураПараметров;	
	//- Пилюгин В.Е. 21.03.2018
КонецФункции

Функция СинхронизироватьФазу(Фаза, ПовторнаяСинхронизация = Ложь) Экспорт
	//+ Пилюгин В.Е. 30.03.2018
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	Если ПовторнаяСинхронизация Тогда
		Параметры = ПолучитьПараметрыВыгрузкифазыПовторнаяСинхронизация(Фаза);
	Иначе
		Параметры = ПолучитьПараметрыВыгрузкифазы(Фаза);		
	КонецЕсли; 
	
	//++OW Копачев А.С. 14.05.2020 ONEC-5647
	ЗапрещеноВыгружатьЛицензииСтрокой = Ложь;
	Если Параметры.Свойство("ЗапрещеноВыгружатьЛицензииСтрокой") Тогда 
		ЗапрещеноВыгружатьЛицензииСтрокой = Истина;	
	КонецЕсли;	
	//--OW Копачев А.С. 14.05.2020 ONEC-5647

	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
		Если ПовторнаяСинхронизация И ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 
			//JIRA-SPB
			СтруктураВозврата = ОбновитьЗадачу(Параметры);	
		Иначе
			//OWS-JIRA
			СтруктураВозврата = СоздатьЗадачу(Параметры);	
		КонецЕсли; 
	КонецЕсли; 
	
	ФазаОбъект = Фаза.ПолучитьОбъект();	
	Если СтруктураВозврата.УспешноСоздана Тогда		
		Если ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
			СтрокаСообщения = "Phase exported to JIRA, task #" + СтруктураВозврата.НомерЗадачи; 
			ФазаОбъект.КодПроектаJIRA = СтруктураВозврата.НомерЗадачи;
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			ФазаОбъект.КодИнтеграции_JIRA = СтруктураВозврата.КодИнтеграции_JIRA;
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
			ФазаОбъект.ВыгруженВJIRA = Истина;
			//++OW Копачев А.С. 02.11.2020 ONEC-6046
			ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(ПредопределенноеЗначение("Справочник.ЗначенияКонстант.ОтключитьИспользованиеCRM")) = Истина; 
			Если ОтключитьИспользованиеCRM = Истина Тогда 
				Если ФазаОбъект.ВыгруженВCRM = Ложь Тогда 
					ФазаОбъект.НеТребуетсяВыгружатьВCRM = Истина;
				КонецЕсли;	
				ФазаОбъект.СотрудникИзCRM = ФазаОбъект.Офицер;
				ФазаОбъект.НеРаспределенный = Ложь;	
			КонецЕсли;	
			//--OW Копачев А.С. 02.11.2020 ONEC-6046
			
			OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Информация, СтрокаСообщения);		
			
			//++OW Копачев А.С. 13.07.2020 ONEC-5818 
			// нотификация об изменениях
			OW_Нотификации.НотификацияПриСинхронизацииПроектаJIRA(Фаза, СтруктураВозврата.НомерЗадачи, ПовторнаяСинхронизация);		
			//--OW Копачев А.С. 13.07.2020 ONEC-5818
			
			//++OW Копачев А.С. 26.11.2020 ONEC-6205
			// теперь выгрузим изменения по бюджету
			Если Параметры.Свойство("СтруктураПараметровПрогнозаБюджета") Тогда 
				ОбновитьФоркаст(СтруктураВозврата.НомерЗадачи, Фаза, Параметры.СтруктураПараметровПрогнозаБюджета, ИнстансJIRA);
			КонецЕсли;
			//--OW Копачев А.С. 26.11.2020 ONEC-6205
			
			//+++ Брук Б 23.10.2019 Выгрузка ссылок на оценочные проекты фазы https://ows-jira.spb.openwaygroup.com/browse/ONEC-2313
			ОценочныеПроектыФазы = ПолучитьОценочныеПроектыФазы(Фаза);
			Если ОценочныеПроектыФазы.Количество()>0 Тогда
				
				//++OW Копачев А.С. 05.04.2022 ONEC-7464
				//ИнстансJIRASPB = ПолучитьИнстансДляJiraSpb();
				//--OW Копачев А.С. 05.04.2022 ONEC-7464
						
				Для Каждого ЭлМассива ИЗ ОценочныеПроектыФазы Цикл				
					НомерЗадачиBA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлМассива,"ЗадачаJIRA_BA");   
					СлинковатьЗадачи(СтруктураВозврата.НомерЗадачи, НомерЗадачиBA, ИнстансJIRA, "Problem/Incident");
				КонецЦикла;				
			КонецЕсли; 		
			//--- Брук Б 23.10.2019 Выгрузка ссылок на оценочные проекты фазы https://ows-jira.spb.openwaygroup.com/browse/ONEC-2313

		Иначе
			СтрокаСообщения = "Phase has been synchronized but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
			OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);
			//++OW Копачев А.С. 14.05.2020 ONEC-5647
			OW_Нотификации.НотификацияПриОшибкеВыгрузкиПроектаВJIRA(Фаза,СтруктураВозврата.ТекстВозврата);
			//--OW Копачев А.С. 14.05.2020 ONEC-5647
		КонецЕсли;	
		
		//++OW Копачев А.С. 14.05.2020 ONEC-5647
		Если ЗапрещеноВыгружатьЛицензииСтрокой = Истина Тогда 
			ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Фаза, "Наименование, КодПроектаJIRA");

			ТекстДополнительнойИнформацииДляПользователя = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Число символов в списке лицензий фазы <%1> с кодом JIRA <%2> больше допустимого. Список лицензий фазы не выгружен в JIRA.",
																		"The number of characters in the list of phase licenses <%1>  with JIRA-code <%2> is greater than the allowed number. The list of phase licenses have not been uploaded to JIRA.", "en");

			
			ТекстДополнительнойИнформацииДляПользователя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДополнительнойИнформацииДляПользователя, ДанныеФазы.Наименование, ФазаОбъект.КодПроектаJIRA);
			
			OW_Нотификации.НотификацияОНевыгруженныхЛицензияхФазыСтрокой(ТекстДополнительнойИнформацииДляПользователя);
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтрокаСообщения, ТекстДополнительнойИнформацииДляПользователя, Символы.ПС); 		
		КонецЕсли;	
		//--OW Копачев А.С. 14.05.2020 ONEC-5647
		
	Иначе
		СтрокаСообщения = "Phase cannot be exported to JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(Фаза, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
		//++OW Копачев А.С. 14.05.2020 ONEC-5647
		OW_Нотификации.НотификацияПриОшибкеВыгрузкиПроектаВJIRA(Фаза,СтруктураВозврата.ТекстВозврата);
		//--OW Копачев А.С. 14.05.2020 ONEC-5647
	КонецЕсли;
	
	ФазаОбъект.ИсторияИзмененияПроекта = ФазаОбъект.ИсторияИзмененияПроекта + Символы.ПС + ТекущаяДата() + ": " + ПараметрыСеанса.ТекущийПользователь
								+ " -> " + СтрокаСообщения + Символы.ПС + Символы.Таб;
	//ФазаОбъект.ВиднаКлиенту = Истина;
	ФазаОбъект.Записать();	    	
	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
		
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 27.12.2017
КонецФункции



Функция СинхронизироватьФазуSubTusk(Фаза, ПовторнаяСинхронизация = Ложь,SubTusk) Экспорт
 	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
 	Если ПовторнаяСинхронизация Тогда
	//	Параметры = ПолучитьПараметрыВыгрузкифазыПовторнаяСинхронизация(Фаза);
	Иначе
		Параметры = ПолучитьПараметрыВыгрузкиФазы_SubTusks(Фаза,SubTusk);		
	КонецЕсли; 
	

	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
		Если ПовторнаяСинхронизация И ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 
			//JIRA-SPB
		//	СтруктураВозврата = ОбновитьЗадачу(Параметры);	
		Иначе
			//OWS-JIRA
			СтруктураВозврата = СоздатьЗадачу(Параметры);	
		КонецЕсли; 
	КонецЕсли; 
	
 
	Если СтруктураВозврата.УспешноСоздана Тогда		
        Если ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
            ОБ_SubTusk = SubTusk.ПолучитьОбъект();
			СтрокаСообщения = "Sub task exported to JIRA, task #" + СтруктураВозврата.НомерЗадачи; 
			ОБ_SubTusk.КодПроектаJIRA = СтруктураВозврата.НомерЗадачи;
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			ОБ_SubTusk.КодИнтеграции_JIRA = СтруктураВозврата.КодИнтеграции_JIRA;
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
			ОБ_SubTusk.Записать(); 
		Иначе
			СтрокаСообщения = "Sub tusk has been synchronized but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
            Сообщить(СтрокаСообщения);    
        КонецЕсли;	
		
		 		
	Иначе
		СтрокаСообщения = "Sub task cannot be exported to JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
 		Сообщить(СтрокаСообщения); 
	КонецЕсли;
	
 		
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 27.12.2017
КонецФункции


Функция ПолучитьЛицензииСтрокойПоФазеДляПроекта(Фаза)
	//+ Пилюгин В.Е. 30.03.2018
	Если Фаза.Лицензии.Количество() > 0 Тогда
		ЛицензииСтрокой = "Licenses:";
	Иначе
		ЛицензииСтрокой = "";	
	КонецЕсли; 
	Для каждого ст Из Фаза.Лицензии Цикл
		Если ст.СсылкаНаЛицензию.ТипЛицензии = Перечисления.ТипыЛицензий.Option Тогда
			ЛицензииСтрокой = ЛицензииСтрокой + Символы.ПС + ст.НаименованиеДляСортировки;
			ЛицензииСтрокой = ЛицензииСтрокой + ?(ЗначениеЗаполнено(ст.Количество), " ("+ст.Количество+")", "");
		КонецЕсли; 
	КонецЦикла; 
	Возврат ЛицензииСтрокой;
	//- Пилюгин В.Е. 30.03.2018
КонецФункции

Функция ПолучитьЛицензииСтрокойПоФазе(Фаза) Экспорт
	//++OW Копачев А.С. 13.05.2020 ONEC-5647 
	ЛицензииСтрокой = "";
	
	ЛицензииФазы = Фаза.Лицензии;
	Для каждого ТекСтрока Из ЛицензииФазы Цикл
		СсылкаНаЛицензию = ТекСтрока.СсылкаНаЛицензию;
		ДанныеЛицензии = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЛицензию, "ТипЛицензии, ДополнениеКНаименованиюПолное");
		
		СпециальныйПробел = "";
		Если ДанныеЛицензии.ТипЛицензии = Перечисления.ТипыЛицензий.Option Тогда
			СпециальныйПробел = "    ";
		ИначеЕсли ДанныеЛицензии.ТипЛицензии = Перечисления.ТипыЛицензий.OptionGroup Тогда
			СпециальныйПробел = "  ";
		ИначеЕсли ДанныеЛицензии.ТипЛицензии = Перечисления.ТипыЛицензий.Licence Тогда
			СпециальныйПробел = "";
		КонецЕсли;	
		
		ЛицензииСтрокой = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛицензииСтрокой, СпециальныйПробел + ДанныеЛицензии.ДополнениеКНаименованиюПолное, Символы.ПС);
	КонецЦикла; 
	
	Возврат ЛицензииСтрокой;
	//--OW Копачев А.С. 13.05.2020 ONEC-5647
КонецФункции

Функция ПолучитьЛицензииСтрокойПоБизнесПроекту(БизнесПроект) Экспорт

	//++OW Копачев А.С. 16.03.2022 ONEC-7441 
	ЛицензииСтрокой = "";
	
	ЛицензииБП = Справочники.Проекты.ПолучитьЛицензииФазПроекта(БизнесПроект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицензииКлиентов.Ссылка КАК Ссылка,
		|	ЛицензииКлиентов.ДополнениеКНаименованиюПолное КАК ДополнениеКНаименованиюПолное,
		|	ЛицензииКлиентов.ТипЛицензии
		|ИЗ
		|	Справочник.ЛицензииКлиентов КАК ЛицензииКлиентов
		|ГДЕ
		|	ЛицензииКлиентов.Ссылка В(&ЛицензииБП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнениеКНаименованиюПолное
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ЛицензииБП", ЛицензииБП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
			
		СпециальныйПробел = "";
		Если Выборка.ТипЛицензии = Перечисления.ТипыЛицензий.Option Тогда
			СпециальныйПробел = "    ";
		ИначеЕсли Выборка.ТипЛицензии = Перечисления.ТипыЛицензий.OptionGroup Тогда
			СпециальныйПробел = "  ";
		ИначеЕсли Выборка.ТипЛицензии = Перечисления.ТипыЛицензий.Licence Тогда
			СпециальныйПробел = "";
		КонецЕсли;	
		
		ЛицензииСтрокой = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ЛицензииСтрокой, СпециальныйПробел + Выборка.ДополнениеКНаименованиюПолное, Символы.ПС);
	КонецЦикла; 
	
	Возврат ЛицензииСтрокой;											   
	//--OW Копачев А.С. 16.03.2022 ONEC-7441

КонецФункции


Функция ЛицензииСтрокойПоФазеМожноВыгрузитьВJIRA(ЛицензииСтрокой) Экспорт
	//++OW Копачев А.С. 13.05.2020 ONEC-5647 
	МожноВыгрузитьВJIRA = ?(СтрДлина(ЛицензииСтрокой) <= МаксимальноеКоличествоСимволовЛицензииСтрокойПоФазеДляВыгрузкиВJIRA(), Истина, Ложь);
	
	Возврат МожноВыгрузитьВJIRA;
	//--OW Копачев А.С. 13.05.2020 ONEC-5647
КонецФункции

Функция МаксимальноеКоличествоСимволовЛицензииСтрокойПоФазеДляВыгрузкиВJIRA() Экспорт
	Возврат 32767;	
КонецФункции	

//++OW Копачев А.С. 31.03.2022 ONEC-7464
//Функция ПолучитьФазуПоКодуПроектаJIRA(КодПроектаJIRA) Экспорт 
Функция ПолучитьФазуПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA) Экспорт
//--OW Копачев А.С. 31.03.2022 ONEC-7464

	Фаза = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиПроектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
		|ГДЕ
		|	ЗадачиПроектов.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачиПроектов.КодИнтеграции_JIRA = &КодИнтеграцииJIRA
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//++OW Копачев А.С. 08.10.2020 ONEC-6097
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиМаркетинговыхПроектов.Ссылка
		|ИЗ
		|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
		|ГДЕ
		|	ЗадачиМаркетинговыхПроектов.ПометкаУдаления = Ложь
		|	И ЗадачиМаркетинговыхПроектов.КодИнтеграции_JIRA = &КодИнтеграцииJIRA
		|	И ЗадачиМаркетинговыхПроектов.ПроектJIRA В(&ПроектыJIRA_SSAA)
		//--OW Копачев А.С. 08.10.2020 ONEC-6097
		|";
		
	//++OW Копачев А.С. 31.03.2022 ONEC-7464
	//Запрос.УстановитьПараметр("КодПроектаJIRA", КодПроектаJIRA);
	Запрос.УстановитьПараметр("КодИнтеграцииJIRA", КодИнтеграцииJIRA);
	//--OW Копачев А.С. 31.03.2022 ONEC-7464
	
	//++OW Копачев А.С. 08.10.2020 ONEC-6097
	ПроектыJIRA_BA_SSA = ПроектыJIRA_BA_SSA();
	ПроектыJIRA_BA_SSAСтрокой = Новый Массив;
	Для Каждого ТекКодПроекта Из ПроектыJIRA_BA_SSA Цикл
		ПроектыJIRA_BA_SSAСтрокой.Добавить(Строка(ТекКодПроекта));	
	КонецЦикла;	
	Запрос.УстановитьПараметр("ПроектыJIRA_SSAA", ПроектыJIRA_BA_SSAСтрокой);
	//--OW Копачев А.С. 08.10.2020 ONEC-6097
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
	    Выборка.Следующий();
		
		Фаза = Выборка.Ссылка;
	КонецЕсли;

	Возврат Фаза;
			
КонецФункции	

Функция	ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSD(КонфигурацияЛицензий, ПовторныйЗапрос = Ложь)  
	
	//++OW Копачев А.С. 18.02.2020 ONEC-5306
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSD();
	ВидИнстансаJIRA = ПолучитьВидИнстансаJIRAОбъекта(КонфигурацияЛицензий);
	ИнстансJIRA = ПолучитьИнстансДляJiraSD(ВидИнстансаJIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
			
	СтруктураПараметров = Новый Структура;
	
		
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	
	СтруктураПараметров.Вставить("НомерЗадачи", "");

	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	//ПроектJIRA = "SD";//"CJ";
	//СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	//--OW Копачев А.С. 09.06.2021 ONEC-6788
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
    //СтруктураПараметров.Вставить("ТипЗадачи", "Task");
	СтруктураПараметров.Вставить("SD_ТипЗадачи", "1");
	СтруктураПараметров.Вставить("SD_Проект", "8");
    //--OW Копачев А.С. 09.06.2021 ONEC-6788
	
	ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонфигурацияЛицензий, "Наименование, Владелец"); 
	ДанныеПартнера = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеКонфигурацииЛицензий.Владелец, "GRM, НаименованиеНаАнглийском, БизнесРегион"); 
	
	ЭтоAsia = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.Asia");
	
	ТекстSpace = "OWCPI";//?(ЭтоAsia, "OWCPI", "Please specify Jira Space");
		
	ОписаниеЗадачи = "Please setup communication for "+ ДанныеКонфигурацииЛицензий.Наименование + "
					 |Default assignee = " + ДанныеПартнера.GRM + "
					 |Space = " + ТекстSpace;
	
	
	ТемаЗадачи = "";
	Если ПовторныйЗапрос = Истина Тогда 
		ТемаЗадачи = "The Instance " + ДанныеКонфигурацииЛицензий.Наименование + " to be set in JIRA";	
	Иначе
		ТемаЗадачи = "New Instance " + ДанныеКонфигурацииЛицензий.Наименование + " creation";	
	КонецЕсли;

	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	//СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);  		

	//СтруктураПараметров.Вставить("НаименованиеЗадачи",ТемаЗадачи);
	
	СтруктураПараметров.Вставить("SD_ДанныеЗадачи", Новый Структура("summary, description, customfield_10205",ТемаЗадачи, ОписаниеЗадачи, Новый Структура("value", "High")));  		
	//--OW Копачев А.С. 09.06.2021 ONEC-6788
		
	//Репортер 
	Репортер = "";	
	
	ПользовательReporterПоУмолчаниюДляSDЗадач = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательReporterПоУмолчаниюДляCJЗадач); 
	ПользовательReporter = ?(ЭтоAsia, ПараметрыСеанса.ТекущийПользователь, ПользовательReporterПоУмолчаниюДляSDЗадач);
	
	СтруктураИсполнитель = ПолучитьПользователяJIRA(ПользовательReporter, "Reporter");
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Репортер = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли;            
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	//СтруктураПараметров.Вставить("Репортер", Репортер);
	СтруктураПараметров.Вставить("SD_Репортер", Репортер);
	//--OW Копачев А.С. 09.06.2021 ONEC-6788	
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	//СписокУчастников 
	СписокУчастников = Новый Массив;
	СписокWatchers = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.ПользователиWatchersДляCJЗадач);
	Если ПользовательReporter <> ПараметрыСеанса.ТекущийПользователь Тогда   
		СписокWatchers.Добавить(ПараметрыСеанса.ТекущийПользователь); // добавим самого пользователя
	КонецЕсли;	
	Для Каждого ЭлементWatchers Из СписокWatchers Цикл
		ПользовательWatcher = ЭлементWatchers.Значение;
		СтруктураПользователь = ПолучитьПользователяJIRA(ПользовательWatcher, "Watchers");
		Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
			ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
		Иначе
			Участник = СтруктураПользователь.ПользовательJIRA;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Участник) Тогда 
			СписокУчастников.Добавить(Участник);
		КонецЕсли;			
	КонецЦикла;
	
	//++OW Копачев А.С. 09.06.2021 ONEC-6788
	//СтруктураПараметров.Вставить("МассивВотчеров", OW.СвернутьМассив(СписокУчастников));
	СтруктураПараметров.Вставить("SD_МассивВотчеров", OW.СвернутьМассив(СписокУчастников));
	//--OW Копачев А.С. 09.06.2021 ONEC-6788

	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
		
	Возврат СтруктураПараметров;	

	//--OW Копачев А.С. 18.02.2020 ONEC-5306	
КонецФункции

Функция СоздатьСлужебнуюЗадачуSD(КонфигурацияЛицензий, ПовторныйЗапрос = Ложь) Экспорт
	
	//++OW Копачев А.С. 18.02.2020 ONEC-5306	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	Если НЕ ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
		СтруктураВозврата.ТекстВозврата = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Конфигурация лицензий для синхронизации не заполнена", "License configuration not filled");
		Возврат СтруктураВозврата;
	КонецЕсли; 
			
	Параметры = ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSD(КонфигурацияЛицензий, ПовторныйЗапрос);
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		СтруктураВозврата = СоздатьЗадачу(Параметры, Ложь);	 
	КонецЕсли; 
		
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		КонфигурацияЛицензийОбъект = КонфигурацияЛицензий.ПолучитьОбъект();	
		КонфигурацияЛицензийОбъект.КодЗадачиJIRAПоНастройкеВыгрузкиФаз = СтруктураВозврата.НомерЗадачи;
		КонфигурацияЛицензийОбъект.Записать();

		СтрокаСообщения = "Jira-task SD for License configuration created in JIRA, task #" + СтруктураВозврата.НомерЗадачи; 		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Jira-task SD for License configuration created in JIRA, but Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	Иначе
		СтрокаСообщения = "Jira-task SD for License configuration cannot be created in JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
		
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 18.02.2020 ONEC-5306

КонецФункции

Функция	ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSME(Фаза)  
	
	//++OW Копачев А.С. 23.06.2020 ONEC-5678 
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Фаза.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НомерЗадачи", "");

	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	ПроектJIRA = "BA";
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
    СтруктураПараметров.Вставить("ТипЗадачи", "Technology Review");
  
	ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Фаза, "Партнер, Область, ПлановаяДатаОкончания, БюджетПлановый, ПодтвержденныйПрогнозБюджета, КодПроектаJIRA"); 
		
	РекомендованнаяФазаКлиента = ДанныеФазы.КодПроектаJIRA;
	СтруктураПараметров.Вставить("РекомендованнаяФазаКлиента", РекомендованнаяФазаКлиента);    
	
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(ДанныеФазы.ПлановаяДатаОкончания));    
	
	
	ОбщийБюджет = Фаза.БюджетПлановый + Фаза.РисковыйБюджет; //MD
	
	//Минимум 4h or 1% от бюджета проекта, но не более 8h
	БюджетSME = ОбщийБюджет * 0.01; 
	БюджетSME = Макс(4,БюджетSME);
	БюджетSME = Мин(8, БюджетSME);
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	
	//MD
	СтруктураПараметров.Вставить("БюджетПлановый", Окр(БюджетSME, 2)); 

	ОписаниеЗадачи = "SME Review & Consultancy";
	
	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);  		
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", ОписаниеЗадачи);	
	
	Компонента = "";
	Если ЗначениеЗаполнено(ДанныеФазы.Область) Тогда 
		//Компонента = Строка(ДанныеФазы.Область);
		КомпонентаJIRA = РегистрыСведений.МаппингОбластиБизнесаИКомпонентыJIRA.ПолучитьКомпонентуJIRA(ДанныеФазы.Область);
		Если ЗначениеЗаполнено(КомпонентаJIRA) Тогда 
			Компонента = СокрЛП(КомпонентаJIRA);
		КонецЕсли;
	КонецЕсли;	
	СтруктураПараметров.Вставить("Компонента", Компонента);	
	
	////Исполнитель
	//Исполнитель = "";
	//СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	
		
	//Репортер 
	Репортер = "";	
	
	ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA) = Истина; 
	Если ИспользоватьНовуюВыгрузкуИсполнителейДляФазВJIRA Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Офицер, "Офицер");
	Иначе
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Фаза.Officer, "Officer");
	КонецЕсли;	
	//--OW Копачев А.С. 20.08.2019 ONEC-4788
	Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
		ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
	Иначе
		Репортер = СтруктураИсполнитель.ПользовательJIRA;
	КонецЕсли; 
	СтруктураПараметров.Вставить("Репортер", Репортер);	
				
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
		
	Возврат СтруктураПараметров;	
	//--OW Копачев А.С. 23.06.2020 ONEC-5678
	
КонецФункции

Функция СоздатьСлужебнуюЗадачуSME_НеИсп(Фаза) Экспорт
	
	//++OW Копачев А.С. 18.02.2020 ONEC-5306	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	Если НЕ ЗначениеЗаполнено(Фаза) Тогда
		СтруктураВозврата.ТекстВозврата = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Фаза для синхронизации не заполнена", "Phase not filled");
		Возврат СтруктураВозврата;
	КонецЕсли; 
			
	Параметры = ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSME(Фаза);
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		СтруктураВозврата = СоздатьЗадачу(Параметры);	 
	КонецЕсли; 
		
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		ФазаОбъект = Фаза.ПолучитьОбъект();	
		ФазаОбъект.КодЗадачиJIRAПоSMEReviewИConsultancy = СтруктураВозврата.НомерЗадачи;
		ФазаОбъект.Записать();

		СтрокаСообщения = "Jira-task SME for Phase created in JIRA, task #" + СтруктураВозврата.НомерЗадачи; 		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Jira-task SME for Phase created in JIRA but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	Иначе
		СтрокаСообщения = "Jira-task SME for Phase cannot be created in JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
		
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 18.02.2020 ONEC-5306

КонецФункции

//******************** проект и фаза
Функция СинхронизироватьФазуИПроект(Фаза, ПовторнаяСинхронизация = Ложь) Экспорт
	//+ Пилюгин В.Е. 30.03.2018
	//синхронизируем Проект. Если он не заполнен, то ошибка и далее Фазу не синхронизируем
	Проект = Фаза.ПроектВерхнегоУровня;
	НомерЗадачиJIRA_Проект = "";
	Если ЗначениеЗаполнено(Проект) Тогда
		НомерЗадачиJIRA_Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Проект, "КодПроектаJIRA");
		ВыгруженВJIRA_Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Проект, "ВыгруженВJIRA");
		Если ПовторнаяСинхронизация Тогда
			СтруктураВозвратаПроект = СинхронизироватьПроект(Проект, Истина);	
		//++OW Копачев А.С. 02.04.2019 ONEC-4319 	
		//ИначеЕсли ЗначениеЗаполнено(НомерЗадачиJIRA_Проект) И ВыгруженВJIRA_Проект Тогда
		//	СтруктураВозвратаПроект = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "",
		//										"Project hasn't been synchronized because it had been synchronized before. Task #: " + НомерЗадачиJIRA_Проект);	
		//ИначеЕсли ЗначениеЗаполнено(НомерЗадачиJIRA_Проект) И НЕ ВыгруженВJIRA_Проект Тогда	
		ИначеЕсли ЗначениеЗаполнено(НомерЗадачиJIRA_Проект) Тогда 	
		//--OW Копачев А.С. 02.04.2019 ONEC-4319	
			СтруктураВозвратаПроект = СинхронизироватьПроект(Проект, Истина);				
		Иначе			
			СтруктураВозвратаПроект = СинхронизироватьПроект(Проект);
		КонецЕсли; 
	Иначе
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//СтруктураВозвратаПроект = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "Project hasn't been synchronized because it missed for this phase " + Фаза);	
		СтруктураВозвратаПроект = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "Project hasn't been synchronized because it missed for this phase " + Фаза);	
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
	КонецЕсли; 
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//ИнстансJIRA = JIRA.ПолучитьИнстансДляJiraSpb();
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(Фаза.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
			
	НомерЗадачиJIRA_Фаза = "";
	Если ЗначениеЗаполнено(СтруктураВозвратаПроект.НомерЗадачи) ИЛИ ЗначениеЗаполнено(НомерЗадачиJIRA_Проект) Тогда
		НомерЗадачиJIRA_Фаза = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Фаза, "КодПроектаJIRA");
		Если ЗначениеЗаполнено(НомерЗадачиJIRA_Фаза) Тогда
			СтруктураВозвратаФаза = СинхронизироватьФазу(Фаза, Истина);
		Иначе			
			//++OW Копачев А.С. 21.02.2020 ONEC-5306
			// проверка настройки конфигурации лицензии для выгрузки новой фазы
			
			СтруктураВозвратаПроверкиНастройкиКонфигурацииЛицензиии = ПроверитьНастройкиКонфигурацииЛицензиииДляВыгрузкиФазы(Фаза.КонфигурацияЛицензий, ИнстансJIRA);
			Если СтруктураВозвратаПроверкиНастройкиКонфигурацииЛицензиии.Успешно = Истина Тогда 
			//--OW Копачев А.С. 21.02.2020 ONEC-5306
				СтруктураВозвратаФаза = СинхронизироватьФазу(Фаза, Ложь);
			//++OW Копачев А.С. 21.02.2020 ONEC-5306	
			Иначе 
				//++OW Копачев А.С. 21.02.2020 ONEC-5306
				ТекстСообщенияЗадачиSD = "";
				Если СтруктураВозвратаПроверкиНастройкиКонфигурацииЛицензиии.СоздатьSDЗадачу = Истина Тогда 
			    	//Служебная задача SD	
					СтруктураВозвратаЗадачиSD = JIRA.СоздатьСлужебнуюЗадачуSD(Фаза.КонфигурацияЛицензий, Истина);
					Если НЕ СтруктураВозвратаЗадачиSD.УспешноСоздана Тогда
						ТекстСообщенияЗадачиSD = СтруктураВозвратаЗадачиSD.ТекстВозврата;
					Иначе
						ТекстСообщенияЗадачиSD = СтруктураВозвратаЗадачиSD.НомерЗадачи + Символы.ПС + "Details:" + Символы.ПС + СтруктураВозвратаЗадачиSD.ТекстВозврата;						
					КонецЕсли;
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ДобавитьСтроку("Phase hasn't been synchronized" + Символы.ПС + СтруктураВозвратаПроверкиНастройкиКонфигурацииЛицензиии.ТекстВозврата, ТекстСообщенияЗадачиSD, Символы.ПС + Символы.ПС); 
				//--OW Копачев А.С. 21.02.2020 ONEC-5306
				//++OW Копачев А.С. 05.04.2022 ONEC-7464
				//СтруктураВозвратаФаза = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", ТекстСообщения);
				СтруктураВозвратаФаза = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", ТекстСообщения);
				//--OW Копачев А.С. 05.04.2022 ONEC-7464
			КонецЕсли;		
			//--OW Копачев А.С. 21.02.2020 ONEC-5306
		КонецЕсли; 
	Иначе
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//СтруктураВозвратаФаза = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "Phase hasn't been synchronized because the Project hasn't been synchronized before");	
		СтруктураВозвратаФаза = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "Phase hasn't been synchronized because the Project hasn't been synchronized before");	
		//--OW Копачев А.С. 05.04.2022 ONEC-7464		
	КонецЕсли; 
	
	НомерЗадачиПроект = ?(ЗначениеЗаполнено(СтруктураВозвратаПроект.НомерЗадачи), СтруктураВозвратаПроект.НомерЗадачи, НомерЗадачиJIRA_Проект); 
		
	Если ЗначениеЗаполнено(НомерЗадачиПроект) И ЗначениеЗаполнено(СтруктураВозвратаФаза.НомерЗадачи) Тогда
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//ИнстансJIRA = ПолучитьИнстансДляJiraSpb();
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
		СлинковатьЗадачи(НомерЗадачиПроект, СтруктураВозвратаФаза.НомерЗадачи, ИнстансJIRA);  
		
		//++OW Копачев А.С. 05.05.2022 ONEC-7548 
		// не используется больше
	
		////++OW Копачев А.С. 23.06.2020 ONEC-5678 
		//// формирование SME задачи
		//ПовторнаяСинхронизацияФазы =  НЕ ПустаяСтрока(НомерЗадачиJIRA_Фаза);
		//Если НеобходимоСформироватьSMEЗадачуДляФазы_НеИсп(Фаза, ПовторнаяСинхронизацияФазы, ИнстансJIRA) = Истина Тогда 
		//	СтруктураВозвратаЗадачиSME = JIRA.СоздатьСлужебнуюЗадачуSME_НеИсп(Фаза);
		//	Если НЕ СтруктураВозвратаЗадачиSME.УспешноСоздана Тогда
		//		ТекстСообщенияЗадачиSME = СтруктураВозвратаЗадачиSME.ТекстВозврата;
		//	Иначе
		//		ТекстСообщенияЗадачиSME = СтруктураВозвратаЗадачиSME.НомерЗадачи + Символы.ПС + "Details:" + Символы.ПС + СтруктураВозвратаЗадачиSME.ТекстВозврата;						
		//	КонецЕсли;
		//	СтруктураВозвратаФаза.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозвратаФаза.ТекстВозврата, ТекстСообщенияЗадачиSME, Символы.ПС + Символы.ПС); 
		//КонецЕсли;
		////--OW Копачев А.С. 23.06.2020 ONEC-5678
		//--OW Копачев А.С. 05.05.2022 ONEC-7548
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураВозвратаПроект, СтруктураВозвратаФаза", СтруктураВозвратаПроект, СтруктураВозвратаФаза);
	//- Пилюгин В.Е. 30.03.2018
КонецФункции

Функция ПроверитьНастройкиКонфигурацииЛицензиииДляВыгрузкиФазы(КонфигурацияЛицензий, ИнстансJIRA) Экспорт
	//++OW Копачев А.С. 21.02.2020 ONEC-5306
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = JIRA.ПолучитьИнстансДляJiraSpb();
	КонецЕсли; 
						
	СтруктураВозврата = Новый Структура("Успешно, ТекстВозврата, СоздатьSDЗадачу", Ложь, "", Ложь);	
	
	Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда 
		ЕстьОшибки = Ложь;
		
		//++OW Копачев А.С. 14.03.2023 ONEC-6185
		//ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонфигурацияЛицензий, "НастроенаДляВыгрузкиФазВJIRA, КлиентДляВыгрузкиВCRM, ПроектJIRA, КодЗадачиJIRAПоНастройкеВыгрузкиФаз");		
		ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонфигурацияЛицензий, "НастроенаДляВыгрузкиФазВJIRA, ID_Sync, ПроектJIRA, КодЗадачиJIRAПоНастройкеВыгрузкиФаз");		
		//--OW Копачев А.С. 14.03.2023 ONEC-6185
				
		Если ДанныеКонфигурацииЛицензий.НастроенаДляВыгрузкиФазВJIRA = Истина Тогда 
			// все уже настроено
			СтруктураВозврата.Успешно = Истина;
		Иначе
			// необходимо проверить настройку конфигурации лицензии на Жире
			ТекстВозвратаШаблонОшибки = "The license configuration does not configured to upload phases to JIRA: ";
			
			//++OW Копачев А.С. 14.03.2023 ONEC-6185
			//КодКонфигурацииЛицензий = "";
			//Если НЕ ЗначениеЗаполнено(ДанныеКонфигурацииЛицензий.КлиентДляВыгрузкиВCRM) Тогда
			//	ЕстьОшибки = Истина;
			//	СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, КодКонфигурацииЛицензий + "The license configuration does not have a client for uploading to CRM", Символы.ПС);
			//Иначе						
			//	КодКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеКонфигурацииЛицензий.КлиентДляВыгрузкиВCRM, "Код");	
			//КонецЕсли;
			КодКонфигурацииЛицензий = ДанныеКонфигурацииЛицензий.ID_Sync;
			//--OW Копачев А.С. 14.03.2023 ONEC-6185
			
			Если НЕ ЗначениеЗаполнено(КодКонфигурацииЛицензий) Тогда
				ЕстьОшибки = Истина;
				СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, ТекстВозвратаШаблонОшибки + "The license configuration does not have the code", Символы.ПС);											
			КонецЕсли;
	
			Если НЕ ЗначениеЗаполнено(ДанныеКонфигурацииЛицензий.ПроектJIRA) Тогда
				ЕстьОшибки = Истина;
				СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, ТекстВозвратаШаблонОшибки + "The license configuration does not have a JIRA project (space)", Символы.ПС);											
			КонецЕсли;
			
			Если ЕстьОшибки = Ложь Тогда 
				//++OW Копачев А.С. 01.04.2020 ONEC-5306 
				Если ДанныеКонфигурацииЛицензий.ПроектJIRA = Строка(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_SSAA)) Тогда 
					// для SSAA считаем, что настройка не нужна
                   	КонфигурацияЛицензийОбъект = КонфигурацияЛицензий.ПолучитьОбъект();	
					КонфигурацияЛицензийОбъект.НастроенаДляВыгрузкиФазВJIRA = Истина;
					КонфигурацияЛицензийОбъект.Записать();
					
					СтруктураВозврата.Успешно = Истина;
				Иначе	
				//--OW Копачев А.С. 01.04.2020 ONEC-5306
				
					Соединение = JIRA.СоздатьHTTPСоединениеJIRA(ИнстансJIRA);
									
					АдресРесурса = "/rest/entry/1.0/OneC2Jira/validateInstance";
					АдресРесурса = АдресРесурса + "?instanceId=" + КодКонфигурацииЛицензий + "&projectCode=" + ДанныеКонфигурацииЛицензий.ПроектJIRA;
					Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
					
					ОтветHTTP = Соединение.Получить(Запрос);	
												
					Если ОтветHTTP.КодСостояния >= 400 Тогда
						ЕстьОшибки = Истина;
						СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, ТекстВозвратаШаблонОшибки + "No data was received for configuring the license configuration", Символы.ПС);												
					Иначе	
						
						СтрокаJSONОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
						Попытка
							ДанныеJSON = OW.ПрочитатьJSONИзСтрокиПереопределяемый(СтрокаJSONОтвет);
							НастроенаДляВыгрузкиФазВJIRA = ДанныеJSON.Получить("isValidated");
							
							Если НастроенаДляВыгрузкиФазВJIRA = Истина Тогда 
								КонфигурацияЛицензийОбъект = КонфигурацияЛицензий.ПолучитьОбъект();	
								КонфигурацияЛицензийОбъект.НастроенаДляВыгрузкиФазВJIRA = НастроенаДляВыгрузкиФазВJIRA;
								КонфигурацияЛицензийОбъект.Записать();
								
								СтруктураВозврата.Успешно = Истина;
							Иначе	
								СтруктураВозврата.Успешно = Ложь;
								
								ТекстСообщенияОбОшибках = ДанныеJSON.Получить("errorMessages");
								СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, ТекстВозвратаШаблонОшибки + ТекстСообщенияОбОшибках, Символы.ПС);													
								
								Если НЕ ЗначениеЗаполнено(ДанныеКонфигурацииЛицензий.КодЗадачиJIRAПоНастройкеВыгрузкиФаз) Тогда 
									СтруктураВозврата.СоздатьSDЗадачу = Истина;	
								Иначе
									СтруктураВозврата.ТекстВозврата = СтруктураВозврата.ТекстВозврата + Символы.ПС + Символы.ПС +
																	"Jira-task SD for License configuration has already been created in JIRA, task #" +	ДанныеКонфигурацииЛицензий.КодЗадачиJIRAПоНастройкеВыгрузкиФаз;
								КонецЕсли;	
							КонецЕсли;	
							
						Исключение	
							ЕстьОшибки = Истина;
							СтруктураВозврата.ТекстВозврата = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.ТекстВозврата, ТекстВозвратаШаблонОшибки + "No data was received for configuring the license configuration", Символы.ПС);												
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	//--OW Копачев А.С. 21.02.2020 ONEC-5306
КонецФункции	

Функция НеобходимоСформироватьSMEЗадачуДляФазы_НеИсп(Фаза, ПовторнаяСинхронизацияФазы, ИнстансJIRA)
	//++OW Копачев А.С. 23.06.2020 /ONEC-5678 
	Результат = Истина;
	
	ДанныеФазы = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Фаза, "Партнер, КонфигурацияЛицензий, ПроектВерхнегоУровня, ПлановаяДатаНачала, Область, КатегорияПроекта, ТипФазы, ПодтвержденныйПрогнозБюджета, КодПроектаJIRA, КодЗадачиJIRAПоSMEReviewИConsultancy, БюджетПлановый, РисковыйБюджет"); 
	ДанныеПартнера = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеФазы.Партнер, "БизнесРегион, GRM"); 
	
	// Проверка на существующую задачу SME
	Если НЕ ПустаяСтрока(ДанныеФазы.КодЗадачиJIRAПоSMEReviewИConsultancy) Тогда 
		Результат = Ложь;		
	КонецЕсли;
	
	// Проверка на дату начала
	ДатаНачалаФормиронияSMEЗадачПоФазе = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ДатаНачалаФормиронияSMEЗадачПоФазе);

	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//ЗадачаJIRA = НайтиЗадачуJIRA(ДанныеФазы.КодПроектаJIRA, ПолучитьИнстансДляJiraSpb());
	ЗадачаJIRA = НайтиЗадачуJIRA(ДанныеФазы.КодПроектаJIRA, ИнстансJIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
		
	ДатаФазыДляПроверки = НачалоДня(ТекущаяДата());
	
	ДанныеЗадачиJIRA = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаJIRA, "CreatedDate, ApprovedBudget, Status");
	
	Если ЗначениеЗаполнено(ЗадачаJIRA) И ЗначениеЗаполнено(ДанныеЗадачиJIRA.CreatedDate) Тогда 
		ДатаФазыДляПроверки = ДанныеЗадачиJIRA.CreatedDate;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачалаФормиронияSMEЗадачПоФазе) 
		ИЛИ ДатаФазыДляПроверки < ДатаНачалаФормиронияSMEЗадачПоФазе Тогда 
		Результат = Ложь;		
	КонецЕсли;		
	
	// проверка на подтвержденный бюджет
	ОбщийБюджет = ДанныеФазы.БюджетПлановый + ДанныеФазы.РисковыйБюджет; //MD
	Если ОбщийБюджет < 160 Тогда 
		Результат = Ложь;	
	КонецЕсли;

	//++OW Копачев А.С. 13.05.2021 ONEC-6749 
	// Дополнительные условия формирования задачи SME при повторной синхронизации. Только если бюджет фазы изменился:
	// в случае изменения бюджета фазы с меньше 20ч/д на больше либо равно 20ч/д, анализировать данные изменения и создавать задачу/
	// Поэтому анализировать будем какой бюджет (Ч/Д) установлен на самой задаче JIRA для анализа значений бюджета "До изменения фазы"
	Если ПовторнаяСинхронизацияФазы = Истина Тогда 
		// проверка на изменение бюджета фазы
		Если ОбщийБюджет < 160 ИЛИ ДанныеЗадачиJIRA.ApprovedBudget >= 20  Тогда 
			Результат = Ложь;	
		КонецЕсли;	
	КонецЕсли;
	
	// проверка, что задача не закрыта
	СтатусыЗакрытойФазы = Справочники.OW_СтатусыЗадачJIRA.ПолучитьСтатусыФазы("Закрыта");
	СтатусыЗакрытойФазы.Добавить(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.СтатусЗадачиJIRA_Frozen)); // дополнительно Frozen
	Если СтатусыЗакрытойФазы.Найти(ДанныеЗадачиJIRA.Status) <> Неопределено Тогда 
		Результат = Ложь;	
	КонецЕсли;		
	//--OW Копачев А.С. 13.05.2021 ONEC-6749	
		
	// Проверка на бизнес-регион
	ЭтоAsia = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.Asia");
	//ЭтоOpenWay = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.OpenWay");
	ЭтоСIS = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.CIS");
	ЭтоRUS = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.RUS");

	//Если ЭтоAsia ИЛИ ЭтоOpenWay Тогда 
	//	Результат = Ложь;
	//КонецЕсли;
    //***OW @20204023104011  Start [БПВ] Убрал странную проверку ну RUS & CIS по согласованию со Светой Жарковой, проверяем только ASIA
    //Если ЭтоСIS = Ложь И ЭтоRUS = Ложь Тогда 
    //	Результат = Ложь;
    //КонецЕсли;
   	Если ЭтоAsia Тогда 
		Результат = Ложь;
	КонецЕсли;
	//***OW @20204023104011  Start [БПВ]
    // Проверка на категорию проекта
	Если ДанныеФазы.ПроектВерхнегоУровня.КатегорияПроекта <> Справочники.КатегорииПроектов.Implementation  Тогда 
		Результат = Ложь;	
	КонецЕсли;	
	
	// Проверка на тип фазы
	ЗапрещенныеТипыФаз = Новый  Массив;
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.Estimation"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.ManagedServices"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.Onsite"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.ProgramManagement"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.Training"));
	//++OW Копачев А.С. 18.01.2021 ONEC-6425 
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.HardwareConfiguration"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.TRMActivity"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.IndicativeEstimation"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.SolutionElaboration"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.Research"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.PreSaleSupport"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.SolutionAudit"));
	ЗапрещенныеТипыФаз.Добавить(ПредопределенноеЗначение("Справочник.ТипыФаз.CoreTeam"));
	//--OW Копачев А.С. 18.01.2021 ONEC-6425
	Если ЗапрещенныеТипыФаз.Найти(ДанныеФазы.ТипФазы) <> Неопределено Тогда 
		Результат = Ложь;	
	КонецЕсли;
	
	// Проверка на область бизнеса фазы
	//ЗапрещенныеКодыОбластиБизнеса = Новый  Массив;
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("SVC");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("INH");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("SUP");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("TRN");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("MWB");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("MBN");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("STR");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("MGR");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("HAA");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("HAI");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("HAS");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("LMK");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("ESC");
	//ЗапрещенныеКодыОбластиБизнеса.Добавить("MGT");
	//
	//ОбластьСокращение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеФазы.Область, "Сокращение"); 
	//Если ЗапрещенныеКодыОбластиБизнеса.Найти(ОбластьСокращение) <> Неопределено Тогда 
	//	Результат = Ложь;	
	//КонецЕсли;

	// проверку на компоненту
	Если НЕ ЗначениеЗаполнено(ДанныеФазы.Область) Тогда 
		Результат = Ложь;	
	Иначе 
		КомпонентаJIRA = РегистрыСведений.МаппингОбластиБизнесаИКомпонентыJIRA.ПолучитьКомпонентуJIRA(ДанныеФазы.Область);
		Если НЕ ЗначениеЗаполнено(КомпонентаJIRA) Тогда 
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	//++OW Копачев А.С. 28.01.2021 ONEC-6425
	// дополнительные проверки больше не нужны
	
	//// Проверка на доступный список конфигураций лицензий
	//ИспользоватьСписокКонфигурацийЛицензийДляФормированияSMEЗадачПоФазе = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСписокКонфигурацийЛицензийДляФормированияSMEЗадачПоФазе) = Истина;
	//Если ЗначениеЗаполнено(ДанныеФазы.КонфигурацияЛицензий) И ИспользоватьСписокКонфигурацийЛицензийДляФормированияSMEЗадачПоФазе Тогда 
	//	
	//	Если ИспользоватьСписокКонфигурацийЛицензийДляФормированияSMEЗадачПоФазе Тогда 
	//		СписокКонфигурацийЛицензий = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.КонфигурацийЛицензийДляФормированияSMEЗадачПоФазе);
	//		
	//		Если СписокКонфигурацийЛицензий.НайтиПоЗначению(ДанныеФазы.КонфигурацияЛицензий) = Неопределено Тогда
	//			Результат = Ложь;	
	//		КонецЕсли;	
	//	КонецЕсли;
	//КонецЕсли;	
	//
	////Если ЭтоRUS или ЭтоСIS Тогда 
	//СписокGRMКлиентовRUS = OW.ПолучитьСписокОбъектовПараметра(ПланыВидовХарактеристик.OW_ДополнительныеПараметры.GRMКлиентовRUSДляФормированияSMEЗадачПоФазе);		
	//Если ЗначениеЗаполнено(ДанныеПартнера.GRM) И СписокGRMКлиентовRUS.Количество() > 0 Тогда 
	//    Если СписокGRMКлиентовRUS.НайтиПоЗначению(ДанныеПартнера.GRM) = Неопределено Тогда
	//        Результат = Ложь;	
	//    КонецЕсли;				
	//Иначе
	//    Результат = Ложь;
	//КонецЕсли;
	////КонецЕсли;	
	////***OW @20204123104124  End [БПВ]
    //--OW Копачев А.С. 28.01.2021 ONEC-6425 
         
		
	// проверка на наличие фазы с типом Discovery у проекта фазы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиПроектов.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
		|ГДЕ
		|	ЗадачиПроектов.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачиПроектов.ПроектВерхнегоУровня = &ПроектВерхнегоУровня
		|	И ЗадачиПроектов.ТипФазы = &ТипФазыDiscovery";
	
	Запрос.УстановитьПараметр("ПроектВерхнегоУровня", ДанныеФазы.ПроектВерхнегоУровня);
	Запрос.УстановитьПараметр("ТипФазыDiscovery", ПредопределенноеЗначение("Справочник.ТипыФаз.Discovery"));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Результат = Ложь;	
	КонецЕсли;
		
	Возврат Результат;
	//--OW Копачев А.С. 23.06.2020 /ONEC-5678	
КонецФункции

Процедура АвтоматическоеЗакрытиеФазИПроектовВJira() Экспорт
	//+ Пилюгин В.Е. 15.10.2018
	КрайняяДата = OW.ДобавитьДень(КонецДня(ТекущаяДата()), -14);
	//фазы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиПроектов.КодПроектаJIRA КАК НомерЗадачи,
	|	ЗадачиПроектов.Ссылка,
	|	ЗадачаJIRA.Ссылка КАК ЗадачаJIRA,
	|	ЗадачаJIRA.ИнстансJIRA КАК ИнстансJIRA
	|ИЗ
	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачаJIRA КАК ЗадачаJIRA
	//++OW Копачев А.С. 01.04.2022 ONEC-7464
	//|		ПО ЗадачиПроектов.КодПроектаJIRA = ЗадачаJIRA.Код
	|		ПО ЗадачиПроектов.КодИнтеграции_JIRA = ЗадачаJIRA.КодИнтеграции_JIRA
	//--OW Копачев А.С. 01.04.2022 ONEC-7464		
	|ГДЕ
	|	НЕ ЗадачиПроектов.ПометкаУдаления
	|	И ЗадачиПроектов.ПлановаяДатаОкончания < &КрайняяДата
	|	И ЗадачиПроектов.ТипФазы = ЗНАЧЕНИЕ(Справочник.ТипыФаз.ImplementationInternalActivities)
	|	И ЗадачаJIRA.Status В(&СписокСтатусов)";
	Запрос.УстановитьПараметр("КрайняяДата", КрайняяДата);
	СписокСтатусовФазы = Новый СписокЗначений;
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Open"));
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("In Progress"));
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Acceptance"));
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Handing to Support"));
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусовФазы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерЗадачи = Выборка.НомерЗадачи;
		ОбъектСсылка = Выборка.Ссылка; 
		
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//СтруктураВозврата = ЗакрытьЗадачуТранзишеном(НомерЗадачи, ОбъектСсылка, ПолучитьИнстансДляJiraSpb());
		ИнстансJIRA = Выборка.ИнстансJIRA; 
		СтруктураВозврата = ЗакрытьЗадачуТранзишеном(НомерЗадачи, ОбъектСсылка, ИнстансJIRA);
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
				
		Если СтруктураВозврата.Успех Тогда
			ТекстСообщения = "Задача " + НомерЗадачи +" закрыта. ";
			OW.ЗаписатьОшибку(ОбъектСсылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
		Иначе
			ТекстСообщения = "Задача " + НомерЗадачи +" НЕ закрыта по причине " + СтруктураВозврата.СообщениеОбОшибке;
			OW.ЗаписатьОшибку(ОбъектСсылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);
		КонецЕсли; 
		
		Прервать;
	КонецЦикла; 
	
	//проекты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектыВерхнегоУровня.КодПроектаJIRA КАК НомерЗадачи,
	|	ПроектыВерхнегоУровня.Ссылка,
	|	ЗадачаJIRA.Ссылка КАК ЗадачаJIRA,
	|	ЗадачаJIRA.ИнстансJIRA КАК ИнстансJIRA
	|ИЗ
	|	Справочник.ПроектыВерхнегоУровня КАК ПроектыВерхнегоУровня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачаJIRA КАК ЗадачаJIRA
	//++OW Копачев А.С. 01.04.2022 ONEC-7464
	//|		ПО ПроектыВерхнегоУровня.КодПроектаJIRA = ЗадачаJIRA.Код
	|		ПО ПроектыВерхнегоУровня.КодИнтеграции_JIRA = ЗадачаJIRA.КодИнтеграции_JIRA
	//--OW Копачев А.С. 01.04.2022 ONEC-7464
	|ГДЕ
	|	НЕ ПроектыВерхнегоУровня.ПометкаУдаления
	|	И ЗадачаJIRA.Status В(&СписокСтатусов)
	|	И ПроектыВерхнегоУровня.ПланируемаяДатаОкончания < &КрайняяДата
	|	И ПроектыВерхнегоУровня.КлассПроекта = ЗНАЧЕНИЕ(Справочник.КлассыПроектов.InternalNonBillable)";
	Запрос.УстановитьПараметр("КрайняяДата", КрайняяДата);
	СписокСтатусовФазы = Новый СписокЗначений;
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Acceptance"));
	СписокСтатусовФазы.Добавить(Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Handing to Support"));
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусовФазы);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//СтруктураВозврата = ЗакрытьЗадачуТранзишеном(Выборка.НомерЗадачи, Выборка.Ссылка, ПолучитьИнстансДляJiraSpb());
		ИнстансJIRA = Выборка.ИнстансJIRA; 
		СтруктураВозврата = ЗакрытьЗадачуТранзишеном(Выборка.НомерЗадачи, Выборка.Ссылка, ИнстансJIRA);
		//--OW Копачев А.С. 05.04.2022 ONEC-7464

		Если СтруктураВозврата.Успех Тогда
			ТекстСообщения = "Задача " + НомерЗадачи +" закрыта. ";
			OW.ЗаписатьОшибку(ОбъектСсылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Информация, ТекстСообщения);
		Иначе
			ТекстСообщения = "Задача " + НомерЗадачи +" НЕ закрыта по причине " + СтруктураВозврата.СообщениеОбОшибке;
			OW.ЗаписатьОшибку(ОбъектСсылка, Справочники.OW_РазделыУчета.JIRA_АвтоматическоеЗакрытиеЗадач, Справочники.OW_ТипыОшибок.Ошибка, ТекстСообщения);
		КонецЕсли; 
		
		Прервать;
	КонецЦикла; 
	
	//- Пилюгин В.Е. 15.10.2018		
КонецПроцедуры

//******************** оценочный проект
Функция ПолучитьПараметрыВыгрузкиОценочногоПроекта(ОценочныйПроект)
	//+ Пилюгин В.Е. 21.03.2018
	УстановитьПривилегированныйРежим(Истина);	
	ТекстОшибкиЗаполненияПараметров = "";
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(ОценочныйПроект.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НомерЗадачи", ОценочныйПроект.ЗадачаJIRA_BA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", ОценочныйПроект.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 17.09.2019 ONEC-4860
	// не все поля объекта можно передавать при создании в Жиру, 
	// есть поля, которые только транзишен можно передать, поэтому после создания задачи,
	// нужно вызвать повторную синхронизацию
	ТребуетсяПовторнаяСинхронизация = Ложь; 
	
	Если ЗначениеЗаполнено(ОценочныйПроект.ID_Sync_CRM) Тогда 
		ТребуетсяПовторнаяСинхронизация = Истина;	
	КонецЕсли;	
	СтруктураПараметров.Вставить("ТребуетсяПовторнаяСинхронизация", ТребуетсяПовторнаяСинхронизация);	
	//--OW Копачев А.С. 17.09.2019 ONEC-4860

	ВыгружатьОценочныйПроектКакPreSaleФазу = Ложь; //OW Копачев А.С. 20.11.2019 ONEC-4861 
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(ОценочныйПроект.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload estimation project <" + ОценочныйПроект +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464
	
	ПроектJIRA = ПолучитьПроектJIRA(ОценочныйПроект);
	Если НЕ ЗначениеЗаполнено(ПроектJIRA)  Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Выгрузка оценочных проектов с лиц. конфигурацией " + ОценочныйПроект.КонфигурацияЛицензий + " невозможна, так как не определен Проект JIRA!",
															"For license configuration " + ОценочныйПроект.КонфигурацияЛицензий + " there is no mapping with Jira space in 1C.");
	ИначеЕсли ПроектJIRA = "TooMuch" Тогда
		ТекстОшибкиЗаполненияПараметров  = ТекстОшибкиЗаполненияПараметров + Символы.ПС +
		OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Найдено более одного JIRA проекта для данного типа фазы и лиц.конфиграции: " + ОценочныйПроект.КонфигурацияЛицензий,
															"Found more than one mapped Jira spaces for license configuration: " + ОценочныйПроект.КонфигурацияЛицензий);
	//++OW Копачев А.С. 20.11.2019 ONEC-4861	
	ИначеЕсли ЗначениеЗаполнено(ПроектJIRA) И ПроектJIRA <> "BA" Тогда		
		ВыгружатьОценочныйПроектКакPreSaleФазу = Истина;
	//--OW Копачев А.С. 20.11.2019 ONEC-4861	
	КонецЕсли; 		
	
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("НаименованиеЗадачи", ОценочныйПроект.Наименование);
	
	// тип задачи
    //++OW Копачев А.С. 20.11.2019 ONEC-4861   
    Если ВыгружатьОценочныйПроектКакPreSaleФазу = Истина Тогда
        ТипЗадачиДляВыгрузкиВJIRA =  "Phase";
        СтруктураПараметров.Вставить("ТипЗадачи", ТипЗадачиДляВыгрузкиВJIRA);
       
        СтруктураПараметров.Вставить("ТипФазы", Строка(ПредопределенноеЗначение("Справочник.ТипыФаз.PreSaleSupport")));   
        СтруктураПараметров.Вставить("СтатусФазы", Строка(ОценочныйПроект.СтатусЭтапа));
       
        //СтруктураПараметров.Вставить("КодПроекта1С", ОценочныйПроект.ID_Sync_CRM); //OW Копачев А.С. 10.06.2020 ONEC-5696
		//++OW Копачев А.С. 10.06.2020 ONEC-5696 
		СтруктураПараметров.Вставить("ID_Sync", ОценочныйПроект.ID_Sync_CRM);
		//--OW Копачев А.С. 10.06.2020 ONEC-5696
    Иначе   
    //--OW Копачев А.С. 20.11.2019 ONEC-4861
        ТипЗадачиДляВыгрузкиВJIRA = "";
        ТипЗадачиJIRA = ОпределитьТипЗадачиДляВыгрузкиВJIRAпоТипуФазы(ОценочныйПроект.ТипФазы);
        Если ЗначениеЗаполнено(ТипЗадачиJIRA) Тогда
            ТипЗадачиДляВыгрузкиВJIRA = Строка(ТипЗадачиJIRA);   
        КонецЕсли;   
        СтруктураПараметров.Вставить("ТипЗадачи", ТипЗадачиДляВыгрузкиВJIRA);
    КонецЕсли;	
		
	КодКлиента="";
	ТКлиента=СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОценочныйПроект.Партнер,"FaxNumber"));
	ТЛицензии=СокрЛП(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОценочныйПроект.КонфигурацияЛицензий,"FaxNumber"));
	Если НЕ ПустаяСтрока(ТЛицензии) Тогда
		КодКлиента = ТЛицензии;
	Иначе
		КодКлиента = ТКлиента;
	КонецЕсли;

	// последний комментарий
	КомментарииВJIRA = ОценочныйПроект.КомментарииВJIRA;
	КомментарийВJIRA = ?(ОценочныйПроект.КомментарииВJIRA.Количество() = 0,"", КомментарииВJIRA[КомментарииВJIRA.Количество()-1].Комментарий);	
	
	ОписаниеБП = ""+СокрЛП(ОценочныйПроект.ПолноеНаименование)+" ID:"+СокрЛП(ОценочныйПроект.IDT_ПроектаARM);
	ОписаниеБП = ОписаниеБП + "
			|"+	СокрЛП(ОценочныйПроект.ОписаниеЗадачи)+"
			|"+"
			|Client - "+ОценочныйПроект.Партнер+" (" + ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОценочныйПроект.Партнер,"НаименованиеARM") + ") code-"+ КодКлиента + "   
			|Configuration of licenses - "+ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОценочныйПроект.КонфигурацияЛицензий,"Наименование")+ "
			|Contact Person - "+ОценочныйПроект.КонтактноеЛицоКлиента+", email - " + OW_ИнтеграцияCRM.ПолучитьМылоКонтактногоЛицаКлиента(ОценочныйПроект.КонтактноеЛицоКлиента) + "
			|Total Budget - "+ОценочныйПроект.БюджетПлановый+" hour(s)
			|Planned start date - "+Формат(ОценочныйПроект.ПлановаяДатаНачала,"ДФ=dd.MM.yyyy")+"
			|Planned end date - " +Формат(ОценочныйПроект.ПлановаяДатаОкончания,"ДФ=dd.MM.yyyy")+"
			|"+КомментарийВJIRA;

	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеБП);  //ONEC-3616
		
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	//++OW Копачев А.С. 20.11.2019 ONEC-4861	
	Если ВыгружатьОценочныйПроектКакPreSaleФазу = Истина Тогда 
		СтруктураПараметров.Вставить("ОбщийБюджет", ОценочныйПроект.БюджетПлановый/8);	
	//--OW Копачев А.С. 20.11.2019 ONEC-4861	
	Иначе	
		СтруктураПараметров.Вставить("БюджетПлановый", ОценочныйПроект.БюджетПлановый); 
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(ОценочныйПроект.ПлановаяДатаНачала));		
	СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(ОценочныйПроект.ПлановаяДатаОкончания));    

	//приоритет
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(ОценочныйПроект.Приоритет));
		
	//++OW Копачев А.С. 03.07.2020 ONEC-5698 
	//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(ОценочныйПроект));
	СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(ОценочныйПроект));
	//--OW Копачев А.С. 03.07.2020 ONEC-5698
	
	//исполнитель	
	Исполнитель = "";
	Если ЗначениеЗаполнено(ОценочныйПроект.Assignee) Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(ОценочныйПроект.Assignee, "Assignee");
		Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
			ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
		Иначе
			Исполнитель = СтруктураИсполнитель.ПользовательJIRA;
		КонецЕсли; 
		СтруктураПараметров.Вставить("Исполнитель", Исполнитель);	
	КонецЕсли;
	
	//Репортер
	Репортер = "";	
	Reporter = ?(ЗначениеЗаполнено(ОценочныйПроект.Reporter),ОценочныйПроект.Reporter, ОценочныйПроект.Менеджер);
	Если ЗначениеЗаполнено(Reporter) Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(Reporter, "Reporter");
		Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
			ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
		Иначе
			Репортер = СтруктураИсполнитель.ПользовательJIRA;
		КонецЕсли; 
		СтруктураПараметров.Вставить("Репортер", Репортер);
	КонецЕсли;
	
	
	//+++ Брук Б 17.01.2020 - удаляем партисипантов из SSAA, т.к. на стороне JIRA для этого проекта нет соответствующего поля
	Если НЕ ОценочныйПроект.ПроектJIRA = Строка(OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПроектJIRA_SSAA)) Тогда
	//--- Брук Б 17.01.2020
	
		///////////////////////////
		// участники (Партисипанты)	
		СписокУчастников = Новый Массив;	
		
		// Менеджер	
		Если ЗначениеЗаполнено(ОценочныйПроект.Менеджер) Тогда 
			Участник = "";
			СтруктураПользователь = ПолучитьПользователяJIRA(ОценочныйПроект.Менеджер, "Менеджер");
			Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
				//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
			Иначе
				Участник = СтруктураПользователь.ПользовательJIRA;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Участник) Тогда 
				СписокУчастников.Добавить(Участник);
			КонецЕсли;
		КонецЕсли;	
		
		Партнер = ОценочныйПроект.Партнер;
		Если ЗначениеЗаполнено(Партнер) Тогда
			// GRM
			Если ЗначениеЗаполнено(Партнер.GRM) Тогда 
				Участник = "";
				СтруктураПользователь = ПолучитьПользователяJIRA(Партнер.GRM, "Партнер.GRM");
				Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
					//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
				Иначе
					Участник = СтруктураПользователь.ПользовательJIRA;
				КонецЕсли;	
				Если ЗначениеЗаполнено(Участник) Тогда 
					СписокУчастников.Добавить(Участник);
				КонецЕсли;
			КонецЕсли;	
			
			// BRM
			Если ЗначениеЗаполнено(Партнер.BRM) Тогда 
				Участник = "";
				СтруктураПользователь = ПолучитьПользователяJIRA(Партнер.BRM, "Партнер.BRM");
				Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
					//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
				Иначе
					Участник = СтруктураПользователь.ПользовательJIRA;
				КонецЕсли;	
				Если ЗначениеЗаполнено(Участник) Тогда 
					СписокУчастников.Добавить(Участник);
				КонецЕсли;
			КонецЕсли;	
			
			//++OW Копачев А.С. 25.06.2020 ONEC-5755 
		   	Если НЕ (Партнер.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.Europe")
						ИЛИ Партнер.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.MiddleEast")) Тогда 

				// ВторойМенеджер
				Если ЗначениеЗаполнено(Партнер.ВторойМенеджер) Тогда 
					Участник = "";
					СтруктураПользователь = ПолучитьПользователяJIRA(Партнер.ВторойМенеджер, "Партнер.ВторойМенеджер");
					Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
						//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
					Иначе
						Участник = СтруктураПользователь.ПользовательJIRA;
					КонецЕсли;	
					Если ЗначениеЗаполнено(Участник) Тогда 
						СписокУчастников.Добавить(Участник);
					КонецЕсли;
				КонецЕсли;
			
				// ТретийМенеджер
				Если ЗначениеЗаполнено(Партнер.ТретийМенеджер) Тогда 
					Участник = "";
					СтруктураПользователь = ПолучитьПользователяJIRA(Партнер.ТретийМенеджер, "Партнер.ТретийМенеджер");
					Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
						//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
					Иначе
						Участник = СтруктураПользователь.ПользовательJIRA;
					КонецЕсли;	
					Если ЗначениеЗаполнено(Участник) Тогда 
						СписокУчастников.Добавить(Участник);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			//--OW Копачев А.С. 25.06.2020 ONEC-5755
			
			// TAM
			Если ЗначениеЗаполнено(Партнер.TAM) Тогда 
				Участник = "";
				СтруктураПользователь = ПолучитьПользователяJIRA(Партнер.TAM, "Партнер.TAM");
				Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
					//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
				Иначе
					Участник = СтруктураПользователь.ПользовательJIRA;
				КонецЕсли;	
				Если ЗначениеЗаполнено(Участник) Тогда 
					СписокУчастников.Добавить(Участник);
				КонецЕсли;
			КонецЕсли;
			
			//++OW Копачев А.С. 13.04.2021 ONEC-6714 
			КлиентMastercardProcessingSA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.КлиентMastercardProcessingSA);
			Если Партнер = КлиентMastercardProcessingSA Тогда 
				Участник = "";
				
				РепортерСсылка = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательReporterПоУмолчаниюДляSIIЗадачРегионовEUиME);
				СтруктураПользователь = ПолучитьПользователяJIRA(РепортерСсылка, "");
				Если ЗначениеЗаполнено(СтруктураПользователь.ТекстОшибки) Тогда
					//ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураПользователь.ТекстОшибки;
				Иначе
					Участник = СтруктураПользователь.ПользовательJIRA;
				КонецЕсли;	
				Если ЗначениеЗаполнено(Участник) Тогда 
					СписокУчастников.Добавить(Участник);
				КонецЕсли;
			КонецЕсли;
			//--OW Копачев А.С. 13.04.2021 ONEC-6714
		КонецЕсли;		
		СтруктураПараметров.Вставить("МассивПартисипантов", OW.СвернутьМассив(СписокУчастников));		
		//	
		///////////////
	
	//+++ Брук Б 17.01.2020
	КонецЕсли;
	//--- Брук Б 17.01.2020
	
	// Присоединенные файлы	
	МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(ОценочныйПроект);
	СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);

	// labels
	массивlabels = Новый Массив;
	массивlabels.Добавить("From1C");
	СтруктураПараметров.Вставить("labels", массивlabels);
	
	// Внешние ссылки
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОценочныйПроект);   
	СсылкаWeb = "https://" + OW_ОбщегоНазначенияПовтИсп.ИмяСервераТекущейБазы() + "/" + OW_ОбщегоНазначенияПовтИсп.ИмяТекущейБазы() + "/#" + НавигационнаяСсылка;	
		
	ТаблицаВнешнихСсылок = ИнициализироватьТаблицуВнешнихСсылок();	
	НовСтрока = ТаблицаВнешнихСсылок.Добавить();
	НовСтрока.WebСсылка = СсылкаWeb;
	НовСтрока.Заголовок = "Task_1C";
	
	СтруктураПараметров.Вставить("ТаблицаВнешнихСсылок", ТаблицаВнешнихСсылок);
	
	// Объект синхронизации
	СтруктураПараметров.Вставить("ОбъектСинхронизации", ОценочныйПроект);
		
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 
	
	Возврат СтруктураПараметров;	
КонецФункции

Функция ПолучитьПараметрыВыгрузкиОценочногоПроектаПовторнаяСинхронизация(ОценочныйПроект, СинхронизацияПриЛинковании = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);	
	ТекстОшибкиЗаполненияПараметров = "";
	
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(ОценочныйПроект.КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
		
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", Логин); 
	СтруктураПараметров.Вставить("Пароль", Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464

	СтруктураПараметров.Вставить("НомерЗадачи", ОценочныйПроект.ЗадачаJIRA_BA);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", ОценочныйПроект.КодИнтеграции_JIRA);
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	//++OW Копачев А.С. 20.11.2019 ONEC-4861
	ВыгружатьОценочныйПроектКакPreSaleФазу = Ложь; //OW Копачев А.С. 20.11.2019 ONEC-4861 	
	Если НЕ ПустаяСтрока(СтруктураПараметров.НомерЗадачи) Тогда		
		// выделим проект из кода задачи JIRA  
		ПроектJIRA = ОпределитьПроектПоНомеруЗадачи(СтруктураПараметров.НомерЗадачи); 
		Если ЗначениеЗаполнено(ПроектJIRA) И ПроектJIRA <> "BA" Тогда		
			ВыгружатьОценочныйПроектКакPreSaleФазу = Истина;
		КонецЕсли;	
	КонецЕсли;
	//--OW Копачев А.С. 20.11.2019 ONEC-4861		
	
	//++OW Копачев А.С. 17.09.2019 ONEC-4860   
    СтруктураПараметров.Вставить("ID_Sync", ОценочныйПроект.ID_Sync_CRM);   
    //--OW Копачев А.С. 17.09.2019 ONEC-4860
	
	//++OW Копачев А.С. 31.05.2022 ONEC-7464
	Если JIRA.ОграничиватьДоступПоВидуИнстансаJIRA(ОценочныйПроект.Партнер) Тогда
        ТекстОшибкиЗаполненияПараметров  = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ТекстОшибкиЗаполненияПараметров, "It is not possible to upload estimation project <" + ОценочныйПроект +"> with this client segment.",Символы.ПС);
	КонецЕсли;
	//--OW Копачев А.С. 31.05.2022 ONEC-7464

	
	Если ВыгружатьОценочныйПроектКакPreSaleФазу = Ложь Тогда  //OW Копачев А.С. 20.11.2019 ONEC-4861
        	
		//СтруктураПараметров.Вставить("ДатаНачала2", НормализоватьДату(ОценочныйПроект.ПлановаяДатаНачала));		
		СтруктураПараметров.Вставить("ПлановаяДатаОкончания", НормализоватьДату(ОценочныйПроект.ПлановаяДатаОкончания));    

    Иначе     
        //СтруктураПараметров.Вставить("КодПроекта1С", ОценочныйПроект.ID_Sync_CRM); //OW Копачев А.С. 10.06.2020 ONEC-5696
        //++OW Копачев А.С. 26.11.2019 ONEC-4861   
        СтруктураПараметров.Вставить("ТипФазы", Строка(ПредопределенноеЗначение("Справочник.ТипыФаз.PreSaleSupport")));   
        СтруктураПараметров.Вставить("СтатусФазы", Строка(ОценочныйПроект.СтатусЭтапа));
    	//--OW Копачев А.С. 26.11.2019 ONEC-4861 
    КонецЕсли;
	
	СтруктураПараметров.Вставить("ЕстьТаймТрекинг", Истина);
	//++OW Копачев А.С. 20.11.2019 ONEC-4861	
	Если ВыгружатьОценочныйПроектКакPreSaleФазу = Истина Тогда 
		СтруктураПараметров.Вставить("ОбщийБюджет", ОценочныйПроект.БюджетПлановый/8);	
	//--OW Копачев А.С. 20.11.2019 ONEC-4861	
	Иначе	
		СтруктураПараметров.Вставить("БюджетПлановый", ОценочныйПроект.БюджетПлановый);
	КонецЕсли;
	
	//приоритет
	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыЗадач.ПолучитьПриоритетJIRA(ОценочныйПроект.Приоритет));
	
	//++OW Копачев А.С. 03.10.2019 ONEC-4855 
	Если СинхронизацияПриЛинковании = Истина Тогда 
		
		//++OW Копачев А.С. 24.10.2019 ONEC-4855 
		ВыгружатьКонфигурациюЛицензийОценочногоПроектаПриЛинкованииВJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ВыгружатьКонфигурациюЛицензийОценочногоПроектаПриЛинкованииВJIRA) = Истина;
		Если ВыгружатьКонфигурациюЛицензийОценочногоПроектаПриЛинкованииВJIRA Тогда
			//++OW Копачев А.С. 03.07.2020 ONEC-5698 
			//СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьКодИнстансаКлиентаДляОбъекта(ОценочныйПроект));
			СтруктураПараметров.Вставить("КодИнстансаКлиента", Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(ОценочныйПроект));
			//--OW Копачев А.С. 03.07.2020 ONEC-5698
		КонецЕсли;		
		//--OW Копачев А.С. 24.10.2019 ONEC-4855
		
		// labels
		//массивlabels = Новый Массив;
		//массивlabels.Добавить("From1C");
		массивlabels = Новый Массив;
		массивlabels.Добавить(Новый Структура("add","From1C"));	  // добавляем лейбл
		//массивlabels.Добавить(Новый Структура("remove","Other")); // удаляем лейбл
		
		ДанныеUpdate = Новый Структура; 
		ДанныеUpdate.Вставить("labels", массивlabels);	
		СтруктураПараметров.Вставить("update", ДанныеUpdate);
		
		// Внешние ссылки
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОценочныйПроект);   
		СсылкаWeb = "https://" + OW_ОбщегоНазначенияПовтИсп.ИмяСервераТекущейБазы() + "/" + OW_ОбщегоНазначенияПовтИсп.ИмяТекущейБазы() + "/#" + НавигационнаяСсылка;	
			
		ТаблицаВнешнихСсылок = ИнициализироватьТаблицуВнешнихСсылок();	
		НовСтрока = ТаблицаВнешнихСсылок.Добавить();
		НовСтрока.WebСсылка = СсылкаWeb;
		НовСтрока.Заголовок = "Task_1C";
		
		СтруктураПараметров.Вставить("ТаблицаВнешнихСсылок", ТаблицаВнешнихСсылок);
	КонецЕсли;	
	//--OW Копачев А.С. 03.10.2019 ONEC-4855
	//***OW @20201024091053  Start [БПВ]
    // Присоединенные файлы	
	МассивПутейАттачей = ПрисоединенныеФайлы.ПолучитьМассивВременныхПутейПрисоединенныхФайлов(ОценочныйПроект);
	СтруктураПараметров.Вставить("МассивПутейАттачей", МассивПутейАттачей);

    //***OW @20201024091055  End [БПВ]
	// Объект синхронизации
	СтруктураПараметров.Вставить("ОбъектСинхронизации", ОценочныйПроект);	

	//++OW Копачев А.С. 20.11.2019 ONEC-4861
	Если ВыгружатьОценочныйПроектКакPreSaleФазу = Истина Тогда  	
		СтруктураПараметров.Вставить("НомерТранзишена", 61);
	Иначе
	//--OW Копачев А.С. 20.11.2019 ONEC-4861	
		СтруктураПараметров.Вставить("НомерТранзишена", 171);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 

	Возврат СтруктураПараметров;
	
КонецФункции

Функция СинхронизироватьОценочныйПроект(ОценочныйПроект, ПовторнаяСинхронизация = Ложь, СинхронизацияПриЛинковании = Ложь) Экспорт
	
		
	//++OW Копачев А.С. 05.06.2019 ONEC-4531	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464

	//+++ Брук Б 25.12.2019 ONEC-5186 
	Если ЗначениеЗаполнено(ОценочныйПроект.Партнер) Тогда
		Если НЕ ЗначениеЗаполнено(ОценочныйПроект.Партнер.НаименованиеДляJIRA) Тогда
				СтрокаСообщения = "Estimation project cannot be exported to JIRA because 'Name for JIRA' is not filled at the Client";
				OW.ЗаписатьОшибку(ОценочныйПроект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
				СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
			Возврат СтруктураВозврата;	
		КонецЕсли;
	КонецЕсли;
	//--- Брук Б 25.12.2019 ONEC-5186
	
	Если ПовторнаяСинхронизация Тогда
		Параметры = ПолучитьПараметрыВыгрузкиОценочногоПроектаПовторнаяСинхронизация(ОценочныйПроект, СинхронизацияПриЛинковании);
	Иначе
		Параметры = ПолучитьПараметрыВыгрузкиОценочногоПроекта(ОценочныйПроект);		
	КонецЕсли; 
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		ИнстансJIRA = ПолучитьИнстансJIRAИзПараметров(Параметры);
		
		//+++ Брук Б 20.12.2019 ONEC-5186
	    КонфигурацияЛицензий = ОценочныйПроект.КонфигурацияЛицензий;
		
		Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
			
			Если НЕ КонфигурацияЛицензий.ВыгруженВJIRA Тогда
				//++OW Копачев А.С. 05.04.2022 ONEC-7464
				ИнстансJiraКЛ = JIRA.ПолучитьИнстансДляJiraSpb();
				//ИнстансJiraКЛ = JIRA.ПолучитьИнстансJIRAОбъектаПодготовленный(КонфигурацияЛицензий, Истина);
				//--OW Копачев А.С. 05.04.2022 ONEC-7464
				СтруктураВозвратаКЛ = JIRA.СинхронизироватьКлиента(КонфигурацияЛицензий, ИнстансJiraКЛ);	
				
				Если НЕ ПустаяСтрока(СтруктураВозвратаКЛ.СообщениеОбОшибке) Тогда 
					OW_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозвратаКЛ.СообщениеОбОшибке);
				КонецЕсли;
								 	
			КонецЕсли;
			
		КонецЕсли;		
		//--- Брук Б 20.12.2019 ONEC-5186

		
		Если ПовторнаяСинхронизация И ЭтоИнстансJiraSpb(ИнстансJIRA) Тогда 
			//JIRA-SPB
			СтруктураВозврата = ОбновитьЗадачу(Параметры);	
		Иначе
			//OWS-JIRA
			СтруктураВозврата = СоздатьЗадачу(Параметры);	
		КонецЕсли; 
	КонецЕсли; 
	
	ОценочныйПроектОбъект = ОценочныйПроект.ПолучитьОбъект();	
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Estimation project exported to JIRA, task #" + СтруктураВозврата.НомерЗадачи; 
		ОценочныйПроектОбъект.ЗадачаJIRA_BA = СтруктураВозврата.НомерЗадачи;
		//++OW Копачев А.С. 05.04.2022 ONEC-7463
		ОценочныйПроектОбъект.КодИнтеграции_JIRA = СтруктураВозврата.КодИнтеграции_JIRA;
		//--OW Копачев А.С. 05.04.2022 ONEC-7463
		//ОценочныйПроектОбъект.ВыгруженВJIRA = Истина;
		ОценочныйПроектОбъект.ОтправленВ_JIRA = Истина;
		ОценочныйПроектОбъект.ИнстансJIRA = ИнстансJIRA;
		
		//++OW Копачев А.С. 02.11.2020 ONEC-6046
		ОтключитьИспользованиеCRM = OW_ОбщегоНазначения.ЗначениеКонстанты(ПредопределенноеЗначение("Справочник.ЗначенияКонстант.ОтключитьИспользованиеCRM")) = Истина; 
		Если ОтключитьИспользованиеCRM = Истина Тогда 
			Если ОценочныйПроектОбъект.ВыгруженВCRM = Ложь Тогда 
				ОценочныйПроектОбъект.НеНадоВыгружатьCRM = Истина;
			КонецЕсли;
			ОценочныйПроектОбъект.НеРаспределенный = Ложь;	
		КонецЕсли;	
		//--OW Копачев А.С. 02.11.2020 ONEC-6046
		
		OW.ЗаписатьОшибку(ОценочныйПроект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Информация, СтрокаСообщения);		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Estimation project has been synchronized but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(ОценочныйПроект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
	Иначе
		СтрокаСообщения = "Estimation project cannot be exported to JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
		OW.ЗаписатьОшибку(ОценочныйПроект, Справочники.OW_РазделыУчета.JIRA_ВыгрузкаПроекта, Справочники.OW_ТипыОшибок.Ошибка, СтрокаСообщения);	
	КонецЕсли;
	
	ОценочныйПроектОбъект.ИсторияИзмененияПроекта = ОценочныйПроектОбъект.ИсторияИзмененияПроекта + Символы.ПС + ТекущаяДата() + ": " + ПараметрыСеанса.ТекущийПользователь
								+ " -> " + СтрокаСообщения + Символы.ПС + Символы.Таб;
								
	ОценочныйПроектОбъект.Записать();	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
	
	//++OW Копачев А.С. 17.09.2019 ONEC-4860
	// повторная синхрониазция дополнительных полей по требованию
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		Если Параметры.Свойство("ТребуетсяПовторнаяСинхронизация")
			И Параметры.ТребуетсяПовторнаяСинхронизация = Истина Тогда 
			
			СтруктураВозвратаПовторнаяСинхронизация = JIRA.СинхронизироватьОценочныйПроект(ОценочныйПроект, Истина);	
		КонецЕсли;	
	КонецЕсли;	
	//--OW Копачев А.С. 17.09.2019 ONEC-4860
	
	
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 05.06.2019 ONEC-4531

КонецФункции

Функция ПолучитьОценочныеПроектыФазы(Фаза)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовОценочныеПроекты.СсылкаНаОценочныйПроект КАК ОценочныйПроект
		|ИЗ
		|	Справочник.ЗадачиПроектов.ОценочныеПроекты КАК ЗадачиПроектовОценочныеПроекты
		|ГДЕ
		|	ЗадачиПроектовОценочныеПроекты.Ссылка = &Фаза";
	
	Запрос.УстановитьПараметр("Фаза", Фаза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОценочныйПроект");
		
КонецФункции

Функция ПолучитьОценочныйПроектПоКодуИнтеграцииJIRA(КодИнтеграцииJIRA) Экспорт 
	
	ОценочныйПроект = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиМаркетинговыхПроектов.Ссылка КАК Ссылка 
		|ИЗ
		|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
		|ГДЕ
		|	ЗадачиМаркетинговыхПроектов.ПометкаУдаления = ЛОЖЬ
	//++OW Копачев А.С. 31.03.2022 ONEC-7464
	//	|	И ЗадачиМаркетинговыхПроектов.ЗадачаJIRA_BA = &КодПроектаJIRA";
	//
	//Запрос.УстановитьПараметр("КодПроектаJIRA", КодПроектаJIRA);
		|	И ЗадачиМаркетинговыхПроектов.КодИнтеграции_JIRA = &КодИнтеграцииJIRA";
	
	Запрос.УстановитьПараметр("КодИнтеграцииJIRA", КодИнтеграцииJIRA);
	//--OW Копачев А.С. 31.03.2022 ONEC-7464	
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
	    Выборка.Следующий();
		
		ОценочныйПроект = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОценочныйПроект;
			
КонецФункции

Функция ПолучитьПроектJiraОценочногоПроекта(Клиент, КодЗадачиJIRA) Экспорт
	
	//++OW Копачев А.С. 31.08.2020 ONEC-5995 
	ПроектJIRA = "";
	
	Если Не ПустаяСтрока(КодЗадачиJIRA) Тогда 
		ПроектJIRAИзНомераЗадачи = JIRA.ОпределитьПроектПоНомеруЗадачи(КодЗадачиJIRA);
		Если ЗначениеЗаполнено(ПроектJIRAИзНомераЗадачи) Тогда 
			ПроектJIRA = ПроектJIRAИзНомераЗадачи;	
		КонецЕсли;		
	КонецЕсли;
	
	Если ПустаяСтрока(ПроектJIRA) Тогда 
		ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта) = Истина;
		Если ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта Тогда
			Если ЗначениеЗаполнено(Клиент) Тогда 
				ДанныеКлиента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Клиент,"БизнесРегион, СтатусКлиентаARM");				
				ПроектJIRAСсылка = ОпределитьПроектJIRAПоДаннымКлиента(ДанныеКлиента.БизнесРегион, ДанныеКлиента.СтатусКлиентаARM);				
				Если ЗначениеЗаполнено(ПроектJIRAСсылка) Тогда 
					ПроектJIRA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектJIRAСсылка, "Код");	
				КонецЕсли;	
			КонецЕсли;				    			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ПроектJIRA;
	//--OW Копачев А.С. 31.08.2020 ONEC-5995
КонецФункции

//+++ Брук Б 20.12.2019 ONEC-5186
Функция ПолучитьПроектJiraПоДаннымКлиента(Клиент) Экспорт
	
	ПроектJIRA = "";
	
	ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта) = Истина;
	Если ИспользоватьОпределениеПроектаJIRAПоДаннымКлиентаДляВыгрузкиОценочногоПроекта Тогда
		Если ЗначениеЗаполнено(Клиент) Тогда 
			ДанныеКлиента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Клиент,"БизнесРегион, СтатусКлиентаARM");				
			ПроектJIRAСсылка = ОпределитьПроектJIRAПоДаннымКлиента(ДанныеКлиента.БизнесРегион, ДанныеКлиента.СтатусКлиентаARM);				
			Если ЗначениеЗаполнено(ПроектJIRAСсылка) Тогда 
				ПроектJIRA = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектJIRAСсылка, "Код");	
			КонецЕсли;	
		КонецЕсли;				    			
	КонецЕсли;
	
	Возврат ПроектJIRA;
	
КонецФункции

Функция ПроверитьВозможностьУстановкиПометкиУдаленияОбъекта(Объект, ТекстРезультат = "") Экспорт
	//++OW Копачев А.С. 10.04.2020 ONEC-5539
	ЕстьОшибки = Ложь;
	
	ТекстСообщения = "";
	
	ЭтоНовый = Ложь;
	Ссылка = Неопределено;
	
	Ссылка = Объект.Ссылка;
	
	ТекстСообщенияШаблон = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Запрещено устнавливать пометку удаления у объекта. Подробности: ", "You can't set the delete mark. Details: ");
	
	ТипЗначения = ТипЗнч(Ссылка);
	Если ТипЗначения = Тип("СправочникСсылка.ЗадачиПроектов") Тогда 
		Если Не ПустаяСтрока(Объект.КодПроектаJIRA) Тогда 
			ТекстСообщения = ТекстСообщенияШаблон + OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Фаза <" + Строка(Объект) + "> уже выгружена в JIRA", "Phase <" + Строка(Объект) + "> has already been exported to JIRA");		
			ЕстьОшибки = Истина;	
		КонецЕсли;	
		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ЗадачиМаркетинговыхПроектов") Тогда
		Если Не ПустаяСтрока(Объект.ЗадачаJIRA_BA) Тогда 
			ТекстСообщения = ТекстСообщенияШаблон + OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Оценочный проект <" + Строка(Объект) + "> уже выгружена в JIRA", "Estimation project <" + Строка(Объект) + "> has already been exported to JIRA");
			ЕстьОшибки = Истина;	
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Партнеры") Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачиПроектов.Ссылка
			|ИЗ
			|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
			|ГДЕ
			|	ЗадачиПроектов.Партнер = &Партнер
			|	И ЗадачиПроектов.КодПроектаJIRA <> """"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачиМаркетинговыхПроектов.Ссылка
			|ИЗ
			|	Справочник.ЗадачиМаркетинговыхПроектов КАК ЗадачиМаркетинговыхПроектов
			|ГДЕ
			|	ЗадачиМаркетинговыхПроектов.Партнер = &Партнер
			|	И ЗадачиМаркетинговыхПроектов.ЗадачаJIRA_BA <> """"";
		
		Запрос.УстановитьПараметр("Партнер", Ссылка);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаФазы = РезультатЗапроса[0].Выбрать();
		ВыборкаОценки = РезультатЗапроса[1].Выбрать();
		
		ТекстВставка = "";
		Если ВыборкаФазы.Количество() > 0 И ВыборкаОценки.Количество() > 0 Тогда 
			ТекстВставка = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Фазы и оценочные проекты", "Phases and estimation projects");
		ИначеЕсли ВыборкаФазы.Количество() > 0 Тогда 	
			ТекстВставка = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Фазы", "Phases");
		ИначеЕсли ВыборкаОценки.Количество() > 0 Тогда 	
			ТекстВставка = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Оценочные проекты", "Estimation projects");
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ТекстВставка) Тогда 
			ТекстСообщения = ТекстСообщенияШаблон + OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока(ТекстВставка + " уже выгружены в JIRA по клиенту <" + Строка(Объект) + ">. Пожалуйста, установитье статус Inactive клиенту", ТекстВставка + "> has already been exported to JIRA for the client <" + Строка(Объект) + ">. Please, set the status Inactive for the client. ");
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;	
		
	ТекстРезультат = ТекстСообщения;
	
	Возврат ЕстьОшибки = Ложь; // проверка что нет отказа
	//--OW Копачев А.С. 10.04.2020 ONEC-5539	
КонецФункции
//--- Брук Б 20.12.2019 ONEC-5186

//-------------------------------------------------------- ВЫГРУЗКА ПРОЕКТОВ В JIRA --------------------------------------------------------


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ВЫГРУЗКА ПОСТИНГА В ФАЙЛ ДЛЯ МАРИНГО ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Процедура ВыгрузкаПостингаJIRAВФайлДляМаринго() Экспорт
	//+ Пилюгин В.Е. 13.03.2018
	ПутьКФайлу = "\\fin-db\from_Maringo";
	ИнстансJIRA = ПолучитьИнстансДляJiraSpb();
	ТабПериоды = Новый ТаблицаЗначений;	
	ТабПериоды.Колонки.Добавить("Начало");
	ТабПериоды.Колонки.Добавить("Конец");
	//***OW Start [БПВ]28.05.2018
	Если День(ТекущаяДата())<= OW_ФоновыеЗадания.ДеньЗакрытияОтИзмененийПостингаЗаПрошлыйМесяц() Тогда   		
		НачалоПериода = НачалоМесяца(НачалоМесяца(ТекущаяДата()) - OW.СуткиВСекундах());   //+Прошлый месяц
		ОкончаниеПериода = КонецМесяца(ТекущаяДата());
		
		Нс = ТабПериоды.Добавить();
		Нс.Начало = НачалоПериода;
		Нс.Конец = КонецМесяца(НачалоПериода);
		//****
		Нс = ТабПериоды.Добавить();
		Нс.Начало = НачалоМесяца(ОкончаниеПериода);
		Нс.Конец = ОкончаниеПериода;

	Иначе
		НачалоПериода = НачалоМесяца(ТекущаяДата()); //Без прошлого месяц
		ОкончаниеПериода = КонецМесяца(ТекущаяДата());
		//*****
		Нс = ТабПериоды.Добавить();
		Нс.Начало = НачалоПериода;
		Нс.Конец = ОкончаниеПериода;
	КонецЕсли;
	//***OW End [БПВ]28.05.2018 
	МинПров = 0;
	//***Перебираем периоды
	Для Каждого СтрПериод из  ТабПериоды Цикл
		ТЗ = JIRA.ПолучитьДанныеПостингаДляВыгрузкиВМаринго(СтрПериод.Начало, СтрПериод.Конец, ИнстансJIRA);
		ДатаДляФайла = ТекущаяДата()+МинПров;
		нТекстДок = Новый ТекстовыйДокумент;
		//добавим заголовок
		Заголовок = Формат(СтрПериод.Начало, "ДФ=yyyyMMdd") + ";" + Формат(СтрПериод.Конец, "ДФ=yyyyMMdd") + ";";
		нТекстДок.ДобавитьСтроку(Заголовок);
		Для Каждого ст из ТЗ Цикл
			СтрокаФайла = СтрЗаменить(?(ст.КодФазы=0, "", СокрЛП(ст.КодФазы)), Символы.НПП, "") + ";" +
									СокрЛП(ст.КодПользователя) + ";" +
									Формат(ст.Период,"ДФ=yyyyMMdd") + ";" + 
									Формат(ст.MD,"ЧДЦ=3; ЧРД=.") + ";" + 
									"SRC_DTLS=" + ст.Источник + ":"+ст.Таск + ";";   
			//***Удаляем лишние переносы строки
			нТекстДок.ДобавитьСтроку(СтрЗаменить(СтрокаФайла,символы.ПС,""));
		КонецЦикла;
		ПутьКФайлуПолный = ПутьКФайлу+"\"+"timings_" + Строка(ИнстансJIRA) + "_" + Формат(ДатаДляФайла,"ДФ=yyyyMMddHHmm")+".txt";
		нТекстДок.Записать(ПутьКФайлуПолный);
		МинПров = МинПров+60;
	КонецЦикла;
	//- Пилюгин В.Е. 13.03.2018
КонецПроцедуры


Функция ПолучитьДанныеПостингаДляВыгрузкиВМаринго(НачалоПериода, ОкончаниеПериода) Экспорт
	//+ Пилюгин В.Е. 14.05.2018
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КодФазы");
	ТЗ.Колонки.Добавить("КодПользователя");
	ТЗ.Колонки.Добавить("Период");
	ТЗ.Колонки.Добавить("Источник");
	ТЗ.Колонки.Добавить("MD");
	ТЗ.Колонки.Добавить("Таск");
	
	//posting from jira.spb
	//***OW Start [БПВ]31.05.2018
	//***Исправил CDT, исправил для оценок, не проставлялась оценка в проект
	//***OW End [БПВ]31.05.2018 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//++OW Копачев А.С. 23.07.2019 ONEC-4357
	// BA задачи мигрировали в ЖИРУ СПБ из ЖИРЫ ОВС, поэтому не 	
	"ВЫБРАТЬ
	|	ПостингИзJIRA_2.Период КАК Период,
	|	ВЫРАЗИТЬ(ПостингИзJIRA_2.MD * 8 КАК ЧИСЛО(15, 3)) КАК MD,
	|	ПостингИзJIRA_2.Проект.CodeSap КАК КодФазы,
	|	OW_ПользователиSAP.CodeSAP КАК КодПользователя,
	|	""JIRA.SPB"" КАК Источник,
	|	ПостингИзJIRA_2.Таск_ID КАК Таск
	|ИЗ
	|	РегистрСведений.ПостингИзJIRA_2 КАК ПостингИзJIRA_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.OW_ПользователиSAP КАК OW_ПользователиSAP
	|		ПО ПостингИзJIRA_2.ПользовательСсылка = OW_ПользователиSAP.Пользователь1С
	//++OW Копачев А.С. 29.05.2019  
	|		И ПостингИзJIRA_2.ПользовательСсылка <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		И НЕ OW_ПользователиSAP.НеИспользовать
	//--OW Копачев А.С. 29.05.2019
	|ГДЕ
	|	ПостингИзJIRA_2.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//++OW Копачев А.С. 29.05.2019  
	//|	И НЕ OW_ПользователиSAP.НеИспользовать	
	//--OW Копачев А.С. 29.05.2019
	|	И ПостингИзJIRA_2.Проект.CodeSap <> 0
	//++OW Копачев А.С. 23.07.2019 ONEC-4357
	////|	И ПостингИзJIRA_2.Таск_IDOWS = """"
	////++OW Копачев А.С. 03.06.2019 ONEC-4639 
	//|   И НЕ ПостингИзJIRA_2.Таск_ID ПОДОБНО ""BA-%""
	////--OW Копачев А.С. 03.06.2019 ONEC-4639
	//--OW Копачев А.С. 23.07.2019 ONEC-4357
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	OW_ПостингИзCRM.Период,
	|	ВЫРАЗИТЬ(OW_ПостингИзCRM.MD * 8 КАК ЧИСЛО(15, 3)),
	|	ВЫБОР
	|		КОГДА OW_ПостингИзCRM.Проект.CodeSap = 0
	|			ТОГДА ВЫБОР
	|					КОГДА OW_ПостингИзCRM.Таск.WorkTypeCRM = &CDT
	|						ТОГДА ЕСТЬNULL(ВложенныйЗапрос.МарингоID, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(OW_ПостингИзCRM.Проект.CodeSap, 0) = 0
	|				И OW_ПостингИзCRM.Таск.WorkTypeCRM <> &CDT
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(OW_ПостингИзCRM.ПроектМаринго_ID, 0) = """"
	|						ТОГДА 0
	|					ИНАЧЕ ЕСТЬNULL(OW_ПостингИзCRM.ПроектМаринго_ID, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(OW_ПостингИзCRM.Проект.CodeSap, 0)
	|	КОНЕЦ,
	|	OW_ПользователиSAP.CodeSAP,
	|	""CRM"",
	|	OW_ПостингИзCRM.Таск_ID
	|ИЗ
	|	РегистрСведений.OW_ПостингИзCRM КАК OW_ПостингИзCRM
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.OW_ПользователиSAP КАК OW_ПользователиSAP
	|		ПО OW_ПостингИзCRM.ПользовательСсылка = OW_ПользователиSAP.Пользователь1С
	//++OW Копачев А.С. 29.05.2019  
	|		И OW_ПостингИзCRM.ПользовательСсылка <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		И НЕ OW_ПользователиSAP.НеИспользовать
	//--OW Копачев А.С. 29.05.2019
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СоответствиеКлиентовИСаппортныхФаз.Партнер КАК Партнер,
	|			СоответствиеКлиентовИСаппортныхФаз.КонфигурацияЛицензий КАК КонфигурацияЛицензий,
	|			МАКСИМУМ(СоответствиеКлиентовИСаппортныхФаз.МарингоID) КАК МарингоID
	|		ИЗ
	|			РегистрСведений.СоответствиеКлиентовИСаппортныхФаз КАК СоответствиеКлиентовИСаппортныхФаз
	|		ГДЕ
	|			СоответствиеКлиентовИСаппортныхФаз.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И КОНЕЦПЕРИОДА(&НачалоПериода, ГОД)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СоответствиеКлиентовИСаппортныхФаз.Партнер,
	|			СоответствиеКлиентовИСаппортныхФаз.КонфигурацияЛицензий) КАК ВложенныйЗапрос
	|		ПО OW_ПостингИзCRM.Партнер = ВложенныйЗапрос.Партнер
	|			И OW_ПостингИзCRM.КонфигурацияЛицензий = ВложенныйЗапрос.КонфигурацияЛицензий
	|ГДЕ
	|	OW_ПостингИзCRM.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	//++OW Копачев А.С. 29.05.2019  
	//|	И НЕ OW_ПользователиSAP.НеИспользовать	
	//--OW Копачев А.С. 29.05.2019
	|	И ВЫБОР
	|			КОГДА OW_ПостингИзCRM.Проект.CodeSap = 0
	|				ТОГДА ВЫБОР
	|						КОГДА OW_ПостингИзCRM.Таск.WorkTypeCRM = &CDT
	|							ТОГДА ЕСТЬNULL(ВложенныйЗапрос.МарингоID, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ЕСТЬNULL(OW_ПостингИзCRM.Проект.CodeSap, 0) = 0
	|					И OW_ПостингИзCRM.Таск.WorkTypeCRM <> &CDT
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(OW_ПостингИзCRM.ПроектМаринго_ID, 0) = """"
	|							ТОГДА 0
	|						ИНАЧЕ ЕСТЬNULL(OW_ПостингИзCRM.ПроектМаринго_ID, 0)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(OW_ПостингИзCRM.Проект.CodeSap, 0)
	|		КОНЕЦ <> 0
	|	И OW_ПостингИзCRM.ИзJira <> ""jira""
	//++OW Копачев А.С. 20.05.2019  
	// не используется постинг ows из CRM
	|	И ВЫБОР 
	|		КОГДА &ИспользоватьОбработкуПостингаJIRAOwsЧерезJIRASpb = ИСТИНА И OW_ПостингИзCRM.Период >= &ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb И OW_ПостингИзCRM.ИзJira = ""ows-jira""
	|			ТОГДА ЛОЖЬ
	|        ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	//--OW Копачев А.С. 20.05.2019 	
	|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("CDT", Справочники.WorkTypeCRM.НайтиПоНаименованию("Internal CDT Support",истина));
	
	//++OW Копачев А.С. 07.05.2019 ONEC-4425
	Запрос.УстановитьПараметр("ИспользоватьОбработкуПостингаJIRAOwsЧерезJIRASpb", 	JIRA.ИспользоватьОбработкуПостингаJIRAOwsЧерезJIRASpb());
	Запрос.УстановитьПараметр("ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb", 		JIRA.ДатаНачалаЗагрузкиПостингаJIRAOwsЧерезJIRASpb());
	//--OW Копачев А.С. 07.05.2019 ONEC-4425

	РезультатЗапроса = Запрос.Выполнить();	
	ТЗ = РезультатЗапроса.Выгрузить();
	ТЗ.Свернуть("Период, КодФазы, КодПользователя, Источник, Таск", "MD");
	
	ТЗ = OW.СвернутьТаблицуЗначенийСКонкатенацией(ТЗ, "Период, КодФазы, КодПользователя, Источник", "MD", "Таск");
	
	Возврат ТЗ;	
КонецФункции
//--------------------------------------------------------  ВЫГРУЗКА ПОСТИНГА В ФАЙЛ ДЛЯ МАРИНГО --------------------------------------------------------


Функция ФазаИлиПроектЗакрытВJira(Объект) Экспорт
	//+ Пилюгин В.Е. 11.07.2018
	УстановитьПривилегированныйРежим(Истина);
	Закрыт = Ложь;
	Если ЗначениеЗаполнено(Объект.КодПроектаJIRA) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаJIRA.Ссылка,
		|	ЗадачаJIRA.Status,
		|	ЗадачаJIRA.Resolution
		|ИЗ
		|	Справочник.ЗадачаJIRA КАК ЗадачаJIRA
		|ГДЕ
		|	НЕ ЗадачаJIRA.ПометкаУдаления
		//++OW Копачев А.С. 31.03.2022 ONEC-7464
		//|	И ЗадачаJIRA.Код = &Код";
		//Запрос.УстановитьПараметр("Код", Объект.КодПроектаJIRA);
		|	И ЗадачаJIRA.КодИнтеграции_JIRA = &КодИнтеграции_JIRA";
		Запрос.УстановитьПараметр("КодИнтеграции_JIRA", Объект.КодИнтеграции_JIRA);
		//--OW Копачев А.С. 31.03.2022 ONEC-7464
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Status = Справочники.OW_СтатусыЗадачJIRA.НайтиПоНаименованию("Closed") И 
				Выборка.Resolution = Справочники.OW_ResolutionЗадачJIRA.НайтиПоНаименованию("Done") Тогда
					Закрыт = Истина;	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Возврат Закрыт;
	//- Пилюгин В.Е. 11.07.2018	
КонецФункции

        
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ВЫГРУЗКА КЛИЕНТА В JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Функция СинхронизироватьКлиента(КонфигурацияЛицензий, ИнстансJIRA) Экспорт
	//+ Пилюгин В.Е. 12.10.2018
	СтруктураВозврата = Новый Структура("Успех, СообщениеОбОшибке", Ложь, "");
	Если НЕ ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
		СтруктураВозврата.СообщениеОбОшибке = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Конфигурация лицензий для синхронизации не заполнена", "License configuration not filled");
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ИнстансJIRA) Тогда
		ИнстансJIRA = ПолучитьИнстансДляJiraOws();
	КонецЕсли; 
	
	Параметры = ПолучитьТекстЗапросаВыгрузкиКлиента(КонфигурацияЛицензий);
	Если ЗначениеЗаполнено(Параметры.ТекстОшибки) Тогда
		СтруктураВозврата.СообщениеОбОшибке = Параметры.ТекстОшибки;
	Иначе
		СтруктураВозврата = ВыгрузитьКлиента(ИнстансJIRA, СтруктураВозврата, Параметры.ТекстЗапроса)
	КонецЕсли; 
	
	Если СтруктураВозврата.Успех Тогда
		УстановитьСтатусВыгруженВJIRA(КонфигурацияЛицензий);
		
		//++OW Копачев А.С. 23.06.2020 ONEC-5678 
		// формирование SII задачи для CDT
		Если НеобходимоСформироватьЗадачуSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий) = Истина Тогда 
			СтруктураВозвратаЗадачиSII = СоздатьСлужебнуюЗадачуSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий);
			Если НЕ СтруктураВозвратаЗадачиSII.УспешноСоздана Тогда
				ТекстСообщенияЗадачиSII = СтруктураВозвратаЗадачиSII.ТекстВозврата;
				OW.ЗаписатьОшибку(КонфигурацияЛицензий, Справочники.OW_РазделыУчета.JIRA, Справочники.OW_ТипыОшибок.Ошибка,
							ТекстСообщенияЗадачиSII);
			Иначе
				ТекстСообщенияЗадачиSII = СтруктураВозвратаЗадачиSII.НомерЗадачи + Символы.ПС + "Details:" + Символы.ПС + СтруктураВозвратаЗадачиSII.ТекстВозврата;						
			КонецЕсли;
			СтруктураВозврата.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(СтруктураВозврата.СообщениеОбОшибке, ТекстСообщенияЗадачиSII, Символы.ПС + Символы.ПС); 
		КонецЕсли;
		//--OW Копачев А.С. 23.06.2020 ONEC-5678
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 12.10.2018
КонецФункции

Функция НеобходимоСформироватьЗадачуSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий) Экспорт
	//++OW Копачев А.С. 04.12.2020 ONEC-6108 
	Результат = Истина;
	
	ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонфигурацияЛицензий, "ВыгруженВJIRA, FaxNumber, Владелец, Статус, КодЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT, ТипСтатусаКлиентаЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT"); 
	ДанныеПартнера = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеКонфигурацииЛицензий.Владелец, "БизнесРегион, GRM, FaxNumber, ТипПартнера, СтатусКлиентаARM"); 
		
	// Проверка что уже выгружена была в Жиру
	Если ДанныеКонфигурацииЛицензий.ВыгруженВJIRA = Ложь Тогда 
		Результат = Ложь;		
	КонецЕсли;

	// Проверка на существующую задачу SII с данным типом статуса клиента
	НеобходимыйТипСтатуса = ТипСтатусаКлиента(ДанныеКонфигурацииЛицензий.Статус);
	Если НЕ ЗначениеЗаполнено(НеобходимыйТипСтатуса)  
		// что тип статуса при первоначальном создании SII не равен "I"
		ИЛИ (НЕ ЗначениеЗаполнено(ДанныеКонфигурацииЛицензий.ТипСтатусаКлиентаЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT) И НеобходимыйТипСтатуса = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.I"))
		// что тип статуса меняется
		ИЛИ (ЗначениеЗаполнено(НеобходимыйТипСтатуса) И НеобходимыйТипСтатуса = ДанныеКонфигурацииЛицензий.ТипСтатусаКлиентаЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT) Тогда 
		Результат = Ложь;		
	КонецЕсли;
	
	// Проверка на категорию Клиента
	Если ДанныеПартнера.ТипПартнера.КатегорияКлиентов <> ПредопределенноеЗначение("Справочник.КатегорииКлиентов.Client") Тогда 
		Результат = Ложь;	
	КонецЕсли;
		
	Возврат Результат;
	//--OW Копачев А.С. 04.12.2020 ONEC-6108	
КонецФункции

Функция	ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий)  
	
	//++OW Копачев А.С. 23.06.2020 ONEC-5678 
	УстановитьПривилегированныйРежим(Истина);
	ТекстОшибкиЗаполненияПараметров = "";
		
	СтруктураПараметров = Новый Структура;
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//НазваниеИнстансаJIRA = ПолучитьНазваниеИнстансаДляJiraSpb();
	//ИнстансJIRA = ПолучитьИнстансJIRA(НазваниеИнстансаJIRA);
	ИнстансJIRA = ПолучитьИнстансJIRAОбъектаПодготовленный(КонфигурацияЛицензий, Истина);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
		
	//логин и пароль для авторизации			
	Логин = ИнстансJIRA.Логин;
	Пароль = ИнстансJIRA.Пароль;
	
 	СтруктураПараметров.Вставить("Логин", 	Логин); 
	СтруктураПараметров.Вставить("Пароль", 	Пароль);
	
	//++OW Копачев А.С. 04.04.2022 ONEC-7464
	//СтруктураПараметров.Вставить("ИнстансJIRA", НазваниеИнстансаJIRA);
	СтруктураПараметров.Вставить("ИнстансJIRA", ИнстансJIRA);
	//--OW Копачев А.С. 04.04.2022 ONEC-7464
	
	СтруктураПараметров.Вставить("НомерЗадачи", "");

	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	СтруктураПараметров.Вставить("КодИнтеграции_JIRA", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	ПроектJIRA = "SII";
	СтруктураПараметров.Вставить("Проект", ПроектJIRA);
	
	СтруктураПараметров.Вставить("ТипЗадачи", "Implementation Task");//"Task");

   	//СтруктураПараметров.Вставить("ТипЗадачи", Строка(ПредопределенноеЗначение("Справочник.ТипыФаз.Implementation")));
  
	ДанныеКонфигурацииЛицензий = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(КонфигурацияЛицензий, "Наименование, ВыгруженВJIRA, FaxNumber, Владелец, КодЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT, Статус"); 
	ДанныеПартнера = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеКонфигурацииЛицензий.Владелец, "GRM, SSM, BRM, ОсновнойМенеджер, TAM, БизнесРегион, ТипПартнера, СтранаКлиента, ГородСтраныКлиента"); 
	
	ЭтоAsia = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.Asia");
	
	ЭтоEuMe = ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.Europe")
						ИЛИ ДанныеПартнера.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.MiddleEast"); 

		
	CDTClientCode = Справочники.КонфигурацииЛицензий.ПолучитьCDTClientCodeИнстансаКлиентаДляОбъекта(КонфигурацияЛицензий);
	
	СтруктураПараметров.Вставить("КодИнстансаКлиента", CDTClientCode);

	СтруктураПараметров.Вставить("Приоритет", Перечисления.ПриоритетыПроектов.ПолучитьПриоритетJIRA(Перечисления.ПриоритетыЗадач.Средний));
	
	Компонента = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.КомпонентаDeliveryToolSupport, ""); 
	СтруктураПараметров.Вставить("Компонента", Строка(Компонента));	
	
		
	// Репортер
	Репортер = "";
	РепортерСсылка = Справочники.Пользователи.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеПартнера.GRM) Тогда 
		РепортерСсылка = ДанныеПартнера.GRM; 	
	//ИначеЕсли ЭтоAsia Тогда 
	//	РепортерСсылка = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательReporterПоУмолчаниюДляSIIЗадачРегионовAsia); 
	//ИначеЕсли ЭтоEuMe Тогда 
	//	РепортерСсылка = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ПользовательReporterПоУмолчаниюДляSIIЗадачРегионовEUиME); 
	//Иначе
	//	РепортерСсылка = ДанныеПартнера.ОсновнойМенеджер;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РепортерСсылка) Тогда 
		СтруктураИсполнитель = ПолучитьПользователяJIRA(РепортерСсылка, "GRM");
		Если ЗначениеЗаполнено(СтруктураИсполнитель.ТекстОшибки) Тогда
			ТекстОшибкиЗаполненияПараметров = ТекстОшибкиЗаполненияПараметров + Символы.ПС + СтруктураИсполнитель.ТекстОшибки;
		Иначе
			Репортер = СтруктураИсполнитель.ПользовательJIRA;
		КонецЕсли; 
	КонецЕсли;	
	СтруктураПараметров.Вставить("Репортер", Репортер);	

	
	НаименованиеЗадачи = "Status of customer " + CDTClientCode + " has been changed to " + ДанныеКонфигурацииЛицензий.Статус;
	СтруктураПараметров.Вставить("НаименованиеЗадачи", НаименованиеЗадачи);	

	ТипСтатусаКлиента = ТипСтатусаКлиента(ДанныеКонфигурацииЛицензий.Статус);
	
	// ОписаниеЗадачи
	ОписаниеЗадачи = "";
	Если ТипСтатусаКлиента = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.P") Тогда 
		ОписаниеЗадачи = "Please create directory for " + ДанныеКонфигурацииЛицензий.Наименование + "/ " + CDTClientCode + " in SVN.";
	ИначеЕсли ТипСтатусаКлиента = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.A") Тогда 
		ОписаниеЗадачи = "Dear " + Строка (РепортерСсылка) + ",
							| make sure that the directory in the SVN is created for this instance;
							| for ensuring deliveries of projects, please request from the client and attach the pgp-key (s) to this task, 
							| and also indicate the e-mail of the client's responsible employee to which the FTP access details will be sent.";
	ИначеЕсли ТипСтатусаКлиента = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.I") Тогда 
		ОписаниеЗадачи = "Please lock accounts for customer *" + CDTClientCode + "* in CDT systems (SVN, Delivery Portal, FTP... )
						|Please move all customer-related *SVN* data to *_Obsolete* folder.";
	КонецЕсли;	
	
	СтранаКлиентаNameEN = ?(ЗначениеЗаполнено(ДанныеПартнера.СтранаКлиента), ДанныеПартнера.СтранаКлиента.NameEN, "");
	ГородСтраныКлиентаNameEN = ?(ЗначениеЗаполнено(ДанныеПартнера.ГородСтраныКлиента), ДанныеПартнера.ГородСтраныКлиента.НаименованиеНаАнгл, "");
                
	// добавляем таблицу с описанием
	ТекстТаблицы = "||NAME||TYPE||CODE||COUNTRY||CITY||STATUS||AM||SM||GRM||BRM||TAM||
					|| " + ДанныеКонфигурацииЛицензий.Наименование + "| " + ДанныеПартнера.ТипПартнера + "| " + CDTClientCode + "| " + СтранаКлиентаNameEN + "| " + ГородСтраныКлиентаNameEN  
					+ "| " + ДанныеКонфигурацииЛицензий.Статус + "| " + ДанныеПартнера.ОсновнойМенеджер + "| " + ДанныеПартнера.SSM + "| " + ДанныеПартнера.GRM  
					+ "| " + ДанныеПартнера.BRM + "| " + ДанныеПартнера.TAM + "|";
	
	ОписаниеЗадачи = ОписаниеЗадачи + Символы.ПС + Символы.ПС + ТекстТаблицы;
	
	СтруктураПараметров.Вставить("ОписаниеЗадачи", ОписаниеЗадачи);  		

		
	//СписокУчастников 
	СписокУчастников = Новый Массив;
	
	СписокWatchers = Новый Массив;
	//СписокWatchers.Добавить(ДанныеПартнера.ОсновнойМенеджер);
	//СписокWatchers.Добавить(ДанныеПартнера.SSM);
	СписокWatchers.Добавить(РепортерСсылка);  // GRM = Репортер
	//СписокWatchers.Добавить(ДанныеПартнера.BRM);
	СписокWatchers.Добавить(ДанныеПартнера.TAM);
	Для Каждого ПользовательWatcher Из СписокWatchers Цикл
		СтруктураПользователь = ПолучитьПользователяJIRA(ПользовательWatcher, "Watchers");
		Участник = СтруктураПользователь.ПользовательJIRA;
		Если ЗначениеЗаполнено(Участник) Тогда 
			СписокУчастников.Добавить(Участник);
		КонецЕсли;			
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивВотчеров", OW.СвернутьМассив(СписокУчастников)); 
				
	Если НЕ ПустаяСтрока(ТекстОшибкиЗаполненияПараметров) Тогда
		СтруктураПараметров.Вставить("ТекстОшибкиЗаполненияПараметров", ТекстОшибкиЗаполненияПараметров);	
	КонецЕсли; 

	Возврат СтруктураПараметров;	
	//--OW Копачев А.С. 23.06.2020 ONEC-5678
	
КонецФункции

Функция ТипСтатусаКлиента(Статус) Экспорт 
	
	ТипСтатуса = "";
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Negotiations") 
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Inactive") 
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Deleted") Тогда 
		
		ТипСтатуса = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.I");
		
	//ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Presale") Тогда 

	//	ТипСтатуса =  ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.P");
		
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Installation") 
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусКлиентаARM.Active") Тогда 

		ТипСтатуса = ПредопределенноеЗначение("Перечисление.ТипыСтатусовКлиентов.A");
	
	КонецЕсли;
	
	Возврат ТипСтатуса;
	
КонецФункции

Функция СоздатьСлужебнуюЗадачуSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий) Экспорт
	
	//++OW Копачев А.С. 04.12.2020 ONEC-6108 	
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	//СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, ТекстВозврата", Ложь, "", "");
	СтруктураВозврата = Новый Структура("УспешноСоздана, НомерЗадачи, КодИнтеграции_JIRA, ТекстВозврата", Ложь, "", "", "");
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
	
	Если НЕ ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
		СтруктураВозврата.ТекстВозврата = OW_ОбщегоНазначенияКлиентСервер.ЛокализованнаяСтрока("Конфигурация лицензий для синхронизации не заполнена", "Configuration of license not filled");
		Возврат СтруктураВозврата;
	КонецЕсли; 
			
	Параметры = ПолучитьПараметрыВыгрузкиСлужебнойЗадачиSIIДляРегистрацииКлиентаВСистемахCDT(КонфигурацияЛицензий);
	
	Если Параметры.Свойство("ТекстОшибкиЗаполненияПараметров") Тогда
		ТекстВозврата = Параметры.ТекстОшибкиЗаполненияПараметров;
		СтруктураВозврата.ТекстВозврата = ТекстВозврата;
	Иначе	
		СтруктураВозврата = СоздатьЗадачу(Параметры);	 
	КонецЕсли; 
		
	Если СтруктураВозврата.УспешноСоздана И ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		КонфигурацияЛицензийОбъект = КонфигурацияЛицензий.ПолучитьОбъект();	
		КонфигурацияЛицензийОбъект.ТипСтатусаКлиентаЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT = ТипСтатусаКлиента(ОбщегоНазначения.ПолучитьЗначениеРеквизита(КонфигурацияЛицензий, "Статус"));
		КонфигурацияЛицензийОбъект.КодЗадачиJIRAПоРегистрацииКлиентаВСистемахCDT = СтруктураВозврата.НомерЗадачи;
		КонфигурацияЛицензийОбъект.Записать();

		СтрокаСообщения = "Jira-task SII for Client created in JIRA, task #" + СтруктураВозврата.НомерЗадачи; 		
	ИначеЕсли СтруктураВозврата.УспешноСоздана И НЕ ЗначениеЗаполнено(СтруктураВозврата.НомерЗадачи) Тогда
		СтрокаСообщения = "Jira-task SII for Client created in JIRA but a Jira-task hasn't been created because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	Иначе
		СтрокаСообщения = "Jira-task SII for Client cannot be created in JIRA because of: " + Символы.ПС + СтруктураВозврата.ТекстВозврата;
	КонецЕсли;
	
	СтруктураВозврата.ТекстВозврата = СтрокаСообщения;
		
	Возврат СтруктураВозврата;	
	//--OW Копачев А.С. 04.12.2020 ONEC-6108

КонецФункции



Процедура УстановитьСтатусВыгруженВJIRA(КонфигурацияЛицензий)

	Если Не ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонфигурацияЛицензий.ВыгруженВJira Тогда
		Возврат;
	КонецЕсли;	
	
	КонфигурацияЛицензийОбъект = КонфигурацияЛицензий.ПолучитьОбъект();
	КонфигурацияЛицензийОбъект.ВыгруженВJira = Истина;

	Попытка 
		КонфигурацияЛицензийОбъект.Записать();
	Исключение
		OW_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВыгрузкиКлиента(Конфигурация)
	//+ Пилюгин В.Е. 12.10.2018
	ПараметрыВозврата = Новый Структура("ТекстОшибки, ТекстЗапроса", "", "");
	ЕстьОшибки = Ложь;
	//++OW Копачев А.С. 14.03.2023 ONEC-6185
	//Если НЕ ЗначениеЗаполнено(Конфигурация.КлиентДляВыгрузкиВCRM) Тогда
	//	ЕстьОшибки = Истина;
	//	ПараметрыВозврата.ТекстОшибки = ПараметрыВозврата.ТекстОшибки + Символы.ПС + "У конфигурации лицензий не заполнен Клиент для выгрузки в CRM";
	//КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Конфигурация.ID_Sync) Тогда
		ЕстьОшибки = Истина;
		ПараметрыВозврата.ТекстОшибки = ПараметрыВозврата.ТекстОшибки + Символы.ПС + "У конфигурации лицензий не заполнен ID для синхронизации JIRA";
	КонецЕсли;
	//--OW Копачев А.С. 14.03.2023 ONEC-6185
	
	ДанныеВладельца = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Конфигурация.Владелец, "НаименованиеДляJIRA, БизнесРегион, СтатусКлиентаARM, КатегорияКлиента, СтранаКлиента, FaxNumber, Куратор, GRM, ОсновнойМенеджер, SSM, TAM, LocalCoordinator, ProgramManager, RegionalHoD, RegionalHoS, SupportEscalationPerson, SupportEscalationContact, SolutionArchitect, Наименование");	

	Если НЕ ЗначениеЗаполнено(ДанныеВладельца.НаименованиеДляJIRA) Тогда
		ЕстьОшибки = Истина;
		ПараметрыВозврата.ТекстОшибки = ПараметрыВозврата.ТекстОшибки + Символы.ПС + "У партнера не заполнено ""Наименование для JIRA""";
	КонецЕсли; 	
	
	СтруктураПолей = Новый Структура();
	Инстанс = Конфигурация.Наименование;
	СтруктураПолей.Вставить("instance", НормализоватьСтроку(Инстанс));
	 
	Клиент = ДанныеВладельца.НаименованиеДляJIRA;
	СтруктураПолей.Вставить("client", НормализоватьСтроку(Клиент));
	
	//++OW Копачев А.С. 14.03.2023 ONEC-6185
	//ИнстансИд = НормализоватьЧисло(Конфигурация.КлиентДляВыгрузкиВCRM.Код);
	ИнстансИд = НормализоватьЧисло(Конфигурация.ID_Sync);
	//--OW Копачев А.С. 14.03.2023 ONEC-6185
	
	СтруктураПолей.Вставить("instanceId", ИнстансИд);
    
    //***OW @20221107043433  Start [БПВ] 
    ИспользоватьДополнительноВыгружатьВJIRARND = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьФлагДополнительноВыгружатьВJIRARNDНаКонфигурацияхЛицензий) = Истина;
    Если  ИспользоватьДополнительноВыгружатьВJIRARND Тогда
        СтруктураПолей.Вставить("loadToJiraRnd", Конфигурация.ДополнительноВыгружатьВJIRARND);    
    КонецЕсли;
    //***OW @20221107043437  End [БПВ] 
	region = "";
	БизнесРегион = ДанныеВладельца.БизнесРегион;
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
		region = БизнесРегион.Наименование;
	КонецЕсли; 
	СтруктураПолей.Вставить("region", region);
	
	language = "";
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
		Если БизнесРегион = Справочники.БизнесРегионы.RUS ИЛИ БизнесРегион = Справочники.БизнесРегионы.CIS Тогда
			language = "RU";
		Иначе
			language = "EN";
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПолей.Вставить("language", language);
	
	//++OW Копачев А.С. 07.03.2019 ONEC-4340	
	
	//++OW Копачев А.С. 22.05.2020 ONEC-5677 
	//СтатусКлиентаARM = ДанныеВладельца.СтатусКлиентаARM;
	//СтруктураПолей.Вставить("status", НормализоватьСтроку(СтатусКлиентаARM));
	Статус = Конфигурация.Статус;
	СтруктураПолей.Вставить("status", НормализоватьСтроку(Статус));
	//--OW Копачев А.С. 22.05.2020 ONEC-5677	
	
	КатегорияКлиента = ДанныеВладельца.КатегорияКлиента;
	СтруктураПолей.Вставить("category", НормализоватьСтроку(КатегорияКлиента));
	
	country = "";
	СтранаКлиента = ДанныеВладельца.СтранаКлиента;
	Если ЗначениеЗаполнено(СтранаКлиента) Тогда 
		country = НормализоватьСтроку(СтранаКлиента.NameEN);
	КонецЕсли;
	СтруктураПолей.Вставить("country", country);
	
	cdtClientCode = "";	
	ТКлиента =  СокрЛП(ДанныеВладельца.FaxNumber);
	ТЛицензии = СокрЛП(Конфигурация.FaxNumber);	
	Если НЕ ПустаяСтрока(ТЛицензии) Тогда
		cdtClientCode = ТЛицензии;
	Иначе
		cdtClientCode = ТКлиента;
	КонецЕсли;
	Если ЗначениеЗаполнено(cdtClientCode) Тогда 
		cdtClientCode = НормализоватьСтроку(cdtClientCode);
	КонецЕсли;
	СтруктураПолей.Вставить("cdtClientCode", cdtClientCode);
	//--OW Копачев А.С. 07.03.2019 ONEC-4340
		
	brmСтрокой = "";
	brm = ДанныеВладельца.Куратор;
	Если ЗначениеЗаполнено(brm) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(brm, "Main BRM");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			brmСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПолей.Вставить("brm", brmСтрокой);	
	
	grmСтрокой = "";
	grm = ДанныеВладельца.GRM;
	Если ЗначениеЗаполнено(grm) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(grm, "GRM");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			grmСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПолей.Вставить("grm", grmСтрокой);
	
	acmСтрокой = "";
	acm = ДанныеВладельца.ОсновнойМенеджер;
	Если ЗначениеЗаполнено(acm) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(acm, "AM");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			acmСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("acm", acmСтрокой);
	
	ssmСтрокой = "";
	ssm = ДанныеВладельца.SSM;
	Если ЗначениеЗаполнено(ssm) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(ssm, "SSM");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			ssmСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПолей.Вставить("ssm", ssmСтрокой);
	
	//++OW Копачев А.С. 07.03.2019 ONEC-4340
	tamСтрокой = "";
	tam = ДанныеВладельца.TAM;
	Если ЗначениеЗаполнено(tam) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(tam, "tam");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			tamСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("tam", tamСтрокой);	
	//--OW Копачев А.С. 07.03.2019 ONEC-4340
	
	//+++ Брук Б 08.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5014
	SolutionArchitectСтрокой = "";
	SolutionArchitect = ДанныеВладельца.SolutionArchitect;
	Если ЗначениеЗаполнено(SolutionArchitect) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(SolutionArchitect, "Solution Architect");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			SolutionArchitectСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли; 
	СтруктураПолей.Вставить("sa", SolutionArchitectСтрокой);
	//--- Брук Б 08.10.2019 https://ows-jira.spb.openwaygroup.com/browse/ONEC-5014
	
	//++OW Копачев А.С. 10.06.2022 ONEC-7570 
	Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьТаблицуSolutionArchitectsКлиента, Ложь) = Истина Тогда 

		МассивОтветственных = Новый Массив;
		Для Каждого ТекСтрокаАрхитекторыРешений Из Конфигурация.АрхитекторыРешений Цикл
			ТекПользователь = ТекСтрокаАрхитекторыРешений.Пользователь;
			ТекОбластьБизнеса = ТекСтрокаАрхитекторыРешений.ОбластьБизнеса;

			СтруктураПользователь = ПолучитьПользователяJIRA(ТекПользователь, "Solution Architects");
			Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
				ДанныеОтветственного = Новый Структура;
				ДанныеОтветственного.Вставить("userName", СтруктураПользователь.ПользовательJIRA); 
				ДанныеОтветственного.Вставить("field", Строка(ТекОбластьБизнеса));
				ДанныеОтветственного.Вставить("role", "Solution architect");
				
				МассивОтветственных.Добавить(ДанныеОтветственного);
			КонецЕсли;	
		КонецЦикла;
	
		СтруктураПолей.Вставить("actors", МассивОтветственных);		
	КонецЕсли;		
	//--OW Копачев А.С. 10.06.2022 ONEC-7570
	
	
	//++OW Копачев А.С. 26.03.2020 ONEC-5494
	LocalCoordinatorСтрокой = "";
	LocalCoordinator = ДанныеВладельца.LocalCoordinator;
	Если ЗначениеЗаполнено(LocalCoordinator) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(LocalCoordinator, "Local Coordinator");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			LocalCoordinatorСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("lc", LocalCoordinatorСтрокой);	
	//--OW Копачев А.С. 26.03.2020 ONEC-5494
	
	//++OW Копачев А.С. 14.09.2020 ONEC-6000 
	ProgramManagerСтрокой = "";
	ProgramManager = ДанныеВладельца.ProgramManager;
	Если ЗначениеЗаполнено(ProgramManager) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(ProgramManager, "PgM");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			ProgramManagerСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("pgm", ProgramManagerСтрокой);	
	//--OW Копачев А.С. 14.09.2020 ONEC-6000
	
	//++OW Копачев А.С. 24.11.2020 ONEC-6110 
	RegionalHoDСтрокой = "";
	RegionalHoD = ДанныеВладельца.RegionalHoD;
	Если ЗначениеЗаполнено(RegionalHoD) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(RegionalHoD, "Regional HoD");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			RegionalHoDСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("rhod", RegionalHoDСтрокой);	
	
	RegionalHoSСтрокой = "";
	RegionalHoS = ДанныеВладельца.RegionalHoS;
	Если ЗначениеЗаполнено(RegionalHoS) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(RegionalHoS, "Regional HoS");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			RegionalHoSСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	СтруктураПолей.Вставить("rhos", RegionalHoSСтрокой);	
	//--OW Копачев А.С. 24.11.2020 ONEC-6110
	
	//++OW Копачев А.С. 21.09.2021 ONEC-7027 
	SupportEscalationPersonСтрокой = "";
	SupportEscalationPerson = ДанныеВладельца.SupportEscalationPerson;
	Если ЗначениеЗаполнено(SupportEscalationPerson) Тогда
		СтруктураПользователь = ПолучитьПользователяJIRA(SupportEscalationPerson, "Support Escalation Contact");
		Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
			SupportEscalationPersonСтрокой = СтруктураПользователь.ПользовательJIRA;			
		КонецЕсли; 
	КонецЕсли;
	
	СтруктураПолей.Вставить("supportEscalationPerson", SupportEscalationPersonСтрокой);	
	
	SupportEscalationContactСтрокой = НормализоватьСтроку(ДанныеВладельца.SupportEscalationContact);
	СтруктураПолей.Вставить("supportEscalationContact", SupportEscalationContactСтрокой);	
	//--OW Копачев А.С. 21.09.2021 ONEC-7027
	
	//++OW Копачев А.С. 10.01.2022 ONEC-7288 
	НаименованиеПолноеСтрокой = ДанныеВладельца.Наименование;
	
	СтруктураПолей.Вставить("legalName", НаименованиеПолноеСтрокой);
	//--OW Копачев А.С. 10.01.2022 ONEC-7288
	
	//++OW Копачев А.С. 05.05.2022 ONEC-7562 
	SegmentСтрокой = "";
	
	ВидИнстансаJIRA = ПолучитьВидИнстансаJIRAОбъекта(Конфигурация);
	Если НЕ ЗначениеЗаполнено(ВидИнстансаJIRA) Тогда  
		ВидИнстансаJIRA = OW.ПолучитьОсновнойВидИнстансаJIRA();
	КонецЕсли;
	Если ВидИнстансаJIRA = ПредопределенноеЗначение("Перечисление.ВидыРегионовИнстансовJIRA.RUSCIS") Тогда 
		SegmentСтрокой = "inc";	
	Иначе
		SegmentСтрокой = "com";
	КонецЕсли;	
	СтруктураПолей.Вставить("segment", SegmentСтрокой);	
	//--OW Копачев А.С. 05.05.2022 ONEC-7562
	
	//++OW Копачев А.С. 27.06.2022 ONEC-7648 
	Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ВыгружатьПрограммныйПродуктИзКонфигурацииЛицензийВJira, Ложь) = Истина Тогда 			
		МаркетинговыйКодСтрокой = "";
		ПрограммныйПродукт = Конфигурация.ПрограммныйПродукт;
		Если ЗначениеЗаполнено(ПрограммныйПродукт) Тогда
			МаркетинговыйКодСтрокой = НормализоватьСтроку(ПрограммныйПродукт.МаркетинговыйКод);
		КонецЕсли;
		
		СтруктураПолей.Вставить("marketCode", МаркетинговыйКодСтрокой);	
	КонецЕсли;	
	//--OW Копачев А.С. 27.06.2022 ONEC-7648

	//++OW Копачев А.С. 22.12.2021 ONEC-7250  
	ПользователиСДоступомКЗадачамКлиента = Конфигурация.Владелец.ДополнительныеПользователиСДоступомКЗадачамКлиента.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	МассивПользователейСДоступомКЗадачамКлиентаСтрокой = Новый Массив;
	Для Каждого ТекПользователь Из ПользователиСДоступомКЗадачамКлиента Цикл
		ТекПользовательСтрокой = "";
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			СтруктураПользователь = ПолучитьПользователяJIRA(ТекПользователь, "Participant of client's jira tasks");
			Если ЗначениеЗаполнено(СтруктураПользователь.ПользовательJIRA) Тогда
				ТекПользовательСтрокой = СтруктураПользователь.ПользовательJIRA;		
				
				МассивПользователейСДоступомКЗадачамКлиентаСтрокой.Добавить(ТекПользовательСтрокой);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
	
	СтруктураПолей.Вставить("authorized", СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивПользователейСДоступомКЗадачамКлиентаСтрокой, ","));		
	//--OW Копачев А.С. 22.12.2021 ONEC-7250

	
	//+++ Брук Б 13.05.21 https://ows-jira.spb.openwaygroup.com/browse/ONEC-6620
	Если OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ВыгружатьSupportTeamИзКонфигурацииЛицензийВJira, Ложь) = Истина Тогда 
		
		SupportTeamСтрокой 	= "";
		SupportTeam 		= Конфигурация.SupportTeam;
		
        Если ЗначениеЗаполнено(SupportTeam) Тогда
            Если ЗначениеЗаполнено(SupportTeam.Родитель) Тогда
                SupportTeamСтрокой = НормализоватьСтроку(SupportTeam.Родитель.JiraID);
            Иначе
                SupportTeamСтрокой = НормализоватьСтроку(SupportTeam.JiraID);
            КонецЕсли;
        КонецЕсли; 
        
		СтруктураПолей.Вставить("supportType", SupportTeamСтрокой);	
		
		//++OW Копачев А.С. 21.09.2021 ONEC-7027
        //***OW @20221031094619  Start [БПВ] 
		SupportTeamPhoneСтрокой = "";
        Если ЗначениеЗаполнено(SupportTeam) Тогда
            Если ЗначениеЗаполнено(SupportTeam.Родитель) Тогда
                SupportTeamPhoneСтрокой = НормализоватьСтроку(SupportTeam.НомерТелефона);
            Иначе
                SupportTeamPhoneСтрокой = НормализоватьСтроку(SupportTeam.НомерТелефона);
            КонецЕсли;  			
		КонецЕсли;
		//***OW @20221031094625  End [БПВ] 
		СтруктураПолей.Вставить("supportTeamContact", SupportTeamPhoneСтрокой);	
		//--OW Копачев А.С. 21.09.2021 ONEC-7027
	КонецЕсли;
	//--- Брук Б 13.05.21
	
	Если НЕ ЕстьОшибки Тогда
		ПараметрыВозврата.ТекстЗапроса = СформироватьТекстЗапросаJIRA(СтруктураПолей);
	КонецЕсли; 
	                                                     	
	Возврат ПараметрыВозврата;
	//- Пилюгин В.Е. 12.10.2018
КонецФункции

Функция ВыгрузитьКлиента(ИнстансJIRA, СтруктураВозврата, ТекстЗапроса)
	//+ Пилюгин В.Е. 12.10.2018
	Соединение = СоздатьHTTPСоединениеJIRA(ИнстансJIRA);	
	
	//++OW Копачев А.С. 14.11.2019 ONEC-4979
	АдресРесурса = "/rest/entry/1.0/OneC2Jira/instance-light/";
	ИспользоватьСервисыБезАнонимногоДоступаКJIRA = OW_ОбщегоНазначения.ЗначениеКонстанты(Справочники.ЗначенияКонстант.ИспользоватьСервисыБезАнонимногоДоступаКJIRA) = Истина; 
	Если ЭтоИнстансJiraSpb(ИнстансJIRA) И ИспользоватьСервисыБезАнонимногоДоступаКJIRA Тогда
		Запрос = JIRA.СоздатьHTTPЗапросJIRA(АдресРесурса, ИнстансJIRA);
	Иначе	
	//--OW Копачев А.С. 14.11.2019 ONEC-4979
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "application/json");		
		Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	КонецЕсли;	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Ответ = Соединение.Записать(Запрос);
	Если Ответ.КодСостояния = 204 ИЛИ Ответ.КодСостояния = 201 ИЛИ Ответ.КодСостояния = 200 Тогда
		СтруктураВозврата.Успех = Истина;
		СтруктураВозврата.СообщениеОбОшибке = "License configuration has been synchronized successfully";
	Иначе
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.СообщениеОбОшибке = "License configuration hasn't been synchronized because of: " + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	//- Пилюгин В.Е. 12.10.2018
КонецФункции
//-------------------------------------------------------- ВЫГРУЗКА КЛИЕНТА В JIRA --------------------------------------------------------

Функция ПолучитьДоступныеПроектыJIRA(КонфигурацияЛицензий) Экспорт
	//+ Пилюгин В.Е. 03.05.2018
	МассивПроектовJIRA = Новый Массив;
	Если ЗначениеЗаполнено(КонфигурацияЛицензий) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеПартнеровПроектамВJIRA.ПроектJIRA
		|ИЗ
		|	Справочник.СоответствиеПартнеровПроектамВJIRA КАК СоответствиеПартнеровПроектамВJIRA
		|ГДЕ
		|	НЕ СоответствиеПартнеровПроектамВJIRA.ПометкаУдаления
		|	И СоответствиеПартнеровПроектамВJIRA.КонфигурацияЛицензий = &КонфигурацияЛицензий
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеПартнеровПроектамВJIRA.ПроектJIRA";
		Запрос.УстановитьПараметр("КонфигурацияЛицензий", КонфигурацияЛицензий);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		МассивПроектовJIRA = РезультатЗапроса.ВыгрузитьКолонку("ПроектJIRA");		
	КонецЕсли; 
	Возврат МассивПроектовJIRA
	//- Пилюгин В.Е. 03.05.2018
КонецФункции

//++++++++++++++++++++++++++++++++++++++++++ ПОДГОТОВКА К ВЫГРУЗКЕ ОБЪЕКТОВ В JIRA ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// СПРАВОЧНИКИ К ВЫГРУЗКЕ

Процедура ПередЗаписьюСправочникаДляВыгрузкиВJIRAПередЗаписью(Источник, Отказ) Экспорт	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(Источник, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(Объект, Отказ) 
		
	Ссылка = Объект.Ссылка;
	
	// ЗначенияКонтролируемыхРеквизитов
	ЗначенияКонтролируемыхРеквизитов = Новый Структура;
	СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(Ссылка);
	Для Каждого Элемент Из СписокКонтролируемыхРеквизитов Цикл
		ИмяРеквизита = Элемент.Ключ; 
		ЗначенияКонтролируемыхРеквизитов.Вставить(ИмяРеквизита, Ссылка[ИмяРеквизита]); 
	КонецЦикла;	
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	// ЗначенияКонтролируемыхТабличныхЧастей
	ЗначенияКонтролируемыхТабличныхЧастей = Новый Структура;
	СписокКонтролируемыхТабличныхЧастей = СписокКонтролируемыхТабличныхЧастейСправочникаДляВыгрузкиВJIRA(Ссылка);
	Для Каждого Элемент Из СписокКонтролируемыхТабличныхЧастей Цикл
		ИмяТабличнойЧасти = Элемент.Ключ; 
		ЗначенияКонтролируемыхТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Ссылка[ИмяТабличнойЧасти].Выгрузить()); 
	КонецЦикла;	
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияКонтролируемыхТабличныхЧастей", ЗначенияКонтролируемыхТабличныхЧастей);	

	// ЗначенияДополнительныхСвойств
	ЗначенияДополнительныхСвойств = Новый Структура;
	ЗначенияДополнительныхСвойств.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	ЗначенияДополнительныхСвойств.Вставить("Активный", ЭлементСправочникаДляВыгрузкиВJIRAАктивный(Ссылка));
	//++OW Копачев А.С. 23.09.2019 ONEC-4961 
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ЗначенияДополнительныхСвойств.Вставить("EmailДО", OW.ПолучитьМылоЮзера(Ссылка));
	КонецЕсли;
	//--OW Копачев А.С. 23.09.2019 ONEC-4961	
	ЗначенияДополнительныхСвойств.Вставить("ПринудительнаяВыгрузкаОбъекта", Объект.ДополнительныеСвойства.Свойство("JIRA_ПринудительнаяВыгрузкаОбъекта") И Объект.ДополнительныеСвойства.JIRA_ПринудительнаяВыгрузкаОбъекта = Истина);
	ЗначенияДополнительныхСвойств.Вставить("НеВыгружатьОбъект", Объект.ДополнительныеСвойства.Свойство("JIRA_НеВыгружатьОбъект") И Объект.ДополнительныеСвойства.JIRA_НеВыгружатьОбъект = Истина);

	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);	

	
КонецПроцедуры

Процедура ПриЗаписиСправочникаДляВыгрузкиВJIRAПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Ссылка = Источник.Ссылка;
	
	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	ЗначенияКонтролируемыхТабличныхЧастей = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияКонтролируемыхТабличныхЧастей", ЗначенияКонтролируемыхТабличныхЧастей);	

	ЗначенияДополнительныхСвойств = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);
	//++OW Копачев А.С. 19.10.2021 ONEC-7067 
	Если ТипЗнч(ЗначенияДополнительныхСвойств) = Тип("Структура") Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
			ЗначенияДополнительныхСвойств.Вставить("EmailПОСЛЕ", OW.ПолучитьМылоЮзера(Ссылка));
		КонецЕсли;	
	КонецЕсли;	
	//--OW Копачев А.С. 19.10.2021 ONEC-7067
	
	ОбъектСсылка = Источник.Ссылка;
	
	ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств);	
	ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств) 
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда 
		Возврат	
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияКонтролируемыхРеквизитов) <> Тип("Структура") 
		ИЛИ ТипЗнч(ЗначенияКонтролируемыхТабличныхЧастей) <> Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияДополнительныхСвойств) <> Тип("Структура") Тогда 
		Возврат
	КонецЕсли;	
	
	ТипЗначения = ТипЗнч(ОбъектСсылка); 
		
	ЭтоНовый = ?(ЗначенияДополнительныхСвойств.Свойство("ЭтоНовый"), ЗначенияДополнительныхСвойств.ЭтоНовый, Ложь); 
	АктивныйДО = ?(ЗначенияДополнительныхСвойств.Свойство("Активный"), ЗначенияДополнительныхСвойств.Активный, Ложь);
	АктивныйПОСЛЕ = ЭлементСправочникаДляВыгрузкиВJIRAАктивный(ОбъектСсылка);
	
	//++OW Копачев А.С. 19.10.2021 ONEC-7067 
	EmailДО = ?(ЗначенияДополнительныхСвойств.Свойство("EmailДО"), ЗначенияДополнительныхСвойств.EmailДО, Неопределено);
	EmailПОСЛЕ = ?(ЗначенияДополнительныхСвойств.Свойство("EmailПОСЛЕ"), ЗначенияДополнительныхСвойств.EmailПОСЛЕ, Неопределено);;
	//--OW Копачев А.С. 19.10.2021 ONEC-7067
	
	ПринудительнаяВыгрузкаОбъекта = ?(ЗначенияДополнительныхСвойств.Свойство("ПринудительнаяВыгрузкаОбъекта"), ЗначенияДополнительныхСвойств.ПринудительнаяВыгрузкаОбъекта, Ложь);
	НеВыгружатьОбъект = ?(ЗначенияДополнительныхСвойств.Свойство("НеВыгружатьОбъект"), ЗначенияДополнительныхСвойств.НеВыгружатьОбъект, Ложь);
	
	Если НеВыгружатьОбъект Тогда 
		Возврат
	КонецЕсли;	
	
	ТребуетсяВыгрузкаВJIRA = Ложь;
	Если ЭтоНовый Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	ИначеЕсли ПринудительнаяВыгрузкаОбъекта Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;		
	ИначеЕсли АктивныйДО <> АктивныйПОСЛЕ Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;	
	//++OW Копачев А.С. 23.09.2019 ONEC-4961 
	ИначеЕсли EmailДО <> EmailПОСЛЕ Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;	
	//--OW Копачев А.С. 23.09.2019 ONEC-4961	
	Иначе//Если АктивныйПОСЛЕ = Истина Тогда 		
		// проверка изменения реквизитов
		Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
			ИмяРеквизита = Элемент.Ключ; 
			
			НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
			СтароеЗначение= Элемент.Значение;
			Если НовоеЗначение <> СтароеЗначение Тогда 
				ТребуетсяВыгрузкаВJIRA = Истина;
				Прервать;
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	
	Если ТребуетсяВыгрузкаВJIRA Тогда 
		
		ОбъектМетаданных = ОбъектСсылка.Метаданные();	
		
		СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(ОбъектСсылка);
		
		// формирование данных для выгрузки
		ДанныеДляВыгрузки = Новый Структура;
		ДанныеДляВыгрузки.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(ОбъектСсылка));

		Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
			ИмяРеквизита = Элемент.Ключ;
			ИмяРеквизитаEn = Неопределено;
			НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
			СтароеЗначение= Элемент.Значение;

			// не передаем отдельно полем
			Если ИмяРеквизита = "Код" Тогда 
				Продолжить;				
			КонецЕсли;
									
			СписокКонтролируемыхРеквизитов.Свойство(ИмяРеквизита, ИмяРеквизитаEn);
			Если ЗначениеЗаполнено(ИмяРеквизитаEn) Тогда 
				
				// переопределение наименования для выгрузки
				Если ИмяРеквизитаEn = "name" И ТипЗначения = Тип("СправочникСсылка.Валюты") Тогда  
					//ЗначениеName = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ОбъектСсылка.Наименование, ОбъектСсылка.НаименованиеПолноеАнгл, " - ");
					ЗначениеName = НаименованиеВалютыДляВыгрузкиВJIRA(ОбъектСсылка);
					ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn, ЗначениеName);	
					
				ИначеЕсли ИмяРеквизитаEn = "region" И ТипЗначения = Тип("СправочникСсылка.Организации") Тогда  
	             	Продолжить; // не передаем это поле
					
				// общая схема	
				Иначе
					ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn, НовоеЗначение);
					
					// дополнительно выгрузим старое значение
					Если ИмяРеквизита = "ID_Sync" И НовоеЗначение <> СтароеЗначение И СтароеЗначение <> 0 Тогда 
						ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn + "Old", СтароеЗначение);	
					КонецЕсли;
				КонецЕсли;						
			КонецЕсли;
		КонецЦикла;		
		
		
		// Дополнительные поля	
        Если ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
            //***OW @20203305123338  Start [БПВ] //Отсылаем ФИО из физ. лица
            //Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо",ОбъектСсылка);
            //// переопределение наименования
            //Если ЗначениеЗаполнено(Пользователь) Тогда 
            //	ДанныеДляВыгрузки.Вставить("name", Строка(Пользователь));	
            //КонецЕсли;
			//++OW Копачев А.С. 10.08.2021 DOO-2903
			ДанныеДляВыгрузки.Вставить("idSync", ОбъектСсылка.ID_Sync);
			//--OW Копачев А.С. 10.08.2021 DOO-2903
            ДанныеДляВыгрузки.Вставить("name", ""+СокрЛП(ОбъектСсылка.Имя)+" "+СокрЛП(ОбъектСсылка.Фамилия));
            //***OW @20203305123350  End [БПВ]           
			// email
			ДанныеДляВыгрузки.Вставить("email", OW.ПолучитьМылоЮзера(ОбъектСсылка));
			
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			ПользовательФизлица = Справочники.ФизическиеЛица.ПользовательФизическогоЛица(ОбъектСсылка);
			Инстанс = ПолучитьИнстансJIRAОбъектаПодготовленный(ПользовательФизлица, Истина);
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
		Иначе
			
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			Инстанс              = ПолучитьИнстансДляJiraSpb();
			//--OW Копачев А.С. 05.04.2022 ONEC-7464

		КонецЕсли;	
	
		// передаем активность
		ДанныеДляВыгрузки.Вставить("active", АктивныйПОСЛЕ);		

		СтрокаJSON = СформироватьТекстЗапросаJIRA(ДанныеДляВыгрузки);
		
		// запись в регистр подговленных к отправке данных
		МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferences");
		
		////++OW Копачев А.С. 05.04.2022 ONEC-7464
		//Инстанс              = ПолучитьИнстансДляJiraSpb();
		////--OW Копачев А.С. 05.04.2022 ONEC-7464
		
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
				
		СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
		ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
		ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
		ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке"));
		ДанныеОбмена.Вставить("ИсходящийЗапрос", Истина);
		OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);
	КонецЕсли;			
			
КонецПроцедуры

Функция НаименованиеВалютыДляВыгрузкиВJIRA(ОбъектСсылка) Экспорт
	НаименованиеВалютыДляВыгрузки = СтроковыеФункцииКлиентСервер.ДобавитьСтроку(ОбъектСсылка.Наименование, ОбъектСсылка.НаименованиеПолноеАнгл, " - ");	
	Возврат НаименованиеВалютыДляВыгрузки;
КонецФункции

Процедура ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств)  Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда 
		Возврат	
	КонецЕсли;
	
	Если ТипЗнч(ЗначенияКонтролируемыхТабличныхЧастей) <> Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияДополнительныхСвойств) <> Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ОбъектСсылка); 	
	
	Если НЕ (ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") 
		ИЛИ ТипЗначения = Тип("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;	
			
	ЭтоНовый = ?(ЗначенияДополнительныхСвойств.Свойство("ЭтоНовый"), ЗначенияДополнительныхСвойств.ЭтоНовый, Ложь); 
	АктивныйДО = ?(ЗначенияДополнительныхСвойств.Свойство("Активный"), ЗначенияДополнительныхСвойств.Активный, Ложь);
	АктивныйПОСЛЕ = ЭлементСправочникаДляВыгрузкиВJIRAАктивный(ОбъектСсылка);
	
	//++OW Копачев А.С. 19.10.2021 ONEC-7067 
	EmailДО = ?(ЗначенияДополнительныхСвойств.Свойство("EmailДО"), ЗначенияДополнительныхСвойств.EmailДО, Неопределено);
	EmailПОСЛЕ = ?(ЗначенияДополнительныхСвойств.Свойство("EmailПОСЛЕ"), ЗначенияДополнительныхСвойств.EmailПОСЛЕ, Неопределено);;
	//--OW Копачев А.С. 19.10.2021 ONEC-7067
	
	ПринудительнаяВыгрузкаОбъекта = ?(ЗначенияДополнительныхСвойств.Свойство("ПринудительнаяВыгрузкаОбъекта"), ЗначенияДополнительныхСвойств.ПринудительнаяВыгрузкаОбъекта, Ложь);
	НеВыгружатьОбъект = ?(ЗначенияДополнительныхСвойств.Свойство("НеВыгружатьОбъект"), ЗначенияДополнительныхСвойств.НеВыгружатьОбъект, Ложь);
	
	Если НеВыгружатьОбъект Тогда 
		Возврат
	КонецЕсли;
	
	ТребуетсяВыгрузкаВJIRA = Ложь;
	Если ЭтоНовый Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	ИначеЕсли ПринудительнаяВыгрузкаОбъекта Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	//++OW Копачев А.С. 19.10.2021 ONEC-7067  
	ИначеЕсли EmailДО <> EmailПОСЛЕ Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;	
	//--OW Копачев А.С. 19.10.2021 ONEC-7067	
	Иначе//Если АктивныйПОСЛЕ = Истина Тогда 	
		// проверка изменения реквизитов ТЧ
		Для Каждого Элемент Из ЗначенияКонтролируемыхТабличныхЧастей Цикл 
			ИмяРеквизита = Элемент.Ключ; 
			
			ТабЧастьНовыеЗначения = ОбъектСсылка[ИмяРеквизита].Выгрузить();
			ТабЧастьСтарыеЗначения = Элемент.Значение;
					
			Если ЗначениеВСтрокуВнутр(ТабЧастьНовыеЗначения) <> ЗначениеВСтрокуВнутр(ТабЧастьСтарыеЗначения) Тогда 
				ТребуетсяВыгрузкаВJIRA = Истина;
				Прервать;
			КонецЕсли;				
		КонецЦикла;

		Если ТипЗначения = Тип("СправочникСсылка.Организации") Тогда 
			// проверка изменения реквизитов
			
			// проверяется регион отчетности, он передается списком значений
			Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
				ИмяРеквизита = Элемент.Ключ; 
				Если ИмяРеквизита = "РегионОтчетности" Тогда 				
					НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
					СтароеЗначение= Элемент.Значение;
					Если НовоеЗначение <> СтароеЗначение Тогда 
						ТребуетсяВыгрузкаВJIRA = Истина;
						Прервать;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;		
	
	Если ТребуетсяВыгрузкаВJIRA Тогда 
		
		ОбъектМетаданных = ОбъектСсылка.Метаданные();	
					
		// формирование данных для выгрузки
		ДанныеДляВыгрузки = Новый Структура;
		ДанныеДляВыгрузки.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(ОбъектСсылка));

		ИмяРеквизита = "ID_Sync";
		ИмяРеквизитаEn = "idSync";
		НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
		ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn, НовоеЗначение);
       
		МассивДанныхДляВыгрузки = Новый Массив;
        Если ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
            если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда
                ДанныеДляВыгрузки.Вставить("name", СокрЛП(ОбъектСсылка.Наименование));
                если ЗначениеЗаполнено(ОбъектСсылка.ФИО_В_РодитескомПадеже) тогда
                    ДанныеДляВыгрузки.Вставить("genitiveName", ОбъектСсылка.ФИО_В_РодитескомПадеже);   
                КонецЕсли;
            КонецЕсли;

			// массив организаций и линейных руководителей
			СотрудникиФизЛица = Справочники.Сотрудники.ПолучитьСотрудниковПоФизЛицу(ОбъектСсылка);
 			Для Каждого ТекСотрудник Из СотрудникиФизЛица Цикл
				Если Справочники.Сотрудники.СотрудникРаботает(ТекСотрудник) = Ложь Тогда 
					Продолжить;
                КонецЕсли;                 
				
				ДанныеДляВыгрузкиВМассиве = Новый Структура;
                Если не  ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСотрудник, "НеИспользоватьВJIRA")  и ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСотрудник, "ОрганизацияДляJIRA")) Тогда
                    Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСотрудник, "ОрганизацияДляJIRA");   
                Иначе
                    Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСотрудник, "OW_Организация");
                КонецЕсли;
				ДанныеДляВыгрузкиВМассиве.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(Организация));		
				Если ЗначениеЗаполнено(Организация) Тогда 
					ДанныеДляВыгрузкиВМассиве.Вставить("idSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ID_Sync"));		
				КонецЕсли;	
				РуководительСотрудник = РегистрыСведений.РуководителиПодразделений.ПолучитьРуководителяСотрудника(ТекСотрудник);
				Если ЗначениеЗаполнено(РуководительСотрудник) Тогда //И Справочники.Сотрудники.СотрудникРаботает(РуководительСотрудник) Тогда 
					ДанныеДляВыгрузкиВМассиве.Вставить("lineManagerIdSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(РуководительСотрудник.Физлицо, "ID_Sync"));
                КонецЕсли;
                если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда
                    если ЗначениеЗаполнено(ТекСотрудник.Офис) тогда
                        ДанныеДляВыгрузкиВМассиве.Вставить("officeIdSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСотрудник.Офис, "ID_Sync"));   
                    КонецЕсли;
                КонецЕсли;
				МассивДанныхДляВыгрузки.Добавить(ДанныеДляВыгрузкиВМассиве);
            КонецЦикла;	
            //Массив согласующих
            ПользовательДляСотрудника  =Справочники.Сотрудники.ПолучитьПользователей(ОбъектСсылка); 
            Если Не ПользовательДляСотрудника.пустая() Тогда
				//++OW Копачев А.С. 08.06.2022 ONEC-7464
				ВидИнстансаПользователя = JIRA.ПолучитьВидИнстансаJIRAОбъекта(ПользовательДляСотрудника);
				//--OW Копачев А.С. 08.06.2022 ONEC-7464
				СписокРуководителей = Справочники.команды.ПолучитьСогласующихПоСотруднику(ПользовательДляСотрудника,ТекущаяДата());
				Для Каждого ЭлементСпискаРуководителей из СписокРуководителей  Цикл
					ТекРуководитель = ЭлементСпискаРуководителей.Значение;
					Если НЕ ЗначениеЗаполнено(ТекРуководитель) Тогда 
						Продолжить;
					КонецЕсли;
					ТекРуководительФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекРуководитель, "ФизическоеЛицо");
					Если НЕ ЗначениеЗаполнено(ТекРуководительФизЛицо) Тогда 
						Продолжить;
					КонецЕсли;	
					
					//++OW Копачев А.С. 08.06.2022 ONEC-7464
					ВидИнстансаСогласующего = JIRA.ПолучитьВидИнстансаJIRAОбъекта(ТекРуководитель);
					Если ВидИнстансаСогласующего <> ВидИнстансаПользователя Тогда 
						Продолжить;	
					КонецЕсли;	
					//--OW Копачев А.С. 08.06.2022 ONEC-7464
					
					ДанныеДляВыгрузкиВМассиве = Новый Структура;
					ДанныеДляВыгрузкиВМассиве.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(ТекРуководительФизЛицо));		
					ДанныеДляВыгрузкиВМассиве.Вставить("idSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекРуководительФизЛицо, "ID_Sync"));	
					
					МассивДанныхДляВыгрузки.Добавить(ДанныеДляВыгрузкиВМассиве);
				КонецЦикла;
			КонецЕсли;         			
			 
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			ПользовательФизлица = Справочники.ФизическиеЛица.ПользовательФизическогоЛица(ОбъектСсылка);
			Инстанс = ПолучитьИнстансJIRAОбъектаПодготовленный(ПользовательФизлица, Истина);
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
			
        ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда 
            если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда                
                ДанныеДляВыгрузки.Вставить("applicationHeader",СтрЗаменить(ОбъектСсылка.ШапкаДляПечатныхФормJIRA,Символы.ПС,"\n"));     
             КонецЕсли;
	        // массив причин отсутствия сотрудников
			Для Каждого ТекСтрока Из ОбъектСсылка.ДоступныеПричиныОтсутствияСотрудников Цикл 			
				ТекПричина = ТекСтрока.ПричинаОтсутствия; 
				Если НЕ ЗначениеЗаполнено(ТекПричина) Тогда 
					Продолжить;
				КонецЕсли;	
				
				ДанныеДляВыгрузкиВМассиве = Новый Структура;

				ДанныеДляВыгрузкиВМассиве.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(ТекПричина));		
				ДанныеДляВыгрузкиВМассиве.Вставить("idSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекПричина, "ID_Sync"));
				
				МассивДанныхДляВыгрузки.Добавить(ДанныеДляВыгрузкиВМассиве);
			КонецЦикла;	
			
			// передается список регионов отчетности организации
			РегионыОтчетности = Новый Массив;
			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(РегионыОтчетности, ОбъектСсылка.РегионОтчетности, Истина);
			OW_ОбщегоНазначенияКлиентСервер.ДобавитьЗначениеВМассив(РегионыОтчетности, Справочники.БизнесРегионы.Global, Истина);
			Для Каждого ТекРегионОтчетности Из РегионыОтчетности Цикл 			
				Если НЕ ЗначениеЗаполнено(ТекРегионОтчетности) Тогда 
					Продолжить;
				КонецЕсли;	
				
				ДанныеДляВыгрузкиВМассиве = Новый Структура;

				ДанныеДляВыгрузкиВМассиве.Вставить("typeReference", ИмяСправочникаДляВыгрузкиВJIRA(ТекРегионОтчетности));		
				ДанныеДляВыгрузкиВМассиве.Вставить("idSync", ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекРегионОтчетности, "ID_Sync"));
				
				МассивДанныхДляВыгрузки.Добавить(ДанныеДляВыгрузкиВМассиве);
			КонецЦикла;
			
			//++OW Копачев А.С. 05.04.2022 ONEC-7464
			Инстанс              = ПолучитьИнстансДляJiraSpb();
			//--OW Копачев А.С. 05.04.2022 ONEC-7464
		КонецЕсли;		
		
		ДанныеДляВыгрузки.Вставить("connections", МассивДанныхДляВыгрузки);
		
		СтрокаJSON = СформироватьТекстЗапросаJIRA(ДанныеДляВыгрузки);
		
		// запись в регистр подговленных к отправке данных
		МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostReferencesConnections");
		
		//++OW Копачев А.С. 05.04.2022 ONEC-7463
		//Инстанс              = ПолучитьИнстансДляJiraSpb();
		//--OW Копачев А.С. 05.04.2022 ONEC-7463
		
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
				
		СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
		ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
		ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
		ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке"));
		ДанныеОбмена.Вставить("ИсходящийЗапрос", Истина);
		OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);	
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОПОЛНИТЕЛЬНАЯ ВЫГРУЗКА ОБЪЕКТОВ
		//++OW Копачев А.С. 20.10.2021 ONEC-7067 
		Если ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			// Если меняется Email также требуется передать подчиненных, так как в их connections указывается email согласующих, в том числе руководителей
			Если EmailДО <> EmailПОСЛЕ Тогда 
				ПользовательДляСотрудника  =Справочники.Сотрудники.ПолучитьПользователей(ОбъектСсылка); 
	            Если Не ПользовательДляСотрудника.пустая() Тогда
	                ВыгрузитьПодчиненныхСотрудниковПоСогласующемуВJIRA(ПользовательДляСотрудника, Отказ);
				КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	
		//--OW Копачев А.С. 20.10.2021 ONEC-7067
	КонецЕсли;			
			
КонецПроцедуры

Функция ИмяСправочникаДляВыгрузкиВJIRA(Ссылка)
	
	ИмяСправочника = "";
	
	ТипЗначения = ТипЗнч(Ссылка);
	Если ТипЗначения = Тип("СправочникСсылка.ПричиныОтсутствияСотрудниковJIRA") Тогда 
		ИмяСправочника = "AbsenceReasons";	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ЦентрыЗатратJIRA") Тогда 
		ИмяСправочника = "CostCenters";	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.КатегорииРасходовJIRA") Тогда 
		ИмяСправочника = "ExpenseCategories";	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СпособыОплатJIRA") Тогда 
		ИмяСправочника = "PaymentMeans";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Валюты") Тогда 
		ИмяСправочника = "Currencies";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.СтраныМира") Тогда 
		ИмяСправочника = "Countries";	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда 
		ИмяСправочника = "LegalEntities";	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ИмяСправочника = "Employees";	
    //***OW @20204905124950  Start [БПВ]
    ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Офисы") Тогда 
		ИмяСправочника = "Offices";
    ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПричиныПоездки") Тогда 
		ИмяСправочника = "TripReasons";
    //***OW @20205005125001  End [БПВ]       
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.БизнесРегионы") Тогда 
		ИмяСправочника = "Regions";				
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ОбластиКомпаний") Тогда 
		ИмяСправочника = "Areas";	
	//++OW Копачев А.С. 12.03.2020 ONEC-4874 
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.НаправленияДеятельностиДляКоманд") Тогда 
		ИмяСправочника = "Involvements";	
	//--OW Копачев А.С. 12.03.2020 ONEC-4874	
	Иначе	
		ОбъектМетаданных = Ссылка.Метаданные().Имя;	
	КонецЕсли;	
		
	Возврат ИмяСправочника;	
КонецФункции

// функция возвращает структуру из списока контролируемых имен реквизитов справочника, где
//	Ключ - имя реквизита объекта метаданных
//	Значение - имя свойства для записи в JSON при отправке
//
Функция СписокКонтролируемыхРеквизитовСправочникаДляВыгрузкиВJIRA(Ссылка)
	
	ОбъектМетаданных = Ссылка.Метаданные();	
	ТипЗначения = ТипЗнч(Ссылка);
		
	СписокКонтролируемыхРеквизитов = Новый Структура;
	
	// ID_Sync
	метаРевизиты = ОбъектМетаданных.Реквизиты; 
	Если метаРевизиты.Найти("ID_Sync") <> Неопределено Тогда 
		СписокКонтролируемыхРеквизитов.Вставить("ID_Sync", "idSync");	
	КонецЕсли;
	
	// НАИМЕНОВАНИЕ. Для JIRA данные нужные в англоязычном представлении
	Если ТипЗначения = Тип("СправочникСсылка.СтраныМира") Тогда  
	 	СписокКонтролируемыхРеквизитов.Вставить("NameEN", "name");	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ГородаСтранМира") Тогда
		СписокКонтролируемыхРеквизитов.Вставить("НаименованиеНаАнгл", "name");		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Валюты") Тогда  
	 	СписокКонтролируемыхРеквизитов.Вставить("НаименованиеПолноеАнгл", "name");    // наименование на англ
		СписокКонтролируемыхРеквизитов.Вставить("Наименование", "name");              // код символьный
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда
		СписокКонтролируемыхРеквизитов.Вставить("OW_NameForEn", "name");
		СписокКонтролируемыхРеквизитов.Вставить("РегионОтчетности", "region");
        Если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда
            СписокКонтролируемыхРеквизитов.Вставить("ШапкаДляПечатныхФормJIRA", "applicationHeader");
            СписокКонтролируемыхРеквизитов.Вставить("ПоказыватьВJIRA", "visible");
        КонецЕсли;   
	Иначе
		Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда 
			СписокКонтролируемыхРеквизитов.Вставить("Наименование", "name");
		КонецЕсли;	
    КонецЕсли;
    Если Константы.СинхронизацияДляRCISAttandance.Получить() Тогда
        Если ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда
            СписокКонтролируемыхРеквизитов.Вставить("ФИО_В_РодитескомПадеже", "genitiveName");
        КонецЕсли;
    КонецЕсли;
	// КОД
	Если ОбъектМетаданных.ДлинаКода > 0 Тогда 
		СписокКонтролируемыхРеквизитов.Вставить("Код", "code");	
	КонецЕсли;
	
	// ПриоритетВыбора
	метаРевизиты = ОбъектМетаданных.Реквизиты; 
	Если метаРевизиты.Найти("ПриоритетВыбораJIRA") <> Неопределено Тогда 
		СписокКонтролируемыхРеквизитов.Вставить("ПриоритетВыбораJIRA", "weight");	
	КонецЕсли;
	
	//// ПОМЕТКА УДАЛЕНИЯ
	//СписокКонтролируемыхРеквизитов.Вставить("ПометкаУдаления", "deletionMark");
	
	//// заполняем стандартными реквизитами
	//метаСтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
	//Для Каждого Реквизит ИЗ метаСтандартныеРеквизиты Цикл
	//	
	//	ИмяРеквизита = Реквизит.Имя;
	//	Если ИмяРеквизита = "ПометкаУдаления" Тогда 
	//		СписокКонтролируемыхРеквизитов.Вставить("ПометкаУдаления", "deletionMark");		
	//	КонецЕсли; 
	//		
	//КонецЦикла;	
	
	// Остальные реквизиты

	Возврат СписокКонтролируемыхРеквизитов;	
КонецФункции	

Функция СписокКонтролируемыхТабличныхЧастейСправочникаДляВыгрузкиВJIRA(Ссылка)
		
	ТипЗначения = ТипЗнч(Ссылка);
		
	СписокКонтролируемыхТабличныхЧастей = Новый Структура;
	
	Если ТипЗначения = Тип("СправочникСсылка.Организации") Тогда
		СписокКонтролируемыхТабличныхЧастей.Вставить("ДоступныеПричиныОтсутствияСотрудников");	
	КонецЕсли;
		
	Возврат СписокКонтролируемыхТабличныхЧастей;
	
КонецФункции	

Функция ЭлементСправочникаДляВыгрузкиВJIRAАктивный(Ссылка)
	
	Активный = Ссылка.ПометкаУдаления = Ложь;
	
	// Проверка для сотрудника, что работает (не уволен)
	Если Активный И ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		СотрудникиПоПользователя = Справочники.Сотрудники.ПолучитьСотрудниковПоФизЛицу(Ссылка);
		// проверим что есть хоть один сотрудник пользователя, который работает и не уволены
		СотудникРаботает = Ложь;
		Для Каждого ТекСотрудник Из СотрудникиПоПользователя Цикл	
			СотудникРаботает = Справочники.Сотрудники.СотрудникРаботает(ТекСотрудник);	
			Если СотудникРаботает Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Активный = Активный И СотудникРаботает;
	// организация	
	ИначеЕсли Активный И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда 	
		Активный = Активный И Ссылка.НеИспользоватьВJIRA = Ложь;
	// БизнесРегионы	
	ИначеЕсли Активный И ТипЗнч(Ссылка) = Тип("СправочникСсылка.БизнесРегионы") Тогда 	
		Активный = Активный И Ссылка.НеИспользоватьВJIRA = Ложь;	
	КонецЕсли;
		
	Возврат Активный;	
	
КонецФункции

Процедура ВыгрузитьПодчиненныхСотрудниковПоСогласующемуВJIRA(СогласующийПользователь, Отказ)
	
	Если Не СогласующийПользователь.Пустая() Тогда
		СписокПодчиненных = Справочники.Команды.ПолучитьСотрудниковПоСогласующему(СогласующийПользователь,ТекущаяДата());
		Для Каждого ЭлементСпискаПодчиненных из СписокПодчиненных  Цикл
			ТекПодчиненный = ЭлементСпискаПодчиненных.Значение;
			Если НЕ ЗначениеЗаполнено(ТекПодчиненный) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекПодчиненныйФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекПодчиненный, "ФизическоеЛицо");
			Если НЕ ЗначениеЗаполнено(ТекПодчиненныйФизЛицо) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника = Новый Структура;
			ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника = Новый Структура;
			
			ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника = Новый Структура;
			ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника.Вставить("ПринудительнаяВыгрузкаОбъекта", Истина);
			
			ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(ТекПодчиненныйФизЛицо, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);       			
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(ТекПодчиненныйФизЛицо, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	

// ДОКУМЕНТЫ К ВЫГРУЗКЕ

Процедура ПередЗаписьюДокументаДляВыгрузкиВJIRAПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(Объект, Отказ, РежимЗаписи, РежимПроведения) 
		
	Ссылка = Объект.Ссылка;
	
	// ЗначенияКонтролируемыхРеквизитов
	ЗначенияКонтролируемыхРеквизитов = Новый Структура;
	СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(Ссылка);
	Для Каждого Элемент Из СписокКонтролируемыхРеквизитов Цикл
		ИмяРеквизита = Элемент.Ключ; 
		ЗначенияКонтролируемыхРеквизитов.Вставить(ИмяРеквизита, Ссылка[ИмяРеквизита]); 
	КонецЦикла;		
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	// ЗначенияКонтролируемыхТабличныхЧастей
	ЗначенияКонтролируемыхТабличныхЧастей = Новый Структура;
	СписокКонтролируемыхТабличныхЧастей = СписокКонтролируемыхТабличныхЧастейДокументаДляВыгрузкиВJIRA(Ссылка);
	Для Каждого Элемент Из СписокКонтролируемыхТабличныхЧастей Цикл
		ИмяТабличнойЧасти = Элемент.Ключ; 
		ЗначенияКонтролируемыхТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Ссылка[ИмяТабличнойЧасти].Выгрузить()); 
	КонецЦикла;	
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияКонтролируемыхТабличныхЧастей", ЗначенияКонтролируемыхТабличныхЧастей);	

	//ЗначенияДополнительныхСвойств
	ЗначенияДополнительныхСвойств = Новый Структура;
	ЗначенияДополнительныхСвойств.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	ЗначенияДополнительныхСвойств.Вставить("КодПроектаJIRA", ДокументДляВыгрузкиКодПроектаJIRA(Ссылка));
	ЗначенияДополнительныхСвойств.Вставить("ПринудительнаяВыгрузкаОбъекта", Объект.ДополнительныеСвойства.Свойство("JIRA_ПринудительнаяВыгрузкаОбъекта") И Объект.ДополнительныеСвойства.JIRA_ПринудительнаяВыгрузкаОбъекта = Истина);
	ЗначенияДополнительныхСвойств.Вставить("НеВыгружатьОбъект", Объект.ДополнительныеСвойства.Свойство("JIRA_НеВыгружатьОбъект") И Объект.ДополнительныеСвойства.JIRA_НеВыгружатьОбъект = Истина);

	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);	

КонецПроцедуры

Процедура ПриЗаписиДокументаДляВыгрузкиВJIRAПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	ЗначенияКонтролируемыхТабличныхЧастей = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияКонтролируемыхТабличныхЧастей", ЗначенияКонтролируемыхТабличныхЧастей);	

	ЗначенияДополнительныхСвойств = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);
	
	ОбъектСсылка = Источник.Ссылка;
	
	ПриЗаписиОбработатьЗначенияКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ПриЗаписиОбработатьЗначенияКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияКонтролируемыхТабличныхЧастей, ЗначенияДополнительныхСвойств) 
		
	Если ТипЗнч(ЗначенияКонтролируемыхРеквизитов) <> Тип("Структура") 
		ИЛИ ТипЗнч(ЗначенияКонтролируемыхТабличныхЧастей) <> Тип("Структура")
		ИЛИ ТипЗнч(ЗначенияДополнительныхСвойств) <> Тип("Структура") Тогда 
		Возврат
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ОбъектСсылка);

	ЭтоНовый = ?(ЗначенияДополнительныхСвойств.Свойство("ЭтоНовый"), ЗначенияДополнительныхСвойств.ЭтоНовый, Ложь); 
	КодПроектаJIRAДо = ?(ЗначенияДополнительныхСвойств.Свойство("КодПроектаJIRA"), ЗначенияДополнительныхСвойств.КодПроектаJIRA, "");
	КодПроектаJIRAПОСЛЕ = ДокументДляВыгрузкиКодПроектаJIRA(ОбъектСсылка);
	
	//++OW Копачев А.С. 05.04.2022 ONEC-7463
	КодИнтеграцииJIRAПОСЛЕ = ДокументДляВыгрузкиКодИнтеграцииJIRA(ОбъектСсылка);
	//--OW Копачев А.С. 05.04.2022 ONEC-7463
	
	ПринудительнаяВыгрузкаОбъекта = ?(ЗначенияДополнительныхСвойств.Свойство("ПринудительнаяВыгрузкаОбъекта"), ЗначенияДополнительныхСвойств.ПринудительнаяВыгрузкаОбъекта, Ложь);	
	НеВыгружатьОбъект = ?(ЗначенияДополнительныхСвойств.Свойство("НеВыгружатьОбъект"), ЗначенияДополнительныхСвойств.НеВыгружатьОбъект, Ложь);
	
	Если НеВыгружатьОбъект Тогда 
		Возврат
	КонецЕсли;
	
	ТребуетсяВыгрузкаВJIRA = Ложь;	
	
	// Выгружаются только документы, связанные с JIRA (по коду проекта)
	Если ПринудительнаяВыгрузкаОбъекта Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	ИначеЕсли НЕ ПустаяСтрока(КодПроектаJIRAПОСЛЕ) И НЕ ПустаяСтрока(КодПроектаJIRAПОСЛЕ) 
		И КодПроектаJIRAДо <> КодПроектаJIRAПОСЛЕ  Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;	
	ИначеЕсли НЕ ПустаяСтрока(КодПроектаJIRAПОСЛЕ) Тогда 
		// проверка изменения реквизитов
		Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
			ИмяРеквизита = Элемент.Ключ; 
			
			НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
			СтароеЗначение= Элемент.Значение;
			Если НовоеЗначение <> СтароеЗначение Тогда 
				ТребуетсяВыгрузкаВJIRA = Истина;
				Прервать;
			КонецЕсли;				
		КонецЦикла;	
	КонецЕсли;	
	
	Если ТребуетсяВыгрузкаВJIRA Тогда 
		
		ОбъектМетаданных = ОбъектСсылка.Метаданные();	
				
		СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(ОбъектСсылка);
		
		// формирование данных для выгрузки
		ДанныеДляВыгрузки = Новый Структура;
		ДанныеДляВыгрузки.Вставить("typeDocument", ИмяДокументаДляВыгрузкиВJIRA(ОбъектСсылка));
		ДанныеДляВыгрузки.Вставить("issueKey", 		КодПроектаJIRAПОСЛЕ);
		
		Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
			ИмяРеквизита = Элемент.Ключ;
			ИмяРеквизитаEn = Неопределено;
			НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
			СтароеЗначение= Элемент.Значение;
									
			СписокКонтролируемыхРеквизитов.Свойство(ИмяРеквизита, ИмяРеквизитаEn);
			Если ЗначениеЗаполнено(ИмяРеквизитаEn) Тогда 
				ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn, НовоеЗначение);
				
				// дополнительно выгрузим старое значение
				Если ИмяРеквизита = "ID_Sync" И НовоеЗначение <> СтароеЗначение И СтароеЗначение <> 0 Тогда 
					ДанныеДляВыгрузки.Вставить(ИмяРеквизитаEn + "Old", СтароеЗначение);	
				КонецЕсли;					
			КонецЕсли;
		КонецЦикла;	
		
		СтрокаJSON = СформироватьТекстЗапросаJIRA(ДанныеДляВыгрузки);
		
		// запись в регистр подговленных к отправке данных
		МетодЗапроса  		 = ПредопределенноеЗначение("Справочник.МетодыЗапросовСВнешнимиСистемами.JIRA_httpPostDocuments");
		//++OW Копачев А.С. 05.04.2022 ONEC-7464
		//Инстанс              = ПолучитьИнстансДляJiraSpb();
		ДанныеЗадачи 	= ПолучитьИнфуПоТаску(КодИнтеграцииJIRAПОСЛЕ);
		Инстанс 		= ДанныеЗадачи.ИнстансJIRA;
		Если НЕ ЗначениеЗаполнено(Инстанс) Тогда 
			Инстанс = ПолучитьИнстансДляJiraSpb();	
		КонецЕсли;	
		//--OW Копачев А.С. 05.04.2022 ONEC-7464
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
				
		СтруктураОтбораОбмена = OW_ОбменДанными.СтруктураИзмеренийОбмена(ТекущаяДата(), МетодЗапроса, ИдентификаторЗапроса, Инстанс);
		ДанныеОбмена = OW_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбораОбмена);
		ДанныеОбмена.Вставить("ТекстСообщения", СтрокаJSON);
		ДанныеОбмена.Вставить("РезультатВыполненияОбмена",ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ПодготовленоКОтправке"));
		ДанныеОбмена.Вставить("ИсходящийЗапрос", Истина);
		OW_ОбменДанными.ЗаписатьДанныеВЖурналОбмена(ДанныеОбмена);

	КонецЕсли;			
			
КонецПроцедуры

// функция возвращает структуру из списока контролируемых имен реквизитов документа, где
//	Ключ - имя реквизита объекта метаданных
//	Значение - имя свойства для записи в JSON при отправке
//
Функция СписокКонтролируемыхРеквизитовДокументаДляВыгрузкиВJIRA(Ссылка)
	
	ОбъектМетаданных = Ссылка.Метаданные();	
	ТипЗначения = ТипЗнч(Ссылка);
		
	СписокКонтролируемыхРеквизитов = Новый Структура;
	
	// ID_Sync
	метаРевизиты = ОбъектМетаданных.Реквизиты; 
	Если метаРевизиты.Найти("ID_Sync") <> Неопределено Тогда 
		СписокКонтролируемыхРеквизитов.Вставить("ID_Sync", "idSync");	
	КонецЕсли;
				
	// Остальные реквизиты

	Возврат СписокКонтролируемыхРеквизитов;	
КонецФункции	

Функция СписокКонтролируемыхТабличныхЧастейДокументаДляВыгрузкиВJIRA(Ссылка)
		
	СписокКонтролируемыхТабличныхЧастей = Новый Структура;

	Возврат СписокКонтролируемыхТабличныхЧастей;	
КонецФункции	

Функция ИмяДокументаДляВыгрузкиВJIRA(Ссылка)
	
	ИмяСправочника = "";
	
	ТипЗначения = ТипЗнч(Ссылка);
	Если ТипЗначения = Тип("ДокументСсылка.PR_Командировка") Тогда 
		ИмяСправочника = "BusinessTrip";	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Больничнный") Тогда 
		ИмяСправочника = "SickLeave";	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Отпуск") Тогда 
		ИмяСправочника = "Vacation";	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ОтсутствиеJIRA") Тогда 
		ИмяСправочника = "Absence";        
	//++OW Копачев А.С. 23.10.2020 ONEC-6014
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ОтгулJIRA") Тогда 
	//--OW Копачев А.С. 23.10.2020 ONEC-6014
		ИмяСправочника = "DayOff";	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.КомандировочныеИДругиеРасходыСотрудниковJIRA") Тогда 
		ИмяСправочника = "TravelAndOtherEmployeesExpenses";	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ЗапросНаВозмещениеJIRA") Тогда 
		ИмяСправочника = "ReimburseRequest";			
	Иначе	
		ОбъектМетаданных = Ссылка.Метаданные().Имя;	
	КонецЕсли;	
		
	Возврат ИмяСправочника;	
КонецФункции

Функция ДокументДляВыгрузкиКодПроектаJIRA(Ссылка)
	
	КодПроектаJIRA = "";
	
	ОбъектМетаданных = Ссылка.Метаданные();	
		
	// КодПроектаJIRA
	метаРевизиты = ОбъектМетаданных.Реквизиты; 
	Если метаРевизиты.Найти("КодПроектаJIRA") <> Неопределено Тогда 
		КодПроектаJIRA = Ссылка.КодПроектаJIRA;	
	КонецЕсли;
	
	Возврат КодПроектаJIRA;	
	
КонецФункции

Функция ДокументДляВыгрузкиКодИнтеграцииJIRA(Ссылка)
	//++OW Копачев А.С. 05.04.2022 ONEC-7464
	КодИнтеграцииJIRA = "";
	
	ОбъектМетаданных = Ссылка.Метаданные();	
		
	// КодПроектаJIRA
	метаРевизиты = ОбъектМетаданных.Реквизиты; 
	Если метаРевизиты.Найти("КодИнтеграции_JIRA") <> Неопределено Тогда 
		КодИнтеграцииJIRA = Ссылка.КодИнтеграции_JIRA;	
	КонецЕсли;
	
	Возврат КодИнтеграцииJIRA;	
	//--OW Копачев А.С. 05.04.2022 ONEC-7464
КонецФункции


// ЗАВИСИМЫЕ СПРАВОЧНИКИ (ДЛЯ ВЫГРУЗКИ ОСНОВНЫХ ОБЪЕКТОВ)

Процедура ПередЗаписьюЗависимогоСправочникаДляВыгрузкиВJIRAПередЗаписью(Источник, Отказ) Экспорт	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовЗависимогоСправочникаДляВыгрузкиВJIRA(Источник, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ПередЗаписьюУстановитьЗначенияКонтролируемыхРеквизитовЗависимогоСправочникаДляВыгрузкиВJIRA(Объект, Отказ) 
		
	Ссылка = Объект.Ссылка;
	
	ЗначенияКонтролируемыхРеквизитов = Новый Структура;
	
	СписокКонтролируемыхРеквизитов = СписокКонтролируемыхРеквизитовЗависимогоСправочникаДляВыгрузкиВJIRA(Ссылка);
	Для Каждого Элемент Из СписокКонтролируемыхРеквизитов Цикл
		ИмяРеквизита = Элемент.Ключ; 
		ЗначенияКонтролируемыхРеквизитов.Вставить(ИмяРеквизита, Ссылка[ИмяРеквизита]); 
	КонецЦикла;	
	
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	ЗначенияДополнительныхСвойств = Новый Структура;
	ЗначенияДополнительныхСвойств.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	ЗначенияДополнительныхСвойств.Вставить("Активный", ЭлементСправочникаДляВыгрузкиВJIRAАктивный(Ссылка));
	//++OW Копачев А.С. 20.10.2021 ONEC-7067 
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда 
		ЗначенияДополнительныхСвойств.Вставить("EmailДО", OW.ПолучитьМылоЮзера(Ссылка));
	КонецЕсли;
	//--OW Копачев А.С. 20.10.2021 ONEC-7067
	
	Объект.ДополнительныеСвойства.Вставить("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);	
	
КонецПроцедуры

Процедура ПриЗаписиЗависимогоСправочникаДляВыгрузкиВJIRAПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Источник.Ссылка;

	ЗначенияКонтролируемыхРеквизитов = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияКонтролируемыхРеквизитов", ЗначенияКонтролируемыхРеквизитов);	
	
	ЗначенияДополнительныхСвойств = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ЗначенияДополнительныхСвойств", ЗначенияДополнительныхСвойств);
	//++OW Копачев А.С. 19.10.2021 ONEC-7067 
	Если ТипЗнч(ЗначенияДополнительныхСвойств) = Тип("Структура") Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда 
			ЗначенияДополнительныхСвойств.Вставить("EmailПОСЛЕ", OW.ПолучитьМылоЮзера(Ссылка));
		КонецЕсли;	
	КонецЕсли;	
	//--OW Копачев А.С. 19.10.2021 ONEC-7067
	ОбъектСсылка = Источник.Ссылка;
	
	ВыгрузитьДанныеЗависимогоСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияДополнительныхСвойств);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеЗависимогоСправочникаВJIRA(ОбъектСсылка, Отказ, ЗначенияКонтролируемыхРеквизитов, ЗначенияДополнительныхСвойств) 
			
	Если ТипЗнч(ЗначенияКонтролируемыхРеквизитов) <> Тип("Структура") ИЛИ ТипЗнч(ЗначенияДополнительныхСвойств) <> Тип("Структура") Тогда 
		Возврат
	КонецЕсли;	
	
	ТипЗначения = ТипЗнч(ОбъектСсылка); 
		
	ЭтоНовый = ?(ЗначенияДополнительныхСвойств.Свойство("ЭтоНовый"), ЗначенияДополнительныхСвойств.ЭтоНовый, Ложь); 
	АктивныйДО = ?(ЗначенияДополнительныхСвойств.Свойство("Активный"), ЗначенияДополнительныхСвойств.Активный, Ложь);
	АктивныйПОСЛЕ = ЭлементСправочникаДляВыгрузкиВJIRAАктивный(ОбъектСсылка);
	
	//++OW Копачев А.С. 19.10.2021 ONEC-7067 
	EmailДО = ?(ЗначенияДополнительныхСвойств.Свойство("EmailДО"), ЗначенияДополнительныхСвойств.EmailДО, Неопределено);
	EmailПОСЛЕ = ?(ЗначенияДополнительныхСвойств.Свойство("EmailПОСЛЕ"), ЗначенияДополнительныхСвойств.EmailПОСЛЕ, Неопределено);;
	//--OW Копачев А.С. 19.10.2021 ONEC-7067

	ТребуетсяВыгрузкаВJIRA = Ложь;
	Если ЭтоНовый Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	ИначеЕсли АктивныйДО <> АктивныйПОСЛЕ Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	//++OW Копачев А.С. 20.10.2021 ONEC-7067 
	ИначеЕсли EmailДО <> EmailПОСЛЕ Тогда 
		ТребуетсяВыгрузкаВJIRA = Истина;
	//--OW Копачев А.С. 20.10.2021 ONEC-7067	
	Иначе		
		// проверка изменения реквизитов
		Для Каждого Элемент Из ЗначенияКонтролируемыхРеквизитов Цикл 
			ИмяРеквизита = Элемент.Ключ; 
			
			НовоеЗначение = ОбъектСсылка[ИмяРеквизита];
			СтароеЗначение= Элемент.Значение;
			Если НовоеЗначение <> СтароеЗначение Тогда 
				ТребуетсяВыгрузкаВJIRA = Истина;
				Прервать;
			КонецЕсли;				
		КонецЦикла;
	КонецЕсли;
	
	
	Если ТребуетсяВыгрузкаВJIRA Тогда 
		
		ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника = Новый Структура;
		ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника = Новый Структура;
		
		ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника = Новый Структура;
		ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника.Вставить("ПринудительнаяВыгрузкаОбъекта", Истина);
		
		// выгружаем объекты по зависимым элементам	
		Если ТипЗначения = Тип("СправочникСсылка.Сотрудники") Тогда		
			// 1. выгружаем по новому физ лицу данные с сотрудниками
			СсылкаДляВыгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Физлицо");
			//++OW Копачев А.С. 22.06.2021 DOO-2903 
			ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);       
			//--OW Копачев А.С. 22.06.2021 DOO-2903			
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);			
						
			// 2.  выгружаем по старому физ лицу данные с сотрудниками
			Если СсылкаДляВыгрузки <> ЗначенияКонтролируемыхРеквизитов.Физлицо Тогда 
				СсылкаДляВыгрузки = ЗначенияКонтролируемыхРеквизитов.Физлицо;			
				//++OW Копачев А.С. 22.06.2021 DOO-2903 
				ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);       
				//--OW Копачев А.С. 22.06.2021 DOO-2903
				ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);
			КонецЕсли;	
		//++OW Копачев А.С. 20.10.2021 ONEC-7067 	
		ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда		
			
			// 1. выгружаем по новому физ лицу данные с сотрудниками
			СсылкаДляВыгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ФизическоеЛицо");
			
			ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);       		
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);			
						
			// 2.  выгружаем по старому физ лицу данные с сотрудниками
			Если СсылкаДляВыгрузки <> ЗначенияКонтролируемыхРеквизитов.ФизическоеЛицо Тогда 
				СсылкаДляВыгрузки = ЗначенияКонтролируемыхРеквизитов.ФизическоеЛицо;			 
				
				ВыгрузитьЗначенияКонтролируемыхРеквизитовСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);       
				ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);
			КонецЕсли;	
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОПОЛНИТЕЛЬНАЯ ВЫГРУЗКА ОБЪЕКТОВ
		Если ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			// Если меняется Email также требуется передать подчиненных, так как в их connections указывается email согласующих, в том числе руководителей
			Если EmailДО <> EmailПОСЛЕ Тогда 
				ВыгрузитьПодчиненныхСотрудниковПоСогласующемуВJIRA(ОбъектСсылка, Отказ);
			КонецЕсли;	 
		КонецЕсли;	
		//--OW Копачев А.С. 20.10.2021 ONEC-7067
	КонецЕсли;			
			
КонецПроцедуры

Функция СписокКонтролируемыхРеквизитовЗависимогоСправочникаДляВыгрузкиВJIRA(Ссылка)
	
	ОбъектМетаданных = Ссылка.Метаданные();	
	ТипЗначения = ТипЗнч(Ссылка);
		
	СписокКонтролируемыхРеквизитов = Новый Структура;

	Если ТипЗначения = Тип("СправочникСсылка.Сотрудники") Тогда  
	 	СписокКонтролируемыхРеквизитов.Вставить("Физлицо", 				"Физлицо");
		СписокКонтролируемыхРеквизитов.Вставить("OW_Организация", 		"OW_Организация");
		СписокКонтролируемыхРеквизитов.Вставить("OW_ДатаПриема", 		"OW_ДатаПриема");
		СписокКонтролируемыхРеквизитов.Вставить("OW_ДатаУвольнения", 	"OW_ДатаУвольнения");
        Если Константы.СинхронизацияДляRCISAttandance.Получить() тогда
            СписокКонтролируемыхРеквизитов.Вставить("Офис", 	            "Офис");
            СписокКонтролируемыхРеквизитов.Вставить("НеИспользоватьВJIRA", 	"НеИспользоватьВJIRA");
            СписокКонтролируемыхРеквизитов.Вставить("ОрганизацияДляJIRA", 	"ОрганизацияДляJIRA");
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда	
		СписокКонтролируемыхРеквизитов.Вставить("ФизическоеЛицо", 		"ФизическоеЛицо");	
	КонецЕсли;	
	
	Возврат СписокКонтролируемыхРеквизитов;	
КонецФункции	

// ЗАВИСИМЫЕ РЕГИСТРЫ СВЕДЕНИЙ (ДЛЯ ВЫГРУЗКИ ОСНОВНЫХ ОБЪЕКТОВ)

Процедура ПередЗаписьюЗависимогоРегистраСведенийДляВыгрузкиВJIRAПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
 	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтборРегистра = Новый Структура;
	Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
		Если ЭлементОтбора.Использование = Ложь ИЛИ ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда 
			Продолжить;	
		КонецЕсли;
		
		ОтборРегистра.Вставить(ЭлементОтбора.Имя, ЭлементОтбора.Значение);	
	КонецЦикла;	
	
	ДанныеДоИзменения = ПолучитьДанныеРегистраСведенийПоОтборам(Источник, ОтборРегистра);			
	Источник.ДополнительныеСвойства.Вставить("JIRA_ДанныеДоИзменения", ДанныеДоИзменения);	

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьДанныеРегистраСведенийПоОтборам(Источник, СтруктураОтбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений." + Источник.Метаданные().Имя + " КАК РегистрСведений
		|ГДЕ
		|	Истина
		|//ОтборРегистраСведений#";
	
	ТекстОтбора = "";
	Для Каждого ЭлементОтбора Из СтруктураОтбора Цикл
		ПараметрОтбора = ЭлементОтбора.Ключ; 
		ТекстОтбораСтрока = ПараметрОтбора + " =&" + ПараметрОтбора;
		ТекстОтбора = ТекстОтбора +  Символы.ПС + "	И " + ТекстОтбораСтрока;  	 
		
		Запрос.УстановитьПараметр(ПараметрОтбора, ЭлементОтбора.Значение); 
	КонецЦикла;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборРегистраСведений#", ТекстОтбора);
		
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ПриЗаписиЗависимогоРегистраСведенийДляВыгрузкиВJIRAПриЗаписи(Источник, Отказ, Замещение) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДоИзменения = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("JIRA_ДанныеДоИзменения", ДанныеДоИзменения);	

	ВыгрузитьДанныеЗависимогоСправочникаВJIRAПоРегиструСведений(Источник, Отказ, ДанныеДоИзменения);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьДанныеЗависимогоСправочникаВJIRAПоРегиструСведений(Источник, Отказ, ДанныеДоИзменения) 

	ТипЗначения = ТипЗнч(Источник);
	
	Если ТипЗнч(ДанныеДоИзменения) <> Тип("ТаблицаЗначений") Тогда 
		Возврат
	КонецЕсли;
	
	ДанныеПослеИзменения = Источник.Выгрузить();
	ДанныеПоРасхождениям = ДанныеПослеИзменения.СкопироватьКолонки(); 
	
	ДанныеПослеИзменения.Колонки.Добавить("Служебная_НайденаСтрока", Новый ОписаниеТипов("Булево"));
	
	СписокКонтролируемыхПоказателей = СписокКонтролируемыхПоказателейРегистраСведенийДляВыгрузкиВJIRA(Источник);
	
	// находим то, что было изменено или удалено
	Для Каждого ТекСтрока Из ДанныеДоИзменения Цикл 
		ОтборСтрок = Новый Структура();
		Для Каждого ИмяПоказателя Из СписокКонтролируемыхПоказателей Цикл
			ОтборСтрок.Вставить(ИмяПоказателя, ТекСтрока[ИмяПоказателя]);	
		КонецЦикла;
		
		НайденныеСтроки = ДанныеПослеИзменения.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			// отметим что строки такой больше нет или изменена
			НовСтрока = ДанныеПоРасхождениям.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		Иначе
			// отметим что строки такие были найдены
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТекСтрока.Служебная_НайденаСтрока = Истина;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	// находим то, что было добавлено
	ОтборСтрок = Новый Структура("Служебная_НайденаСтрока", Ложь);
	НайденныеСтроки = ДанныеПослеИзменения.НайтиСтроки(ОтборСтрок);
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		НовСтрока = ДанныеПоРасхождениям.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;	
	
	
	// выгружаем данные
	ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника = Новый Структура;
	ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника = Новый Структура;
		
	ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника = Новый Структура;
	ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника.Вставить("ПринудительнаяВыгрузкаОбъекта", Истина);

	Если ТипЗначения = Тип("РегистрСведенийНаборЗаписей.РуководителиПодразделений") Тогда 
		
		Для Каждого ТекСтрока Из ДанныеПоРасхождениям Цикл
			// выгружаем данные по физ лицу
			СсылкаДляВыгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Сотрудник, "Физлицо");	
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);	
		КонецЦикла;	
		
	ИначеЕсли ТипЗначения = Тип("РегистрСведенийНаборЗаписей.OW_КадроваяИстория") Тогда 
		
		Для Каждого ТекСтрока Из ДанныеПоРасхождениям Цикл
			// выгружаем данные по физ лицу
			СсылкаДляВыгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Сотрудник, "Физлицо");
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);	
		КонецЦикла;
		
	//++OW Копачев А.С. 20.10.2021 ONEC-7067 	
	ИначеЕсли ТипЗначения = Тип("РегистрСведенийНаборЗаписей.ДополнительныеСогласующиеСотрудника") Тогда 
		
		Для Каждого ТекСтрока Из ДанныеПоРасхождениям Цикл
			// выгружаем данные по физ лицу
			СсылкаДляВыгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Сотрудник, "ФизическоеЛицо");
			ВыгрузитьПрисоединенныеДанныеСправочникаВJIRA(СсылкаДляВыгрузки, Отказ, ЗначенияКонтролируемыхРеквизитовДляВыгрузкиДанныхСправочника, ЗначенияКонтролируемыхТабличныхЧастейДляВыгрузкиДанныхСправочника, ЗначенияДополнительныхСвойствДляВыгрузкиДанныхСправочника);	
		КонецЦикла;
	//--OW Копачев А.С. 20.10.2021 ONEC-7067	
	КонецЕсли;		
			
КонецПроцедуры

Функция СписокКонтролируемыхПоказателейРегистраСведенийДляВыгрузкиВJIRA(Источник)
	
	СписокКонтролируемыхПоказателей = Новый Массив;
	
	ТипЗначения = ТипЗнч(Источник);
	
	Если ТипЗначения = Тип("РегистрСведенийНаборЗаписей.РуководителиПодразделений") Тогда 
		СписокКонтролируемыхПоказателей.Добавить("Сотрудник");
		СписокКонтролируемыхПоказателей.Добавить("Руководитель");
	ИначеЕсли ТипЗначения = Тип("РегистрСведенийНаборЗаписей.OW_КадроваяИстория") Тогда 
		СписокКонтролируемыхПоказателей.Добавить("Сотрудник");
		СписокКонтролируемыхПоказателей.Добавить("Организация");
		СписокКонтролируемыхПоказателей.Добавить("ФизЛицо");
	    СписокКонтролируемыхПоказателей.Добавить("ДатаПриема");
		СписокКонтролируемыхПоказателей.Добавить("ДатаУвольнения");
	//++OW Копачев А.С. 20.10.2021 ONEC-7067 	
	ИначеЕсли ТипЗначения = Тип("РегистрСведенийНаборЗаписей.ДополнительныеСогласующиеСотрудника") Тогда 
		СписокКонтролируемыхПоказателей.Добавить("Сотрудник");
		СписокКонтролируемыхПоказателей.Добавить("Утверждающий");
		СписокКонтролируемыхПоказателей.Добавить("Использовать");
	//--OW Копачев А.С. 20.10.2021 ONEC-7067	
	КонецЕсли;
	
	Возврат СписокКонтролируемыхПоказателей;	
КонецФункции	

//-------------------------------------------------------- ПОДГОТОВКА К ВЫГРУЗКЕ ОБЪЕКТОВ В JIRA --------------------------------------------------------

